syntax = "proto3";

package seigr.notification;

import "common.proto"; // Import for PriorityLevel

// ===========================
// ENUMS
// ===========================

/**
 * Enum defining notification types with categorized intent.
 */
enum NotificationType {
    NOTIFICATION_UNDEFINED = 0;   // Undefined notification type.
    NOTIFICATION_INFO = 1;        // Informational message.
    NOTIFICATION_ALERT = 2;       // Immediate attention required.
    NOTIFICATION_WARNING = 3;     // Warning about potential issues.
    NOTIFICATION_ERROR = 4;       // Notification of an error.
    NOTIFICATION_SUCCESS = 5;     // Success confirmation.
    NOTIFICATION_SYSTEM_UPDATE = 6; // System or protocol update.
}

/**
 * Enum specifying the delivery method for notifications.
 */
enum DeliveryMethod {
    DELIVERY_UNDEFINED = 0;       // Undefined delivery method.
    DELIVERY_EMAIL = 1;           // Email notification.
    DELIVERY_SMS = 2;             // SMS text message.
    DELIVERY_PUSH = 3;            // Mobile push notification.
    DELIVERY_SYSTEM_ALERT = 4;    // In-system alert for logged-in users.
    DELIVERY_WEBHOOK = 5;         // Webhook for external services.
    DELIVERY_BATCH = 6;           // Bulk or aggregated notifications.
    DELIVERY_ADAPTIVE = 7;        // Adaptive delivery based on behavior.
}

// ===========================
// CORE NOTIFICATION MESSAGES
// ===========================

/**
 * Represents an individual notification with interactive properties.
 */
message Notification {
    string notification_id = 1;                 // Unique identifier for the notification.
    NotificationType type = 2;                  // Notification type.
    string message = 3;                         // Main notification content.
    string recipient_id = 4;                    // Recipient ID (user or system).
    DeliveryMethod delivery_method = 5;         // Delivery method used.
    string timestamp = 6;                       // Notification creation timestamp.
    map<string, string> metadata = 7;           // Additional contextual metadata.
    bool requires_acknowledgment = 8;           // If acknowledgment is required.
    int32 retry_count = 9;                      // Retry attempts for delivery.
    PriorityLevel priority = 10;                // Notification priority level.
    string action_url = 11;                     // Actionable URL.
    int32 time_to_live_seconds = 12;            // TTL in seconds before expiration.
    repeated string actionable_items = 13;      // Available actions for the recipient.
    bool aggregateable = 14;                    // If true, can be batched.
    map<string, string> response_options = 15;  // Response options (e.g., ACCEPT, DECLINE).
    string callback_url = 16;                   // URL for post-action callbacks.
    map<string, string> adaptive_parameters = 17; // Adaptive delivery parameters.
}

/**
 * Tracks the status and delivery acknowledgment of a notification.
 */
message NotificationStatus {
    string notification_id = 1;                 // ID of the notification.
    string recipient_id = 2;                    // ID of the recipient.
    bool delivered = 3;                         // Delivery success status.
    bool acknowledged = 4;                      // Acknowledgment status.
    string delivered_at = 5;                    // Delivery timestamp.
    string acknowledged_at = 6;                 // Acknowledgment timestamp.
    string failure_reason = 7;                  // Failure reason, if any.
    map<string, string> delivery_metadata = 8;  // Metadata about delivery.
    int32 retry_attempts = 9;                   // Retry attempt count.
    string last_retry_timestamp = 10;           // Last retry attempt timestamp.
    string escalation_policy = 11;             // Escalation rules.
    string adaptive_response_action = 12;       // Adaptive response action taken.
}

/**
 * Represents a history of notifications for a specific user/system.
 */
message NotificationHistory {
    string recipient_id = 1;                    // Recipient ID.
    repeated Notification notifications = 2;    // List of notifications sent.
    string start_date = 3;                      // Start date for history filtering.
    string end_date = 4;                        // End date for history filtering.
    map<string, int32> notification_counts = 5; // Count of notifications by type.
    int32 total_notifications = 6;              // Total notifications in history.
    map<string, int32> priority_counts = 7;     // Notification count by priority.
    map<string, int32> response_time_average = 8; // Avg response time per type.
    map<string, string> engagement_metrics = 9; // User engagement metrics.
}

/**
 * Defines notification preferences for a user or system.
 */
message NotificationPreferences {
    string recipient_id = 1;                    // Recipient ID.
    repeated DeliveryMethod preferred_methods = 2; // Preferred delivery methods.
    bool mute_notifications = 3;                // If true, notifications are muted.
    map<string, bool> type_preferences = 4;     // Preferences by notification type.
    int32 max_daily_notifications = 5;          // Daily notification cap.
    string do_not_disturb_start = 6;            // Start of DND period.
    string do_not_disturb_end = 7;              // End of DND period.
    PriorityLevel minimum_priority = 8;         // Minimum priority for delivery.
    string custom_notification_interval = 9;    // Custom interval (e.g., every 10 min).
    map<string, bool> escalation_conditions = 10; // Conditions for escalation.
    bool dynamic_thresholds = 11;               // Adaptive thresholds enabled.
    int32 max_urgent_notifications = 12;        // Daily cap for high-priority notifications.
}

/**
 * Supports bulk notifications and batch deliveries.
 */
message NotificationBatch {
    string batch_id = 1;                        // Unique batch identifier.
    repeated Notification notifications = 2;    // List of notifications in the batch.
    string timestamp = 3;                       // Batch creation timestamp.
    DeliveryMethod delivery_method = 4;         // Delivery method for the batch.
    map<string, string> metadata = 5;           // Batch-specific metadata.
    bool requires_batch_acknowledgment = 6;     // Acknowledgment required for the batch.
    int32 total_retries = 7;                    // Retry count for the batch.
    bool adaptive_batch_scaling = 8;            // Adaptive scaling for batch delivery.
}

/**
 * Defines scheduling rules for notifications.
 */
message NotificationSchedule {
    string notification_id = 1;                 // ID of the scheduled notification.
    string scheduled_time = 2;                  // Scheduled delivery timestamp.
    bool recurring = 3;                         // Flag for recurring notifications.
    string recurrence_pattern = 4;              // Pattern (e.g., daily, weekly).
    string end_date = 5;                        // End date for recurrence.
    map<string, string> scheduling_metadata = 6; // Additional scheduling metadata.
    int32 grace_period_minutes = 7;             // Grace period before expiration.
    bool auto_retry_on_failure = 8;             // Retry on delivery failure.
    int32 adaptive_grace_period = 9;            // Dynamic grace period adjustment.
    bool user_activity_dependent = 10;          // Only deliver during active hours.
}

// Message for individual notification events
message NotificationEvent {
    string event_id = 1;               // Unique identifier for the notification event
    string severity = 2;               // Severity level (e.g., "INFO", "WARN", "CRITICAL")
    string message = 3;                // Notification message content
    repeated string target_users = 4;  // IDs of users or groups to notify
    string timestamp = 5;              // Timestamp of the notification event
    map<string, string> metadata = 6;  // Additional metadata (e.g., category, tags)
}

// Message for user-specific notification settings
message UserNotificationSettings {
    string user_id = 1;                // ID of the user for these settings
    repeated string preferred_channels = 2; // Channels (e.g., "EMAIL", "SMS", "WEB")
    string notification_frequency = 3; // Frequency of notifications (e.g., "INSTANT", "DAILY")
    map<string, string> preferences_metadata = 4; // Additional settings metadata
}

// Message for critical system alerts
message SystemAlert {
    string alert_id = 1;               // Unique identifier for the alert
    string alert_type = 2;             // Type of system alert (e.g., "FAILURE", "DEGRADATION")
    string severity = 3;               // Severity of the alert (e.g., "HIGH", "CRITICAL")
    string message = 4;                // Alert message content
    string triggered_at = 5;           // Timestamp when the alert was triggered
    map<string, string> alert_metadata = 6; // Metadata for additional alert context
}