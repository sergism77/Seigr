// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: temporal.proto
// Protobuf C++ Version: 5.29.2

#ifndef temporal_2eproto_2epb_2eh
#define temporal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "lineage.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_temporal_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_temporal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_temporal_2eproto;
namespace seigr {
namespace temporal {
class LineageTracking;
struct LineageTrackingDefaultTypeInternal;
extern LineageTrackingDefaultTypeInternal _LineageTracking_default_instance_;
class LineageTracking_LineageMetadataEntry_DoNotUse;
struct LineageTracking_LineageMetadataEntry_DoNotUseDefaultTypeInternal;
extern LineageTracking_LineageMetadataEntry_DoNotUseDefaultTypeInternal _LineageTracking_LineageMetadataEntry_DoNotUse_default_instance_;
class TemporalAuditLog;
struct TemporalAuditLogDefaultTypeInternal;
extern TemporalAuditLogDefaultTypeInternal _TemporalAuditLog_default_instance_;
class TemporalAuditLog_AuditMetadataEntry_DoNotUse;
struct TemporalAuditLog_AuditMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalAuditLog_AuditMetadataEntry_DoNotUseDefaultTypeInternal _TemporalAuditLog_AuditMetadataEntry_DoNotUse_default_instance_;
class TemporalHistory;
struct TemporalHistoryDefaultTypeInternal;
extern TemporalHistoryDefaultTypeInternal _TemporalHistory_default_instance_;
class TemporalHistory_MetadataEntry_DoNotUse;
struct TemporalHistory_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalHistory_MetadataEntry_DoNotUseDefaultTypeInternal _TemporalHistory_MetadataEntry_DoNotUse_default_instance_;
class TemporalMergeRequest;
struct TemporalMergeRequestDefaultTypeInternal;
extern TemporalMergeRequestDefaultTypeInternal _TemporalMergeRequest_default_instance_;
class TemporalMergeRequest_MergeMetadataEntry_DoNotUse;
struct TemporalMergeRequest_MergeMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalMergeRequest_MergeMetadataEntry_DoNotUseDefaultTypeInternal _TemporalMergeRequest_MergeMetadataEntry_DoNotUse_default_instance_;
class TemporalMergeResponse;
struct TemporalMergeResponseDefaultTypeInternal;
extern TemporalMergeResponseDefaultTypeInternal _TemporalMergeResponse_default_instance_;
class TemporalMergeResponse_ResponseMetadataEntry_DoNotUse;
struct TemporalMergeResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalMergeResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal _TemporalMergeResponse_ResponseMetadataEntry_DoNotUse_default_instance_;
class TemporalPolicy;
struct TemporalPolicyDefaultTypeInternal;
extern TemporalPolicyDefaultTypeInternal _TemporalPolicy_default_instance_;
class TemporalPolicy_PolicyMetadataEntry_DoNotUse;
struct TemporalPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal _TemporalPolicy_PolicyMetadataEntry_DoNotUse_default_instance_;
class TemporalSnapshotRequest;
struct TemporalSnapshotRequestDefaultTypeInternal;
extern TemporalSnapshotRequestDefaultTypeInternal _TemporalSnapshotRequest_default_instance_;
class TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse;
struct TemporalSnapshotRequest_RequestMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalSnapshotRequest_RequestMetadataEntry_DoNotUseDefaultTypeInternal _TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse_default_instance_;
class TemporalSnapshotResponse;
struct TemporalSnapshotResponseDefaultTypeInternal;
extern TemporalSnapshotResponseDefaultTypeInternal _TemporalSnapshotResponse_default_instance_;
class TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse;
struct TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal;
extern TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal _TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse_default_instance_;
}  // namespace temporal
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace temporal {
enum TemporalMergeType : int {
  TEMPORAL_MERGE_UNDEFINED = 0,
  TEMPORAL_MERGE_UNION = 1,
  TEMPORAL_MERGE_OVERLAY = 2,
  TEMPORAL_MERGE_RECONCILE = 3,
  TemporalMergeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TemporalMergeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TemporalMergeType_IsValid(int value);
extern const uint32_t TemporalMergeType_internal_data_[];
constexpr TemporalMergeType TemporalMergeType_MIN = static_cast<TemporalMergeType>(0);
constexpr TemporalMergeType TemporalMergeType_MAX = static_cast<TemporalMergeType>(3);
constexpr int TemporalMergeType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TemporalMergeType_descriptor();
template <typename T>
const std::string& TemporalMergeType_Name(T value) {
  static_assert(std::is_same<T, TemporalMergeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TemporalMergeType_Name().");
  return TemporalMergeType_Name(static_cast<TemporalMergeType>(value));
}
template <>
inline const std::string& TemporalMergeType_Name(TemporalMergeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TemporalMergeType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TemporalMergeType_Parse(absl::string_view name, TemporalMergeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TemporalMergeType>(
      TemporalMergeType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse*>(
        &_TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse*>(
        &_TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalPolicy_PolicyMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalPolicy_PolicyMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalPolicy_PolicyMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalPolicy_PolicyMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalPolicy_PolicyMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalPolicy_PolicyMetadataEntry_DoNotUse*>(
        &_TemporalPolicy_PolicyMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalMergeResponse_ResponseMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalMergeResponse_ResponseMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalMergeResponse_ResponseMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalMergeResponse_ResponseMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalMergeResponse_ResponseMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalMergeResponse_ResponseMetadataEntry_DoNotUse*>(
        &_TemporalMergeResponse_ResponseMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalMergeRequest_MergeMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalMergeRequest_MergeMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalMergeRequest_MergeMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalMergeRequest_MergeMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalMergeRequest_MergeMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalMergeRequest_MergeMetadataEntry_DoNotUse*>(
        &_TemporalMergeRequest_MergeMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalHistory_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalHistory_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalHistory_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalHistory_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalHistory_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalHistory_MetadataEntry_DoNotUse*>(
        &_TemporalHistory_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalAuditLog_AuditMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TemporalAuditLog_AuditMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalAuditLog_AuditMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TemporalAuditLog_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TemporalAuditLog_AuditMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TemporalAuditLog_AuditMetadataEntry_DoNotUse*>(
        &_TemporalAuditLog_AuditMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class LineageTracking_LineageMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  LineageTracking_LineageMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LineageTracking_LineageMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit LineageTracking_LineageMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const LineageTracking_LineageMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const LineageTracking_LineageMetadataEntry_DoNotUse*>(
        &_LineageTracking_LineageMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_temporal_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class TemporalSnapshotRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalSnapshotRequest) */ {
 public:
  inline TemporalSnapshotRequest() : TemporalSnapshotRequest(nullptr) {}
  ~TemporalSnapshotRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalSnapshotRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalSnapshotRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalSnapshotRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalSnapshotRequest(const TemporalSnapshotRequest& from) : TemporalSnapshotRequest(nullptr, from) {}
  inline TemporalSnapshotRequest(TemporalSnapshotRequest&& from) noexcept
      : TemporalSnapshotRequest(nullptr, std::move(from)) {}
  inline TemporalSnapshotRequest& operator=(const TemporalSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalSnapshotRequest& operator=(TemporalSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const TemporalSnapshotRequest*>(
        &_TemporalSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TemporalSnapshotRequest& a, TemporalSnapshotRequest& b) { a.Swap(&b); }
  inline void Swap(TemporalSnapshotRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalSnapshotRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalSnapshotRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalSnapshotRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalSnapshotRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalSnapshotRequest& from) { TemporalSnapshotRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalSnapshotRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalSnapshotRequest"; }

 protected:
  explicit TemporalSnapshotRequest(::google::protobuf::Arena* arena);
  TemporalSnapshotRequest(::google::protobuf::Arena* arena, const TemporalSnapshotRequest& from);
  TemporalSnapshotRequest(::google::protobuf::Arena* arena, TemporalSnapshotRequest&& from) noexcept
      : TemporalSnapshotRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestMetadataFieldNumber = 6,
    kRequestIdFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kTargetTimestampFieldNumber = 3,
    kRequestedByFieldNumber = 5,
    kRequestPurposeFieldNumber = 7,
    kExactMatchFieldNumber = 4,
  };
  // map<string, string> request_metadata = 6;
  int request_metadata_size() const;
  private:
  int _internal_request_metadata_size() const;

  public:
  void clear_request_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& request_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_request_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_request_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_request_metadata();

  public:
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string segment_id = 2;
  void clear_segment_id() ;
  const std::string& segment_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_id(Arg_&& arg, Args_... args);
  std::string* mutable_segment_id();
  PROTOBUF_NODISCARD std::string* release_segment_id();
  void set_allocated_segment_id(std::string* value);

  private:
  const std::string& _internal_segment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_id(
      const std::string& value);
  std::string* _internal_mutable_segment_id();

  public:
  // string target_timestamp = 3;
  void clear_target_timestamp() ;
  const std::string& target_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_target_timestamp();
  PROTOBUF_NODISCARD std::string* release_target_timestamp();
  void set_allocated_target_timestamp(std::string* value);

  private:
  const std::string& _internal_target_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_timestamp(
      const std::string& value);
  std::string* _internal_mutable_target_timestamp();

  public:
  // string requested_by = 5;
  void clear_requested_by() ;
  const std::string& requested_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requested_by(Arg_&& arg, Args_... args);
  std::string* mutable_requested_by();
  PROTOBUF_NODISCARD std::string* release_requested_by();
  void set_allocated_requested_by(std::string* value);

  private:
  const std::string& _internal_requested_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requested_by(
      const std::string& value);
  std::string* _internal_mutable_requested_by();

  public:
  // string request_purpose = 7;
  void clear_request_purpose() ;
  const std::string& request_purpose() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_purpose(Arg_&& arg, Args_... args);
  std::string* mutable_request_purpose();
  PROTOBUF_NODISCARD std::string* release_request_purpose();
  void set_allocated_request_purpose(std::string* value);

  private:
  const std::string& _internal_request_purpose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_purpose(
      const std::string& value);
  std::string* _internal_mutable_request_purpose();

  public:
  // bool exact_match = 4;
  void clear_exact_match() ;
  bool exact_match() const;
  void set_exact_match(bool value);

  private:
  bool _internal_exact_match() const;
  void _internal_set_exact_match(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalSnapshotRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalSnapshotRequest& from_msg);
    ::google::protobuf::internal::MapField<TemporalSnapshotRequest_RequestMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        request_metadata_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_id_;
    ::google::protobuf::internal::ArenaStringPtr target_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr requested_by_;
    ::google::protobuf::internal::ArenaStringPtr request_purpose_;
    bool exact_match_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalPolicy) */ {
 public:
  inline TemporalPolicy() : TemporalPolicy(nullptr) {}
  ~TemporalPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalPolicy(const TemporalPolicy& from) : TemporalPolicy(nullptr, from) {}
  inline TemporalPolicy(TemporalPolicy&& from) noexcept
      : TemporalPolicy(nullptr, std::move(from)) {}
  inline TemporalPolicy& operator=(const TemporalPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalPolicy& operator=(TemporalPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalPolicy* internal_default_instance() {
    return reinterpret_cast<const TemporalPolicy*>(
        &_TemporalPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(TemporalPolicy& a, TemporalPolicy& b) { a.Swap(&b); }
  inline void Swap(TemporalPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalPolicy& from) { TemporalPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalPolicy"; }

 protected:
  explicit TemporalPolicy(::google::protobuf::Arena* arena);
  TemporalPolicy(::google::protobuf::Arena* arena, const TemporalPolicy& from);
  TemporalPolicy(::google::protobuf::Arena* arena, TemporalPolicy&& from) noexcept
      : TemporalPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPolicyMetadataFieldNumber = 8,
    kPolicyIdFieldNumber = 1,
    kPolicyNameFieldNumber = 2,
    kDeletionCriteriaFieldNumber = 7,
    kCreatedByFieldNumber = 9,
    kCreatedAtFieldNumber = 10,
    kRetentionDurationDaysFieldNumber = 3,
    kMergeFrequencyDaysFieldNumber = 5,
    kEnableAutomaticMergingFieldNumber = 4,
    kEnableSnapshotDeletionFieldNumber = 6,
  };
  // map<string, string> policy_metadata = 8;
  int policy_metadata_size() const;
  private:
  int _internal_policy_metadata_size() const;

  public:
  void clear_policy_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_policy_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_policy_metadata();

  public:
  // string policy_id = 1;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string policy_name = 2;
  void clear_policy_name() ;
  const std::string& policy_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_name(Arg_&& arg, Args_... args);
  std::string* mutable_policy_name();
  PROTOBUF_NODISCARD std::string* release_policy_name();
  void set_allocated_policy_name(std::string* value);

  private:
  const std::string& _internal_policy_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_name(
      const std::string& value);
  std::string* _internal_mutable_policy_name();

  public:
  // string deletion_criteria = 7;
  void clear_deletion_criteria() ;
  const std::string& deletion_criteria() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deletion_criteria(Arg_&& arg, Args_... args);
  std::string* mutable_deletion_criteria();
  PROTOBUF_NODISCARD std::string* release_deletion_criteria();
  void set_allocated_deletion_criteria(std::string* value);

  private:
  const std::string& _internal_deletion_criteria() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deletion_criteria(
      const std::string& value);
  std::string* _internal_mutable_deletion_criteria();

  public:
  // string created_by = 9;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 10;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // int32 retention_duration_days = 3;
  void clear_retention_duration_days() ;
  ::int32_t retention_duration_days() const;
  void set_retention_duration_days(::int32_t value);

  private:
  ::int32_t _internal_retention_duration_days() const;
  void _internal_set_retention_duration_days(::int32_t value);

  public:
  // int32 merge_frequency_days = 5;
  void clear_merge_frequency_days() ;
  ::int32_t merge_frequency_days() const;
  void set_merge_frequency_days(::int32_t value);

  private:
  ::int32_t _internal_merge_frequency_days() const;
  void _internal_set_merge_frequency_days(::int32_t value);

  public:
  // bool enable_automatic_merging = 4;
  void clear_enable_automatic_merging() ;
  bool enable_automatic_merging() const;
  void set_enable_automatic_merging(bool value);

  private:
  bool _internal_enable_automatic_merging() const;
  void _internal_set_enable_automatic_merging(bool value);

  public:
  // bool enable_snapshot_deletion = 6;
  void clear_enable_snapshot_deletion() ;
  bool enable_snapshot_deletion() const;
  void set_enable_snapshot_deletion(bool value);

  private:
  bool _internal_enable_snapshot_deletion() const;
  void _internal_set_enable_snapshot_deletion(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      118, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalPolicy& from_msg);
    ::google::protobuf::internal::MapField<TemporalPolicy_PolicyMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        policy_metadata_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_name_;
    ::google::protobuf::internal::ArenaStringPtr deletion_criteria_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::int32_t retention_duration_days_;
    ::int32_t merge_frequency_days_;
    bool enable_automatic_merging_;
    bool enable_snapshot_deletion_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalMergeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalMergeResponse) */ {
 public:
  inline TemporalMergeResponse() : TemporalMergeResponse(nullptr) {}
  ~TemporalMergeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalMergeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalMergeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalMergeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalMergeResponse(const TemporalMergeResponse& from) : TemporalMergeResponse(nullptr, from) {}
  inline TemporalMergeResponse(TemporalMergeResponse&& from) noexcept
      : TemporalMergeResponse(nullptr, std::move(from)) {}
  inline TemporalMergeResponse& operator=(const TemporalMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalMergeResponse& operator=(TemporalMergeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalMergeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalMergeResponse* internal_default_instance() {
    return reinterpret_cast<const TemporalMergeResponse*>(
        &_TemporalMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(TemporalMergeResponse& a, TemporalMergeResponse& b) { a.Swap(&b); }
  inline void Swap(TemporalMergeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalMergeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalMergeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalMergeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalMergeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalMergeResponse& from) { TemporalMergeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalMergeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalMergeResponse"; }

 protected:
  explicit TemporalMergeResponse(::google::protobuf::Arena* arena);
  TemporalMergeResponse(::google::protobuf::Arena* arena, const TemporalMergeResponse& from);
  TemporalMergeResponse(::google::protobuf::Arena* arena, TemporalMergeResponse&& from) noexcept
      : TemporalMergeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseMetadataFieldNumber = 5,
    kMergeIdFieldNumber = 1,
    kMergedLayerIdFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kMergeDurationMsFieldNumber = 6,
    kSuccessFieldNumber = 2,
  };
  // map<string, string> response_metadata = 5;
  int response_metadata_size() const;
  private:
  int _internal_response_metadata_size() const;

  public:
  void clear_response_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_response_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_response_metadata();

  public:
  // string merge_id = 1;
  void clear_merge_id() ;
  const std::string& merge_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_merge_id(Arg_&& arg, Args_... args);
  std::string* mutable_merge_id();
  PROTOBUF_NODISCARD std::string* release_merge_id();
  void set_allocated_merge_id(std::string* value);

  private:
  const std::string& _internal_merge_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merge_id(
      const std::string& value);
  std::string* _internal_mutable_merge_id();

  public:
  // string merged_layer_id = 3;
  void clear_merged_layer_id() ;
  const std::string& merged_layer_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_merged_layer_id(Arg_&& arg, Args_... args);
  std::string* mutable_merged_layer_id();
  PROTOBUF_NODISCARD std::string* release_merged_layer_id();
  void set_allocated_merged_layer_id(std::string* value);

  private:
  const std::string& _internal_merged_layer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merged_layer_id(
      const std::string& value);
  std::string* _internal_mutable_merged_layer_id();

  public:
  // string error_message = 4;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int64 merge_duration_ms = 6;
  void clear_merge_duration_ms() ;
  ::int64_t merge_duration_ms() const;
  void set_merge_duration_ms(::int64_t value);

  private:
  ::int64_t _internal_merge_duration_ms() const;
  void _internal_set_merge_duration_ms(::int64_t value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalMergeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      98, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalMergeResponse& from_msg);
    ::google::protobuf::internal::MapField<TemporalMergeResponse_ResponseMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        response_metadata_;
    ::google::protobuf::internal::ArenaStringPtr merge_id_;
    ::google::protobuf::internal::ArenaStringPtr merged_layer_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int64_t merge_duration_ms_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalMergeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalMergeRequest) */ {
 public:
  inline TemporalMergeRequest() : TemporalMergeRequest(nullptr) {}
  ~TemporalMergeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalMergeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalMergeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalMergeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalMergeRequest(const TemporalMergeRequest& from) : TemporalMergeRequest(nullptr, from) {}
  inline TemporalMergeRequest(TemporalMergeRequest&& from) noexcept
      : TemporalMergeRequest(nullptr, std::move(from)) {}
  inline TemporalMergeRequest& operator=(const TemporalMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalMergeRequest& operator=(TemporalMergeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalMergeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalMergeRequest* internal_default_instance() {
    return reinterpret_cast<const TemporalMergeRequest*>(
        &_TemporalMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TemporalMergeRequest& a, TemporalMergeRequest& b) { a.Swap(&b); }
  inline void Swap(TemporalMergeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalMergeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalMergeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalMergeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalMergeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalMergeRequest& from) { TemporalMergeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalMergeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalMergeRequest"; }

 protected:
  explicit TemporalMergeRequest(::google::protobuf::Arena* arena);
  TemporalMergeRequest(::google::protobuf::Arena* arena, const TemporalMergeRequest& from);
  TemporalMergeRequest(::google::protobuf::Arena* arena, TemporalMergeRequest&& from) noexcept
      : TemporalMergeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayerIdsFieldNumber = 2,
    kMergeMetadataFieldNumber = 6,
    kMergeIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kInitiatedByFieldNumber = 4,
    kMergeTypeFieldNumber = 5,
    kRetainOriginalsFieldNumber = 7,
  };
  // repeated string layer_ids = 2;
  int layer_ids_size() const;
  private:
  int _internal_layer_ids_size() const;

  public:
  void clear_layer_ids() ;
  const std::string& layer_ids(int index) const;
  std::string* mutable_layer_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_layer_ids(int index, Arg_&& value, Args_... args);
  std::string* add_layer_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_layer_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& layer_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_layer_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_layer_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_layer_ids();

  public:
  // map<string, string> merge_metadata = 6;
  int merge_metadata_size() const;
  private:
  int _internal_merge_metadata_size() const;

  public:
  void clear_merge_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& merge_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_merge_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_merge_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_merge_metadata();

  public:
  // string merge_id = 1;
  void clear_merge_id() ;
  const std::string& merge_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_merge_id(Arg_&& arg, Args_... args);
  std::string* mutable_merge_id();
  PROTOBUF_NODISCARD std::string* release_merge_id();
  void set_allocated_merge_id(std::string* value);

  private:
  const std::string& _internal_merge_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merge_id(
      const std::string& value);
  std::string* _internal_mutable_merge_id();

  public:
  // string target_id = 3;
  void clear_target_id() ;
  const std::string& target_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* value);

  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(
      const std::string& value);
  std::string* _internal_mutable_target_id();

  public:
  // string initiated_by = 4;
  void clear_initiated_by() ;
  const std::string& initiated_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initiated_by(Arg_&& arg, Args_... args);
  std::string* mutable_initiated_by();
  PROTOBUF_NODISCARD std::string* release_initiated_by();
  void set_allocated_initiated_by(std::string* value);

  private:
  const std::string& _internal_initiated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiated_by(
      const std::string& value);
  std::string* _internal_mutable_initiated_by();

  public:
  // .seigr.temporal.TemporalMergeType merge_type = 5;
  void clear_merge_type() ;
  ::seigr::temporal::TemporalMergeType merge_type() const;
  void set_merge_type(::seigr::temporal::TemporalMergeType value);

  private:
  ::seigr::temporal::TemporalMergeType _internal_merge_type() const;
  void _internal_set_merge_type(::seigr::temporal::TemporalMergeType value);

  public:
  // bool retain_originals = 7;
  void clear_retain_originals() ;
  bool retain_originals() const;
  void set_retain_originals(bool value);

  private:
  bool _internal_retain_originals() const;
  void _internal_set_retain_originals(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalMergeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      96, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalMergeRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> layer_ids_;
    ::google::protobuf::internal::MapField<TemporalMergeRequest_MergeMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        merge_metadata_;
    ::google::protobuf::internal::ArenaStringPtr merge_id_;
    ::google::protobuf::internal::ArenaStringPtr target_id_;
    ::google::protobuf::internal::ArenaStringPtr initiated_by_;
    int merge_type_;
    bool retain_originals_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalAuditLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalAuditLog) */ {
 public:
  inline TemporalAuditLog() : TemporalAuditLog(nullptr) {}
  ~TemporalAuditLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalAuditLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalAuditLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalAuditLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalAuditLog(const TemporalAuditLog& from) : TemporalAuditLog(nullptr, from) {}
  inline TemporalAuditLog(TemporalAuditLog&& from) noexcept
      : TemporalAuditLog(nullptr, std::move(from)) {}
  inline TemporalAuditLog& operator=(const TemporalAuditLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalAuditLog& operator=(TemporalAuditLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalAuditLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalAuditLog* internal_default_instance() {
    return reinterpret_cast<const TemporalAuditLog*>(
        &_TemporalAuditLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(TemporalAuditLog& a, TemporalAuditLog& b) { a.Swap(&b); }
  inline void Swap(TemporalAuditLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalAuditLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalAuditLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalAuditLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalAuditLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalAuditLog& from) { TemporalAuditLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalAuditLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalAuditLog"; }

 protected:
  explicit TemporalAuditLog(::google::protobuf::Arena* arena);
  TemporalAuditLog(::google::protobuf::Arena* arena, const TemporalAuditLog& from);
  TemporalAuditLog(::google::protobuf::Arena* arena, TemporalAuditLog&& from) noexcept
      : TemporalAuditLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuditMetadataFieldNumber = 6,
    kLogIdFieldNumber = 1,
    kTemporalIdFieldNumber = 2,
    kActionFieldNumber = 3,
    kActionByFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kStatusFieldNumber = 7,
  };
  // map<string, string> audit_metadata = 6;
  int audit_metadata_size() const;
  private:
  int _internal_audit_metadata_size() const;

  public:
  void clear_audit_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_audit_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_audit_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string temporal_id = 2;
  void clear_temporal_id() ;
  const std::string& temporal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_temporal_id(Arg_&& arg, Args_... args);
  std::string* mutable_temporal_id();
  PROTOBUF_NODISCARD std::string* release_temporal_id();
  void set_allocated_temporal_id(std::string* value);

  private:
  const std::string& _internal_temporal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temporal_id(
      const std::string& value);
  std::string* _internal_mutable_temporal_id();

  public:
  // string action = 3;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string action_by = 4;
  void clear_action_by() ;
  const std::string& action_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_by(Arg_&& arg, Args_... args);
  std::string* mutable_action_by();
  PROTOBUF_NODISCARD std::string* release_action_by();
  void set_allocated_action_by(std::string* value);

  private:
  const std::string& _internal_action_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_by(
      const std::string& value);
  std::string* _internal_mutable_action_by();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string status = 7;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalAuditLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalAuditLog& from_msg);
    ::google::protobuf::internal::MapField<TemporalAuditLog_AuditMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        audit_metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr temporal_id_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr action_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class LineageTracking final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.LineageTracking) */ {
 public:
  inline LineageTracking() : LineageTracking(nullptr) {}
  ~LineageTracking() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LineageTracking* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LineageTracking));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LineageTracking(
      ::google::protobuf::internal::ConstantInitialized);

  inline LineageTracking(const LineageTracking& from) : LineageTracking(nullptr, from) {}
  inline LineageTracking(LineageTracking&& from) noexcept
      : LineageTracking(nullptr, std::move(from)) {}
  inline LineageTracking& operator=(const LineageTracking& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineageTracking& operator=(LineageTracking&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineageTracking& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineageTracking* internal_default_instance() {
    return reinterpret_cast<const LineageTracking*>(
        &_LineageTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LineageTracking& a, LineageTracking& b) { a.Swap(&b); }
  inline void Swap(LineageTracking* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineageTracking* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineageTracking* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LineageTracking>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LineageTracking& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LineageTracking& from) { LineageTracking::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LineageTracking* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.LineageTracking"; }

 protected:
  explicit LineageTracking(::google::protobuf::Arena* arena);
  LineageTracking(::google::protobuf::Arena* arena, const LineageTracking& from);
  LineageTracking(::google::protobuf::Arena* arena, LineageTracking&& from) noexcept
      : LineageTracking(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAncestorHashesFieldNumber = 2,
    kDescendantHashesFieldNumber = 3,
    kLineageMetadataFieldNumber = 5,
    kLineageIdFieldNumber = 1,
    kOriginalCreationFieldNumber = 4,
    kIntegrityCheckFieldNumber = 6,
    kLineageTypeFieldNumber = 9,
    kArchivedFieldNumber = 7,
    kEvolutionDepthFieldNumber = 8,
  };
  // repeated string ancestor_hashes = 2;
  int ancestor_hashes_size() const;
  private:
  int _internal_ancestor_hashes_size() const;

  public:
  void clear_ancestor_hashes() ;
  const std::string& ancestor_hashes(int index) const;
  std::string* mutable_ancestor_hashes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ancestor_hashes(int index, Arg_&& value, Args_... args);
  std::string* add_ancestor_hashes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_ancestor_hashes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& ancestor_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_ancestor_hashes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_ancestor_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_ancestor_hashes();

  public:
  // repeated string descendant_hashes = 3;
  int descendant_hashes_size() const;
  private:
  int _internal_descendant_hashes_size() const;

  public:
  void clear_descendant_hashes() ;
  const std::string& descendant_hashes(int index) const;
  std::string* mutable_descendant_hashes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_descendant_hashes(int index, Arg_&& value, Args_... args);
  std::string* add_descendant_hashes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_descendant_hashes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& descendant_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_descendant_hashes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_descendant_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_descendant_hashes();

  public:
  // map<string, string> lineage_metadata = 5;
  int lineage_metadata_size() const;
  private:
  int _internal_lineage_metadata_size() const;

  public:
  void clear_lineage_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& lineage_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_lineage_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_lineage_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_lineage_metadata();

  public:
  // string lineage_id = 1;
  void clear_lineage_id() ;
  const std::string& lineage_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lineage_id(Arg_&& arg, Args_... args);
  std::string* mutable_lineage_id();
  PROTOBUF_NODISCARD std::string* release_lineage_id();
  void set_allocated_lineage_id(std::string* value);

  private:
  const std::string& _internal_lineage_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lineage_id(
      const std::string& value);
  std::string* _internal_mutable_lineage_id();

  public:
  // string original_creation = 4;
  void clear_original_creation() ;
  const std::string& original_creation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_creation(Arg_&& arg, Args_... args);
  std::string* mutable_original_creation();
  PROTOBUF_NODISCARD std::string* release_original_creation();
  void set_allocated_original_creation(std::string* value);

  private:
  const std::string& _internal_original_creation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_creation(
      const std::string& value);
  std::string* _internal_mutable_original_creation();

  public:
  // string integrity_check = 6;
  void clear_integrity_check() ;
  const std::string& integrity_check() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_integrity_check(Arg_&& arg, Args_... args);
  std::string* mutable_integrity_check();
  PROTOBUF_NODISCARD std::string* release_integrity_check();
  void set_allocated_integrity_check(std::string* value);

  private:
  const std::string& _internal_integrity_check() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integrity_check(
      const std::string& value);
  std::string* _internal_mutable_integrity_check();

  public:
  // string lineage_type = 9;
  void clear_lineage_type() ;
  const std::string& lineage_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lineage_type(Arg_&& arg, Args_... args);
  std::string* mutable_lineage_type();
  PROTOBUF_NODISCARD std::string* release_lineage_type();
  void set_allocated_lineage_type(std::string* value);

  private:
  const std::string& _internal_lineage_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lineage_type(
      const std::string& value);
  std::string* _internal_mutable_lineage_type();

  public:
  // bool archived = 7;
  void clear_archived() ;
  bool archived() const;
  void set_archived(bool value);

  private:
  bool _internal_archived() const;
  void _internal_set_archived(bool value);

  public:
  // int32 evolution_depth = 8;
  void clear_evolution_depth() ;
  ::int32_t evolution_depth() const;
  void set_evolution_depth(::int32_t value);

  private:
  ::int32_t _internal_evolution_depth() const;
  void _internal_set_evolution_depth(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.LineageTracking)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      149, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LineageTracking& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> ancestor_hashes_;
    ::google::protobuf::RepeatedPtrField<std::string> descendant_hashes_;
    ::google::protobuf::internal::MapField<LineageTracking_LineageMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        lineage_metadata_;
    ::google::protobuf::internal::ArenaStringPtr lineage_id_;
    ::google::protobuf::internal::ArenaStringPtr original_creation_;
    ::google::protobuf::internal::ArenaStringPtr integrity_check_;
    ::google::protobuf::internal::ArenaStringPtr lineage_type_;
    bool archived_;
    ::int32_t evolution_depth_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalSnapshotResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalSnapshotResponse) */ {
 public:
  inline TemporalSnapshotResponse() : TemporalSnapshotResponse(nullptr) {}
  ~TemporalSnapshotResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalSnapshotResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalSnapshotResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalSnapshotResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalSnapshotResponse(const TemporalSnapshotResponse& from) : TemporalSnapshotResponse(nullptr, from) {}
  inline TemporalSnapshotResponse(TemporalSnapshotResponse&& from) noexcept
      : TemporalSnapshotResponse(nullptr, std::move(from)) {}
  inline TemporalSnapshotResponse& operator=(const TemporalSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalSnapshotResponse& operator=(TemporalSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const TemporalSnapshotResponse*>(
        &_TemporalSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TemporalSnapshotResponse& a, TemporalSnapshotResponse& b) { a.Swap(&b); }
  inline void Swap(TemporalSnapshotResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalSnapshotResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalSnapshotResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalSnapshotResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalSnapshotResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalSnapshotResponse& from) { TemporalSnapshotResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalSnapshotResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalSnapshotResponse"; }

 protected:
  explicit TemporalSnapshotResponse(::google::protobuf::Arena* arena);
  TemporalSnapshotResponse(::google::protobuf::Arena* arena, const TemporalSnapshotResponse& from);
  TemporalSnapshotResponse(::google::protobuf::Arena* arena, TemporalSnapshotResponse&& from) noexcept
      : TemporalSnapshotResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseMetadataFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kErrorMessageFieldNumber = 4,
    kRetrievedTimestampFieldNumber = 6,
    kSnapshotSourceFieldNumber = 8,
    kSnapshotLayerFieldNumber = 2,
    kRetrievalDurationMsFieldNumber = 7,
    kSuccessFieldNumber = 3,
  };
  // map<string, string> response_metadata = 5;
  int response_metadata_size() const;
  private:
  int _internal_response_metadata_size() const;

  public:
  void clear_response_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_response_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_response_metadata();

  public:
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string error_message = 4;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string retrieved_timestamp = 6;
  void clear_retrieved_timestamp() ;
  const std::string& retrieved_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retrieved_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_retrieved_timestamp();
  PROTOBUF_NODISCARD std::string* release_retrieved_timestamp();
  void set_allocated_retrieved_timestamp(std::string* value);

  private:
  const std::string& _internal_retrieved_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retrieved_timestamp(
      const std::string& value);
  std::string* _internal_mutable_retrieved_timestamp();

  public:
  // string snapshot_source = 8;
  void clear_snapshot_source() ;
  const std::string& snapshot_source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_snapshot_source(Arg_&& arg, Args_... args);
  std::string* mutable_snapshot_source();
  PROTOBUF_NODISCARD std::string* release_snapshot_source();
  void set_allocated_snapshot_source(std::string* value);

  private:
  const std::string& _internal_snapshot_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_source(
      const std::string& value);
  std::string* _internal_mutable_snapshot_source();

  public:
  // .seigr.lineage.TemporalLayer snapshot_layer = 2;
  bool has_snapshot_layer() const;
  void clear_snapshot_layer() ;
  const ::seigr::lineage::TemporalLayer& snapshot_layer() const;
  PROTOBUF_NODISCARD ::seigr::lineage::TemporalLayer* release_snapshot_layer();
  ::seigr::lineage::TemporalLayer* mutable_snapshot_layer();
  void set_allocated_snapshot_layer(::seigr::lineage::TemporalLayer* value);
  void unsafe_arena_set_allocated_snapshot_layer(::seigr::lineage::TemporalLayer* value);
  ::seigr::lineage::TemporalLayer* unsafe_arena_release_snapshot_layer();

  private:
  const ::seigr::lineage::TemporalLayer& _internal_snapshot_layer() const;
  ::seigr::lineage::TemporalLayer* _internal_mutable_snapshot_layer();

  public:
  // int64 retrieval_duration_ms = 7;
  void clear_retrieval_duration_ms() ;
  ::int64_t retrieval_duration_ms() const;
  void set_retrieval_duration_ms(::int64_t value);

  private:
  ::int64_t _internal_retrieval_duration_ms() const;
  void _internal_set_retrieval_duration_ms(::int64_t value);

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalSnapshotResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      130, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalSnapshotResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TemporalSnapshotResponse_ResponseMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        response_metadata_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr retrieved_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr snapshot_source_;
    ::seigr::lineage::TemporalLayer* snapshot_layer_;
    ::int64_t retrieval_duration_ms_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};
// -------------------------------------------------------------------

class TemporalHistory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.temporal.TemporalHistory) */ {
 public:
  inline TemporalHistory() : TemporalHistory(nullptr) {}
  ~TemporalHistory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemporalHistory* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemporalHistory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemporalHistory(
      ::google::protobuf::internal::ConstantInitialized);

  inline TemporalHistory(const TemporalHistory& from) : TemporalHistory(nullptr, from) {}
  inline TemporalHistory(TemporalHistory&& from) noexcept
      : TemporalHistory(nullptr, std::move(from)) {}
  inline TemporalHistory& operator=(const TemporalHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalHistory& operator=(TemporalHistory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalHistory* internal_default_instance() {
    return reinterpret_cast<const TemporalHistory*>(
        &_TemporalHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TemporalHistory& a, TemporalHistory& b) { a.Swap(&b); }
  inline void Swap(TemporalHistory* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalHistory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporalHistory* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemporalHistory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemporalHistory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemporalHistory& from) { TemporalHistory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemporalHistory* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.temporal.TemporalHistory"; }

 protected:
  explicit TemporalHistory(::google::protobuf::Arena* arena);
  TemporalHistory(::google::protobuf::Arena* arena, const TemporalHistory& from);
  TemporalHistory(::google::protobuf::Arena* arena, TemporalHistory&& from) noexcept
      : TemporalHistory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTemporalLayersFieldNumber = 2,
    kMetadataFieldNumber = 6,
    kHistoryIdFieldNumber = 1,
    kCreatedByFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kLastModifiedAtFieldNumber = 5,
    kVersionCountFieldNumber = 7,
    kIsActiveFieldNumber = 8,
  };
  // repeated .seigr.lineage.TemporalLayer temporal_layers = 2;
  int temporal_layers_size() const;
  private:
  int _internal_temporal_layers_size() const;

  public:
  void clear_temporal_layers() ;
  ::seigr::lineage::TemporalLayer* mutable_temporal_layers(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* mutable_temporal_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& _internal_temporal_layers() const;
  ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* _internal_mutable_temporal_layers();
  public:
  const ::seigr::lineage::TemporalLayer& temporal_layers(int index) const;
  ::seigr::lineage::TemporalLayer* add_temporal_layers();
  const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& temporal_layers() const;
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string history_id = 1;
  void clear_history_id() ;
  const std::string& history_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_history_id(Arg_&& arg, Args_... args);
  std::string* mutable_history_id();
  PROTOBUF_NODISCARD std::string* release_history_id();
  void set_allocated_history_id(std::string* value);

  private:
  const std::string& _internal_history_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_history_id(
      const std::string& value);
  std::string* _internal_mutable_history_id();

  public:
  // string created_by = 3;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 4;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string last_modified_at = 5;
  void clear_last_modified_at() ;
  const std::string& last_modified_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_modified_at(Arg_&& arg, Args_... args);
  std::string* mutable_last_modified_at();
  PROTOBUF_NODISCARD std::string* release_last_modified_at();
  void set_allocated_last_modified_at(std::string* value);

  private:
  const std::string& _internal_last_modified_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified_at(
      const std::string& value);
  std::string* _internal_mutable_last_modified_at();

  public:
  // int32 version_count = 7;
  void clear_version_count() ;
  ::int32_t version_count() const;
  void set_version_count(::int32_t value);

  private:
  ::int32_t _internal_version_count() const;
  void _internal_set_version_count(::int32_t value);

  public:
  // bool is_active = 8;
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.temporal.TemporalHistory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TemporalHistory& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::lineage::TemporalLayer > temporal_layers_;
    ::google::protobuf::internal::MapField<TemporalHistory_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr history_id_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr last_modified_at_;
    ::int32_t version_count_;
    bool is_active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_temporal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalHistory

// string history_id = 1;
inline void TemporalHistory::clear_history_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.history_id_.ClearToEmpty();
}
inline const std::string& TemporalHistory::history_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.history_id)
  return _internal_history_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalHistory::set_history_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.history_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.history_id)
}
inline std::string* TemporalHistory::mutable_history_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_history_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalHistory.history_id)
  return _s;
}
inline const std::string& TemporalHistory::_internal_history_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.history_id_.Get();
}
inline void TemporalHistory::_internal_set_history_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.history_id_.Set(value, GetArena());
}
inline std::string* TemporalHistory::_internal_mutable_history_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.history_id_.Mutable( GetArena());
}
inline std::string* TemporalHistory::release_history_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalHistory.history_id)
  return _impl_.history_id_.Release();
}
inline void TemporalHistory::set_allocated_history_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.history_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.history_id_.IsDefault()) {
    _impl_.history_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalHistory.history_id)
}

// repeated .seigr.lineage.TemporalLayer temporal_layers = 2;
inline int TemporalHistory::_internal_temporal_layers_size() const {
  return _internal_temporal_layers().size();
}
inline int TemporalHistory::temporal_layers_size() const {
  return _internal_temporal_layers_size();
}
inline ::seigr::lineage::TemporalLayer* TemporalHistory::mutable_temporal_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalHistory.temporal_layers)
  return _internal_mutable_temporal_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* TemporalHistory::mutable_temporal_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.temporal.TemporalHistory.temporal_layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_temporal_layers();
}
inline const ::seigr::lineage::TemporalLayer& TemporalHistory::temporal_layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.temporal_layers)
  return _internal_temporal_layers().Get(index);
}
inline ::seigr::lineage::TemporalLayer* TemporalHistory::add_temporal_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::lineage::TemporalLayer* _add = _internal_mutable_temporal_layers()->Add();
  // @@protoc_insertion_point(field_add:seigr.temporal.TemporalHistory.temporal_layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& TemporalHistory::temporal_layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.temporal.TemporalHistory.temporal_layers)
  return _internal_temporal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>&
TemporalHistory::_internal_temporal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temporal_layers_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>*
TemporalHistory::_internal_mutable_temporal_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.temporal_layers_;
}

// string created_by = 3;
inline void TemporalHistory::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& TemporalHistory::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalHistory::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.created_by)
}
inline std::string* TemporalHistory::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalHistory.created_by)
  return _s;
}
inline const std::string& TemporalHistory::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void TemporalHistory::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* TemporalHistory::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* TemporalHistory::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalHistory.created_by)
  return _impl_.created_by_.Release();
}
inline void TemporalHistory::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalHistory.created_by)
}

// string created_at = 4;
inline void TemporalHistory::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& TemporalHistory::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalHistory::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.created_at)
}
inline std::string* TemporalHistory::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalHistory.created_at)
  return _s;
}
inline const std::string& TemporalHistory::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void TemporalHistory::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* TemporalHistory::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* TemporalHistory::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalHistory.created_at)
  return _impl_.created_at_.Release();
}
inline void TemporalHistory::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalHistory.created_at)
}

// string last_modified_at = 5;
inline void TemporalHistory::clear_last_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_at_.ClearToEmpty();
}
inline const std::string& TemporalHistory::last_modified_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.last_modified_at)
  return _internal_last_modified_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalHistory::set_last_modified_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.last_modified_at)
}
inline std::string* TemporalHistory::mutable_last_modified_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_modified_at();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalHistory.last_modified_at)
  return _s;
}
inline const std::string& TemporalHistory::_internal_last_modified_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_at_.Get();
}
inline void TemporalHistory::_internal_set_last_modified_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_at_.Set(value, GetArena());
}
inline std::string* TemporalHistory::_internal_mutable_last_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_modified_at_.Mutable( GetArena());
}
inline std::string* TemporalHistory::release_last_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalHistory.last_modified_at)
  return _impl_.last_modified_at_.Release();
}
inline void TemporalHistory::set_allocated_last_modified_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_modified_at_.IsDefault()) {
    _impl_.last_modified_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalHistory.last_modified_at)
}

// map<string, string> metadata = 6;
inline int TemporalHistory::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int TemporalHistory::metadata_size() const {
  return _internal_metadata_size();
}
inline void TemporalHistory::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalHistory::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalHistory::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalHistory.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalHistory::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalHistory::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalHistory.metadata)
  return _internal_mutable_metadata();
}

// int32 version_count = 7;
inline void TemporalHistory::clear_version_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_count_ = 0;
}
inline ::int32_t TemporalHistory::version_count() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.version_count)
  return _internal_version_count();
}
inline void TemporalHistory::set_version_count(::int32_t value) {
  _internal_set_version_count(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.version_count)
}
inline ::int32_t TemporalHistory::_internal_version_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_count_;
}
inline void TemporalHistory::_internal_set_version_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_count_ = value;
}

// bool is_active = 8;
inline void TemporalHistory::clear_is_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = false;
}
inline bool TemporalHistory::is_active() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalHistory.is_active)
  return _internal_is_active();
}
inline void TemporalHistory::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalHistory.is_active)
}
inline bool TemporalHistory::_internal_is_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_active_;
}
inline void TemporalHistory::_internal_set_is_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LineageTracking

// string lineage_id = 1;
inline void LineageTracking::clear_lineage_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_id_.ClearToEmpty();
}
inline const std::string& LineageTracking::lineage_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.lineage_id)
  return _internal_lineage_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineageTracking::set_lineage_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.lineage_id)
}
inline std::string* LineageTracking::mutable_lineage_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lineage_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.lineage_id)
  return _s;
}
inline const std::string& LineageTracking::_internal_lineage_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lineage_id_.Get();
}
inline void LineageTracking::_internal_set_lineage_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_id_.Set(value, GetArena());
}
inline std::string* LineageTracking::_internal_mutable_lineage_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.lineage_id_.Mutable( GetArena());
}
inline std::string* LineageTracking::release_lineage_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.LineageTracking.lineage_id)
  return _impl_.lineage_id_.Release();
}
inline void LineageTracking::set_allocated_lineage_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.lineage_id_.IsDefault()) {
    _impl_.lineage_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.LineageTracking.lineage_id)
}

// repeated string ancestor_hashes = 2;
inline int LineageTracking::_internal_ancestor_hashes_size() const {
  return _internal_ancestor_hashes().size();
}
inline int LineageTracking::ancestor_hashes_size() const {
  return _internal_ancestor_hashes_size();
}
inline void LineageTracking::clear_ancestor_hashes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ancestor_hashes_.Clear();
}
inline std::string* LineageTracking::add_ancestor_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_ancestor_hashes()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.temporal.LineageTracking.ancestor_hashes)
  return _s;
}
inline const std::string& LineageTracking::ancestor_hashes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.ancestor_hashes)
  return _internal_ancestor_hashes().Get(index);
}
inline std::string* LineageTracking::mutable_ancestor_hashes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.ancestor_hashes)
  return _internal_mutable_ancestor_hashes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void LineageTracking::set_ancestor_hashes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_ancestor_hashes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.ancestor_hashes)
}
template <typename Arg_, typename... Args_>
inline void LineageTracking::add_ancestor_hashes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_ancestor_hashes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.temporal.LineageTracking.ancestor_hashes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LineageTracking::ancestor_hashes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.temporal.LineageTracking.ancestor_hashes)
  return _internal_ancestor_hashes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LineageTracking::mutable_ancestor_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.temporal.LineageTracking.ancestor_hashes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ancestor_hashes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LineageTracking::_internal_ancestor_hashes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ancestor_hashes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LineageTracking::_internal_mutable_ancestor_hashes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ancestor_hashes_;
}

// repeated string descendant_hashes = 3;
inline int LineageTracking::_internal_descendant_hashes_size() const {
  return _internal_descendant_hashes().size();
}
inline int LineageTracking::descendant_hashes_size() const {
  return _internal_descendant_hashes_size();
}
inline void LineageTracking::clear_descendant_hashes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.descendant_hashes_.Clear();
}
inline std::string* LineageTracking::add_descendant_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_descendant_hashes()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.temporal.LineageTracking.descendant_hashes)
  return _s;
}
inline const std::string& LineageTracking::descendant_hashes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.descendant_hashes)
  return _internal_descendant_hashes().Get(index);
}
inline std::string* LineageTracking::mutable_descendant_hashes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.descendant_hashes)
  return _internal_mutable_descendant_hashes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void LineageTracking::set_descendant_hashes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_descendant_hashes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.descendant_hashes)
}
template <typename Arg_, typename... Args_>
inline void LineageTracking::add_descendant_hashes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_descendant_hashes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.temporal.LineageTracking.descendant_hashes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LineageTracking::descendant_hashes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.temporal.LineageTracking.descendant_hashes)
  return _internal_descendant_hashes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LineageTracking::mutable_descendant_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.temporal.LineageTracking.descendant_hashes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_descendant_hashes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LineageTracking::_internal_descendant_hashes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.descendant_hashes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LineageTracking::_internal_mutable_descendant_hashes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.descendant_hashes_;
}

// string original_creation = 4;
inline void LineageTracking::clear_original_creation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_creation_.ClearToEmpty();
}
inline const std::string& LineageTracking::original_creation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.original_creation)
  return _internal_original_creation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineageTracking::set_original_creation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_creation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.original_creation)
}
inline std::string* LineageTracking::mutable_original_creation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_creation();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.original_creation)
  return _s;
}
inline const std::string& LineageTracking::_internal_original_creation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_creation_.Get();
}
inline void LineageTracking::_internal_set_original_creation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_creation_.Set(value, GetArena());
}
inline std::string* LineageTracking::_internal_mutable_original_creation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.original_creation_.Mutable( GetArena());
}
inline std::string* LineageTracking::release_original_creation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.LineageTracking.original_creation)
  return _impl_.original_creation_.Release();
}
inline void LineageTracking::set_allocated_original_creation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_creation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.original_creation_.IsDefault()) {
    _impl_.original_creation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.LineageTracking.original_creation)
}

// map<string, string> lineage_metadata = 5;
inline int LineageTracking::_internal_lineage_metadata_size() const {
  return _internal_lineage_metadata().size();
}
inline int LineageTracking::lineage_metadata_size() const {
  return _internal_lineage_metadata_size();
}
inline void LineageTracking::clear_lineage_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& LineageTracking::_internal_lineage_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lineage_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& LineageTracking::lineage_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.LineageTracking.lineage_metadata)
  return _internal_lineage_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* LineageTracking::_internal_mutable_lineage_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.lineage_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* LineageTracking::mutable_lineage_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.LineageTracking.lineage_metadata)
  return _internal_mutable_lineage_metadata();
}

// string integrity_check = 6;
inline void LineageTracking::clear_integrity_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_check_.ClearToEmpty();
}
inline const std::string& LineageTracking::integrity_check() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.integrity_check)
  return _internal_integrity_check();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineageTracking::set_integrity_check(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_check_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.integrity_check)
}
inline std::string* LineageTracking::mutable_integrity_check() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_integrity_check();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.integrity_check)
  return _s;
}
inline const std::string& LineageTracking::_internal_integrity_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integrity_check_.Get();
}
inline void LineageTracking::_internal_set_integrity_check(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_check_.Set(value, GetArena());
}
inline std::string* LineageTracking::_internal_mutable_integrity_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.integrity_check_.Mutable( GetArena());
}
inline std::string* LineageTracking::release_integrity_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.LineageTracking.integrity_check)
  return _impl_.integrity_check_.Release();
}
inline void LineageTracking::set_allocated_integrity_check(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_check_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.integrity_check_.IsDefault()) {
    _impl_.integrity_check_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.LineageTracking.integrity_check)
}

// bool archived = 7;
inline void LineageTracking::clear_archived() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archived_ = false;
}
inline bool LineageTracking::archived() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.archived)
  return _internal_archived();
}
inline void LineageTracking::set_archived(bool value) {
  _internal_set_archived(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.archived)
}
inline bool LineageTracking::_internal_archived() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.archived_;
}
inline void LineageTracking::_internal_set_archived(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archived_ = value;
}

// int32 evolution_depth = 8;
inline void LineageTracking::clear_evolution_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evolution_depth_ = 0;
}
inline ::int32_t LineageTracking::evolution_depth() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.evolution_depth)
  return _internal_evolution_depth();
}
inline void LineageTracking::set_evolution_depth(::int32_t value) {
  _internal_set_evolution_depth(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.evolution_depth)
}
inline ::int32_t LineageTracking::_internal_evolution_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evolution_depth_;
}
inline void LineageTracking::_internal_set_evolution_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evolution_depth_ = value;
}

// string lineage_type = 9;
inline void LineageTracking::clear_lineage_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_type_.ClearToEmpty();
}
inline const std::string& LineageTracking::lineage_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.LineageTracking.lineage_type)
  return _internal_lineage_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LineageTracking::set_lineage_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.LineageTracking.lineage_type)
}
inline std::string* LineageTracking::mutable_lineage_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lineage_type();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.LineageTracking.lineage_type)
  return _s;
}
inline const std::string& LineageTracking::_internal_lineage_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lineage_type_.Get();
}
inline void LineageTracking::_internal_set_lineage_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_type_.Set(value, GetArena());
}
inline std::string* LineageTracking::_internal_mutable_lineage_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.lineage_type_.Mutable( GetArena());
}
inline std::string* LineageTracking::release_lineage_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.LineageTracking.lineage_type)
  return _impl_.lineage_type_.Release();
}
inline void LineageTracking::set_allocated_lineage_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.lineage_type_.IsDefault()) {
    _impl_.lineage_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.LineageTracking.lineage_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalSnapshotRequest

// string request_id = 1;
inline void TemporalSnapshotRequest::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotRequest::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.request_id)
}
inline std::string* TemporalSnapshotRequest::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotRequest.request_id)
  return _s;
}
inline const std::string& TemporalSnapshotRequest::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void TemporalSnapshotRequest::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotRequest::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotRequest::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void TemporalSnapshotRequest::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotRequest.request_id)
}

// string segment_id = 2;
inline void TemporalSnapshotRequest::clear_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotRequest::segment_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.segment_id)
  return _internal_segment_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotRequest::set_segment_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.segment_id)
}
inline std::string* TemporalSnapshotRequest::mutable_segment_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotRequest.segment_id)
  return _s;
}
inline const std::string& TemporalSnapshotRequest::_internal_segment_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_id_.Get();
}
inline void TemporalSnapshotRequest::_internal_set_segment_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotRequest::_internal_mutable_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_id_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotRequest::release_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotRequest.segment_id)
  return _impl_.segment_id_.Release();
}
inline void TemporalSnapshotRequest::set_allocated_segment_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_id_.IsDefault()) {
    _impl_.segment_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotRequest.segment_id)
}

// string target_timestamp = 3;
inline void TemporalSnapshotRequest::clear_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotRequest::target_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.target_timestamp)
  return _internal_target_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotRequest::set_target_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.target_timestamp)
}
inline std::string* TemporalSnapshotRequest::mutable_target_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotRequest.target_timestamp)
  return _s;
}
inline const std::string& TemporalSnapshotRequest::_internal_target_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_timestamp_.Get();
}
inline void TemporalSnapshotRequest::_internal_set_target_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotRequest::_internal_mutable_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_timestamp_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotRequest::release_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotRequest.target_timestamp)
  return _impl_.target_timestamp_.Release();
}
inline void TemporalSnapshotRequest::set_allocated_target_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_timestamp_.IsDefault()) {
    _impl_.target_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotRequest.target_timestamp)
}

// bool exact_match = 4;
inline void TemporalSnapshotRequest::clear_exact_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exact_match_ = false;
}
inline bool TemporalSnapshotRequest::exact_match() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.exact_match)
  return _internal_exact_match();
}
inline void TemporalSnapshotRequest::set_exact_match(bool value) {
  _internal_set_exact_match(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.exact_match)
}
inline bool TemporalSnapshotRequest::_internal_exact_match() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exact_match_;
}
inline void TemporalSnapshotRequest::_internal_set_exact_match(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exact_match_ = value;
}

// string requested_by = 5;
inline void TemporalSnapshotRequest::clear_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotRequest::requested_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.requested_by)
  return _internal_requested_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotRequest::set_requested_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.requested_by)
}
inline std::string* TemporalSnapshotRequest::mutable_requested_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requested_by();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotRequest.requested_by)
  return _s;
}
inline const std::string& TemporalSnapshotRequest::_internal_requested_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_by_.Get();
}
inline void TemporalSnapshotRequest::_internal_set_requested_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotRequest::_internal_mutable_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requested_by_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotRequest::release_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotRequest.requested_by)
  return _impl_.requested_by_.Release();
}
inline void TemporalSnapshotRequest::set_allocated_requested_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requested_by_.IsDefault()) {
    _impl_.requested_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotRequest.requested_by)
}

// map<string, string> request_metadata = 6;
inline int TemporalSnapshotRequest::_internal_request_metadata_size() const {
  return _internal_request_metadata().size();
}
inline int TemporalSnapshotRequest::request_metadata_size() const {
  return _internal_request_metadata_size();
}
inline void TemporalSnapshotRequest::clear_request_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalSnapshotRequest::_internal_request_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalSnapshotRequest::request_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalSnapshotRequest.request_metadata)
  return _internal_request_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalSnapshotRequest::_internal_mutable_request_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalSnapshotRequest::mutable_request_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalSnapshotRequest.request_metadata)
  return _internal_mutable_request_metadata();
}

// string request_purpose = 7;
inline void TemporalSnapshotRequest::clear_request_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_purpose_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotRequest::request_purpose() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotRequest.request_purpose)
  return _internal_request_purpose();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotRequest::set_request_purpose(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_purpose_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotRequest.request_purpose)
}
inline std::string* TemporalSnapshotRequest::mutable_request_purpose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_purpose();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotRequest.request_purpose)
  return _s;
}
inline const std::string& TemporalSnapshotRequest::_internal_request_purpose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_purpose_.Get();
}
inline void TemporalSnapshotRequest::_internal_set_request_purpose(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_purpose_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotRequest::_internal_mutable_request_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_purpose_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotRequest::release_request_purpose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotRequest.request_purpose)
  return _impl_.request_purpose_.Release();
}
inline void TemporalSnapshotRequest::set_allocated_request_purpose(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_purpose_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_purpose_.IsDefault()) {
    _impl_.request_purpose_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotRequest.request_purpose)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalSnapshotResponse

// string request_id = 1;
inline void TemporalSnapshotResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotResponse::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotResponse::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.request_id)
}
inline std::string* TemporalSnapshotResponse::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotResponse.request_id)
  return _s;
}
inline const std::string& TemporalSnapshotResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void TemporalSnapshotResponse::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotResponse::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotResponse::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotResponse.request_id)
  return _impl_.request_id_.Release();
}
inline void TemporalSnapshotResponse::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotResponse.request_id)
}

// .seigr.lineage.TemporalLayer snapshot_layer = 2;
inline bool TemporalSnapshotResponse::has_snapshot_layer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.snapshot_layer_ != nullptr);
  return value;
}
inline const ::seigr::lineage::TemporalLayer& TemporalSnapshotResponse::_internal_snapshot_layer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::lineage::TemporalLayer* p = _impl_.snapshot_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::lineage::TemporalLayer&>(::seigr::lineage::_TemporalLayer_default_instance_);
}
inline const ::seigr::lineage::TemporalLayer& TemporalSnapshotResponse::snapshot_layer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.snapshot_layer)
  return _internal_snapshot_layer();
}
inline void TemporalSnapshotResponse::unsafe_arena_set_allocated_snapshot_layer(::seigr::lineage::TemporalLayer* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snapshot_layer_);
  }
  _impl_.snapshot_layer_ = reinterpret_cast<::seigr::lineage::TemporalLayer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.temporal.TemporalSnapshotResponse.snapshot_layer)
}
inline ::seigr::lineage::TemporalLayer* TemporalSnapshotResponse::release_snapshot_layer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::lineage::TemporalLayer* released = _impl_.snapshot_layer_;
  _impl_.snapshot_layer_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::lineage::TemporalLayer* TemporalSnapshotResponse::unsafe_arena_release_snapshot_layer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotResponse.snapshot_layer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::lineage::TemporalLayer* temp = _impl_.snapshot_layer_;
  _impl_.snapshot_layer_ = nullptr;
  return temp;
}
inline ::seigr::lineage::TemporalLayer* TemporalSnapshotResponse::_internal_mutable_snapshot_layer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.snapshot_layer_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::lineage::TemporalLayer>(GetArena());
    _impl_.snapshot_layer_ = reinterpret_cast<::seigr::lineage::TemporalLayer*>(p);
  }
  return _impl_.snapshot_layer_;
}
inline ::seigr::lineage::TemporalLayer* TemporalSnapshotResponse::mutable_snapshot_layer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::lineage::TemporalLayer* _msg = _internal_mutable_snapshot_layer();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotResponse.snapshot_layer)
  return _msg;
}
inline void TemporalSnapshotResponse::set_allocated_snapshot_layer(::seigr::lineage::TemporalLayer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snapshot_layer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.snapshot_layer_ = reinterpret_cast<::seigr::lineage::TemporalLayer*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotResponse.snapshot_layer)
}

// bool success = 3;
inline void TemporalSnapshotResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool TemporalSnapshotResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.success)
  return _internal_success();
}
inline void TemporalSnapshotResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.success)
}
inline bool TemporalSnapshotResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void TemporalSnapshotResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 4;
inline void TemporalSnapshotResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.error_message)
}
inline std::string* TemporalSnapshotResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotResponse.error_message)
  return _s;
}
inline const std::string& TemporalSnapshotResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void TemporalSnapshotResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void TemporalSnapshotResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotResponse.error_message)
}

// map<string, string> response_metadata = 5;
inline int TemporalSnapshotResponse::_internal_response_metadata_size() const {
  return _internal_response_metadata().size();
}
inline int TemporalSnapshotResponse::response_metadata_size() const {
  return _internal_response_metadata_size();
}
inline void TemporalSnapshotResponse::clear_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalSnapshotResponse::_internal_response_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalSnapshotResponse::response_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalSnapshotResponse.response_metadata)
  return _internal_response_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalSnapshotResponse::_internal_mutable_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalSnapshotResponse::mutable_response_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalSnapshotResponse.response_metadata)
  return _internal_mutable_response_metadata();
}

// string retrieved_timestamp = 6;
inline void TemporalSnapshotResponse::clear_retrieved_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieved_timestamp_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotResponse::retrieved_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.retrieved_timestamp)
  return _internal_retrieved_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotResponse::set_retrieved_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieved_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.retrieved_timestamp)
}
inline std::string* TemporalSnapshotResponse::mutable_retrieved_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retrieved_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotResponse.retrieved_timestamp)
  return _s;
}
inline const std::string& TemporalSnapshotResponse::_internal_retrieved_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retrieved_timestamp_.Get();
}
inline void TemporalSnapshotResponse::_internal_set_retrieved_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieved_timestamp_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotResponse::_internal_mutable_retrieved_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retrieved_timestamp_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotResponse::release_retrieved_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotResponse.retrieved_timestamp)
  return _impl_.retrieved_timestamp_.Release();
}
inline void TemporalSnapshotResponse::set_allocated_retrieved_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieved_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.retrieved_timestamp_.IsDefault()) {
    _impl_.retrieved_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotResponse.retrieved_timestamp)
}

// int64 retrieval_duration_ms = 7;
inline void TemporalSnapshotResponse::clear_retrieval_duration_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_duration_ms_ = ::int64_t{0};
}
inline ::int64_t TemporalSnapshotResponse::retrieval_duration_ms() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.retrieval_duration_ms)
  return _internal_retrieval_duration_ms();
}
inline void TemporalSnapshotResponse::set_retrieval_duration_ms(::int64_t value) {
  _internal_set_retrieval_duration_ms(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.retrieval_duration_ms)
}
inline ::int64_t TemporalSnapshotResponse::_internal_retrieval_duration_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retrieval_duration_ms_;
}
inline void TemporalSnapshotResponse::_internal_set_retrieval_duration_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_duration_ms_ = value;
}

// string snapshot_source = 8;
inline void TemporalSnapshotResponse::clear_snapshot_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_source_.ClearToEmpty();
}
inline const std::string& TemporalSnapshotResponse::snapshot_source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalSnapshotResponse.snapshot_source)
  return _internal_snapshot_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalSnapshotResponse::set_snapshot_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalSnapshotResponse.snapshot_source)
}
inline std::string* TemporalSnapshotResponse::mutable_snapshot_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_snapshot_source();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalSnapshotResponse.snapshot_source)
  return _s;
}
inline const std::string& TemporalSnapshotResponse::_internal_snapshot_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snapshot_source_.Get();
}
inline void TemporalSnapshotResponse::_internal_set_snapshot_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_source_.Set(value, GetArena());
}
inline std::string* TemporalSnapshotResponse::_internal_mutable_snapshot_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.snapshot_source_.Mutable( GetArena());
}
inline std::string* TemporalSnapshotResponse::release_snapshot_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalSnapshotResponse.snapshot_source)
  return _impl_.snapshot_source_.Release();
}
inline void TemporalSnapshotResponse::set_allocated_snapshot_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.snapshot_source_.IsDefault()) {
    _impl_.snapshot_source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalSnapshotResponse.snapshot_source)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalMergeRequest

// string merge_id = 1;
inline void TemporalMergeRequest::clear_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.ClearToEmpty();
}
inline const std::string& TemporalMergeRequest::merge_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.merge_id)
  return _internal_merge_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeRequest::set_merge_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.merge_id)
}
inline std::string* TemporalMergeRequest::mutable_merge_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_merge_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeRequest.merge_id)
  return _s;
}
inline const std::string& TemporalMergeRequest::_internal_merge_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_id_.Get();
}
inline void TemporalMergeRequest::_internal_set_merge_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.Set(value, GetArena());
}
inline std::string* TemporalMergeRequest::_internal_mutable_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.merge_id_.Mutable( GetArena());
}
inline std::string* TemporalMergeRequest::release_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeRequest.merge_id)
  return _impl_.merge_id_.Release();
}
inline void TemporalMergeRequest::set_allocated_merge_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.merge_id_.IsDefault()) {
    _impl_.merge_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeRequest.merge_id)
}

// repeated string layer_ids = 2;
inline int TemporalMergeRequest::_internal_layer_ids_size() const {
  return _internal_layer_ids().size();
}
inline int TemporalMergeRequest::layer_ids_size() const {
  return _internal_layer_ids_size();
}
inline void TemporalMergeRequest::clear_layer_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_ids_.Clear();
}
inline std::string* TemporalMergeRequest::add_layer_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_layer_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.temporal.TemporalMergeRequest.layer_ids)
  return _s;
}
inline const std::string& TemporalMergeRequest::layer_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.layer_ids)
  return _internal_layer_ids().Get(index);
}
inline std::string* TemporalMergeRequest::mutable_layer_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeRequest.layer_ids)
  return _internal_mutable_layer_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TemporalMergeRequest::set_layer_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_layer_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.layer_ids)
}
template <typename Arg_, typename... Args_>
inline void TemporalMergeRequest::add_layer_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_layer_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.temporal.TemporalMergeRequest.layer_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TemporalMergeRequest::layer_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.temporal.TemporalMergeRequest.layer_ids)
  return _internal_layer_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TemporalMergeRequest::mutable_layer_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.temporal.TemporalMergeRequest.layer_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layer_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TemporalMergeRequest::_internal_layer_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layer_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TemporalMergeRequest::_internal_mutable_layer_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layer_ids_;
}

// string target_id = 3;
inline void TemporalMergeRequest::clear_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& TemporalMergeRequest::target_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.target_id)
  return _internal_target_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeRequest::set_target_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.target_id)
}
inline std::string* TemporalMergeRequest::mutable_target_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeRequest.target_id)
  return _s;
}
inline const std::string& TemporalMergeRequest::_internal_target_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_id_.Get();
}
inline void TemporalMergeRequest::_internal_set_target_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.Set(value, GetArena());
}
inline std::string* TemporalMergeRequest::_internal_mutable_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_id_.Mutable( GetArena());
}
inline std::string* TemporalMergeRequest::release_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void TemporalMergeRequest::set_allocated_target_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_id_.IsDefault()) {
    _impl_.target_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeRequest.target_id)
}

// string initiated_by = 4;
inline void TemporalMergeRequest::clear_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.ClearToEmpty();
}
inline const std::string& TemporalMergeRequest::initiated_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.initiated_by)
  return _internal_initiated_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeRequest::set_initiated_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.initiated_by)
}
inline std::string* TemporalMergeRequest::mutable_initiated_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initiated_by();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeRequest.initiated_by)
  return _s;
}
inline const std::string& TemporalMergeRequest::_internal_initiated_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initiated_by_.Get();
}
inline void TemporalMergeRequest::_internal_set_initiated_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(value, GetArena());
}
inline std::string* TemporalMergeRequest::_internal_mutable_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initiated_by_.Mutable( GetArena());
}
inline std::string* TemporalMergeRequest::release_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeRequest.initiated_by)
  return _impl_.initiated_by_.Release();
}
inline void TemporalMergeRequest::set_allocated_initiated_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initiated_by_.IsDefault()) {
    _impl_.initiated_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeRequest.initiated_by)
}

// .seigr.temporal.TemporalMergeType merge_type = 5;
inline void TemporalMergeRequest::clear_merge_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_type_ = 0;
}
inline ::seigr::temporal::TemporalMergeType TemporalMergeRequest::merge_type() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.merge_type)
  return _internal_merge_type();
}
inline void TemporalMergeRequest::set_merge_type(::seigr::temporal::TemporalMergeType value) {
  _internal_set_merge_type(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.merge_type)
}
inline ::seigr::temporal::TemporalMergeType TemporalMergeRequest::_internal_merge_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::temporal::TemporalMergeType>(_impl_.merge_type_);
}
inline void TemporalMergeRequest::_internal_set_merge_type(::seigr::temporal::TemporalMergeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_type_ = value;
}

// map<string, string> merge_metadata = 6;
inline int TemporalMergeRequest::_internal_merge_metadata_size() const {
  return _internal_merge_metadata().size();
}
inline int TemporalMergeRequest::merge_metadata_size() const {
  return _internal_merge_metadata_size();
}
inline void TemporalMergeRequest::clear_merge_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalMergeRequest::_internal_merge_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalMergeRequest::merge_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalMergeRequest.merge_metadata)
  return _internal_merge_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalMergeRequest::_internal_mutable_merge_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.merge_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalMergeRequest::mutable_merge_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalMergeRequest.merge_metadata)
  return _internal_mutable_merge_metadata();
}

// bool retain_originals = 7;
inline void TemporalMergeRequest::clear_retain_originals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_originals_ = false;
}
inline bool TemporalMergeRequest::retain_originals() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeRequest.retain_originals)
  return _internal_retain_originals();
}
inline void TemporalMergeRequest::set_retain_originals(bool value) {
  _internal_set_retain_originals(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeRequest.retain_originals)
}
inline bool TemporalMergeRequest::_internal_retain_originals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retain_originals_;
}
inline void TemporalMergeRequest::_internal_set_retain_originals(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_originals_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalMergeResponse

// string merge_id = 1;
inline void TemporalMergeResponse::clear_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.ClearToEmpty();
}
inline const std::string& TemporalMergeResponse::merge_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeResponse.merge_id)
  return _internal_merge_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeResponse::set_merge_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeResponse.merge_id)
}
inline std::string* TemporalMergeResponse::mutable_merge_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_merge_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeResponse.merge_id)
  return _s;
}
inline const std::string& TemporalMergeResponse::_internal_merge_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_id_.Get();
}
inline void TemporalMergeResponse::_internal_set_merge_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.Set(value, GetArena());
}
inline std::string* TemporalMergeResponse::_internal_mutable_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.merge_id_.Mutable( GetArena());
}
inline std::string* TemporalMergeResponse::release_merge_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeResponse.merge_id)
  return _impl_.merge_id_.Release();
}
inline void TemporalMergeResponse::set_allocated_merge_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.merge_id_.IsDefault()) {
    _impl_.merge_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeResponse.merge_id)
}

// bool success = 2;
inline void TemporalMergeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool TemporalMergeResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeResponse.success)
  return _internal_success();
}
inline void TemporalMergeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeResponse.success)
}
inline bool TemporalMergeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void TemporalMergeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string merged_layer_id = 3;
inline void TemporalMergeResponse::clear_merged_layer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merged_layer_id_.ClearToEmpty();
}
inline const std::string& TemporalMergeResponse::merged_layer_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeResponse.merged_layer_id)
  return _internal_merged_layer_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeResponse::set_merged_layer_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merged_layer_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeResponse.merged_layer_id)
}
inline std::string* TemporalMergeResponse::mutable_merged_layer_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_merged_layer_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeResponse.merged_layer_id)
  return _s;
}
inline const std::string& TemporalMergeResponse::_internal_merged_layer_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merged_layer_id_.Get();
}
inline void TemporalMergeResponse::_internal_set_merged_layer_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merged_layer_id_.Set(value, GetArena());
}
inline std::string* TemporalMergeResponse::_internal_mutable_merged_layer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.merged_layer_id_.Mutable( GetArena());
}
inline std::string* TemporalMergeResponse::release_merged_layer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeResponse.merged_layer_id)
  return _impl_.merged_layer_id_.Release();
}
inline void TemporalMergeResponse::set_allocated_merged_layer_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merged_layer_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.merged_layer_id_.IsDefault()) {
    _impl_.merged_layer_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeResponse.merged_layer_id)
}

// string error_message = 4;
inline void TemporalMergeResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& TemporalMergeResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalMergeResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeResponse.error_message)
}
inline std::string* TemporalMergeResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalMergeResponse.error_message)
  return _s;
}
inline const std::string& TemporalMergeResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void TemporalMergeResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* TemporalMergeResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* TemporalMergeResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalMergeResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void TemporalMergeResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalMergeResponse.error_message)
}

// map<string, string> response_metadata = 5;
inline int TemporalMergeResponse::_internal_response_metadata_size() const {
  return _internal_response_metadata().size();
}
inline int TemporalMergeResponse::response_metadata_size() const {
  return _internal_response_metadata_size();
}
inline void TemporalMergeResponse::clear_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalMergeResponse::_internal_response_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalMergeResponse::response_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalMergeResponse.response_metadata)
  return _internal_response_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalMergeResponse::_internal_mutable_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalMergeResponse::mutable_response_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalMergeResponse.response_metadata)
  return _internal_mutable_response_metadata();
}

// int64 merge_duration_ms = 6;
inline void TemporalMergeResponse::clear_merge_duration_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_duration_ms_ = ::int64_t{0};
}
inline ::int64_t TemporalMergeResponse::merge_duration_ms() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalMergeResponse.merge_duration_ms)
  return _internal_merge_duration_ms();
}
inline void TemporalMergeResponse::set_merge_duration_ms(::int64_t value) {
  _internal_set_merge_duration_ms(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalMergeResponse.merge_duration_ms)
}
inline ::int64_t TemporalMergeResponse::_internal_merge_duration_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_duration_ms_;
}
inline void TemporalMergeResponse::_internal_set_merge_duration_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_duration_ms_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalPolicy

// string policy_id = 1;
inline void TemporalPolicy::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& TemporalPolicy::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalPolicy::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.policy_id)
}
inline std::string* TemporalPolicy::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalPolicy.policy_id)
  return _s;
}
inline const std::string& TemporalPolicy::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void TemporalPolicy::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* TemporalPolicy::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* TemporalPolicy::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalPolicy.policy_id)
  return _impl_.policy_id_.Release();
}
inline void TemporalPolicy::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalPolicy.policy_id)
}

// string policy_name = 2;
inline void TemporalPolicy::clear_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.ClearToEmpty();
}
inline const std::string& TemporalPolicy::policy_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.policy_name)
  return _internal_policy_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalPolicy::set_policy_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.policy_name)
}
inline std::string* TemporalPolicy::mutable_policy_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_name();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalPolicy.policy_name)
  return _s;
}
inline const std::string& TemporalPolicy::_internal_policy_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_name_.Get();
}
inline void TemporalPolicy::_internal_set_policy_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.Set(value, GetArena());
}
inline std::string* TemporalPolicy::_internal_mutable_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_name_.Mutable( GetArena());
}
inline std::string* TemporalPolicy::release_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalPolicy.policy_name)
  return _impl_.policy_name_.Release();
}
inline void TemporalPolicy::set_allocated_policy_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_name_.IsDefault()) {
    _impl_.policy_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalPolicy.policy_name)
}

// int32 retention_duration_days = 3;
inline void TemporalPolicy::clear_retention_duration_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_duration_days_ = 0;
}
inline ::int32_t TemporalPolicy::retention_duration_days() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.retention_duration_days)
  return _internal_retention_duration_days();
}
inline void TemporalPolicy::set_retention_duration_days(::int32_t value) {
  _internal_set_retention_duration_days(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.retention_duration_days)
}
inline ::int32_t TemporalPolicy::_internal_retention_duration_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retention_duration_days_;
}
inline void TemporalPolicy::_internal_set_retention_duration_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_duration_days_ = value;
}

// bool enable_automatic_merging = 4;
inline void TemporalPolicy::clear_enable_automatic_merging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_merging_ = false;
}
inline bool TemporalPolicy::enable_automatic_merging() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.enable_automatic_merging)
  return _internal_enable_automatic_merging();
}
inline void TemporalPolicy::set_enable_automatic_merging(bool value) {
  _internal_set_enable_automatic_merging(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.enable_automatic_merging)
}
inline bool TemporalPolicy::_internal_enable_automatic_merging() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_automatic_merging_;
}
inline void TemporalPolicy::_internal_set_enable_automatic_merging(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_merging_ = value;
}

// int32 merge_frequency_days = 5;
inline void TemporalPolicy::clear_merge_frequency_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_frequency_days_ = 0;
}
inline ::int32_t TemporalPolicy::merge_frequency_days() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.merge_frequency_days)
  return _internal_merge_frequency_days();
}
inline void TemporalPolicy::set_merge_frequency_days(::int32_t value) {
  _internal_set_merge_frequency_days(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.merge_frequency_days)
}
inline ::int32_t TemporalPolicy::_internal_merge_frequency_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.merge_frequency_days_;
}
inline void TemporalPolicy::_internal_set_merge_frequency_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.merge_frequency_days_ = value;
}

// bool enable_snapshot_deletion = 6;
inline void TemporalPolicy::clear_enable_snapshot_deletion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_snapshot_deletion_ = false;
}
inline bool TemporalPolicy::enable_snapshot_deletion() const {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.enable_snapshot_deletion)
  return _internal_enable_snapshot_deletion();
}
inline void TemporalPolicy::set_enable_snapshot_deletion(bool value) {
  _internal_set_enable_snapshot_deletion(value);
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.enable_snapshot_deletion)
}
inline bool TemporalPolicy::_internal_enable_snapshot_deletion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_snapshot_deletion_;
}
inline void TemporalPolicy::_internal_set_enable_snapshot_deletion(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_snapshot_deletion_ = value;
}

// string deletion_criteria = 7;
inline void TemporalPolicy::clear_deletion_criteria() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletion_criteria_.ClearToEmpty();
}
inline const std::string& TemporalPolicy::deletion_criteria() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.deletion_criteria)
  return _internal_deletion_criteria();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalPolicy::set_deletion_criteria(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletion_criteria_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.deletion_criteria)
}
inline std::string* TemporalPolicy::mutable_deletion_criteria() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deletion_criteria();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalPolicy.deletion_criteria)
  return _s;
}
inline const std::string& TemporalPolicy::_internal_deletion_criteria() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deletion_criteria_.Get();
}
inline void TemporalPolicy::_internal_set_deletion_criteria(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletion_criteria_.Set(value, GetArena());
}
inline std::string* TemporalPolicy::_internal_mutable_deletion_criteria() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deletion_criteria_.Mutable( GetArena());
}
inline std::string* TemporalPolicy::release_deletion_criteria() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalPolicy.deletion_criteria)
  return _impl_.deletion_criteria_.Release();
}
inline void TemporalPolicy::set_allocated_deletion_criteria(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deletion_criteria_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deletion_criteria_.IsDefault()) {
    _impl_.deletion_criteria_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalPolicy.deletion_criteria)
}

// map<string, string> policy_metadata = 8;
inline int TemporalPolicy::_internal_policy_metadata_size() const {
  return _internal_policy_metadata().size();
}
inline int TemporalPolicy::policy_metadata_size() const {
  return _internal_policy_metadata_size();
}
inline void TemporalPolicy::clear_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalPolicy::_internal_policy_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalPolicy::policy_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalPolicy.policy_metadata)
  return _internal_policy_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalPolicy::_internal_mutable_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalPolicy::mutable_policy_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalPolicy.policy_metadata)
  return _internal_mutable_policy_metadata();
}

// string created_by = 9;
inline void TemporalPolicy::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& TemporalPolicy::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalPolicy::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.created_by)
}
inline std::string* TemporalPolicy::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalPolicy.created_by)
  return _s;
}
inline const std::string& TemporalPolicy::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void TemporalPolicy::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* TemporalPolicy::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* TemporalPolicy::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalPolicy.created_by)
  return _impl_.created_by_.Release();
}
inline void TemporalPolicy::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalPolicy.created_by)
}

// string created_at = 10;
inline void TemporalPolicy::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& TemporalPolicy::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalPolicy.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalPolicy::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalPolicy.created_at)
}
inline std::string* TemporalPolicy::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalPolicy.created_at)
  return _s;
}
inline const std::string& TemporalPolicy::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void TemporalPolicy::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* TemporalPolicy::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* TemporalPolicy::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalPolicy.created_at)
  return _impl_.created_at_.Release();
}
inline void TemporalPolicy::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalPolicy.created_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemporalAuditLog

// string log_id = 1;
inline void TemporalAuditLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.log_id)
}
inline std::string* TemporalAuditLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.log_id)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void TemporalAuditLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.log_id)
  return _impl_.log_id_.Release();
}
inline void TemporalAuditLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.log_id)
}

// string temporal_id = 2;
inline void TemporalAuditLog::clear_temporal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_id_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::temporal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.temporal_id)
  return _internal_temporal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_temporal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.temporal_id)
}
inline std::string* TemporalAuditLog::mutable_temporal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_temporal_id();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.temporal_id)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_temporal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temporal_id_.Get();
}
inline void TemporalAuditLog::_internal_set_temporal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_id_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_temporal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.temporal_id_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_temporal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.temporal_id)
  return _impl_.temporal_id_.Release();
}
inline void TemporalAuditLog::set_allocated_temporal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.temporal_id_.IsDefault()) {
    _impl_.temporal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.temporal_id)
}

// string action = 3;
inline void TemporalAuditLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.action)
}
inline std::string* TemporalAuditLog::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.action)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void TemporalAuditLog::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.action)
  return _impl_.action_.Release();
}
inline void TemporalAuditLog::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.action)
}

// string action_by = 4;
inline void TemporalAuditLog::clear_action_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_by_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::action_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.action_by)
  return _internal_action_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_action_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.action_by)
}
inline std::string* TemporalAuditLog::mutable_action_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_by();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.action_by)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_action_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_by_.Get();
}
inline void TemporalAuditLog::_internal_set_action_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_by_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_action_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_by_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_action_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.action_by)
  return _impl_.action_by_.Release();
}
inline void TemporalAuditLog::set_allocated_action_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_by_.IsDefault()) {
    _impl_.action_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.action_by)
}

// string timestamp = 5;
inline void TemporalAuditLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.timestamp)
}
inline std::string* TemporalAuditLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.timestamp)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void TemporalAuditLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void TemporalAuditLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.timestamp)
}

// map<string, string> audit_metadata = 6;
inline int TemporalAuditLog::_internal_audit_metadata_size() const {
  return _internal_audit_metadata().size();
}
inline int TemporalAuditLog::audit_metadata_size() const {
  return _internal_audit_metadata_size();
}
inline void TemporalAuditLog::clear_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalAuditLog::_internal_audit_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TemporalAuditLog::audit_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.temporal.TemporalAuditLog.audit_metadata)
  return _internal_audit_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalAuditLog::_internal_mutable_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audit_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TemporalAuditLog::mutable_audit_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.temporal.TemporalAuditLog.audit_metadata)
  return _internal_mutable_audit_metadata();
}

// string status = 7;
inline void TemporalAuditLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& TemporalAuditLog::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.temporal.TemporalAuditLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TemporalAuditLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.temporal.TemporalAuditLog.status)
}
inline std::string* TemporalAuditLog::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.temporal.TemporalAuditLog.status)
  return _s;
}
inline const std::string& TemporalAuditLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void TemporalAuditLog::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* TemporalAuditLog::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* TemporalAuditLog::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.temporal.TemporalAuditLog.status)
  return _impl_.status_.Release();
}
inline void TemporalAuditLog::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.temporal.TemporalAuditLog.status)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace temporal
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::temporal::TemporalMergeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::temporal::TemporalMergeType>() {
  return ::seigr::temporal::TemporalMergeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // temporal_2eproto_2epb_2eh
