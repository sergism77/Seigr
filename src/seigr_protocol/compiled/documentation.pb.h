// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: documentation.proto
// Protobuf C++ Version: 5.29.2

#ifndef documentation_2eproto_2epb_2eh
#define documentation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_documentation_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_documentation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_documentation_2eproto;
namespace seigr {
namespace documentation {
class Document;
struct DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_MetadataEntry_DoNotUse;
struct Document_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Document_MetadataEntry_DoNotUseDefaultTypeInternal _Document_MetadataEntry_DoNotUse_default_instance_;
class KnowledgeBaseEntry;
struct KnowledgeBaseEntryDefaultTypeInternal;
extern KnowledgeBaseEntryDefaultTypeInternal _KnowledgeBaseEntry_default_instance_;
class KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse;
struct KnowledgeBaseEntry_EntryMetadataEntry_DoNotUseDefaultTypeInternal;
extern KnowledgeBaseEntry_EntryMetadataEntry_DoNotUseDefaultTypeInternal _KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse_default_instance_;
class Runbook;
struct RunbookDefaultTypeInternal;
extern RunbookDefaultTypeInternal _Runbook_default_instance_;
class Runbook_RunbookMetadataEntry_DoNotUse;
struct Runbook_RunbookMetadataEntry_DoNotUseDefaultTypeInternal;
extern Runbook_RunbookMetadataEntry_DoNotUseDefaultTypeInternal _Runbook_RunbookMetadataEntry_DoNotUse_default_instance_;
}  // namespace documentation
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace documentation {

// ===================================================================


// -------------------------------------------------------------------

class Runbook_RunbookMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Runbook_RunbookMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Runbook_RunbookMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Runbook_RunbookMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Runbook_RunbookMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Runbook_RunbookMetadataEntry_DoNotUse*>(
        &_Runbook_RunbookMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_documentation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse*>(
        &_KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_documentation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Document_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Document_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Document_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Document_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Document_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Document_MetadataEntry_DoNotUse*>(
        &_Document_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_documentation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Runbook final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.documentation.Runbook) */ {
 public:
  inline Runbook() : Runbook(nullptr) {}
  ~Runbook() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Runbook* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Runbook));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Runbook(
      ::google::protobuf::internal::ConstantInitialized);

  inline Runbook(const Runbook& from) : Runbook(nullptr, from) {}
  inline Runbook(Runbook&& from) noexcept
      : Runbook(nullptr, std::move(from)) {}
  inline Runbook& operator=(const Runbook& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runbook& operator=(Runbook&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Runbook& default_instance() {
    return *internal_default_instance();
  }
  static inline const Runbook* internal_default_instance() {
    return reinterpret_cast<const Runbook*>(
        &_Runbook_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Runbook& a, Runbook& b) { a.Swap(&b); }
  inline void Swap(Runbook* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Runbook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Runbook* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Runbook>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Runbook& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Runbook& from) { Runbook::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Runbook* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.documentation.Runbook"; }

 protected:
  explicit Runbook(::google::protobuf::Arena* arena);
  Runbook(::google::protobuf::Arena* arena, const Runbook& from);
  Runbook(::google::protobuf::Arena* arena, Runbook&& from) noexcept
      : Runbook(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStepsFieldNumber = 3,
    kRunbookMetadataFieldNumber = 6,
    kRunbookIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kCreatedByFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
  };
  // repeated string steps = 3;
  int steps_size() const;
  private:
  int _internal_steps_size() const;

  public:
  void clear_steps() ;
  const std::string& steps(int index) const;
  std::string* mutable_steps(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_steps(int index, Arg_&& value, Args_... args);
  std::string* add_steps();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_steps(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& steps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_steps();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_steps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_steps();

  public:
  // map<string, string> runbook_metadata = 6;
  int runbook_metadata_size() const;
  private:
  int _internal_runbook_metadata_size() const;

  public:
  void clear_runbook_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& runbook_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_runbook_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_runbook_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_runbook_metadata();

  public:
  // string runbook_id = 1;
  void clear_runbook_id() ;
  const std::string& runbook_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_runbook_id(Arg_&& arg, Args_... args);
  std::string* mutable_runbook_id();
  PROTOBUF_NODISCARD std::string* release_runbook_id();
  void set_allocated_runbook_id(std::string* value);

  private:
  const std::string& _internal_runbook_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runbook_id(
      const std::string& value);
  std::string* _internal_mutable_runbook_id();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string created_by = 4;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 5;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.documentation.Runbook)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      92, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Runbook& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> steps_;
    ::google::protobuf::internal::MapField<Runbook_RunbookMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        runbook_metadata_;
    ::google::protobuf::internal::ArenaStringPtr runbook_id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_documentation_2eproto;
};
// -------------------------------------------------------------------

class KnowledgeBaseEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.documentation.KnowledgeBaseEntry) */ {
 public:
  inline KnowledgeBaseEntry() : KnowledgeBaseEntry(nullptr) {}
  ~KnowledgeBaseEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KnowledgeBaseEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KnowledgeBaseEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KnowledgeBaseEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline KnowledgeBaseEntry(const KnowledgeBaseEntry& from) : KnowledgeBaseEntry(nullptr, from) {}
  inline KnowledgeBaseEntry(KnowledgeBaseEntry&& from) noexcept
      : KnowledgeBaseEntry(nullptr, std::move(from)) {}
  inline KnowledgeBaseEntry& operator=(const KnowledgeBaseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeBaseEntry& operator=(KnowledgeBaseEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KnowledgeBaseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const KnowledgeBaseEntry* internal_default_instance() {
    return reinterpret_cast<const KnowledgeBaseEntry*>(
        &_KnowledgeBaseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(KnowledgeBaseEntry& a, KnowledgeBaseEntry& b) { a.Swap(&b); }
  inline void Swap(KnowledgeBaseEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnowledgeBaseEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KnowledgeBaseEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KnowledgeBaseEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KnowledgeBaseEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KnowledgeBaseEntry& from) { KnowledgeBaseEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KnowledgeBaseEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.documentation.KnowledgeBaseEntry"; }

 protected:
  explicit KnowledgeBaseEntry(::google::protobuf::Arena* arena);
  KnowledgeBaseEntry(::google::protobuf::Arena* arena, const KnowledgeBaseEntry& from);
  KnowledgeBaseEntry(::google::protobuf::Arena* arena, KnowledgeBaseEntry&& from) noexcept
      : KnowledgeBaseEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntryMetadataFieldNumber = 6,
    kEntryIdFieldNumber = 1,
    kQuestionFieldNumber = 2,
    kAnswerFieldNumber = 3,
    kCreatedByFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
  };
  // map<string, string> entry_metadata = 6;
  int entry_metadata_size() const;
  private:
  int _internal_entry_metadata_size() const;

  public:
  void clear_entry_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& entry_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_entry_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_entry_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_entry_metadata();

  public:
  // string entry_id = 1;
  void clear_entry_id() ;
  const std::string& entry_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry_id(Arg_&& arg, Args_... args);
  std::string* mutable_entry_id();
  PROTOBUF_NODISCARD std::string* release_entry_id();
  void set_allocated_entry_id(std::string* value);

  private:
  const std::string& _internal_entry_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_id(
      const std::string& value);
  std::string* _internal_mutable_entry_id();

  public:
  // string question = 2;
  void clear_question() ;
  const std::string& question() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_question(Arg_&& arg, Args_... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* value);

  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(
      const std::string& value);
  std::string* _internal_mutable_question();

  public:
  // string answer = 3;
  void clear_answer() ;
  const std::string& answer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_answer(Arg_&& arg, Args_... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* value);

  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(
      const std::string& value);
  std::string* _internal_mutable_answer();

  public:
  // string created_by = 4;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 5;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.documentation.KnowledgeBaseEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KnowledgeBaseEntry& from_msg);
    ::google::protobuf::internal::MapField<KnowledgeBaseEntry_EntryMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        entry_metadata_;
    ::google::protobuf::internal::ArenaStringPtr entry_id_;
    ::google::protobuf::internal::ArenaStringPtr question_;
    ::google::protobuf::internal::ArenaStringPtr answer_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_documentation_2eproto;
};
// -------------------------------------------------------------------

class Document final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.documentation.Document) */ {
 public:
  inline Document() : Document(nullptr) {}
  ~Document() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Document* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Document));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Document(
      ::google::protobuf::internal::ConstantInitialized);

  inline Document(const Document& from) : Document(nullptr, from) {}
  inline Document(Document&& from) noexcept
      : Document(nullptr, std::move(from)) {}
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Document& default_instance() {
    return *internal_default_instance();
  }
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
        &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Document& a, Document& b) { a.Swap(&b); }
  inline void Swap(Document* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Document* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Document>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Document& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Document& from) { Document::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Document* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.documentation.Document"; }

 protected:
  explicit Document(::google::protobuf::Arena* arena);
  Document(::google::protobuf::Arena* arena, const Document& from);
  Document(::google::protobuf::Arena* arena, Document&& from) noexcept
      : Document(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kDocumentIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kVersionFieldNumber = 3,
    kContentFieldNumber = 4,
    kAuthorFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string document_id = 1;
  void clear_document_id() ;
  const std::string& document_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_document_id(Arg_&& arg, Args_... args);
  std::string* mutable_document_id();
  PROTOBUF_NODISCARD std::string* release_document_id();
  void set_allocated_document_id(std::string* value);

  private:
  const std::string& _internal_document_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_id(
      const std::string& value);
  std::string* _internal_mutable_document_id();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string version = 3;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string content = 4;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string author = 5;
  void clear_author() ;
  const std::string& author() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* value);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // string created_at = 6;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.documentation.Document)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      91, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Document& from_msg);
    ::google::protobuf::internal::MapField<Document_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr document_id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr author_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_documentation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Document

// string document_id = 1;
inline void Document::clear_document_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.document_id_.ClearToEmpty();
}
inline const std::string& Document::document_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.document_id)
  return _internal_document_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_document_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.document_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.document_id)
}
inline std::string* Document::mutable_document_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_document_id();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.document_id)
  return _s;
}
inline const std::string& Document::_internal_document_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.document_id_.Get();
}
inline void Document::_internal_set_document_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.document_id_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_document_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.document_id_.Mutable( GetArena());
}
inline std::string* Document::release_document_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.document_id)
  return _impl_.document_id_.Release();
}
inline void Document::set_allocated_document_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.document_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.document_id_.IsDefault()) {
    _impl_.document_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.document_id)
}

// string title = 2;
inline void Document::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Document::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.title)
}
inline std::string* Document::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.title)
  return _s;
}
inline const std::string& Document::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Document::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Document::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.title)
  return _impl_.title_.Release();
}
inline void Document::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.title)
}

// string version = 3;
inline void Document::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Document::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.version)
}
inline std::string* Document::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.version)
  return _s;
}
inline const std::string& Document::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void Document::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Document::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.version)
  return _impl_.version_.Release();
}
inline void Document::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.version)
}

// string content = 4;
inline void Document::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Document::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.content)
}
inline std::string* Document::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.content)
  return _s;
}
inline const std::string& Document::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void Document::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Document::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.content)
  return _impl_.content_.Release();
}
inline void Document::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.content)
}

// string author = 5;
inline void Document::clear_author() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_.ClearToEmpty();
}
inline const std::string& Document::author() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_author(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.author)
}
inline std::string* Document::mutable_author() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.author)
  return _s;
}
inline const std::string& Document::_internal_author() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.author_.Get();
}
inline void Document::_internal_set_author(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_author() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.author_.Mutable( GetArena());
}
inline std::string* Document::release_author() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.author)
  return _impl_.author_.Release();
}
inline void Document::set_allocated_author(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.author)
}

// string created_at = 6;
inline void Document::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& Document::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Document.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Document::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Document.created_at)
}
inline std::string* Document::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Document.created_at)
  return _s;
}
inline const std::string& Document::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void Document::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* Document::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* Document::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Document.created_at)
  return _impl_.created_at_.Release();
}
inline void Document::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Document.created_at)
}

// map<string, string> metadata = 7;
inline int Document::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Document::metadata_size() const {
  return _internal_metadata_size();
}
inline void Document::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Document::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Document::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.documentation.Document.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Document::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Document::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.documentation.Document.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// KnowledgeBaseEntry

// string entry_id = 1;
inline void KnowledgeBaseEntry::clear_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.ClearToEmpty();
}
inline const std::string& KnowledgeBaseEntry::entry_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.KnowledgeBaseEntry.entry_id)
  return _internal_entry_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KnowledgeBaseEntry::set_entry_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.KnowledgeBaseEntry.entry_id)
}
inline std::string* KnowledgeBaseEntry::mutable_entry_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entry_id();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.KnowledgeBaseEntry.entry_id)
  return _s;
}
inline const std::string& KnowledgeBaseEntry::_internal_entry_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entry_id_.Get();
}
inline void KnowledgeBaseEntry::_internal_set_entry_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.Set(value, GetArena());
}
inline std::string* KnowledgeBaseEntry::_internal_mutable_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entry_id_.Mutable( GetArena());
}
inline std::string* KnowledgeBaseEntry::release_entry_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.KnowledgeBaseEntry.entry_id)
  return _impl_.entry_id_.Release();
}
inline void KnowledgeBaseEntry::set_allocated_entry_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entry_id_.IsDefault()) {
    _impl_.entry_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.KnowledgeBaseEntry.entry_id)
}

// string question = 2;
inline void KnowledgeBaseEntry::clear_question() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.question_.ClearToEmpty();
}
inline const std::string& KnowledgeBaseEntry::question() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.KnowledgeBaseEntry.question)
  return _internal_question();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KnowledgeBaseEntry::set_question(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.question_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.KnowledgeBaseEntry.question)
}
inline std::string* KnowledgeBaseEntry::mutable_question() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.KnowledgeBaseEntry.question)
  return _s;
}
inline const std::string& KnowledgeBaseEntry::_internal_question() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.question_.Get();
}
inline void KnowledgeBaseEntry::_internal_set_question(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.question_.Set(value, GetArena());
}
inline std::string* KnowledgeBaseEntry::_internal_mutable_question() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.question_.Mutable( GetArena());
}
inline std::string* KnowledgeBaseEntry::release_question() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.KnowledgeBaseEntry.question)
  return _impl_.question_.Release();
}
inline void KnowledgeBaseEntry::set_allocated_question(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.question_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.KnowledgeBaseEntry.question)
}

// string answer = 3;
inline void KnowledgeBaseEntry::clear_answer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& KnowledgeBaseEntry::answer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.KnowledgeBaseEntry.answer)
  return _internal_answer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KnowledgeBaseEntry::set_answer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.answer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.KnowledgeBaseEntry.answer)
}
inline std::string* KnowledgeBaseEntry::mutable_answer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.KnowledgeBaseEntry.answer)
  return _s;
}
inline const std::string& KnowledgeBaseEntry::_internal_answer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.answer_.Get();
}
inline void KnowledgeBaseEntry::_internal_set_answer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.answer_.Set(value, GetArena());
}
inline std::string* KnowledgeBaseEntry::_internal_mutable_answer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.answer_.Mutable( GetArena());
}
inline std::string* KnowledgeBaseEntry::release_answer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.KnowledgeBaseEntry.answer)
  return _impl_.answer_.Release();
}
inline void KnowledgeBaseEntry::set_allocated_answer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.answer_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.answer_.IsDefault()) {
    _impl_.answer_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.KnowledgeBaseEntry.answer)
}

// string created_by = 4;
inline void KnowledgeBaseEntry::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& KnowledgeBaseEntry::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.KnowledgeBaseEntry.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KnowledgeBaseEntry::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.KnowledgeBaseEntry.created_by)
}
inline std::string* KnowledgeBaseEntry::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.KnowledgeBaseEntry.created_by)
  return _s;
}
inline const std::string& KnowledgeBaseEntry::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void KnowledgeBaseEntry::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* KnowledgeBaseEntry::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* KnowledgeBaseEntry::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.KnowledgeBaseEntry.created_by)
  return _impl_.created_by_.Release();
}
inline void KnowledgeBaseEntry::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.KnowledgeBaseEntry.created_by)
}

// string created_at = 5;
inline void KnowledgeBaseEntry::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& KnowledgeBaseEntry::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.KnowledgeBaseEntry.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KnowledgeBaseEntry::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.KnowledgeBaseEntry.created_at)
}
inline std::string* KnowledgeBaseEntry::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.KnowledgeBaseEntry.created_at)
  return _s;
}
inline const std::string& KnowledgeBaseEntry::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void KnowledgeBaseEntry::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* KnowledgeBaseEntry::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* KnowledgeBaseEntry::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.KnowledgeBaseEntry.created_at)
  return _impl_.created_at_.Release();
}
inline void KnowledgeBaseEntry::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.KnowledgeBaseEntry.created_at)
}

// map<string, string> entry_metadata = 6;
inline int KnowledgeBaseEntry::_internal_entry_metadata_size() const {
  return _internal_entry_metadata().size();
}
inline int KnowledgeBaseEntry::entry_metadata_size() const {
  return _internal_entry_metadata_size();
}
inline void KnowledgeBaseEntry::clear_entry_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entry_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& KnowledgeBaseEntry::_internal_entry_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entry_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& KnowledgeBaseEntry::entry_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.documentation.KnowledgeBaseEntry.entry_metadata)
  return _internal_entry_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* KnowledgeBaseEntry::_internal_mutable_entry_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entry_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* KnowledgeBaseEntry::mutable_entry_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.documentation.KnowledgeBaseEntry.entry_metadata)
  return _internal_mutable_entry_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Runbook

// string runbook_id = 1;
inline void Runbook::clear_runbook_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runbook_id_.ClearToEmpty();
}
inline const std::string& Runbook::runbook_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Runbook.runbook_id)
  return _internal_runbook_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Runbook::set_runbook_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runbook_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Runbook.runbook_id)
}
inline std::string* Runbook::mutable_runbook_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_runbook_id();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Runbook.runbook_id)
  return _s;
}
inline const std::string& Runbook::_internal_runbook_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.runbook_id_.Get();
}
inline void Runbook::_internal_set_runbook_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runbook_id_.Set(value, GetArena());
}
inline std::string* Runbook::_internal_mutable_runbook_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.runbook_id_.Mutable( GetArena());
}
inline std::string* Runbook::release_runbook_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Runbook.runbook_id)
  return _impl_.runbook_id_.Release();
}
inline void Runbook::set_allocated_runbook_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runbook_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.runbook_id_.IsDefault()) {
    _impl_.runbook_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Runbook.runbook_id)
}

// string title = 2;
inline void Runbook::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Runbook::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Runbook.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Runbook::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Runbook.title)
}
inline std::string* Runbook::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Runbook.title)
  return _s;
}
inline const std::string& Runbook::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Runbook::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Runbook::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Runbook::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Runbook.title)
  return _impl_.title_.Release();
}
inline void Runbook::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Runbook.title)
}

// repeated string steps = 3;
inline int Runbook::_internal_steps_size() const {
  return _internal_steps().size();
}
inline int Runbook::steps_size() const {
  return _internal_steps_size();
}
inline void Runbook::clear_steps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steps_.Clear();
}
inline std::string* Runbook::add_steps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_steps()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.documentation.Runbook.steps)
  return _s;
}
inline const std::string& Runbook::steps(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Runbook.steps)
  return _internal_steps().Get(index);
}
inline std::string* Runbook::mutable_steps(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Runbook.steps)
  return _internal_mutable_steps()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Runbook::set_steps(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_steps()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.documentation.Runbook.steps)
}
template <typename Arg_, typename... Args_>
inline void Runbook::add_steps(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_steps(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.documentation.Runbook.steps)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Runbook::steps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.documentation.Runbook.steps)
  return _internal_steps();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Runbook::mutable_steps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.documentation.Runbook.steps)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_steps();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Runbook::_internal_steps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steps_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Runbook::_internal_mutable_steps() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.steps_;
}

// string created_by = 4;
inline void Runbook::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& Runbook::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Runbook.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Runbook::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Runbook.created_by)
}
inline std::string* Runbook::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Runbook.created_by)
  return _s;
}
inline const std::string& Runbook::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void Runbook::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* Runbook::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* Runbook::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Runbook.created_by)
  return _impl_.created_by_.Release();
}
inline void Runbook::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Runbook.created_by)
}

// string created_at = 5;
inline void Runbook::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& Runbook::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.documentation.Runbook.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Runbook::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.documentation.Runbook.created_at)
}
inline std::string* Runbook::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.documentation.Runbook.created_at)
  return _s;
}
inline const std::string& Runbook::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void Runbook::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* Runbook::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* Runbook::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.documentation.Runbook.created_at)
  return _impl_.created_at_.Release();
}
inline void Runbook::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.documentation.Runbook.created_at)
}

// map<string, string> runbook_metadata = 6;
inline int Runbook::_internal_runbook_metadata_size() const {
  return _internal_runbook_metadata().size();
}
inline int Runbook::runbook_metadata_size() const {
  return _internal_runbook_metadata_size();
}
inline void Runbook::clear_runbook_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runbook_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Runbook::_internal_runbook_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.runbook_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Runbook::runbook_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.documentation.Runbook.runbook_metadata)
  return _internal_runbook_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Runbook::_internal_mutable_runbook_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.runbook_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Runbook::mutable_runbook_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.documentation.Runbook.runbook_metadata)
  return _internal_mutable_runbook_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace documentation
}  // namespace seigr


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // documentation_2eproto_2epb_2eh
