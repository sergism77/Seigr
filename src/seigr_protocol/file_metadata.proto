syntax = "proto3";

package seigr.file_metadata;

import "segment_metadata.proto"; // Dependency for segment structure
import "lineage.proto";
import "seigr/machine_learning.proto";
import "cell_metadata.proto"; // For centralized CellMetadata
import "google/protobuf/timestamp.proto";

/**
 * File Metadata Protocol
 * 
 * Defines the metadata, operational logs, temporal layers, and access rules
 * associated with files managed in the Seigr ecosystem.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum defining different types of files managed in Seigr.
 */
enum FileType {
    FILE_UNDEFINED = 0;         // Default value, undefined file type.
    FILE_BINARY = 1;            // Binary file format.
    FILE_SENARY = 2;            // Senary file format (custom binary scheme).
    FILE_CUSTOM_FORMAT = 3;     // Placeholder for user-defined custom formats.
    FILE_TEXT = 4;              // Plain text files.
    FILE_IMAGE = 5;             // Image files (e.g., PNG, JPEG).
    FILE_VIDEO = 6;             // Video files (e.g., MP4, AVI).
    FILE_AUDIO = 7;             // Audio files (e.g., MP3, WAV).
    FILE_ARCHIVE = 8;           // Archive files (e.g., ZIP, TAR).
    FILE_DATABASE = 9;          // Database file formats (e.g., SQLite, SQL).
}

/**
 * Enum representing the status of a file.
 */
enum FileStatus {
    FILE_STATUS_UNDEFINED = 0;    // Default value, undefined status.
    FILE_STATUS_ACTIVE = 1;       // File is active and accessible.
    FILE_STATUS_ARCHIVED = 2;     // File is archived for long-term storage.
    FILE_STATUS_PENDING_REVIEW = 3; // File is awaiting review or approval.
    FILE_STATUS_RESTRICTED = 4;   // File access is restricted by policy.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Logs operations performed on a file throughout its lifecycle.
 */
message OperationLog {
    string operation_type = 1;        // Type of operation (e.g., "CREATE", "UPDATE", "ROLLBACK").
    string performed_by = 2;          // ID of the user or system performing the operation.
    string timestamp = 3;             // ISO 8601 timestamp of the operation.
    string status = 4;                // Status of the operation (e.g., "SUCCESS", "FAILURE").
    string details = 5;               // Additional details about the operation.
    map<string, string> metadata = 6; // Contextual metadata for extensibility.
    string error_code = 7;            // Optional error code if the operation failed.
}

/**
 * Defines rules governing file access based on roles and conditions.
 */
message AccessRule {
    string rule_id = 1;                            // Unique identifier for the access rule.
    string role = 2;                               // Role with specific access (e.g., "EDITOR", "VIEWER").
    repeated string permissions = 3;               // List of allowed actions (e.g., "READ", "WRITE").
    string expiration = 4;                         // Expiration timestamp for temporary access.
    string conditions = 5;                         // Conditions (e.g., location-based rules).
    map<string, string> rule_metadata = 6;         // Metadata for extensibility.
}

/**
 * Comprehensive metadata representation for a file in Seigr.
 */
message FileMetadata {
    string version = 1;                            // Version identifier for the `.seigr` format.
    string creator_id = 2;                         // ID of the file creator.
    FileType file_type = 3;                        // Type of the file (e.g., BINARY, TEXT).
    FileStatus file_status = 4;                    // Status of the file (e.g., ACTIVE, ARCHIVED).
    string original_filename = 5;                  // Original name of the file before segmentation.
    string original_extension = 6;                 // Original file extension.
    string creation_timestamp = 7;                 // ISO 8601 timestamp of creation.
    string file_hash = 8;                          // Overall hash for file integrity verification.
    repeated seigr.segment_metadata.SegmentMetadata segments = 9;         // Metadata for file segments.
    repeated seigr.lineage.TemporalLayer temporal_layers = 10;   // Historical rollback layers.
    repeated OperationLog operation_logs = 11;     // Lifecycle operation logs.
    repeated seigr.cell_metadata.CellMetadata metadata = 12;    // Comprehensive metadata for the file.
    string access_policy_id = 13;                  // Reference to an associated access policy.
    string encryption_protocol = 14;               // Encryption protocol used (e.g., AES-256-GCM).
    string network_protocol = 15;                  // Network protocol used (e.g., IPFS, HYPHEN).
    string integrity_verification_hash = 16;       // Comprehensive hash for integrity checks.
    int32 redundancy_level = 17;                   // Redundancy level for data reliability.
    repeated string authorized_users = 18;         // User IDs with access authorization.
    map<string, string> protocol_attributes = 19;  // Attributes specific to network protocols.
    repeated string access_control_list = 20;      // References to access control policies.
    repeated AccessRule access_rules = 21;         // Granular access rules for the file.
    string compliance_requirement = 22;            // Compliance standard (e.g., GDPR, HIPAA).
    string retention_period = 23;                  // Retention period (e.g., "90 days").
    string origin_data_source = 24;                // Origin of the file's data source.
    string last_modified_timestamp = 25;           // ISO 8601 timestamp of last modification.
    repeated string format_conversion_history = 26; // History of file format conversions.
    string primary_backup_location = 27;           // Storage location for primary backups.
}

/**
 * FileFeedback handles feedback specific to file-level operations.
 */
message FileFeedback {
    string feedback_id = 1; // Unique identifier for feedback.
    string file_id = 2; // Associated file ID.
    Feedback feedback_details = 3; // Feedback details from machine_learning.proto.
    string context = 4; // Context or scope of feedback (e.g., performance, integrity).
    google.protobuf.Timestamp timestamp = 5; // Timestamp of feedback creation.
}

/**
 * FileRouting defines routing-related metadata for a file.
 */
message FileRouting {
    string source_file_id = 1; // Source file ID.
    string destination_file_id = 2; // Destination file ID.
    string route_type = 3; // Type of route (e.g., direct, relay).
    map<string, string> attributes = 4; // Additional attributes of the route.
    repeated RouteUpdate dynamic_routes = 5; // Dynamic updates for routing.
}
