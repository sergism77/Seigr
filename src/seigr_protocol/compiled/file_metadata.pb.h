// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: file_metadata.proto
// Protobuf C++ Version: 5.29.2

#ifndef file_5fmetadata_2eproto_2epb_2eh
#define file_5fmetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "segment_metadata.pb.h"
#include "lineage.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_file_5fmetadata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fmetadata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_file_5fmetadata_2eproto;
namespace seigr {
namespace file_metadata {
class AccessRule;
struct AccessRuleDefaultTypeInternal;
extern AccessRuleDefaultTypeInternal _AccessRule_default_instance_;
class AccessRule_RuleMetadataEntry_DoNotUse;
struct AccessRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal;
extern AccessRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal _AccessRule_RuleMetadataEntry_DoNotUse_default_instance_;
class FileMetadata;
struct FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
class FileMetadata_CustomAttributesEntry_DoNotUse;
struct FileMetadata_CustomAttributesEntry_DoNotUseDefaultTypeInternal;
extern FileMetadata_CustomAttributesEntry_DoNotUseDefaultTypeInternal _FileMetadata_CustomAttributesEntry_DoNotUse_default_instance_;
class FileMetadata_ProtocolAttributesEntry_DoNotUse;
struct FileMetadata_ProtocolAttributesEntry_DoNotUseDefaultTypeInternal;
extern FileMetadata_ProtocolAttributesEntry_DoNotUseDefaultTypeInternal _FileMetadata_ProtocolAttributesEntry_DoNotUse_default_instance_;
class OperationLog;
struct OperationLogDefaultTypeInternal;
extern OperationLogDefaultTypeInternal _OperationLog_default_instance_;
class OperationLog_MetadataEntry_DoNotUse;
struct OperationLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern OperationLog_MetadataEntry_DoNotUseDefaultTypeInternal _OperationLog_MetadataEntry_DoNotUse_default_instance_;
}  // namespace file_metadata
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace file_metadata {
enum FileType : int {
  FILE_UNDEFINED = 0,
  FILE_BINARY = 1,
  FILE_SENARY = 2,
  FILE_CUSTOM_FORMAT = 3,
  FILE_TEXT = 4,
  FILE_IMAGE = 5,
  FILE_VIDEO = 6,
  FILE_AUDIO = 7,
  FILE_ARCHIVE = 8,
  FILE_DATABASE = 9,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileType_IsValid(int value);
extern const uint32_t FileType_internal_data_[];
constexpr FileType FileType_MIN = static_cast<FileType>(0);
constexpr FileType FileType_MAX = static_cast<FileType>(9);
constexpr int FileType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
FileType_descriptor();
template <typename T>
const std::string& FileType_Name(T value) {
  static_assert(std::is_same<T, FileType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileType_Name().");
  return FileType_Name(static_cast<FileType>(value));
}
template <>
inline const std::string& FileType_Name(FileType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool FileType_Parse(absl::string_view name, FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileType>(
      FileType_descriptor(), name, value);
}
enum FileStatus : int {
  FILE_STATUS_UNDEFINED = 0,
  FILE_STATUS_ACTIVE = 1,
  FILE_STATUS_ARCHIVED = 2,
  FILE_STATUS_PENDING_REVIEW = 3,
  FILE_STATUS_RESTRICTED = 4,
  FileStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileStatus_IsValid(int value);
extern const uint32_t FileStatus_internal_data_[];
constexpr FileStatus FileStatus_MIN = static_cast<FileStatus>(0);
constexpr FileStatus FileStatus_MAX = static_cast<FileStatus>(4);
constexpr int FileStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
FileStatus_descriptor();
template <typename T>
const std::string& FileStatus_Name(T value) {
  static_assert(std::is_same<T, FileStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileStatus_Name().");
  return FileStatus_Name(static_cast<FileStatus>(value));
}
template <>
inline const std::string& FileStatus_Name(FileStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool FileStatus_Parse(absl::string_view name, FileStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileStatus>(
      FileStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class OperationLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  OperationLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit OperationLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const OperationLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const OperationLog_MetadataEntry_DoNotUse*>(
        &_OperationLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_file_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FileMetadata_ProtocolAttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  FileMetadata_ProtocolAttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMetadata_ProtocolAttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FileMetadata_ProtocolAttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FileMetadata_ProtocolAttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FileMetadata_ProtocolAttributesEntry_DoNotUse*>(
        &_FileMetadata_ProtocolAttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_file_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      73, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FileMetadata_CustomAttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  FileMetadata_CustomAttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMetadata_CustomAttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FileMetadata_CustomAttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FileMetadata_CustomAttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FileMetadata_CustomAttributesEntry_DoNotUse*>(
        &_FileMetadata_CustomAttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_file_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessRule_RuleMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessRule_RuleMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessRule_RuleMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessRule_RuleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessRule_RuleMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessRule_RuleMetadataEntry_DoNotUse*>(
        &_AccessRule_RuleMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_file_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class OperationLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.file_metadata.OperationLog) */ {
 public:
  inline OperationLog() : OperationLog(nullptr) {}
  ~OperationLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OperationLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OperationLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OperationLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline OperationLog(const OperationLog& from) : OperationLog(nullptr, from) {}
  inline OperationLog(OperationLog&& from) noexcept
      : OperationLog(nullptr, std::move(from)) {}
  inline OperationLog& operator=(const OperationLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationLog& operator=(OperationLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationLog* internal_default_instance() {
    return reinterpret_cast<const OperationLog*>(
        &_OperationLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(OperationLog& a, OperationLog& b) { a.Swap(&b); }
  inline void Swap(OperationLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OperationLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OperationLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OperationLog& from) { OperationLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OperationLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.file_metadata.OperationLog"; }

 protected:
  explicit OperationLog(::google::protobuf::Arena* arena);
  OperationLog(::google::protobuf::Arena* arena, const OperationLog& from);
  OperationLog(::google::protobuf::Arena* arena, OperationLog&& from) noexcept
      : OperationLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 6,
    kOperationTypeFieldNumber = 1,
    kPerformedByFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kStatusFieldNumber = 4,
    kDetailsFieldNumber = 5,
    kErrorCodeFieldNumber = 7,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string operation_type = 1;
  void clear_operation_type() ;
  const std::string& operation_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation_type(Arg_&& arg, Args_... args);
  std::string* mutable_operation_type();
  PROTOBUF_NODISCARD std::string* release_operation_type();
  void set_allocated_operation_type(std::string* value);

  private:
  const std::string& _internal_operation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_type(
      const std::string& value);
  std::string* _internal_mutable_operation_type();

  public:
  // string performed_by = 2;
  void clear_performed_by() ;
  const std::string& performed_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_performed_by(Arg_&& arg, Args_... args);
  std::string* mutable_performed_by();
  PROTOBUF_NODISCARD std::string* release_performed_by();
  void set_allocated_performed_by(std::string* value);

  private:
  const std::string& _internal_performed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_performed_by(
      const std::string& value);
  std::string* _internal_mutable_performed_by();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string status = 4;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string details = 5;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string error_code = 7;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // @@protoc_insertion_point(class_scope:seigr.file_metadata.OperationLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      107, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OperationLog& from_msg);
    ::google::protobuf::internal::MapField<OperationLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr operation_type_;
    ::google::protobuf::internal::ArenaStringPtr performed_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class AccessRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.file_metadata.AccessRule) */ {
 public:
  inline AccessRule() : AccessRule(nullptr) {}
  ~AccessRule() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccessRule* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccessRule));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccessRule(const AccessRule& from) : AccessRule(nullptr, from) {}
  inline AccessRule(AccessRule&& from) noexcept
      : AccessRule(nullptr, std::move(from)) {}
  inline AccessRule& operator=(const AccessRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessRule& operator=(AccessRule&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessRule* internal_default_instance() {
    return reinterpret_cast<const AccessRule*>(
        &_AccessRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AccessRule& a, AccessRule& b) { a.Swap(&b); }
  inline void Swap(AccessRule* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessRule* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccessRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccessRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccessRule& from) { AccessRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccessRule* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.file_metadata.AccessRule"; }

 protected:
  explicit AccessRule(::google::protobuf::Arena* arena);
  AccessRule(::google::protobuf::Arena* arena, const AccessRule& from);
  AccessRule(::google::protobuf::Arena* arena, AccessRule&& from) noexcept
      : AccessRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermissionsFieldNumber = 3,
    kRuleMetadataFieldNumber = 6,
    kRuleIdFieldNumber = 1,
    kRoleFieldNumber = 2,
    kExpirationFieldNumber = 4,
    kConditionsFieldNumber = 5,
  };
  // repeated string permissions = 3;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_permissions(int index, Arg_&& value, Args_... args);
  std::string* add_permissions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_permissions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_permissions();

  public:
  // map<string, string> rule_metadata = 6;
  int rule_metadata_size() const;
  private:
  int _internal_rule_metadata_size() const;

  public:
  void clear_rule_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& rule_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_rule_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_rule_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_rule_metadata();

  public:
  // string rule_id = 1;
  void clear_rule_id() ;
  const std::string& rule_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* value);

  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(
      const std::string& value);
  std::string* _internal_mutable_rule_id();

  public:
  // string role = 2;
  void clear_role() ;
  const std::string& role() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* value);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // string expiration = 4;
  void clear_expiration() ;
  const std::string& expiration() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiration(Arg_&& arg, Args_... args);
  std::string* mutable_expiration();
  PROTOBUF_NODISCARD std::string* release_expiration();
  void set_allocated_expiration(std::string* value);

  private:
  const std::string& _internal_expiration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiration(
      const std::string& value);
  std::string* _internal_mutable_expiration();

  public:
  // string conditions = 5;
  void clear_conditions() ;
  const std::string& conditions() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conditions(Arg_&& arg, Args_... args);
  std::string* mutable_conditions();
  PROTOBUF_NODISCARD std::string* release_conditions();
  void set_allocated_conditions(std::string* value);

  private:
  const std::string& _internal_conditions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conditions(
      const std::string& value);
  std::string* _internal_mutable_conditions();

  public:
  // @@protoc_insertion_point(class_scope:seigr.file_metadata.AccessRule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccessRule& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> permissions_;
    ::google::protobuf::internal::MapField<AccessRule_RuleMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        rule_metadata_;
    ::google::protobuf::internal::ArenaStringPtr rule_id_;
    ::google::protobuf::internal::ArenaStringPtr role_;
    ::google::protobuf::internal::ArenaStringPtr expiration_;
    ::google::protobuf::internal::ArenaStringPtr conditions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class FileMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.file_metadata.FileMetadata) */ {
 public:
  inline FileMetadata() : FileMetadata(nullptr) {}
  ~FileMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileMetadata(const FileMetadata& from) : FileMetadata(nullptr, from) {}
  inline FileMetadata(FileMetadata&& from) noexcept
      : FileMetadata(nullptr, std::move(from)) {}
  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMetadata& operator=(FileMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
        &_FileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(FileMetadata& a, FileMetadata& b) { a.Swap(&b); }
  inline void Swap(FileMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileMetadata& from) { FileMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.file_metadata.FileMetadata"; }

 protected:
  explicit FileMetadata(::google::protobuf::Arena* arena);
  FileMetadata(::google::protobuf::Arena* arena, const FileMetadata& from);
  FileMetadata(::google::protobuf::Arena* arena, FileMetadata&& from) noexcept
      : FileMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSegmentsFieldNumber = 9,
    kTemporalLayersFieldNumber = 10,
    kOperationLogsFieldNumber = 11,
    kCustomAttributesFieldNumber = 12,
    kAuthorizedUsersFieldNumber = 18,
    kProtocolAttributesFieldNumber = 19,
    kAccessControlListFieldNumber = 20,
    kAccessRulesFieldNumber = 21,
    kFormatConversionHistoryFieldNumber = 26,
    kVersionFieldNumber = 1,
    kCreatorIdFieldNumber = 2,
    kOriginalFilenameFieldNumber = 5,
    kOriginalExtensionFieldNumber = 6,
    kCreationTimestampFieldNumber = 7,
    kFileHashFieldNumber = 8,
    kAccessPolicyIdFieldNumber = 13,
    kEncryptionProtocolFieldNumber = 14,
    kNetworkProtocolFieldNumber = 15,
    kIntegrityVerificationHashFieldNumber = 16,
    kComplianceRequirementFieldNumber = 22,
    kRetentionPeriodFieldNumber = 23,
    kOriginDataSourceFieldNumber = 24,
    kLastModifiedTimestampFieldNumber = 25,
    kPrimaryBackupLocationFieldNumber = 27,
    kFileTypeFieldNumber = 3,
    kFileStatusFieldNumber = 4,
    kRedundancyLevelFieldNumber = 17,
  };
  // repeated .seigr.segment_metadata.SegmentMetadata segments = 9;
  int segments_size() const;
  private:
  int _internal_segments_size() const;

  public:
  void clear_segments() ;
  ::seigr::segment_metadata::SegmentMetadata* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>* mutable_segments();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>& _internal_segments() const;
  ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>* _internal_mutable_segments();
  public:
  const ::seigr::segment_metadata::SegmentMetadata& segments(int index) const;
  ::seigr::segment_metadata::SegmentMetadata* add_segments();
  const ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>& segments() const;
  // repeated .seigr.lineage.TemporalLayer temporal_layers = 10;
  int temporal_layers_size() const;
  private:
  int _internal_temporal_layers_size() const;

  public:
  void clear_temporal_layers() ;
  ::seigr::lineage::TemporalLayer* mutable_temporal_layers(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* mutable_temporal_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& _internal_temporal_layers() const;
  ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* _internal_mutable_temporal_layers();
  public:
  const ::seigr::lineage::TemporalLayer& temporal_layers(int index) const;
  ::seigr::lineage::TemporalLayer* add_temporal_layers();
  const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& temporal_layers() const;
  // repeated .seigr.file_metadata.OperationLog operation_logs = 11;
  int operation_logs_size() const;
  private:
  int _internal_operation_logs_size() const;

  public:
  void clear_operation_logs() ;
  ::seigr::file_metadata::OperationLog* mutable_operation_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>* mutable_operation_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>& _internal_operation_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>* _internal_mutable_operation_logs();
  public:
  const ::seigr::file_metadata::OperationLog& operation_logs(int index) const;
  ::seigr::file_metadata::OperationLog* add_operation_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>& operation_logs() const;
  // map<string, string> custom_attributes = 12;
  int custom_attributes_size() const;
  private:
  int _internal_custom_attributes_size() const;

  public:
  void clear_custom_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& custom_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_custom_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_custom_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_custom_attributes();

  public:
  // repeated string authorized_users = 18;
  int authorized_users_size() const;
  private:
  int _internal_authorized_users_size() const;

  public:
  void clear_authorized_users() ;
  const std::string& authorized_users(int index) const;
  std::string* mutable_authorized_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_users(int index, Arg_&& value, Args_... args);
  std::string* add_authorized_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_authorized_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& authorized_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_authorized_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_authorized_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_authorized_users();

  public:
  // map<string, string> protocol_attributes = 19;
  int protocol_attributes_size() const;
  private:
  int _internal_protocol_attributes_size() const;

  public:
  void clear_protocol_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& protocol_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_protocol_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_protocol_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_protocol_attributes();

  public:
  // repeated string access_control_list = 20;
  int access_control_list_size() const;
  private:
  int _internal_access_control_list_size() const;

  public:
  void clear_access_control_list() ;
  const std::string& access_control_list(int index) const;
  std::string* mutable_access_control_list(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_control_list(int index, Arg_&& value, Args_... args);
  std::string* add_access_control_list();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_access_control_list(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& access_control_list() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_access_control_list();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_access_control_list() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_access_control_list();

  public:
  // repeated .seigr.file_metadata.AccessRule access_rules = 21;
  int access_rules_size() const;
  private:
  int _internal_access_rules_size() const;

  public:
  void clear_access_rules() ;
  ::seigr::file_metadata::AccessRule* mutable_access_rules(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>* mutable_access_rules();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>& _internal_access_rules() const;
  ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>* _internal_mutable_access_rules();
  public:
  const ::seigr::file_metadata::AccessRule& access_rules(int index) const;
  ::seigr::file_metadata::AccessRule* add_access_rules();
  const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>& access_rules() const;
  // repeated string format_conversion_history = 26;
  int format_conversion_history_size() const;
  private:
  int _internal_format_conversion_history_size() const;

  public:
  void clear_format_conversion_history() ;
  const std::string& format_conversion_history(int index) const;
  std::string* mutable_format_conversion_history(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format_conversion_history(int index, Arg_&& value, Args_... args);
  std::string* add_format_conversion_history();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_format_conversion_history(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& format_conversion_history() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_format_conversion_history();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_format_conversion_history() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_format_conversion_history();

  public:
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string creator_id = 2;
  void clear_creator_id() ;
  const std::string& creator_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator_id(Arg_&& arg, Args_... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* value);

  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(
      const std::string& value);
  std::string* _internal_mutable_creator_id();

  public:
  // string original_filename = 5;
  void clear_original_filename() ;
  const std::string& original_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_filename(Arg_&& arg, Args_... args);
  std::string* mutable_original_filename();
  PROTOBUF_NODISCARD std::string* release_original_filename();
  void set_allocated_original_filename(std::string* value);

  private:
  const std::string& _internal_original_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_filename(
      const std::string& value);
  std::string* _internal_mutable_original_filename();

  public:
  // string original_extension = 6;
  void clear_original_extension() ;
  const std::string& original_extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_extension(Arg_&& arg, Args_... args);
  std::string* mutable_original_extension();
  PROTOBUF_NODISCARD std::string* release_original_extension();
  void set_allocated_original_extension(std::string* value);

  private:
  const std::string& _internal_original_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_extension(
      const std::string& value);
  std::string* _internal_mutable_original_extension();

  public:
  // string creation_timestamp = 7;
  void clear_creation_timestamp() ;
  const std::string& creation_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creation_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_creation_timestamp();
  PROTOBUF_NODISCARD std::string* release_creation_timestamp();
  void set_allocated_creation_timestamp(std::string* value);

  private:
  const std::string& _internal_creation_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_timestamp(
      const std::string& value);
  std::string* _internal_mutable_creation_timestamp();

  public:
  // string file_hash = 8;
  void clear_file_hash() ;
  const std::string& file_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_hash(Arg_&& arg, Args_... args);
  std::string* mutable_file_hash();
  PROTOBUF_NODISCARD std::string* release_file_hash();
  void set_allocated_file_hash(std::string* value);

  private:
  const std::string& _internal_file_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_hash(
      const std::string& value);
  std::string* _internal_mutable_file_hash();

  public:
  // string access_policy_id = 13;
  void clear_access_policy_id() ;
  const std::string& access_policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_access_policy_id();
  PROTOBUF_NODISCARD std::string* release_access_policy_id();
  void set_allocated_access_policy_id(std::string* value);

  private:
  const std::string& _internal_access_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_policy_id(
      const std::string& value);
  std::string* _internal_mutable_access_policy_id();

  public:
  // string encryption_protocol = 14;
  void clear_encryption_protocol() ;
  const std::string& encryption_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encryption_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_encryption_protocol();
  PROTOBUF_NODISCARD std::string* release_encryption_protocol();
  void set_allocated_encryption_protocol(std::string* value);

  private:
  const std::string& _internal_encryption_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_protocol(
      const std::string& value);
  std::string* _internal_mutable_encryption_protocol();

  public:
  // string network_protocol = 15;
  void clear_network_protocol() ;
  const std::string& network_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_network_protocol();
  PROTOBUF_NODISCARD std::string* release_network_protocol();
  void set_allocated_network_protocol(std::string* value);

  private:
  const std::string& _internal_network_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_protocol(
      const std::string& value);
  std::string* _internal_mutable_network_protocol();

  public:
  // string integrity_verification_hash = 16;
  void clear_integrity_verification_hash() ;
  const std::string& integrity_verification_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_integrity_verification_hash(Arg_&& arg, Args_... args);
  std::string* mutable_integrity_verification_hash();
  PROTOBUF_NODISCARD std::string* release_integrity_verification_hash();
  void set_allocated_integrity_verification_hash(std::string* value);

  private:
  const std::string& _internal_integrity_verification_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integrity_verification_hash(
      const std::string& value);
  std::string* _internal_mutable_integrity_verification_hash();

  public:
  // string compliance_requirement = 22;
  void clear_compliance_requirement() ;
  const std::string& compliance_requirement() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_requirement(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_requirement();
  PROTOBUF_NODISCARD std::string* release_compliance_requirement();
  void set_allocated_compliance_requirement(std::string* value);

  private:
  const std::string& _internal_compliance_requirement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_requirement(
      const std::string& value);
  std::string* _internal_mutable_compliance_requirement();

  public:
  // string retention_period = 23;
  void clear_retention_period() ;
  const std::string& retention_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retention_period(Arg_&& arg, Args_... args);
  std::string* mutable_retention_period();
  PROTOBUF_NODISCARD std::string* release_retention_period();
  void set_allocated_retention_period(std::string* value);

  private:
  const std::string& _internal_retention_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retention_period(
      const std::string& value);
  std::string* _internal_mutable_retention_period();

  public:
  // string origin_data_source = 24;
  void clear_origin_data_source() ;
  const std::string& origin_data_source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_data_source(Arg_&& arg, Args_... args);
  std::string* mutable_origin_data_source();
  PROTOBUF_NODISCARD std::string* release_origin_data_source();
  void set_allocated_origin_data_source(std::string* value);

  private:
  const std::string& _internal_origin_data_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_data_source(
      const std::string& value);
  std::string* _internal_mutable_origin_data_source();

  public:
  // string last_modified_timestamp = 25;
  void clear_last_modified_timestamp() ;
  const std::string& last_modified_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_modified_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_modified_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_modified_timestamp();
  void set_allocated_last_modified_timestamp(std::string* value);

  private:
  const std::string& _internal_last_modified_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_modified_timestamp();

  public:
  // string primary_backup_location = 27;
  void clear_primary_backup_location() ;
  const std::string& primary_backup_location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_backup_location(Arg_&& arg, Args_... args);
  std::string* mutable_primary_backup_location();
  PROTOBUF_NODISCARD std::string* release_primary_backup_location();
  void set_allocated_primary_backup_location(std::string* value);

  private:
  const std::string& _internal_primary_backup_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_backup_location(
      const std::string& value);
  std::string* _internal_mutable_primary_backup_location();

  public:
  // .seigr.file_metadata.FileType file_type = 3;
  void clear_file_type() ;
  ::seigr::file_metadata::FileType file_type() const;
  void set_file_type(::seigr::file_metadata::FileType value);

  private:
  ::seigr::file_metadata::FileType _internal_file_type() const;
  void _internal_set_file_type(::seigr::file_metadata::FileType value);

  public:
  // .seigr.file_metadata.FileStatus file_status = 4;
  void clear_file_status() ;
  ::seigr::file_metadata::FileStatus file_status() const;
  void set_file_status(::seigr::file_metadata::FileStatus value);

  private:
  ::seigr::file_metadata::FileStatus _internal_file_status() const;
  void _internal_set_file_status(::seigr::file_metadata::FileStatus value);

  public:
  // int32 redundancy_level = 17;
  void clear_redundancy_level() ;
  ::int32_t redundancy_level() const;
  void set_redundancy_level(::int32_t value);

  private:
  ::int32_t _internal_redundancy_level() const;
  void _internal_set_redundancy_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.file_metadata.FileMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 27, 6,
      420, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileMetadata& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::segment_metadata::SegmentMetadata > segments_;
    ::google::protobuf::RepeatedPtrField< ::seigr::lineage::TemporalLayer > temporal_layers_;
    ::google::protobuf::RepeatedPtrField< ::seigr::file_metadata::OperationLog > operation_logs_;
    ::google::protobuf::internal::MapField<FileMetadata_CustomAttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        custom_attributes_;
    ::google::protobuf::RepeatedPtrField<std::string> authorized_users_;
    ::google::protobuf::internal::MapField<FileMetadata_ProtocolAttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        protocol_attributes_;
    ::google::protobuf::RepeatedPtrField<std::string> access_control_list_;
    ::google::protobuf::RepeatedPtrField< ::seigr::file_metadata::AccessRule > access_rules_;
    ::google::protobuf::RepeatedPtrField<std::string> format_conversion_history_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr creator_id_;
    ::google::protobuf::internal::ArenaStringPtr original_filename_;
    ::google::protobuf::internal::ArenaStringPtr original_extension_;
    ::google::protobuf::internal::ArenaStringPtr creation_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr file_hash_;
    ::google::protobuf::internal::ArenaStringPtr access_policy_id_;
    ::google::protobuf::internal::ArenaStringPtr encryption_protocol_;
    ::google::protobuf::internal::ArenaStringPtr network_protocol_;
    ::google::protobuf::internal::ArenaStringPtr integrity_verification_hash_;
    ::google::protobuf::internal::ArenaStringPtr compliance_requirement_;
    ::google::protobuf::internal::ArenaStringPtr retention_period_;
    ::google::protobuf::internal::ArenaStringPtr origin_data_source_;
    ::google::protobuf::internal::ArenaStringPtr last_modified_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr primary_backup_location_;
    int file_type_;
    int file_status_;
    ::int32_t redundancy_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fmetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OperationLog

// string operation_type = 1;
inline void OperationLog::clear_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.ClearToEmpty();
}
inline const std::string& OperationLog::operation_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.operation_type)
  return _internal_operation_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_operation_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.operation_type)
}
inline std::string* OperationLog::mutable_operation_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation_type();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.operation_type)
  return _s;
}
inline const std::string& OperationLog::_internal_operation_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_type_.Get();
}
inline void OperationLog::_internal_set_operation_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operation_type_.Mutable( GetArena());
}
inline std::string* OperationLog::release_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.operation_type)
  return _impl_.operation_type_.Release();
}
inline void OperationLog::set_allocated_operation_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_type_.IsDefault()) {
    _impl_.operation_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.operation_type)
}

// string performed_by = 2;
inline void OperationLog::clear_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.ClearToEmpty();
}
inline const std::string& OperationLog::performed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.performed_by)
  return _internal_performed_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_performed_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.performed_by)
}
inline std::string* OperationLog::mutable_performed_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_performed_by();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.performed_by)
  return _s;
}
inline const std::string& OperationLog::_internal_performed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.performed_by_.Get();
}
inline void OperationLog::_internal_set_performed_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.performed_by_.Mutable( GetArena());
}
inline std::string* OperationLog::release_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.performed_by)
  return _impl_.performed_by_.Release();
}
inline void OperationLog::set_allocated_performed_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.performed_by_.IsDefault()) {
    _impl_.performed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.performed_by)
}

// string timestamp = 3;
inline void OperationLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& OperationLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.timestamp)
}
inline std::string* OperationLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.timestamp)
  return _s;
}
inline const std::string& OperationLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void OperationLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* OperationLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void OperationLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.timestamp)
}

// string status = 4;
inline void OperationLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& OperationLog::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.status)
}
inline std::string* OperationLog::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.status)
  return _s;
}
inline const std::string& OperationLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void OperationLog::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* OperationLog::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.status)
  return _impl_.status_.Release();
}
inline void OperationLog::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.status)
}

// string details = 5;
inline void OperationLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& OperationLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.details)
}
inline std::string* OperationLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.details)
  return _s;
}
inline const std::string& OperationLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void OperationLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* OperationLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.details)
  return _impl_.details_.Release();
}
inline void OperationLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.details)
}

// map<string, string> metadata = 6;
inline int OperationLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int OperationLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void OperationLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& OperationLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& OperationLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.file_metadata.OperationLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* OperationLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* OperationLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.file_metadata.OperationLog.metadata)
  return _internal_mutable_metadata();
}

// string error_code = 7;
inline void OperationLog::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& OperationLog::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.OperationLog.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationLog::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.OperationLog.error_code)
}
inline std::string* OperationLog::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.OperationLog.error_code)
  return _s;
}
inline const std::string& OperationLog::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void OperationLog::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* OperationLog::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* OperationLog::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.OperationLog.error_code)
  return _impl_.error_code_.Release();
}
inline void OperationLog::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.OperationLog.error_code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccessRule

// string rule_id = 1;
inline void AccessRule::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.ClearToEmpty();
}
inline const std::string& AccessRule::rule_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.AccessRule.rule_id)
  return _internal_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessRule::set_rule_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.AccessRule.rule_id)
}
inline std::string* AccessRule::mutable_rule_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.AccessRule.rule_id)
  return _s;
}
inline const std::string& AccessRule::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_.Get();
}
inline void AccessRule::_internal_set_rule_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(value, GetArena());
}
inline std::string* AccessRule::_internal_mutable_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_id_.Mutable( GetArena());
}
inline std::string* AccessRule::release_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.AccessRule.rule_id)
  return _impl_.rule_id_.Release();
}
inline void AccessRule::set_allocated_rule_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rule_id_.IsDefault()) {
    _impl_.rule_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.AccessRule.rule_id)
}

// string role = 2;
inline void AccessRule::clear_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.ClearToEmpty();
}
inline const std::string& AccessRule::role() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.AccessRule.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessRule::set_role(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.AccessRule.role)
}
inline std::string* AccessRule::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.AccessRule.role)
  return _s;
}
inline const std::string& AccessRule::_internal_role() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.role_.Get();
}
inline void AccessRule::_internal_set_role(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(value, GetArena());
}
inline std::string* AccessRule::_internal_mutable_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.role_.Mutable( GetArena());
}
inline std::string* AccessRule::release_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.AccessRule.role)
  return _impl_.role_.Release();
}
inline void AccessRule::set_allocated_role(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.AccessRule.role)
}

// repeated string permissions = 3;
inline int AccessRule::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int AccessRule::permissions_size() const {
  return _internal_permissions_size();
}
inline void AccessRule::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline std::string* AccessRule::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.file_metadata.AccessRule.permissions)
  return _s;
}
inline const std::string& AccessRule::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.AccessRule.permissions)
  return _internal_permissions().Get(index);
}
inline std::string* AccessRule::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.AccessRule.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AccessRule::set_permissions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_permissions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.file_metadata.AccessRule.permissions)
}
template <typename Arg_, typename... Args_>
inline void AccessRule::add_permissions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_permissions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.file_metadata.AccessRule.permissions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccessRule::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.AccessRule.permissions)
  return _internal_permissions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccessRule::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.AccessRule.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccessRule::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccessRule::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

// string expiration = 4;
inline void AccessRule::clear_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.ClearToEmpty();
}
inline const std::string& AccessRule::expiration() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.AccessRule.expiration)
  return _internal_expiration();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessRule::set_expiration(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.AccessRule.expiration)
}
inline std::string* AccessRule::mutable_expiration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.AccessRule.expiration)
  return _s;
}
inline const std::string& AccessRule::_internal_expiration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_.Get();
}
inline void AccessRule::_internal_set_expiration(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.Set(value, GetArena());
}
inline std::string* AccessRule::_internal_mutable_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiration_.Mutable( GetArena());
}
inline std::string* AccessRule::release_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.AccessRule.expiration)
  return _impl_.expiration_.Release();
}
inline void AccessRule::set_allocated_expiration(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiration_.IsDefault()) {
    _impl_.expiration_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.AccessRule.expiration)
}

// string conditions = 5;
inline void AccessRule::clear_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.ClearToEmpty();
}
inline const std::string& AccessRule::conditions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.AccessRule.conditions)
  return _internal_conditions();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessRule::set_conditions(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.AccessRule.conditions)
}
inline std::string* AccessRule::mutable_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conditions();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.AccessRule.conditions)
  return _s;
}
inline const std::string& AccessRule::_internal_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conditions_.Get();
}
inline void AccessRule::_internal_set_conditions(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Set(value, GetArena());
}
inline std::string* AccessRule::_internal_mutable_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conditions_.Mutable( GetArena());
}
inline std::string* AccessRule::release_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.AccessRule.conditions)
  return _impl_.conditions_.Release();
}
inline void AccessRule::set_allocated_conditions(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conditions_.IsDefault()) {
    _impl_.conditions_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.AccessRule.conditions)
}

// map<string, string> rule_metadata = 6;
inline int AccessRule::_internal_rule_metadata_size() const {
  return _internal_rule_metadata().size();
}
inline int AccessRule::rule_metadata_size() const {
  return _internal_rule_metadata_size();
}
inline void AccessRule::clear_rule_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessRule::_internal_rule_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessRule::rule_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.file_metadata.AccessRule.rule_metadata)
  return _internal_rule_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessRule::_internal_mutable_rule_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessRule::mutable_rule_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.file_metadata.AccessRule.rule_metadata)
  return _internal_mutable_rule_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileMetadata

// string version = 1;
inline void FileMetadata::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& FileMetadata::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.version)
}
inline std::string* FileMetadata::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.version)
  return _s;
}
inline const std::string& FileMetadata::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void FileMetadata::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.version)
  return _impl_.version_.Release();
}
inline void FileMetadata::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.version)
}

// string creator_id = 2;
inline void FileMetadata::clear_creator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& FileMetadata::creator_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.creator_id)
  return _internal_creator_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_creator_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.creator_id)
}
inline std::string* FileMetadata::mutable_creator_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.creator_id)
  return _s;
}
inline const std::string& FileMetadata::_internal_creator_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creator_id_.Get();
}
inline void FileMetadata::_internal_set_creator_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_id_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_creator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creator_id_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_creator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.creator_id)
  return _impl_.creator_id_.Release();
}
inline void FileMetadata::set_allocated_creator_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.creator_id)
}

// .seigr.file_metadata.FileType file_type = 3;
inline void FileMetadata::clear_file_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_type_ = 0;
}
inline ::seigr::file_metadata::FileType FileMetadata::file_type() const {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.file_type)
  return _internal_file_type();
}
inline void FileMetadata::set_file_type(::seigr::file_metadata::FileType value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.file_type)
}
inline ::seigr::file_metadata::FileType FileMetadata::_internal_file_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::file_metadata::FileType>(_impl_.file_type_);
}
inline void FileMetadata::_internal_set_file_type(::seigr::file_metadata::FileType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_type_ = value;
}

// .seigr.file_metadata.FileStatus file_status = 4;
inline void FileMetadata::clear_file_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_status_ = 0;
}
inline ::seigr::file_metadata::FileStatus FileMetadata::file_status() const {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.file_status)
  return _internal_file_status();
}
inline void FileMetadata::set_file_status(::seigr::file_metadata::FileStatus value) {
  _internal_set_file_status(value);
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.file_status)
}
inline ::seigr::file_metadata::FileStatus FileMetadata::_internal_file_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::file_metadata::FileStatus>(_impl_.file_status_);
}
inline void FileMetadata::_internal_set_file_status(::seigr::file_metadata::FileStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_status_ = value;
}

// string original_filename = 5;
inline void FileMetadata::clear_original_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_filename_.ClearToEmpty();
}
inline const std::string& FileMetadata::original_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.original_filename)
  return _internal_original_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_original_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.original_filename)
}
inline std::string* FileMetadata::mutable_original_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_filename();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.original_filename)
  return _s;
}
inline const std::string& FileMetadata::_internal_original_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_filename_.Get();
}
inline void FileMetadata::_internal_set_original_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_filename_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_original_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.original_filename_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_original_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.original_filename)
  return _impl_.original_filename_.Release();
}
inline void FileMetadata::set_allocated_original_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.original_filename_.IsDefault()) {
    _impl_.original_filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.original_filename)
}

// string original_extension = 6;
inline void FileMetadata::clear_original_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_extension_.ClearToEmpty();
}
inline const std::string& FileMetadata::original_extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.original_extension)
  return _internal_original_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_original_extension(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_extension_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.original_extension)
}
inline std::string* FileMetadata::mutable_original_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_extension();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.original_extension)
  return _s;
}
inline const std::string& FileMetadata::_internal_original_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_extension_.Get();
}
inline void FileMetadata::_internal_set_original_extension(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_extension_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_original_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.original_extension_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_original_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.original_extension)
  return _impl_.original_extension_.Release();
}
inline void FileMetadata::set_allocated_original_extension(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.original_extension_.IsDefault()) {
    _impl_.original_extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.original_extension)
}

// string creation_timestamp = 7;
inline void FileMetadata::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.ClearToEmpty();
}
inline const std::string& FileMetadata::creation_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.creation_timestamp)
  return _internal_creation_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_creation_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.creation_timestamp)
}
inline std::string* FileMetadata::mutable_creation_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creation_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.creation_timestamp)
  return _s;
}
inline const std::string& FileMetadata::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_.Get();
}
inline void FileMetadata::_internal_set_creation_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creation_timestamp_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.creation_timestamp)
  return _impl_.creation_timestamp_.Release();
}
inline void FileMetadata::set_allocated_creation_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creation_timestamp_.IsDefault()) {
    _impl_.creation_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.creation_timestamp)
}

// string file_hash = 8;
inline void FileMetadata::clear_file_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_hash_.ClearToEmpty();
}
inline const std::string& FileMetadata::file_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.file_hash)
  return _internal_file_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_file_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.file_hash)
}
inline std::string* FileMetadata::mutable_file_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_hash();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.file_hash)
  return _s;
}
inline const std::string& FileMetadata::_internal_file_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_hash_.Get();
}
inline void FileMetadata::_internal_set_file_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_hash_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_file_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_hash_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_file_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.file_hash)
  return _impl_.file_hash_.Release();
}
inline void FileMetadata::set_allocated_file_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_hash_.IsDefault()) {
    _impl_.file_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.file_hash)
}

// repeated .seigr.segment_metadata.SegmentMetadata segments = 9;
inline int FileMetadata::_internal_segments_size() const {
  return _internal_segments().size();
}
inline int FileMetadata::segments_size() const {
  return _internal_segments_size();
}
inline ::seigr::segment_metadata::SegmentMetadata* FileMetadata::mutable_segments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.segments)
  return _internal_mutable_segments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>* FileMetadata::mutable_segments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.segments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_segments();
}
inline const ::seigr::segment_metadata::SegmentMetadata& FileMetadata::segments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.segments)
  return _internal_segments().Get(index);
}
inline ::seigr::segment_metadata::SegmentMetadata* FileMetadata::add_segments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::segment_metadata::SegmentMetadata* _add = _internal_mutable_segments()->Add();
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.segments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>& FileMetadata::segments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.segments)
  return _internal_segments();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>&
FileMetadata::_internal_segments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segments_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::segment_metadata::SegmentMetadata>*
FileMetadata::_internal_mutable_segments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.segments_;
}

// repeated .seigr.lineage.TemporalLayer temporal_layers = 10;
inline int FileMetadata::_internal_temporal_layers_size() const {
  return _internal_temporal_layers().size();
}
inline int FileMetadata::temporal_layers_size() const {
  return _internal_temporal_layers_size();
}
inline ::seigr::lineage::TemporalLayer* FileMetadata::mutable_temporal_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.temporal_layers)
  return _internal_mutable_temporal_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>* FileMetadata::mutable_temporal_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.temporal_layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_temporal_layers();
}
inline const ::seigr::lineage::TemporalLayer& FileMetadata::temporal_layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.temporal_layers)
  return _internal_temporal_layers().Get(index);
}
inline ::seigr::lineage::TemporalLayer* FileMetadata::add_temporal_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::lineage::TemporalLayer* _add = _internal_mutable_temporal_layers()->Add();
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.temporal_layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>& FileMetadata::temporal_layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.temporal_layers)
  return _internal_temporal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>&
FileMetadata::_internal_temporal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temporal_layers_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::lineage::TemporalLayer>*
FileMetadata::_internal_mutable_temporal_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.temporal_layers_;
}

// repeated .seigr.file_metadata.OperationLog operation_logs = 11;
inline int FileMetadata::_internal_operation_logs_size() const {
  return _internal_operation_logs().size();
}
inline int FileMetadata::operation_logs_size() const {
  return _internal_operation_logs_size();
}
inline void FileMetadata::clear_operation_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_logs_.Clear();
}
inline ::seigr::file_metadata::OperationLog* FileMetadata::mutable_operation_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.operation_logs)
  return _internal_mutable_operation_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>* FileMetadata::mutable_operation_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.operation_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_operation_logs();
}
inline const ::seigr::file_metadata::OperationLog& FileMetadata::operation_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.operation_logs)
  return _internal_operation_logs().Get(index);
}
inline ::seigr::file_metadata::OperationLog* FileMetadata::add_operation_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::file_metadata::OperationLog* _add = _internal_mutable_operation_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.operation_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>& FileMetadata::operation_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.operation_logs)
  return _internal_operation_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>&
FileMetadata::_internal_operation_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::OperationLog>*
FileMetadata::_internal_mutable_operation_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.operation_logs_;
}

// map<string, string> custom_attributes = 12;
inline int FileMetadata::_internal_custom_attributes_size() const {
  return _internal_custom_attributes().size();
}
inline int FileMetadata::custom_attributes_size() const {
  return _internal_custom_attributes_size();
}
inline void FileMetadata::clear_custom_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::_internal_custom_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::custom_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.file_metadata.FileMetadata.custom_attributes)
  return _internal_custom_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::_internal_mutable_custom_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.custom_attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::mutable_custom_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.file_metadata.FileMetadata.custom_attributes)
  return _internal_mutable_custom_attributes();
}

// string access_policy_id = 13;
inline void FileMetadata::clear_access_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_policy_id_.ClearToEmpty();
}
inline const std::string& FileMetadata::access_policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.access_policy_id)
  return _internal_access_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_access_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.access_policy_id)
}
inline std::string* FileMetadata::mutable_access_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.access_policy_id)
  return _s;
}
inline const std::string& FileMetadata::_internal_access_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_policy_id_.Get();
}
inline void FileMetadata::_internal_set_access_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_policy_id_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_access_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_policy_id_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_access_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.access_policy_id)
  return _impl_.access_policy_id_.Release();
}
inline void FileMetadata::set_allocated_access_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_policy_id_.IsDefault()) {
    _impl_.access_policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.access_policy_id)
}

// string encryption_protocol = 14;
inline void FileMetadata::clear_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.ClearToEmpty();
}
inline const std::string& FileMetadata::encryption_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.encryption_protocol)
  return _internal_encryption_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_encryption_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.encryption_protocol)
}
inline std::string* FileMetadata::mutable_encryption_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encryption_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.encryption_protocol)
  return _s;
}
inline const std::string& FileMetadata::_internal_encryption_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encryption_protocol_.Get();
}
inline void FileMetadata::_internal_set_encryption_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encryption_protocol_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.encryption_protocol)
  return _impl_.encryption_protocol_.Release();
}
inline void FileMetadata::set_allocated_encryption_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encryption_protocol_.IsDefault()) {
    _impl_.encryption_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.encryption_protocol)
}

// string network_protocol = 15;
inline void FileMetadata::clear_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.ClearToEmpty();
}
inline const std::string& FileMetadata::network_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.network_protocol)
  return _internal_network_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_network_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.network_protocol)
}
inline std::string* FileMetadata::mutable_network_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.network_protocol)
  return _s;
}
inline const std::string& FileMetadata::_internal_network_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_protocol_.Get();
}
inline void FileMetadata::_internal_set_network_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.network_protocol_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.network_protocol)
  return _impl_.network_protocol_.Release();
}
inline void FileMetadata::set_allocated_network_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_protocol_.IsDefault()) {
    _impl_.network_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.network_protocol)
}

// string integrity_verification_hash = 16;
inline void FileMetadata::clear_integrity_verification_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verification_hash_.ClearToEmpty();
}
inline const std::string& FileMetadata::integrity_verification_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.integrity_verification_hash)
  return _internal_integrity_verification_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_integrity_verification_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verification_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.integrity_verification_hash)
}
inline std::string* FileMetadata::mutable_integrity_verification_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_integrity_verification_hash();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.integrity_verification_hash)
  return _s;
}
inline const std::string& FileMetadata::_internal_integrity_verification_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integrity_verification_hash_.Get();
}
inline void FileMetadata::_internal_set_integrity_verification_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verification_hash_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_integrity_verification_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.integrity_verification_hash_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_integrity_verification_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.integrity_verification_hash)
  return _impl_.integrity_verification_hash_.Release();
}
inline void FileMetadata::set_allocated_integrity_verification_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verification_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.integrity_verification_hash_.IsDefault()) {
    _impl_.integrity_verification_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.integrity_verification_hash)
}

// int32 redundancy_level = 17;
inline void FileMetadata::clear_redundancy_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redundancy_level_ = 0;
}
inline ::int32_t FileMetadata::redundancy_level() const {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.redundancy_level)
  return _internal_redundancy_level();
}
inline void FileMetadata::set_redundancy_level(::int32_t value) {
  _internal_set_redundancy_level(value);
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.redundancy_level)
}
inline ::int32_t FileMetadata::_internal_redundancy_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.redundancy_level_;
}
inline void FileMetadata::_internal_set_redundancy_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.redundancy_level_ = value;
}

// repeated string authorized_users = 18;
inline int FileMetadata::_internal_authorized_users_size() const {
  return _internal_authorized_users().size();
}
inline int FileMetadata::authorized_users_size() const {
  return _internal_authorized_users_size();
}
inline void FileMetadata::clear_authorized_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorized_users_.Clear();
}
inline std::string* FileMetadata::add_authorized_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_authorized_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.file_metadata.FileMetadata.authorized_users)
  return _s;
}
inline const std::string& FileMetadata::authorized_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.authorized_users)
  return _internal_authorized_users().Get(index);
}
inline std::string* FileMetadata::mutable_authorized_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.authorized_users)
  return _internal_mutable_authorized_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::set_authorized_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_authorized_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.authorized_users)
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::add_authorized_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_authorized_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.authorized_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::authorized_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.authorized_users)
  return _internal_authorized_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::mutable_authorized_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.authorized_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_authorized_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::_internal_authorized_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authorized_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::_internal_mutable_authorized_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.authorized_users_;
}

// map<string, string> protocol_attributes = 19;
inline int FileMetadata::_internal_protocol_attributes_size() const {
  return _internal_protocol_attributes().size();
}
inline int FileMetadata::protocol_attributes_size() const {
  return _internal_protocol_attributes_size();
}
inline void FileMetadata::clear_protocol_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::_internal_protocol_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& FileMetadata::protocol_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.file_metadata.FileMetadata.protocol_attributes)
  return _internal_protocol_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::_internal_mutable_protocol_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* FileMetadata::mutable_protocol_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.file_metadata.FileMetadata.protocol_attributes)
  return _internal_mutable_protocol_attributes();
}

// repeated string access_control_list = 20;
inline int FileMetadata::_internal_access_control_list_size() const {
  return _internal_access_control_list().size();
}
inline int FileMetadata::access_control_list_size() const {
  return _internal_access_control_list_size();
}
inline void FileMetadata::clear_access_control_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_control_list_.Clear();
}
inline std::string* FileMetadata::add_access_control_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_access_control_list()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.file_metadata.FileMetadata.access_control_list)
  return _s;
}
inline const std::string& FileMetadata::access_control_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.access_control_list)
  return _internal_access_control_list().Get(index);
}
inline std::string* FileMetadata::mutable_access_control_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.access_control_list)
  return _internal_mutable_access_control_list()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::set_access_control_list(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_access_control_list()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.access_control_list)
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::add_access_control_list(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_access_control_list(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.access_control_list)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::access_control_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.access_control_list)
  return _internal_access_control_list();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::mutable_access_control_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.access_control_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_access_control_list();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::_internal_access_control_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_control_list_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::_internal_mutable_access_control_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.access_control_list_;
}

// repeated .seigr.file_metadata.AccessRule access_rules = 21;
inline int FileMetadata::_internal_access_rules_size() const {
  return _internal_access_rules().size();
}
inline int FileMetadata::access_rules_size() const {
  return _internal_access_rules_size();
}
inline void FileMetadata::clear_access_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_rules_.Clear();
}
inline ::seigr::file_metadata::AccessRule* FileMetadata::mutable_access_rules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.access_rules)
  return _internal_mutable_access_rules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>* FileMetadata::mutable_access_rules()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.access_rules)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_access_rules();
}
inline const ::seigr::file_metadata::AccessRule& FileMetadata::access_rules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.access_rules)
  return _internal_access_rules().Get(index);
}
inline ::seigr::file_metadata::AccessRule* FileMetadata::add_access_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::file_metadata::AccessRule* _add = _internal_mutable_access_rules()->Add();
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.access_rules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>& FileMetadata::access_rules() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.access_rules)
  return _internal_access_rules();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>&
FileMetadata::_internal_access_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_rules_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::file_metadata::AccessRule>*
FileMetadata::_internal_mutable_access_rules() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.access_rules_;
}

// string compliance_requirement = 22;
inline void FileMetadata::clear_compliance_requirement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_requirement_.ClearToEmpty();
}
inline const std::string& FileMetadata::compliance_requirement() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.compliance_requirement)
  return _internal_compliance_requirement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_compliance_requirement(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_requirement_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.compliance_requirement)
}
inline std::string* FileMetadata::mutable_compliance_requirement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_requirement();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.compliance_requirement)
  return _s;
}
inline const std::string& FileMetadata::_internal_compliance_requirement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_requirement_.Get();
}
inline void FileMetadata::_internal_set_compliance_requirement(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_requirement_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_compliance_requirement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_requirement_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_compliance_requirement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.compliance_requirement)
  return _impl_.compliance_requirement_.Release();
}
inline void FileMetadata::set_allocated_compliance_requirement(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_requirement_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_requirement_.IsDefault()) {
    _impl_.compliance_requirement_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.compliance_requirement)
}

// string retention_period = 23;
inline void FileMetadata::clear_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.ClearToEmpty();
}
inline const std::string& FileMetadata::retention_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.retention_period)
  return _internal_retention_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_retention_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.retention_period)
}
inline std::string* FileMetadata::mutable_retention_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retention_period();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.retention_period)
  return _s;
}
inline const std::string& FileMetadata::_internal_retention_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retention_period_.Get();
}
inline void FileMetadata::_internal_set_retention_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retention_period_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.retention_period)
  return _impl_.retention_period_.Release();
}
inline void FileMetadata::set_allocated_retention_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.retention_period_.IsDefault()) {
    _impl_.retention_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.retention_period)
}

// string origin_data_source = 24;
inline void FileMetadata::clear_origin_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_source_.ClearToEmpty();
}
inline const std::string& FileMetadata::origin_data_source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.origin_data_source)
  return _internal_origin_data_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_origin_data_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.origin_data_source)
}
inline std::string* FileMetadata::mutable_origin_data_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_origin_data_source();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.origin_data_source)
  return _s;
}
inline const std::string& FileMetadata::_internal_origin_data_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_data_source_.Get();
}
inline void FileMetadata::_internal_set_origin_data_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_source_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_origin_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.origin_data_source_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_origin_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.origin_data_source)
  return _impl_.origin_data_source_.Release();
}
inline void FileMetadata::set_allocated_origin_data_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.origin_data_source_.IsDefault()) {
    _impl_.origin_data_source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.origin_data_source)
}

// string last_modified_timestamp = 25;
inline void FileMetadata::clear_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.ClearToEmpty();
}
inline const std::string& FileMetadata::last_modified_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.last_modified_timestamp)
  return _internal_last_modified_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_last_modified_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.last_modified_timestamp)
}
inline std::string* FileMetadata::mutable_last_modified_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_modified_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.last_modified_timestamp)
  return _s;
}
inline const std::string& FileMetadata::_internal_last_modified_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_timestamp_.Get();
}
inline void FileMetadata::_internal_set_last_modified_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_modified_timestamp_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.last_modified_timestamp)
  return _impl_.last_modified_timestamp_.Release();
}
inline void FileMetadata::set_allocated_last_modified_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_modified_timestamp_.IsDefault()) {
    _impl_.last_modified_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.last_modified_timestamp)
}

// repeated string format_conversion_history = 26;
inline int FileMetadata::_internal_format_conversion_history_size() const {
  return _internal_format_conversion_history().size();
}
inline int FileMetadata::format_conversion_history_size() const {
  return _internal_format_conversion_history_size();
}
inline void FileMetadata::clear_format_conversion_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_conversion_history_.Clear();
}
inline std::string* FileMetadata::add_format_conversion_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_format_conversion_history()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.file_metadata.FileMetadata.format_conversion_history)
  return _s;
}
inline const std::string& FileMetadata::format_conversion_history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.format_conversion_history)
  return _internal_format_conversion_history().Get(index);
}
inline std::string* FileMetadata::mutable_format_conversion_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.format_conversion_history)
  return _internal_mutable_format_conversion_history()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::set_format_conversion_history(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_format_conversion_history()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.format_conversion_history)
}
template <typename Arg_, typename... Args_>
inline void FileMetadata::add_format_conversion_history(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_format_conversion_history(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.file_metadata.FileMetadata.format_conversion_history)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::format_conversion_history() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.file_metadata.FileMetadata.format_conversion_history)
  return _internal_format_conversion_history();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::mutable_format_conversion_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.file_metadata.FileMetadata.format_conversion_history)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_format_conversion_history();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FileMetadata::_internal_format_conversion_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_conversion_history_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FileMetadata::_internal_mutable_format_conversion_history() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.format_conversion_history_;
}

// string primary_backup_location = 27;
inline void FileMetadata::clear_primary_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_backup_location_.ClearToEmpty();
}
inline const std::string& FileMetadata::primary_backup_location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.file_metadata.FileMetadata.primary_backup_location)
  return _internal_primary_backup_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMetadata::set_primary_backup_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_backup_location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.file_metadata.FileMetadata.primary_backup_location)
}
inline std::string* FileMetadata::mutable_primary_backup_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_backup_location();
  // @@protoc_insertion_point(field_mutable:seigr.file_metadata.FileMetadata.primary_backup_location)
  return _s;
}
inline const std::string& FileMetadata::_internal_primary_backup_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_backup_location_.Get();
}
inline void FileMetadata::_internal_set_primary_backup_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_backup_location_.Set(value, GetArena());
}
inline std::string* FileMetadata::_internal_mutable_primary_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_backup_location_.Mutable( GetArena());
}
inline std::string* FileMetadata::release_primary_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.file_metadata.FileMetadata.primary_backup_location)
  return _impl_.primary_backup_location_.Release();
}
inline void FileMetadata::set_allocated_primary_backup_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_backup_location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_backup_location_.IsDefault()) {
    _impl_.primary_backup_location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.file_metadata.FileMetadata.primary_backup_location)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace file_metadata
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::file_metadata::FileType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::file_metadata::FileType>() {
  return ::seigr::file_metadata::FileType_descriptor();
}
template <>
struct is_proto_enum<::seigr::file_metadata::FileStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::file_metadata::FileStatus>() {
  return ::seigr::file_metadata::FileStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // file_5fmetadata_2eproto_2epb_2eh
