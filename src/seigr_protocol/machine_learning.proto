syntax = "proto3";

package seigr.machine_learning;

import "google/protobuf/timestamp.proto";

// GenesisState captures the adaptive and learning state of a .seigr file.
message GenesisState {
    string id = 1; // Unique identifier for the .seigr file state.
    repeated RouteUpdate routing_table = 2; // Dynamic routing information.
    MLModule ml_module = 3; // Embedded ML module for learning.
    Feedback feedback = 4; // Feedback integration details.
    repeated HistoryEntry history = 5; // Traceable lineage entries.
    google.protobuf.Timestamp last_updated = 6; // Timestamp of the last state update.
    repeated ExternalEvent external_events = 7; // External stimuli impacting state.
}

// MLModule defines the embedded machine learning module within a .seigr file.
message MLModule {
    string model_id = 1; // Identifier for the ML model.
    string model_type = 2; // Type of ML model (e.g., neural network, decision tree, transformer).
    map<string, string> hyperparameters = 3; // Key-value pairs for hyperparameter tuning.
    repeated string training_data_sources = 4; // URIs or identifiers for training data.
    google.protobuf.Timestamp last_trained = 5; // Timestamp of the last training.
    repeated string generated_rules = 6; // Rules generated by the model.
    EvaluationMetrics evaluation_metrics = 7; // Metrics to evaluate model performance.
    ModelState model_state = 8; // Current state of the model (e.g., active, deprecated).
}

// Feedback captures human and external feedback to refine learning processes.
message Feedback {
    string feedback_id = 1; // Unique identifier for the feedback entry.
    string source = 2; // Source of feedback (e.g., human, external system).
    string type = 3; // Type of feedback (e.g., positive, negative, corrective).
    string content = 4; // Content of the feedback.
    google.protobuf.Timestamp timestamp = 5; // When the feedback was provided.
    map<string, float> impact_analysis = 6; // Analysis of feedback impact on learning.
}

// HistoryEntry tracks lineage and evolution of a .seigr file.
message HistoryEntry {
    string entry_id = 1; // Unique identifier for the history entry.
    string description = 2; // Description of the change.
    google.protobuf.Timestamp timestamp = 3; // Timestamp of the change.
    string changed_by = 4; // Identifier for the entity that made the change.
    map<string, string> metadata = 5; // Additional metadata about the change.
}

// RouteUpdate defines dynamic adjustments in connections between .seigr files.
message RouteUpdate {
    string target_id = 1; // ID of the target .seigr file.
    string action = 2; // Action to be taken (e.g., add, remove, modify).
    map<string, string> metadata = 3; // Metadata for the routing update.
    repeated string dependent_routes = 4; // Routes affected by this update.
}

// SystemSnapshot captures the global state of the Seigr ecosystem.
message SystemSnapshot {
    string snapshot_id = 1; // Unique identifier for the snapshot.
    repeated GenesisState states = 2; // Current states of all .seigr files.
    google.protobuf.Timestamp created_at = 3; // Timestamp of snapshot creation.
    string creator = 4; // Identifier of the entity creating the snapshot.
}

// EvaluationMetrics captures the performance of the ML model.
message EvaluationMetrics {
    float accuracy = 1; // Accuracy of the model.
    float precision = 2; // Precision metric.
    float recall = 3; // Recall metric.
    float f1_score = 4; // F1 score.
    map<string, float> additional_metrics = 5; // Additional custom metrics.
}

// ModelState defines the current state of the ML model.
enum ModelState {
    ACTIVE = 0; // Model is active and in use.
    DEPRECATED = 1; // Model is deprecated and not used.
    TRAINING = 2; // Model is currently being trained.
    TESTING = 3; // Model is under testing.
    ARCHIVED = 4; // Model is archived and stored for reference.
}

// ExternalEvent captures external stimuli impacting the .seigr file state.
message ExternalEvent {
    string event_id = 1; // Unique identifier for the event.
    string type = 2; // Type of the event (e.g., sensor input, system alert).
    string description = 3; // Description of the event.
    google.protobuf.Timestamp timestamp = 4; // When the event occurred.
    map<string, string> metadata = 5; // Additional data about the event.
}
