// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: user_management.proto
// Protobuf C++ Version: 5.29.2

#ifndef user_5fmanagement_2eproto_2epb_2eh
#define user_5fmanagement_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "access_control.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_5fmanagement_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fmanagement_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_user_5fmanagement_2eproto;
namespace seigr {
namespace user_management {
class UserAccessLog;
struct UserAccessLogDefaultTypeInternal;
extern UserAccessLogDefaultTypeInternal _UserAccessLog_default_instance_;
class UserAccessLog_MetadataEntry_DoNotUse;
struct UserAccessLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern UserAccessLog_MetadataEntry_DoNotUseDefaultTypeInternal _UserAccessLog_MetadataEntry_DoNotUse_default_instance_;
class UserManagement;
struct UserManagementDefaultTypeInternal;
extern UserManagementDefaultTypeInternal _UserManagement_default_instance_;
class UserManagement_ManagementMetadataEntry_DoNotUse;
struct UserManagement_ManagementMetadataEntry_DoNotUseDefaultTypeInternal;
extern UserManagement_ManagementMetadataEntry_DoNotUseDefaultTypeInternal _UserManagement_ManagementMetadataEntry_DoNotUse_default_instance_;
class UserPermissions;
struct UserPermissionsDefaultTypeInternal;
extern UserPermissionsDefaultTypeInternal _UserPermissions_default_instance_;
class UserPermissions_ContextEntry_DoNotUse;
struct UserPermissions_ContextEntry_DoNotUseDefaultTypeInternal;
extern UserPermissions_ContextEntry_DoNotUseDefaultTypeInternal _UserPermissions_ContextEntry_DoNotUse_default_instance_;
class UserPermissions_ResourceRestrictionsEntry_DoNotUse;
struct UserPermissions_ResourceRestrictionsEntry_DoNotUseDefaultTypeInternal;
extern UserPermissions_ResourceRestrictionsEntry_DoNotUseDefaultTypeInternal _UserPermissions_ResourceRestrictionsEntry_DoNotUse_default_instance_;
class UserPreferences;
struct UserPreferencesDefaultTypeInternal;
extern UserPreferencesDefaultTypeInternal _UserPreferences_default_instance_;
class UserPreferences_PermissionNotificationsEntry_DoNotUse;
struct UserPreferences_PermissionNotificationsEntry_DoNotUseDefaultTypeInternal;
extern UserPreferences_PermissionNotificationsEntry_DoNotUseDefaultTypeInternal _UserPreferences_PermissionNotificationsEntry_DoNotUse_default_instance_;
class UserPreferences_UiCustomizationsEntry_DoNotUse;
struct UserPreferences_UiCustomizationsEntry_DoNotUseDefaultTypeInternal;
extern UserPreferences_UiCustomizationsEntry_DoNotUseDefaultTypeInternal _UserPreferences_UiCustomizationsEntry_DoNotUse_default_instance_;
class UserProfile;
struct UserProfileDefaultTypeInternal;
extern UserProfileDefaultTypeInternal _UserProfile_default_instance_;
class UserProfile_ProfileMetadataEntry_DoNotUse;
struct UserProfile_ProfileMetadataEntry_DoNotUseDefaultTypeInternal;
extern UserProfile_ProfileMetadataEntry_DoNotUseDefaultTypeInternal _UserProfile_ProfileMetadataEntry_DoNotUse_default_instance_;
class UserProfile_SecurityKeysEntry_DoNotUse;
struct UserProfile_SecurityKeysEntry_DoNotUseDefaultTypeInternal;
extern UserProfile_SecurityKeysEntry_DoNotUseDefaultTypeInternal _UserProfile_SecurityKeysEntry_DoNotUse_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserResponse;
struct UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
}  // namespace user_management
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace user_management {
enum AccountStatus : int {
  ACCOUNT_STATUS_UNDEFINED = 0,
  ACCOUNT_ACTIVE = 1,
  ACCOUNT_SUSPENDED = 2,
  ACCOUNT_DEACTIVATED = 3,
  ACCOUNT_PENDING_VERIFICATION = 4,
  ACCOUNT_LOCKED = 5,
  AccountStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AccountStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AccountStatus_IsValid(int value);
extern const uint32_t AccountStatus_internal_data_[];
constexpr AccountStatus AccountStatus_MIN = static_cast<AccountStatus>(0);
constexpr AccountStatus AccountStatus_MAX = static_cast<AccountStatus>(5);
constexpr int AccountStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
AccountStatus_descriptor();
template <typename T>
const std::string& AccountStatus_Name(T value) {
  static_assert(std::is_same<T, AccountStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AccountStatus_Name().");
  return AccountStatus_Name(static_cast<AccountStatus>(value));
}
template <>
inline const std::string& AccountStatus_Name(AccountStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AccountStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool AccountStatus_Parse(absl::string_view name, AccountStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountStatus>(
      AccountStatus_descriptor(), name, value);
}
enum AuthenticationMethod : int {
  AUTH_UNDEFINED = 0,
  AUTH_PASSWORD = 1,
  AUTH_BIOMETRIC = 2,
  AUTH_OTP = 3,
  AUTH_TOKEN = 4,
  AUTH_CERTIFICATE = 5,
  AUTH_SSO = 6,
  AuthenticationMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthenticationMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthenticationMethod_IsValid(int value);
extern const uint32_t AuthenticationMethod_internal_data_[];
constexpr AuthenticationMethod AuthenticationMethod_MIN = static_cast<AuthenticationMethod>(0);
constexpr AuthenticationMethod AuthenticationMethod_MAX = static_cast<AuthenticationMethod>(6);
constexpr int AuthenticationMethod_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
AuthenticationMethod_descriptor();
template <typename T>
const std::string& AuthenticationMethod_Name(T value) {
  static_assert(std::is_same<T, AuthenticationMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthenticationMethod_Name().");
  return AuthenticationMethod_Name(static_cast<AuthenticationMethod>(value));
}
template <>
inline const std::string& AuthenticationMethod_Name(AuthenticationMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthenticationMethod_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool AuthenticationMethod_Parse(absl::string_view name, AuthenticationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthenticationMethod>(
      AuthenticationMethod_descriptor(), name, value);
}
enum UserActionType : int {
  ACTION_UNDEFINED = 0,
  ACTION_LOGIN = 1,
  ACTION_LOGOUT = 2,
  ACTION_VIEW = 3,
  ACTION_EDIT = 4,
  ACTION_DELETE = 5,
  ACTION_EXPORT = 6,
  UserActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserActionType_IsValid(int value);
extern const uint32_t UserActionType_internal_data_[];
constexpr UserActionType UserActionType_MIN = static_cast<UserActionType>(0);
constexpr UserActionType UserActionType_MAX = static_cast<UserActionType>(6);
constexpr int UserActionType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
UserActionType_descriptor();
template <typename T>
const std::string& UserActionType_Name(T value) {
  static_assert(std::is_same<T, UserActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UserActionType_Name().");
  return UserActionType_Name(static_cast<UserActionType>(value));
}
template <>
inline const std::string& UserActionType_Name(UserActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserActionType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool UserActionType_Parse(absl::string_view name, UserActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserActionType>(
      UserActionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserResponse) */ {
 public:
  inline UserResponse() : UserResponse(nullptr) {}
  ~UserResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserResponse(const UserResponse& from) : UserResponse(nullptr, from) {}
  inline UserResponse(UserResponse&& from) noexcept
      : UserResponse(nullptr, std::move(from)) {}
  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
        &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UserResponse& a, UserResponse& b) { a.Swap(&b); }
  inline void Swap(UserResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserResponse& from) { UserResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserResponse"; }

 protected:
  explicit UserResponse(::google::protobuf::Arena* arena);
  UserResponse(::google::protobuf::Arena* arena, const UserResponse& from);
  UserResponse(::google::protobuf::Arena* arena, UserResponse&& from) noexcept
      : UserResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserRequest(const UserRequest& from) : UserRequest(nullptr, from) {}
  inline UserRequest(UserRequest&& from) noexcept
      : UserRequest(nullptr, std::move(from)) {}
  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
        &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(UserRequest& a, UserRequest& b) { a.Swap(&b); }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserRequest& from) { UserRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserRequest"; }

 protected:
  explicit UserRequest(::google::protobuf::Arena* arena);
  UserRequest(::google::protobuf::Arena* arena, const UserRequest& from);
  UserRequest(::google::protobuf::Arena* arena, UserRequest&& from) noexcept
      : UserRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserProfile_SecurityKeysEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BYTES> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>;
  UserProfile_SecurityKeysEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserProfile_SecurityKeysEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserProfile_SecurityKeysEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserProfile_SecurityKeysEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserProfile_SecurityKeysEntry_DoNotUse*>(
        &_UserProfile_SecurityKeysEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserProfile_ProfileMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserProfile_ProfileMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserProfile_ProfileMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserProfile_ProfileMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserProfile_ProfileMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserProfile_ProfileMetadataEntry_DoNotUse*>(
        &_UserProfile_ProfileMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserPreferences_UiCustomizationsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserPreferences_UiCustomizationsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPreferences_UiCustomizationsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserPreferences_UiCustomizationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserPreferences_UiCustomizationsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserPreferences_UiCustomizationsEntry_DoNotUse*>(
        &_UserPreferences_UiCustomizationsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserPreferences_PermissionNotificationsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  UserPreferences_PermissionNotificationsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPreferences_PermissionNotificationsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserPreferences_PermissionNotificationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserPreferences_PermissionNotificationsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserPreferences_PermissionNotificationsEntry_DoNotUse*>(
        &_UserPreferences_PermissionNotificationsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserPermissions_ResourceRestrictionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  UserPermissions_ResourceRestrictionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPermissions_ResourceRestrictionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserPermissions_ResourceRestrictionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserPermissions_ResourceRestrictionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserPermissions_ResourceRestrictionsEntry_DoNotUse*>(
        &_UserPermissions_ResourceRestrictionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserPermissions_ContextEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserPermissions_ContextEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPermissions_ContextEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserPermissions_ContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserPermissions_ContextEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserPermissions_ContextEntry_DoNotUse*>(
        &_UserPermissions_ContextEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserManagement_ManagementMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserManagement_ManagementMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserManagement_ManagementMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserManagement_ManagementMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserManagement_ManagementMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserManagement_ManagementMetadataEntry_DoNotUse*>(
        &_UserManagement_ManagementMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserAccessLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserAccessLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserAccessLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserAccessLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserAccessLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserAccessLog_MetadataEntry_DoNotUse*>(
        &_UserAccessLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_user_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserProfile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserProfile) */ {
 public:
  inline UserProfile() : UserProfile(nullptr) {}
  ~UserProfile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserProfile* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserProfile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserProfile(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserProfile(const UserProfile& from) : UserProfile(nullptr, from) {}
  inline UserProfile(UserProfile&& from) noexcept
      : UserProfile(nullptr, std::move(from)) {}
  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProfile& operator=(UserProfile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserProfile*>(
        &_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserProfile& a, UserProfile& b) { a.Swap(&b); }
  inline void Swap(UserProfile* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserProfile* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserProfile& from) { UserProfile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserProfile* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserProfile"; }

 protected:
  explicit UserProfile(::google::protobuf::Arena* arena);
  UserProfile(::google::protobuf::Arena* arena, const UserProfile& from);
  UserProfile(::google::protobuf::Arena* arena, UserProfile&& from) noexcept
      : UserProfile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRolesFieldNumber = 4,
    kProfileMetadataFieldNumber = 9,
    kSecurityKeysFieldNumber = 10,
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kCreatedAtFieldNumber = 7,
    kLastLoginFieldNumber = 8,
    kAccountRecoveryEmailFieldNumber = 11,
    kPhoneNumberFieldNumber = 12,
    kProfileImageUrlFieldNumber = 13,
    kDisplayNameFieldNumber = 14,
    kAccountStatusFieldNumber = 5,
    kAuthMethodFieldNumber = 6,
  };
  // repeated .seigr.access_control.RoleType roles = 4;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  public:
  ::seigr::access_control::RoleType roles(int index) const;
  void set_roles(int index, ::seigr::access_control::RoleType value);
  void add_roles(::seigr::access_control::RoleType value);
  const ::google::protobuf::RepeatedField<int>& roles() const;
  ::google::protobuf::RepeatedField<int>* mutable_roles();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_roles() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_roles();

  public:
  // map<string, string> profile_metadata = 9;
  int profile_metadata_size() const;
  private:
  int _internal_profile_metadata_size() const;

  public:
  void clear_profile_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& profile_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_profile_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_profile_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_profile_metadata();

  public:
  // map<string, bytes> security_keys = 10;
  int security_keys_size() const;
  private:
  int _internal_security_keys_size() const;

  public:
  void clear_security_keys() ;
  const ::google::protobuf::Map<std::string, std::string>& security_keys() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_security_keys();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_security_keys() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_security_keys();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string created_at = 7;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string last_login = 8;
  void clear_last_login() ;
  const std::string& last_login() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_login(Arg_&& arg, Args_... args);
  std::string* mutable_last_login();
  PROTOBUF_NODISCARD std::string* release_last_login();
  void set_allocated_last_login(std::string* value);

  private:
  const std::string& _internal_last_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_login(
      const std::string& value);
  std::string* _internal_mutable_last_login();

  public:
  // string account_recovery_email = 11;
  void clear_account_recovery_email() ;
  const std::string& account_recovery_email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_recovery_email(Arg_&& arg, Args_... args);
  std::string* mutable_account_recovery_email();
  PROTOBUF_NODISCARD std::string* release_account_recovery_email();
  void set_allocated_account_recovery_email(std::string* value);

  private:
  const std::string& _internal_account_recovery_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_recovery_email(
      const std::string& value);
  std::string* _internal_mutable_account_recovery_email();

  public:
  // string phone_number = 12;
  void clear_phone_number() ;
  const std::string& phone_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone_number(Arg_&& arg, Args_... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* value);

  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(
      const std::string& value);
  std::string* _internal_mutable_phone_number();

  public:
  // string profile_image_url = 13;
  void clear_profile_image_url() ;
  const std::string& profile_image_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile_image_url(Arg_&& arg, Args_... args);
  std::string* mutable_profile_image_url();
  PROTOBUF_NODISCARD std::string* release_profile_image_url();
  void set_allocated_profile_image_url(std::string* value);

  private:
  const std::string& _internal_profile_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_image_url(
      const std::string& value);
  std::string* _internal_mutable_profile_image_url();

  public:
  // string display_name = 14;
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // .seigr.user_management.AccountStatus account_status = 5;
  void clear_account_status() ;
  ::seigr::user_management::AccountStatus account_status() const;
  void set_account_status(::seigr::user_management::AccountStatus value);

  private:
  ::seigr::user_management::AccountStatus _internal_account_status() const;
  void _internal_set_account_status(::seigr::user_management::AccountStatus value);

  public:
  // .seigr.user_management.AuthenticationMethod auth_method = 6;
  void clear_auth_method() ;
  ::seigr::user_management::AuthenticationMethod auth_method() const;
  void set_auth_method(::seigr::user_management::AuthenticationMethod value);

  private:
  ::seigr::user_management::AuthenticationMethod _internal_auth_method() const;
  void _internal_set_auth_method(::seigr::user_management::AuthenticationMethod value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserProfile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 2,
      182, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserProfile& from_msg);
    ::google::protobuf::RepeatedField<int> roles_;
    ::google::protobuf::internal::CachedSize _roles_cached_byte_size_;
    ::google::protobuf::internal::MapField<UserProfile_ProfileMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        profile_metadata_;
    ::google::protobuf::internal::MapField<UserProfile_SecurityKeysEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>
        security_keys_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr last_login_;
    ::google::protobuf::internal::ArenaStringPtr account_recovery_email_;
    ::google::protobuf::internal::ArenaStringPtr phone_number_;
    ::google::protobuf::internal::ArenaStringPtr profile_image_url_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    int account_status_;
    int auth_method_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserPreferences final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserPreferences) */ {
 public:
  inline UserPreferences() : UserPreferences(nullptr) {}
  ~UserPreferences() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserPreferences* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserPreferences));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPreferences(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserPreferences(const UserPreferences& from) : UserPreferences(nullptr, from) {}
  inline UserPreferences(UserPreferences&& from) noexcept
      : UserPreferences(nullptr, std::move(from)) {}
  inline UserPreferences& operator=(const UserPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPreferences& operator=(UserPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPreferences* internal_default_instance() {
    return reinterpret_cast<const UserPreferences*>(
        &_UserPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(UserPreferences& a, UserPreferences& b) { a.Swap(&b); }
  inline void Swap(UserPreferences* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPreferences* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPreferences* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserPreferences>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserPreferences& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserPreferences& from) { UserPreferences::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserPreferences* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserPreferences"; }

 protected:
  explicit UserPreferences(::google::protobuf::Arena* arena);
  UserPreferences(::google::protobuf::Arena* arena, const UserPreferences& from);
  UserPreferences(::google::protobuf::Arena* arena, UserPreferences&& from) noexcept
      : UserPreferences(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuthMethodsFieldNumber = 2,
    kPermissionNotificationsFieldNumber = 6,
    kUiCustomizationsFieldNumber = 7,
    kFavoriteFeaturesFieldNumber = 10,
    kUserIdFieldNumber = 1,
    kPreferredLanguageFieldNumber = 4,
    kTimezoneFieldNumber = 8,
    kTwoFactorEnabledFieldNumber = 3,
    kReceiveNotificationsFieldNumber = 5,
    kDarkModeEnabledFieldNumber = 9,
  };
  // repeated .seigr.user_management.AuthenticationMethod auth_methods = 2;
  int auth_methods_size() const;
  private:
  int _internal_auth_methods_size() const;

  public:
  void clear_auth_methods() ;
  public:
  ::seigr::user_management::AuthenticationMethod auth_methods(int index) const;
  void set_auth_methods(int index, ::seigr::user_management::AuthenticationMethod value);
  void add_auth_methods(::seigr::user_management::AuthenticationMethod value);
  const ::google::protobuf::RepeatedField<int>& auth_methods() const;
  ::google::protobuf::RepeatedField<int>* mutable_auth_methods();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_auth_methods() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_auth_methods();

  public:
  // map<string, bool> permission_notifications = 6;
  int permission_notifications_size() const;
  private:
  int _internal_permission_notifications_size() const;

  public:
  void clear_permission_notifications() ;
  const ::google::protobuf::Map<std::string, bool>& permission_notifications() const;
  ::google::protobuf::Map<std::string, bool>* mutable_permission_notifications();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_permission_notifications() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_permission_notifications();

  public:
  // map<string, string> ui_customizations = 7;
  int ui_customizations_size() const;
  private:
  int _internal_ui_customizations_size() const;

  public:
  void clear_ui_customizations() ;
  const ::google::protobuf::Map<std::string, std::string>& ui_customizations() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_ui_customizations();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_ui_customizations() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_ui_customizations();

  public:
  // repeated string favorite_features = 10;
  int favorite_features_size() const;
  private:
  int _internal_favorite_features_size() const;

  public:
  void clear_favorite_features() ;
  const std::string& favorite_features(int index) const;
  std::string* mutable_favorite_features(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_favorite_features(int index, Arg_&& value, Args_... args);
  std::string* add_favorite_features();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_favorite_features(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& favorite_features() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_favorite_features();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_favorite_features() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_favorite_features();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string preferred_language = 4;
  void clear_preferred_language() ;
  const std::string& preferred_language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_language(Arg_&& arg, Args_... args);
  std::string* mutable_preferred_language();
  PROTOBUF_NODISCARD std::string* release_preferred_language();
  void set_allocated_preferred_language(std::string* value);

  private:
  const std::string& _internal_preferred_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_language(
      const std::string& value);
  std::string* _internal_mutable_preferred_language();

  public:
  // string timezone = 8;
  void clear_timezone() ;
  const std::string& timezone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* value);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // bool two_factor_enabled = 3;
  void clear_two_factor_enabled() ;
  bool two_factor_enabled() const;
  void set_two_factor_enabled(bool value);

  private:
  bool _internal_two_factor_enabled() const;
  void _internal_set_two_factor_enabled(bool value);

  public:
  // bool receive_notifications = 5;
  void clear_receive_notifications() ;
  bool receive_notifications() const;
  void set_receive_notifications(bool value);

  private:
  bool _internal_receive_notifications() const;
  void _internal_set_receive_notifications(bool value);

  public:
  // bool dark_mode_enabled = 9;
  void clear_dark_mode_enabled() ;
  bool dark_mode_enabled() const;
  void set_dark_mode_enabled(bool value);

  private:
  bool _internal_dark_mode_enabled() const;
  void _internal_set_dark_mode_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserPreferences)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      145, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserPreferences& from_msg);
    ::google::protobuf::RepeatedField<int> auth_methods_;
    ::google::protobuf::internal::CachedSize _auth_methods_cached_byte_size_;
    ::google::protobuf::internal::MapField<UserPreferences_PermissionNotificationsEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        permission_notifications_;
    ::google::protobuf::internal::MapField<UserPreferences_UiCustomizationsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        ui_customizations_;
    ::google::protobuf::RepeatedPtrField<std::string> favorite_features_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr preferred_language_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
    bool two_factor_enabled_;
    bool receive_notifications_;
    bool dark_mode_enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserPermissions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserPermissions) */ {
 public:
  inline UserPermissions() : UserPermissions(nullptr) {}
  ~UserPermissions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserPermissions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserPermissions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPermissions(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserPermissions(const UserPermissions& from) : UserPermissions(nullptr, from) {}
  inline UserPermissions(UserPermissions&& from) noexcept
      : UserPermissions(nullptr, std::move(from)) {}
  inline UserPermissions& operator=(const UserPermissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPermissions& operator=(UserPermissions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPermissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPermissions* internal_default_instance() {
    return reinterpret_cast<const UserPermissions*>(
        &_UserPermissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UserPermissions& a, UserPermissions& b) { a.Swap(&b); }
  inline void Swap(UserPermissions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPermissions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPermissions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserPermissions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserPermissions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserPermissions& from) { UserPermissions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserPermissions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserPermissions"; }

 protected:
  explicit UserPermissions(::google::protobuf::Arena* arena);
  UserPermissions(::google::protobuf::Arena* arena, const UserPermissions& from);
  UserPermissions(::google::protobuf::Arena* arena, UserPermissions&& from) noexcept
      : UserPermissions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermissionsFieldNumber = 2,
    kContextFieldNumber = 3,
    kResourceRestrictionsFieldNumber = 6,
    kAuthorizedDevicesFieldNumber = 7,
    kAccessZonesFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kExpiryFieldNumber = 4,
    kIsAdminOverrideFieldNumber = 5,
  };
  // repeated .seigr.access_control.PermissionType permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  public:
  ::seigr::access_control::PermissionType permissions(int index) const;
  void set_permissions(int index, ::seigr::access_control::PermissionType value);
  void add_permissions(::seigr::access_control::PermissionType value);
  const ::google::protobuf::RepeatedField<int>& permissions() const;
  ::google::protobuf::RepeatedField<int>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_permissions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_permissions();

  public:
  // map<string, string> context = 3;
  int context_size() const;
  private:
  int _internal_context_size() const;

  public:
  void clear_context() ;
  const ::google::protobuf::Map<std::string, std::string>& context() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_context();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_context() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_context();

  public:
  // map<string, bool> resource_restrictions = 6;
  int resource_restrictions_size() const;
  private:
  int _internal_resource_restrictions_size() const;

  public:
  void clear_resource_restrictions() ;
  const ::google::protobuf::Map<std::string, bool>& resource_restrictions() const;
  ::google::protobuf::Map<std::string, bool>* mutable_resource_restrictions();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_resource_restrictions() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_resource_restrictions();

  public:
  // repeated string authorized_devices = 7;
  int authorized_devices_size() const;
  private:
  int _internal_authorized_devices_size() const;

  public:
  void clear_authorized_devices() ;
  const std::string& authorized_devices(int index) const;
  std::string* mutable_authorized_devices(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_devices(int index, Arg_&& value, Args_... args);
  std::string* add_authorized_devices();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_authorized_devices(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& authorized_devices() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_authorized_devices();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_authorized_devices() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_authorized_devices();

  public:
  // repeated string access_zones = 8;
  int access_zones_size() const;
  private:
  int _internal_access_zones_size() const;

  public:
  void clear_access_zones() ;
  const std::string& access_zones(int index) const;
  std::string* mutable_access_zones(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_zones(int index, Arg_&& value, Args_... args);
  std::string* add_access_zones();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_access_zones(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& access_zones() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_access_zones();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_access_zones() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_access_zones();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string expiry = 4;
  void clear_expiry() ;
  const std::string& expiry() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry(Arg_&& arg, Args_... args);
  std::string* mutable_expiry();
  PROTOBUF_NODISCARD std::string* release_expiry();
  void set_allocated_expiry(std::string* value);

  private:
  const std::string& _internal_expiry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry(
      const std::string& value);
  std::string* _internal_mutable_expiry();

  public:
  // bool is_admin_override = 5;
  void clear_is_admin_override() ;
  bool is_admin_override() const;
  void set_is_admin_override(bool value);

  private:
  bool _internal_is_admin_override() const;
  void _internal_set_is_admin_override(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserPermissions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      125, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserPermissions& from_msg);
    ::google::protobuf::RepeatedField<int> permissions_;
    ::google::protobuf::internal::CachedSize _permissions_cached_byte_size_;
    ::google::protobuf::internal::MapField<UserPermissions_ContextEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        context_;
    ::google::protobuf::internal::MapField<UserPermissions_ResourceRestrictionsEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        resource_restrictions_;
    ::google::protobuf::RepeatedPtrField<std::string> authorized_devices_;
    ::google::protobuf::RepeatedPtrField<std::string> access_zones_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr expiry_;
    bool is_admin_override_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserAccessLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserAccessLog) */ {
 public:
  inline UserAccessLog() : UserAccessLog(nullptr) {}
  ~UserAccessLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserAccessLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserAccessLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserAccessLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserAccessLog(const UserAccessLog& from) : UserAccessLog(nullptr, from) {}
  inline UserAccessLog(UserAccessLog&& from) noexcept
      : UserAccessLog(nullptr, std::move(from)) {}
  inline UserAccessLog& operator=(const UserAccessLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAccessLog& operator=(UserAccessLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAccessLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAccessLog* internal_default_instance() {
    return reinterpret_cast<const UserAccessLog*>(
        &_UserAccessLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(UserAccessLog& a, UserAccessLog& b) { a.Swap(&b); }
  inline void Swap(UserAccessLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAccessLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAccessLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserAccessLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserAccessLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserAccessLog& from) { UserAccessLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserAccessLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserAccessLog"; }

 protected:
  explicit UserAccessLog(::google::protobuf::Arena* arena);
  UserAccessLog(::google::protobuf::Arena* arena, const UserAccessLog& from);
  UserAccessLog(::google::protobuf::Arena* arena, UserAccessLog&& from) noexcept
      : UserAccessLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kLogIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kResourceIdFieldNumber = 5,
    kDeviceIdFieldNumber = 8,
    kSessionIdFieldNumber = 9,
    kFailureReasonFieldNumber = 10,
    kActionFieldNumber = 3,
    kSuccessFieldNumber = 6,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string resource_id = 5;
  void clear_resource_id() ;
  const std::string& resource_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resource_id(Arg_&& arg, Args_... args);
  std::string* mutable_resource_id();
  PROTOBUF_NODISCARD std::string* release_resource_id();
  void set_allocated_resource_id(std::string* value);

  private:
  const std::string& _internal_resource_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_id(
      const std::string& value);
  std::string* _internal_mutable_resource_id();

  public:
  // string device_id = 8;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string session_id = 9;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string failure_reason = 10;
  void clear_failure_reason() ;
  const std::string& failure_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_failure_reason(Arg_&& arg, Args_... args);
  std::string* mutable_failure_reason();
  PROTOBUF_NODISCARD std::string* release_failure_reason();
  void set_allocated_failure_reason(std::string* value);

  private:
  const std::string& _internal_failure_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure_reason(
      const std::string& value);
  std::string* _internal_mutable_failure_reason();

  public:
  // .seigr.user_management.UserActionType action = 3;
  void clear_action() ;
  ::seigr::user_management::UserActionType action() const;
  void set_action(::seigr::user_management::UserActionType value);

  private:
  ::seigr::user_management::UserActionType _internal_action() const;
  void _internal_set_action(::seigr::user_management::UserActionType value);

  public:
  // bool success = 6;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserAccessLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserAccessLog& from_msg);
    ::google::protobuf::internal::MapField<UserAccessLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr resource_id_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr failure_reason_;
    int action_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class UserManagement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.user_management.UserManagement) */ {
 public:
  inline UserManagement() : UserManagement(nullptr) {}
  ~UserManagement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserManagement* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserManagement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserManagement(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserManagement(const UserManagement& from) : UserManagement(nullptr, from) {}
  inline UserManagement(UserManagement&& from) noexcept
      : UserManagement(nullptr, std::move(from)) {}
  inline UserManagement& operator=(const UserManagement& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserManagement& operator=(UserManagement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserManagement& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserManagement* internal_default_instance() {
    return reinterpret_cast<const UserManagement*>(
        &_UserManagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(UserManagement& a, UserManagement& b) { a.Swap(&b); }
  inline void Swap(UserManagement* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserManagement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserManagement* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserManagement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserManagement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserManagement& from) { UserManagement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserManagement* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.user_management.UserManagement"; }

 protected:
  explicit UserManagement(::google::protobuf::Arena* arena);
  UserManagement(::google::protobuf::Arena* arena, const UserManagement& from);
  UserManagement(::google::protobuf::Arena* arena, UserManagement&& from) noexcept
      : UserManagement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProfilesFieldNumber = 1,
    kPermissionsFieldNumber = 2,
    kPreferencesFieldNumber = 3,
    kAccessLogsFieldNumber = 4,
    kManagementMetadataFieldNumber = 6,
    kLastUpdatedFieldNumber = 5,
  };
  // repeated .seigr.user_management.UserProfile profiles = 1;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;

  public:
  void clear_profiles() ;
  ::seigr::user_management::UserProfile* mutable_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>* mutable_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>& _internal_profiles() const;
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>* _internal_mutable_profiles();
  public:
  const ::seigr::user_management::UserProfile& profiles(int index) const;
  ::seigr::user_management::UserProfile* add_profiles();
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>& profiles() const;
  // repeated .seigr.user_management.UserPermissions permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::seigr::user_management::UserPermissions* mutable_permissions(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>* _internal_mutable_permissions();
  public:
  const ::seigr::user_management::UserPermissions& permissions(int index) const;
  ::seigr::user_management::UserPermissions* add_permissions();
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>& permissions() const;
  // repeated .seigr.user_management.UserPreferences preferences = 3;
  int preferences_size() const;
  private:
  int _internal_preferences_size() const;

  public:
  void clear_preferences() ;
  ::seigr::user_management::UserPreferences* mutable_preferences(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>* mutable_preferences();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>& _internal_preferences() const;
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>* _internal_mutable_preferences();
  public:
  const ::seigr::user_management::UserPreferences& preferences(int index) const;
  ::seigr::user_management::UserPreferences* add_preferences();
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>& preferences() const;
  // repeated .seigr.user_management.UserAccessLog access_logs = 4;
  int access_logs_size() const;
  private:
  int _internal_access_logs_size() const;

  public:
  void clear_access_logs() ;
  ::seigr::user_management::UserAccessLog* mutable_access_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>* mutable_access_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>& _internal_access_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>* _internal_mutable_access_logs();
  public:
  const ::seigr::user_management::UserAccessLog& access_logs(int index) const;
  ::seigr::user_management::UserAccessLog* add_access_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>& access_logs() const;
  // map<string, string> management_metadata = 6;
  int management_metadata_size() const;
  private:
  int _internal_management_metadata_size() const;

  public:
  void clear_management_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& management_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_management_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_management_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_management_metadata();

  public:
  // string last_updated = 5;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // @@protoc_insertion_point(class_scope:seigr.user_management.UserManagement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserManagement& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::user_management::UserProfile > profiles_;
    ::google::protobuf::RepeatedPtrField< ::seigr::user_management::UserPermissions > permissions_;
    ::google::protobuf::RepeatedPtrField< ::seigr::user_management::UserPreferences > preferences_;
    ::google::protobuf::RepeatedPtrField< ::seigr::user_management::UserAccessLog > access_logs_;
    ::google::protobuf::internal::MapField<UserManagement_ManagementMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        management_metadata_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5fmanagement_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserProfile

// string user_id = 1;
inline void UserProfile::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserProfile::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.user_id)
}
inline std::string* UserProfile::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.user_id)
  return _s;
}
inline const std::string& UserProfile::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserProfile::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserProfile::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.user_id)
  return _impl_.user_id_.Release();
}
inline void UserProfile::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.user_id)
}

// string username = 2;
inline void UserProfile::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserProfile::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.username)
}
inline std::string* UserProfile::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.username)
  return _s;
}
inline const std::string& UserProfile::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void UserProfile::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UserProfile::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.username)
  return _impl_.username_.Release();
}
inline void UserProfile::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.username)
}

// string email = 3;
inline void UserProfile::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserProfile::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.email)
}
inline std::string* UserProfile::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.email)
  return _s;
}
inline const std::string& UserProfile::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void UserProfile::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* UserProfile::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.email)
  return _impl_.email_.Release();
}
inline void UserProfile::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.email)
}

// repeated .seigr.access_control.RoleType roles = 4;
inline int UserProfile::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int UserProfile::roles_size() const {
  return _internal_roles_size();
}
inline void UserProfile::clear_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roles_.Clear();
}
inline ::seigr::access_control::RoleType UserProfile::roles(int index) const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.roles)
  return static_cast<::seigr::access_control::RoleType>(_internal_roles().Get(index));
}
inline void UserProfile::set_roles(int index, ::seigr::access_control::RoleType value) {
  _internal_mutable_roles()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.roles)
}
inline void UserProfile::add_roles(::seigr::access_control::RoleType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_roles()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.user_management.UserProfile.roles)
}
inline const ::google::protobuf::RepeatedField<int>& UserProfile::roles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserProfile.roles)
  return _internal_roles();
}
inline ::google::protobuf::RepeatedField<int>* UserProfile::mutable_roles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserProfile.roles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_roles();
}
inline const ::google::protobuf::RepeatedField<int>& UserProfile::_internal_roles()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roles_;
}
inline ::google::protobuf::RepeatedField<int>* UserProfile::_internal_mutable_roles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.roles_;
}

// .seigr.user_management.AccountStatus account_status = 5;
inline void UserProfile::clear_account_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_status_ = 0;
}
inline ::seigr::user_management::AccountStatus UserProfile::account_status() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.account_status)
  return _internal_account_status();
}
inline void UserProfile::set_account_status(::seigr::user_management::AccountStatus value) {
  _internal_set_account_status(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.account_status)
}
inline ::seigr::user_management::AccountStatus UserProfile::_internal_account_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::user_management::AccountStatus>(_impl_.account_status_);
}
inline void UserProfile::_internal_set_account_status(::seigr::user_management::AccountStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_status_ = value;
}

// .seigr.user_management.AuthenticationMethod auth_method = 6;
inline void UserProfile::clear_auth_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_method_ = 0;
}
inline ::seigr::user_management::AuthenticationMethod UserProfile::auth_method() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.auth_method)
  return _internal_auth_method();
}
inline void UserProfile::set_auth_method(::seigr::user_management::AuthenticationMethod value) {
  _internal_set_auth_method(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.auth_method)
}
inline ::seigr::user_management::AuthenticationMethod UserProfile::_internal_auth_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::user_management::AuthenticationMethod>(_impl_.auth_method_);
}
inline void UserProfile::_internal_set_auth_method(::seigr::user_management::AuthenticationMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_method_ = value;
}

// string created_at = 7;
inline void UserProfile::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& UserProfile::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.created_at)
}
inline std::string* UserProfile::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.created_at)
  return _s;
}
inline const std::string& UserProfile::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void UserProfile::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* UserProfile::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.created_at)
  return _impl_.created_at_.Release();
}
inline void UserProfile::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.created_at)
}

// string last_login = 8;
inline void UserProfile::clear_last_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_.ClearToEmpty();
}
inline const std::string& UserProfile::last_login() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.last_login)
  return _internal_last_login();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_last_login(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.last_login)
}
inline std::string* UserProfile::mutable_last_login() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_login();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.last_login)
  return _s;
}
inline const std::string& UserProfile::_internal_last_login() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_login_.Get();
}
inline void UserProfile::_internal_set_last_login(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_last_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_login_.Mutable( GetArena());
}
inline std::string* UserProfile::release_last_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.last_login)
  return _impl_.last_login_.Release();
}
inline void UserProfile::set_allocated_last_login(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_login_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_login_.IsDefault()) {
    _impl_.last_login_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.last_login)
}

// map<string, string> profile_metadata = 9;
inline int UserProfile::_internal_profile_metadata_size() const {
  return _internal_profile_metadata().size();
}
inline int UserProfile::profile_metadata_size() const {
  return _internal_profile_metadata_size();
}
inline void UserProfile::clear_profile_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profile_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserProfile::_internal_profile_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.profile_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserProfile::profile_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserProfile.profile_metadata)
  return _internal_profile_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UserProfile::_internal_mutable_profile_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.profile_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserProfile::mutable_profile_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserProfile.profile_metadata)
  return _internal_mutable_profile_metadata();
}

// map<string, bytes> security_keys = 10;
inline int UserProfile::_internal_security_keys_size() const {
  return _internal_security_keys().size();
}
inline int UserProfile::security_keys_size() const {
  return _internal_security_keys_size();
}
inline void UserProfile::clear_security_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_keys_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserProfile::_internal_security_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.security_keys_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserProfile::security_keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserProfile.security_keys)
  return _internal_security_keys();
}
inline ::google::protobuf::Map<std::string, std::string>* UserProfile::_internal_mutable_security_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.security_keys_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserProfile::mutable_security_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserProfile.security_keys)
  return _internal_mutable_security_keys();
}

// string account_recovery_email = 11;
inline void UserProfile::clear_account_recovery_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_recovery_email_.ClearToEmpty();
}
inline const std::string& UserProfile::account_recovery_email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.account_recovery_email)
  return _internal_account_recovery_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_account_recovery_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_recovery_email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.account_recovery_email)
}
inline std::string* UserProfile::mutable_account_recovery_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account_recovery_email();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.account_recovery_email)
  return _s;
}
inline const std::string& UserProfile::_internal_account_recovery_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_recovery_email_.Get();
}
inline void UserProfile::_internal_set_account_recovery_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_recovery_email_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_account_recovery_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.account_recovery_email_.Mutable( GetArena());
}
inline std::string* UserProfile::release_account_recovery_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.account_recovery_email)
  return _impl_.account_recovery_email_.Release();
}
inline void UserProfile::set_allocated_account_recovery_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_recovery_email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.account_recovery_email_.IsDefault()) {
    _impl_.account_recovery_email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.account_recovery_email)
}

// string phone_number = 12;
inline void UserProfile::clear_phone_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phone_number_.ClearToEmpty();
}
inline const std::string& UserProfile::phone_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.phone_number)
  return _internal_phone_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_phone_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phone_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.phone_number)
}
inline std::string* UserProfile::mutable_phone_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.phone_number)
  return _s;
}
inline const std::string& UserProfile::_internal_phone_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phone_number_.Get();
}
inline void UserProfile::_internal_set_phone_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phone_number_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_phone_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.phone_number_.Mutable( GetArena());
}
inline std::string* UserProfile::release_phone_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.phone_number)
  return _impl_.phone_number_.Release();
}
inline void UserProfile::set_allocated_phone_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phone_number_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.phone_number_.IsDefault()) {
    _impl_.phone_number_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.phone_number)
}

// string profile_image_url = 13;
inline void UserProfile::clear_profile_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profile_image_url_.ClearToEmpty();
}
inline const std::string& UserProfile::profile_image_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.profile_image_url)
  return _internal_profile_image_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_profile_image_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profile_image_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.profile_image_url)
}
inline std::string* UserProfile::mutable_profile_image_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_profile_image_url();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.profile_image_url)
  return _s;
}
inline const std::string& UserProfile::_internal_profile_image_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.profile_image_url_.Get();
}
inline void UserProfile::_internal_set_profile_image_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profile_image_url_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_profile_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.profile_image_url_.Mutable( GetArena());
}
inline std::string* UserProfile::release_profile_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.profile_image_url)
  return _impl_.profile_image_url_.Release();
}
inline void UserProfile::set_allocated_profile_image_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profile_image_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.profile_image_url_.IsDefault()) {
    _impl_.profile_image_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.profile_image_url)
}

// string display_name = 14;
inline void UserProfile::clear_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& UserProfile::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserProfile.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserProfile.display_name)
}
inline std::string* UserProfile::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserProfile.display_name)
  return _s;
}
inline const std::string& UserProfile::_internal_display_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.display_name_.Get();
}
inline void UserProfile::_internal_set_display_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* UserProfile::release_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserProfile.display_name)
  return _impl_.display_name_.Release();
}
inline void UserProfile::set_allocated_display_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserProfile.display_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserPermissions

// string user_id = 1;
inline void UserPermissions::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserPermissions::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserPermissions::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.user_id)
}
inline std::string* UserPermissions::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPermissions.user_id)
  return _s;
}
inline const std::string& UserPermissions::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserPermissions::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserPermissions::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserPermissions::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserPermissions.user_id)
  return _impl_.user_id_.Release();
}
inline void UserPermissions::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserPermissions.user_id)
}

// repeated .seigr.access_control.PermissionType permissions = 2;
inline int UserPermissions::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int UserPermissions::permissions_size() const {
  return _internal_permissions_size();
}
inline void UserPermissions::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline ::seigr::access_control::PermissionType UserPermissions::permissions(int index) const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.permissions)
  return static_cast<::seigr::access_control::PermissionType>(_internal_permissions().Get(index));
}
inline void UserPermissions::set_permissions(int index, ::seigr::access_control::PermissionType value) {
  _internal_mutable_permissions()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.permissions)
}
inline void UserPermissions::add_permissions(::seigr::access_control::PermissionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_permissions()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.user_management.UserPermissions.permissions)
}
inline const ::google::protobuf::RepeatedField<int>& UserPermissions::permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserPermissions.permissions)
  return _internal_permissions();
}
inline ::google::protobuf::RepeatedField<int>* UserPermissions::mutable_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserPermissions.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::google::protobuf::RepeatedField<int>& UserPermissions::_internal_permissions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedField<int>* UserPermissions::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

// map<string, string> context = 3;
inline int UserPermissions::_internal_context_size() const {
  return _internal_context().size();
}
inline int UserPermissions::context_size() const {
  return _internal_context_size();
}
inline void UserPermissions::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserPermissions::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserPermissions::context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserPermissions.context)
  return _internal_context();
}
inline ::google::protobuf::Map<std::string, std::string>* UserPermissions::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserPermissions::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserPermissions.context)
  return _internal_mutable_context();
}

// string expiry = 4;
inline void UserPermissions::clear_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_.ClearToEmpty();
}
inline const std::string& UserPermissions::expiry() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.expiry)
  return _internal_expiry();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserPermissions::set_expiry(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.expiry)
}
inline std::string* UserPermissions::mutable_expiry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPermissions.expiry)
  return _s;
}
inline const std::string& UserPermissions::_internal_expiry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiry_.Get();
}
inline void UserPermissions::_internal_set_expiry(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_.Set(value, GetArena());
}
inline std::string* UserPermissions::_internal_mutable_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiry_.Mutable( GetArena());
}
inline std::string* UserPermissions::release_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserPermissions.expiry)
  return _impl_.expiry_.Release();
}
inline void UserPermissions::set_allocated_expiry(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiry_.IsDefault()) {
    _impl_.expiry_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserPermissions.expiry)
}

// bool is_admin_override = 5;
inline void UserPermissions::clear_is_admin_override() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_admin_override_ = false;
}
inline bool UserPermissions::is_admin_override() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.is_admin_override)
  return _internal_is_admin_override();
}
inline void UserPermissions::set_is_admin_override(bool value) {
  _internal_set_is_admin_override(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.is_admin_override)
}
inline bool UserPermissions::_internal_is_admin_override() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_admin_override_;
}
inline void UserPermissions::_internal_set_is_admin_override(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_admin_override_ = value;
}

// map<string, bool> resource_restrictions = 6;
inline int UserPermissions::_internal_resource_restrictions_size() const {
  return _internal_resource_restrictions().size();
}
inline int UserPermissions::resource_restrictions_size() const {
  return _internal_resource_restrictions_size();
}
inline void UserPermissions::clear_resource_restrictions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_restrictions_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& UserPermissions::_internal_resource_restrictions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_restrictions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& UserPermissions::resource_restrictions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserPermissions.resource_restrictions)
  return _internal_resource_restrictions();
}
inline ::google::protobuf::Map<std::string, bool>* UserPermissions::_internal_mutable_resource_restrictions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resource_restrictions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* UserPermissions::mutable_resource_restrictions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserPermissions.resource_restrictions)
  return _internal_mutable_resource_restrictions();
}

// repeated string authorized_devices = 7;
inline int UserPermissions::_internal_authorized_devices_size() const {
  return _internal_authorized_devices().size();
}
inline int UserPermissions::authorized_devices_size() const {
  return _internal_authorized_devices_size();
}
inline void UserPermissions::clear_authorized_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorized_devices_.Clear();
}
inline std::string* UserPermissions::add_authorized_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_authorized_devices()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.user_management.UserPermissions.authorized_devices)
  return _s;
}
inline const std::string& UserPermissions::authorized_devices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.authorized_devices)
  return _internal_authorized_devices().Get(index);
}
inline std::string* UserPermissions::mutable_authorized_devices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPermissions.authorized_devices)
  return _internal_mutable_authorized_devices()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserPermissions::set_authorized_devices(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_authorized_devices()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.authorized_devices)
}
template <typename Arg_, typename... Args_>
inline void UserPermissions::add_authorized_devices(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_authorized_devices(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.user_management.UserPermissions.authorized_devices)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPermissions::authorized_devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserPermissions.authorized_devices)
  return _internal_authorized_devices();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPermissions::mutable_authorized_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserPermissions.authorized_devices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_authorized_devices();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPermissions::_internal_authorized_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authorized_devices_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPermissions::_internal_mutable_authorized_devices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.authorized_devices_;
}

// repeated string access_zones = 8;
inline int UserPermissions::_internal_access_zones_size() const {
  return _internal_access_zones().size();
}
inline int UserPermissions::access_zones_size() const {
  return _internal_access_zones_size();
}
inline void UserPermissions::clear_access_zones() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_zones_.Clear();
}
inline std::string* UserPermissions::add_access_zones() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_access_zones()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.user_management.UserPermissions.access_zones)
  return _s;
}
inline const std::string& UserPermissions::access_zones(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPermissions.access_zones)
  return _internal_access_zones().Get(index);
}
inline std::string* UserPermissions::mutable_access_zones(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPermissions.access_zones)
  return _internal_mutable_access_zones()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserPermissions::set_access_zones(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_access_zones()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPermissions.access_zones)
}
template <typename Arg_, typename... Args_>
inline void UserPermissions::add_access_zones(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_access_zones(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.user_management.UserPermissions.access_zones)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPermissions::access_zones() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserPermissions.access_zones)
  return _internal_access_zones();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPermissions::mutable_access_zones() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserPermissions.access_zones)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_access_zones();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPermissions::_internal_access_zones() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_zones_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPermissions::_internal_mutable_access_zones() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.access_zones_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserAccessLog

// string log_id = 1;
inline void UserAccessLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& UserAccessLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.log_id)
}
inline std::string* UserAccessLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.log_id)
  return _s;
}
inline const std::string& UserAccessLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void UserAccessLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.log_id)
  return _impl_.log_id_.Release();
}
inline void UserAccessLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.log_id)
}

// string user_id = 2;
inline void UserAccessLog::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserAccessLog::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.user_id)
}
inline std::string* UserAccessLog::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.user_id)
  return _s;
}
inline const std::string& UserAccessLog::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserAccessLog::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.user_id)
  return _impl_.user_id_.Release();
}
inline void UserAccessLog::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.user_id)
}

// .seigr.user_management.UserActionType action = 3;
inline void UserAccessLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::seigr::user_management::UserActionType UserAccessLog::action() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.action)
  return _internal_action();
}
inline void UserAccessLog::set_action(::seigr::user_management::UserActionType value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.action)
}
inline ::seigr::user_management::UserActionType UserAccessLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::user_management::UserActionType>(_impl_.action_);
}
inline void UserAccessLog::_internal_set_action(::seigr::user_management::UserActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// string timestamp = 4;
inline void UserAccessLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& UserAccessLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.timestamp)
}
inline std::string* UserAccessLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.timestamp)
  return _s;
}
inline const std::string& UserAccessLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void UserAccessLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void UserAccessLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.timestamp)
}

// string resource_id = 5;
inline void UserAccessLog::clear_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.ClearToEmpty();
}
inline const std::string& UserAccessLog::resource_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.resource_id)
  return _internal_resource_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_resource_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.resource_id)
}
inline std::string* UserAccessLog::mutable_resource_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resource_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.resource_id)
  return _s;
}
inline const std::string& UserAccessLog::_internal_resource_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_id_.Get();
}
inline void UserAccessLog::_internal_set_resource_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resource_id_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.resource_id)
  return _impl_.resource_id_.Release();
}
inline void UserAccessLog::set_allocated_resource_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resource_id_.IsDefault()) {
    _impl_.resource_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.resource_id)
}

// bool success = 6;
inline void UserAccessLog::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UserAccessLog::success() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.success)
  return _internal_success();
}
inline void UserAccessLog::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.success)
}
inline bool UserAccessLog::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UserAccessLog::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// map<string, string> metadata = 7;
inline int UserAccessLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int UserAccessLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void UserAccessLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserAccessLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserAccessLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserAccessLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UserAccessLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserAccessLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserAccessLog.metadata)
  return _internal_mutable_metadata();
}

// string device_id = 8;
inline void UserAccessLog::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& UserAccessLog::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.device_id)
}
inline std::string* UserAccessLog::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.device_id)
  return _s;
}
inline const std::string& UserAccessLog::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void UserAccessLog::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.device_id)
  return _impl_.device_id_.Release();
}
inline void UserAccessLog::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.device_id)
}

// string session_id = 9;
inline void UserAccessLog::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& UserAccessLog::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.session_id)
}
inline std::string* UserAccessLog::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.session_id)
  return _s;
}
inline const std::string& UserAccessLog::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void UserAccessLog::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.session_id)
  return _impl_.session_id_.Release();
}
inline void UserAccessLog::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.session_id)
}

// string failure_reason = 10;
inline void UserAccessLog::clear_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.ClearToEmpty();
}
inline const std::string& UserAccessLog::failure_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserAccessLog.failure_reason)
  return _internal_failure_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAccessLog::set_failure_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserAccessLog.failure_reason)
}
inline std::string* UserAccessLog::mutable_failure_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_failure_reason();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserAccessLog.failure_reason)
  return _s;
}
inline const std::string& UserAccessLog::_internal_failure_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failure_reason_.Get();
}
inline void UserAccessLog::_internal_set_failure_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(value, GetArena());
}
inline std::string* UserAccessLog::_internal_mutable_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.failure_reason_.Mutable( GetArena());
}
inline std::string* UserAccessLog::release_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserAccessLog.failure_reason)
  return _impl_.failure_reason_.Release();
}
inline void UserAccessLog::set_allocated_failure_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.failure_reason_.IsDefault()) {
    _impl_.failure_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserAccessLog.failure_reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserPreferences

// string user_id = 1;
inline void UserPreferences::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserPreferences::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserPreferences::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.user_id)
}
inline std::string* UserPreferences::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPreferences.user_id)
  return _s;
}
inline const std::string& UserPreferences::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserPreferences::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserPreferences::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserPreferences::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserPreferences.user_id)
  return _impl_.user_id_.Release();
}
inline void UserPreferences::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserPreferences.user_id)
}

// repeated .seigr.user_management.AuthenticationMethod auth_methods = 2;
inline int UserPreferences::_internal_auth_methods_size() const {
  return _internal_auth_methods().size();
}
inline int UserPreferences::auth_methods_size() const {
  return _internal_auth_methods_size();
}
inline void UserPreferences::clear_auth_methods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_methods_.Clear();
}
inline ::seigr::user_management::AuthenticationMethod UserPreferences::auth_methods(int index) const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.auth_methods)
  return static_cast<::seigr::user_management::AuthenticationMethod>(_internal_auth_methods().Get(index));
}
inline void UserPreferences::set_auth_methods(int index, ::seigr::user_management::AuthenticationMethod value) {
  _internal_mutable_auth_methods()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.auth_methods)
}
inline void UserPreferences::add_auth_methods(::seigr::user_management::AuthenticationMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_auth_methods()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.user_management.UserPreferences.auth_methods)
}
inline const ::google::protobuf::RepeatedField<int>& UserPreferences::auth_methods() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserPreferences.auth_methods)
  return _internal_auth_methods();
}
inline ::google::protobuf::RepeatedField<int>* UserPreferences::mutable_auth_methods()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserPreferences.auth_methods)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_auth_methods();
}
inline const ::google::protobuf::RepeatedField<int>& UserPreferences::_internal_auth_methods()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_methods_;
}
inline ::google::protobuf::RepeatedField<int>* UserPreferences::_internal_mutable_auth_methods() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.auth_methods_;
}

// bool two_factor_enabled = 3;
inline void UserPreferences::clear_two_factor_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.two_factor_enabled_ = false;
}
inline bool UserPreferences::two_factor_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.two_factor_enabled)
  return _internal_two_factor_enabled();
}
inline void UserPreferences::set_two_factor_enabled(bool value) {
  _internal_set_two_factor_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.two_factor_enabled)
}
inline bool UserPreferences::_internal_two_factor_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.two_factor_enabled_;
}
inline void UserPreferences::_internal_set_two_factor_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.two_factor_enabled_ = value;
}

// string preferred_language = 4;
inline void UserPreferences::clear_preferred_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_language_.ClearToEmpty();
}
inline const std::string& UserPreferences::preferred_language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.preferred_language)
  return _internal_preferred_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserPreferences::set_preferred_language(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.preferred_language)
}
inline std::string* UserPreferences::mutable_preferred_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_preferred_language();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPreferences.preferred_language)
  return _s;
}
inline const std::string& UserPreferences::_internal_preferred_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferred_language_.Get();
}
inline void UserPreferences::_internal_set_preferred_language(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_language_.Set(value, GetArena());
}
inline std::string* UserPreferences::_internal_mutable_preferred_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.preferred_language_.Mutable( GetArena());
}
inline std::string* UserPreferences::release_preferred_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserPreferences.preferred_language)
  return _impl_.preferred_language_.Release();
}
inline void UserPreferences::set_allocated_preferred_language(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_language_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.preferred_language_.IsDefault()) {
    _impl_.preferred_language_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserPreferences.preferred_language)
}

// bool receive_notifications = 5;
inline void UserPreferences::clear_receive_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receive_notifications_ = false;
}
inline bool UserPreferences::receive_notifications() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.receive_notifications)
  return _internal_receive_notifications();
}
inline void UserPreferences::set_receive_notifications(bool value) {
  _internal_set_receive_notifications(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.receive_notifications)
}
inline bool UserPreferences::_internal_receive_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receive_notifications_;
}
inline void UserPreferences::_internal_set_receive_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receive_notifications_ = value;
}

// map<string, bool> permission_notifications = 6;
inline int UserPreferences::_internal_permission_notifications_size() const {
  return _internal_permission_notifications().size();
}
inline int UserPreferences::permission_notifications_size() const {
  return _internal_permission_notifications_size();
}
inline void UserPreferences::clear_permission_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permission_notifications_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& UserPreferences::_internal_permission_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permission_notifications_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& UserPreferences::permission_notifications() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserPreferences.permission_notifications)
  return _internal_permission_notifications();
}
inline ::google::protobuf::Map<std::string, bool>* UserPreferences::_internal_mutable_permission_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.permission_notifications_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* UserPreferences::mutable_permission_notifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserPreferences.permission_notifications)
  return _internal_mutable_permission_notifications();
}

// map<string, string> ui_customizations = 7;
inline int UserPreferences::_internal_ui_customizations_size() const {
  return _internal_ui_customizations().size();
}
inline int UserPreferences::ui_customizations_size() const {
  return _internal_ui_customizations_size();
}
inline void UserPreferences::clear_ui_customizations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ui_customizations_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserPreferences::_internal_ui_customizations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ui_customizations_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserPreferences::ui_customizations() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserPreferences.ui_customizations)
  return _internal_ui_customizations();
}
inline ::google::protobuf::Map<std::string, std::string>* UserPreferences::_internal_mutable_ui_customizations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ui_customizations_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserPreferences::mutable_ui_customizations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserPreferences.ui_customizations)
  return _internal_mutable_ui_customizations();
}

// string timezone = 8;
inline void UserPreferences::clear_timezone() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserPreferences::timezone() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserPreferences::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.timezone)
}
inline std::string* UserPreferences::mutable_timezone() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPreferences.timezone)
  return _s;
}
inline const std::string& UserPreferences::_internal_timezone() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timezone_.Get();
}
inline void UserPreferences::_internal_set_timezone(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timezone_.Set(value, GetArena());
}
inline std::string* UserPreferences::_internal_mutable_timezone() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timezone_.Mutable( GetArena());
}
inline std::string* UserPreferences::release_timezone() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserPreferences.timezone)
  return _impl_.timezone_.Release();
}
inline void UserPreferences::set_allocated_timezone(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timezone_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserPreferences.timezone)
}

// bool dark_mode_enabled = 9;
inline void UserPreferences::clear_dark_mode_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dark_mode_enabled_ = false;
}
inline bool UserPreferences::dark_mode_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.dark_mode_enabled)
  return _internal_dark_mode_enabled();
}
inline void UserPreferences::set_dark_mode_enabled(bool value) {
  _internal_set_dark_mode_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.dark_mode_enabled)
}
inline bool UserPreferences::_internal_dark_mode_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dark_mode_enabled_;
}
inline void UserPreferences::_internal_set_dark_mode_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dark_mode_enabled_ = value;
}

// repeated string favorite_features = 10;
inline int UserPreferences::_internal_favorite_features_size() const {
  return _internal_favorite_features().size();
}
inline int UserPreferences::favorite_features_size() const {
  return _internal_favorite_features_size();
}
inline void UserPreferences::clear_favorite_features() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.favorite_features_.Clear();
}
inline std::string* UserPreferences::add_favorite_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_favorite_features()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.user_management.UserPreferences.favorite_features)
  return _s;
}
inline const std::string& UserPreferences::favorite_features(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserPreferences.favorite_features)
  return _internal_favorite_features().Get(index);
}
inline std::string* UserPreferences::mutable_favorite_features(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserPreferences.favorite_features)
  return _internal_mutable_favorite_features()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserPreferences::set_favorite_features(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_favorite_features()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.user_management.UserPreferences.favorite_features)
}
template <typename Arg_, typename... Args_>
inline void UserPreferences::add_favorite_features(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_favorite_features(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.user_management.UserPreferences.favorite_features)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPreferences::favorite_features() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserPreferences.favorite_features)
  return _internal_favorite_features();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPreferences::mutable_favorite_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserPreferences.favorite_features)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_favorite_features();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPreferences::_internal_favorite_features() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.favorite_features_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserPreferences::_internal_mutable_favorite_features() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.favorite_features_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserManagement

// repeated .seigr.user_management.UserProfile profiles = 1;
inline int UserManagement::_internal_profiles_size() const {
  return _internal_profiles().size();
}
inline int UserManagement::profiles_size() const {
  return _internal_profiles_size();
}
inline void UserManagement::clear_profiles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profiles_.Clear();
}
inline ::seigr::user_management::UserProfile* UserManagement::mutable_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserManagement.profiles)
  return _internal_mutable_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>* UserManagement::mutable_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserManagement.profiles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_profiles();
}
inline const ::seigr::user_management::UserProfile& UserManagement::profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserManagement.profiles)
  return _internal_profiles().Get(index);
}
inline ::seigr::user_management::UserProfile* UserManagement::add_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::user_management::UserProfile* _add = _internal_mutable_profiles()->Add();
  // @@protoc_insertion_point(field_add:seigr.user_management.UserManagement.profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>& UserManagement::profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserManagement.profiles)
  return _internal_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>&
UserManagement::_internal_profiles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserProfile>*
UserManagement::_internal_mutable_profiles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.profiles_;
}

// repeated .seigr.user_management.UserPermissions permissions = 2;
inline int UserManagement::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int UserManagement::permissions_size() const {
  return _internal_permissions_size();
}
inline void UserManagement::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline ::seigr::user_management::UserPermissions* UserManagement::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserManagement.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>* UserManagement::mutable_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserManagement.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::seigr::user_management::UserPermissions& UserManagement::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserManagement.permissions)
  return _internal_permissions().Get(index);
}
inline ::seigr::user_management::UserPermissions* UserManagement::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::user_management::UserPermissions* _add = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add:seigr.user_management.UserManagement.permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>& UserManagement::permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserManagement.permissions)
  return _internal_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>&
UserManagement::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPermissions>*
UserManagement::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

// repeated .seigr.user_management.UserPreferences preferences = 3;
inline int UserManagement::_internal_preferences_size() const {
  return _internal_preferences().size();
}
inline int UserManagement::preferences_size() const {
  return _internal_preferences_size();
}
inline void UserManagement::clear_preferences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferences_.Clear();
}
inline ::seigr::user_management::UserPreferences* UserManagement::mutable_preferences(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserManagement.preferences)
  return _internal_mutable_preferences()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>* UserManagement::mutable_preferences()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserManagement.preferences)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preferences();
}
inline const ::seigr::user_management::UserPreferences& UserManagement::preferences(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserManagement.preferences)
  return _internal_preferences().Get(index);
}
inline ::seigr::user_management::UserPreferences* UserManagement::add_preferences() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::user_management::UserPreferences* _add = _internal_mutable_preferences()->Add();
  // @@protoc_insertion_point(field_add:seigr.user_management.UserManagement.preferences)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>& UserManagement::preferences() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserManagement.preferences)
  return _internal_preferences();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>&
UserManagement::_internal_preferences() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferences_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserPreferences>*
UserManagement::_internal_mutable_preferences() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preferences_;
}

// repeated .seigr.user_management.UserAccessLog access_logs = 4;
inline int UserManagement::_internal_access_logs_size() const {
  return _internal_access_logs().size();
}
inline int UserManagement::access_logs_size() const {
  return _internal_access_logs_size();
}
inline void UserManagement::clear_access_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_logs_.Clear();
}
inline ::seigr::user_management::UserAccessLog* UserManagement::mutable_access_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserManagement.access_logs)
  return _internal_mutable_access_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>* UserManagement::mutable_access_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.user_management.UserManagement.access_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_access_logs();
}
inline const ::seigr::user_management::UserAccessLog& UserManagement::access_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserManagement.access_logs)
  return _internal_access_logs().Get(index);
}
inline ::seigr::user_management::UserAccessLog* UserManagement::add_access_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::user_management::UserAccessLog* _add = _internal_mutable_access_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.user_management.UserManagement.access_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>& UserManagement::access_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.user_management.UserManagement.access_logs)
  return _internal_access_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>&
UserManagement::_internal_access_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::user_management::UserAccessLog>*
UserManagement::_internal_mutable_access_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.access_logs_;
}

// string last_updated = 5;
inline void UserManagement::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& UserManagement::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserManagement.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserManagement::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserManagement.last_updated)
}
inline std::string* UserManagement::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserManagement.last_updated)
  return _s;
}
inline const std::string& UserManagement::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void UserManagement::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* UserManagement::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* UserManagement::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserManagement.last_updated)
  return _impl_.last_updated_.Release();
}
inline void UserManagement::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserManagement.last_updated)
}

// map<string, string> management_metadata = 6;
inline int UserManagement::_internal_management_metadata_size() const {
  return _internal_management_metadata().size();
}
inline int UserManagement::management_metadata_size() const {
  return _internal_management_metadata_size();
}
inline void UserManagement::clear_management_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.management_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserManagement::_internal_management_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.management_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserManagement::management_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.user_management.UserManagement.management_metadata)
  return _internal_management_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UserManagement::_internal_mutable_management_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.management_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserManagement::mutable_management_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.user_management.UserManagement.management_metadata)
  return _internal_mutable_management_metadata();
}

// -------------------------------------------------------------------

// UserRequest

// string user_id = 1;
inline void UserRequest::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserRequest.user_id)
}
inline std::string* UserRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserRequest.user_id)
  return _s;
}
inline const std::string& UserRequest::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserRequest::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserRequest::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserRequest::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UserRequest::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserRequest.user_id)
}

// -------------------------------------------------------------------

// UserResponse

// bool success = 1;
inline void UserResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UserResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserResponse.success)
  return _internal_success();
}
inline void UserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.user_management.UserResponse.success)
}
inline bool UserResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UserResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void UserResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UserResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.user_management.UserResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.user_management.UserResponse.message)
}
inline std::string* UserResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.user_management.UserResponse.message)
  return _s;
}
inline const std::string& UserResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UserResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UserResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UserResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.user_management.UserResponse.message)
  return _impl_.message_.Release();
}
inline void UserResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.user_management.UserResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace user_management
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::user_management::AccountStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::user_management::AccountStatus>() {
  return ::seigr::user_management::AccountStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::user_management::AuthenticationMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::user_management::AuthenticationMethod>() {
  return ::seigr::user_management::AuthenticationMethod_descriptor();
}
template <>
struct is_proto_enum<::seigr::user_management::UserActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::user_management::UserActionType>() {
  return ::seigr::user_management::UserActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // user_5fmanagement_2eproto_2epb_2eh
