syntax = "proto3";

package seigr.rollback;

// ===========================
// ENUM DEFINITIONS
// ===========================

/**
 * Represents the status of a rollback operation.
 */
enum RollbackStatus {
    ROLLBACK_STATUS_UNDEFINED = 0;
    ROLLBACK_STATUS_SUCCESS = 1;            // Rollback completed successfully
    ROLLBACK_STATUS_FAILURE = 2;            // Rollback attempt failed
    ROLLBACK_STATUS_PENDING = 3;            // Rollback is queued or pending execution
    ROLLBACK_STATUS_IN_PROGRESS = 4;        // Rollback currently in progress
    ROLLBACK_STATUS_PARTIAL_SUCCESS = 5;    // Partial rollback completed successfully
    ROLLBACK_STATUS_ABORTED = 6;            // Rollback was aborted
    ROLLBACK_STATUS_CONFLICT_DETECTED = 7;  // Rollback halted due to conflicts
}

/**
 * Defines triggers that initiate rollback processes.
 */
enum RollbackTrigger {
    ROLLBACK_TRIGGER_UNDEFINED = 0;
    ROLLBACK_TRIGGER_MANUAL = 1;              // User-initiated rollback
    ROLLBACK_TRIGGER_INTEGRITY_FAILURE = 2;   // Triggered by data integrity violation
    ROLLBACK_TRIGGER_SYSTEM_RESTORE = 3;      // Part of a broader system restore
    ROLLBACK_TRIGGER_DATA_CONFLICT = 4;       // Triggered by detected data conflicts
    ROLLBACK_TRIGGER_SCHEDULED = 5;           // Pre-scheduled rollback event
    ROLLBACK_TRIGGER_POLICY_VIOLATION = 6;    // Triggered by policy violations
    ROLLBACK_TRIGGER_RESOURCE_OPTIMIZATION = 7; // Triggered for resource optimization
}

// ===========================
// ROLLBACK MESSAGES
// ===========================

/**
 * Tracks metadata and progress of a rollback operation.
 */
message RollbackLog {
    string log_id = 1;                         // Unique identifier for rollback log
    string segment_hash = 2;                   // Target segment hash for rollback
    string rollback_timestamp = 3;             // Target rollback timestamp
    string attempted_at = 4;                   // Rollback initiation time
    string executed_at = 5;                    // Completion timestamp
    string user_id = 6;                        // ID of user initiating the rollback
    RollbackTrigger event_trigger = 7;         // Trigger that initiated rollback
    RollbackStatus status = 8;                 // Status of the rollback
    string details = 9;                        // Descriptive details about rollback execution
    int32 retry_attempt = 10;                  // Retry attempt count
    map<string, string> metadata = 11;         // Metadata for rollback tracking
    string conflict_resolution_status = 12;    // Status of conflict resolution
    bool eco_friendly_execution = 13;          // Eco-conscious rollback execution flag
}

/**
 * Request to initiate a rollback operation.
 */
message RollbackRequest {
    string request_id = 1;                     // Unique request identifier
    string segment_hash = 2;                   // Target segment hash for rollback
    string target_timestamp = 3;               // Desired rollback state timestamp
    RollbackTrigger trigger = 4;               // Reason for rollback initiation
    string requested_by = 5;                   // User/system initiating the rollback
    string requested_at = 6;                   // Request initiation timestamp
    map<string, string> parameters = 7;        // Additional rollback parameters
    bool validate_before_execution = 8;        // Perform validation before rollback execution
    int32 max_retry_attempts = 9;              // Maximum retry attempts for rollback
    bool requires_approval = 10;               // Admin approval requirement flag
    string dependent_segment_id = 11;          // Dependent segment ID for consistency
    bool eco_friendly_mode = 12;               // Prioritize resource-efficient rollback methods
}

/**
 * Validates the feasibility and pre-conditions of a rollback attempt.
 */
message RollbackValidationResult {
    string validation_id = 1;                  // Unique validation identifier
    string segment_hash = 2;                   // Target segment for validation
    bool is_valid = 3;                         // Indicates whether rollback is valid
    string validation_message = 4;             // Validation details or error explanation
    string validated_at = 5;                   // Validation timestamp
    map<string, string> validation_metadata = 6; // Additional validation metadata
    repeated string invalid_reasons = 7;       // Reasons for invalid rollback (if applicable)
    string recommended_action = 8;             // Suggested corrective actions
    repeated string dependencies_checked = 9;  // Dependencies validated
}

/**
 * Tracks rollback history for a specific segment or data set.
 */
message RollbackHistory {
    string segment_id = 1;                     // Segment identifier
    repeated RollbackLog rollback_logs = 2;    // History of rollback attempts
    string last_rollback_at = 3;               // Timestamp of last rollback attempt
    int32 total_rollbacks = 4;                 // Total rollback attempts
    int32 successful_rollbacks = 5;            // Successfully completed rollbacks
    int32 failed_rollbacks = 6;                // Failed rollback attempts
    map<string, string> metadata = 7;          // Additional rollback history metadata
    string recovery_plan_reference = 8;        // Reference to a recovery plan
    bool has_unresolved_conflicts = 9;         // Flag for unresolved conflicts
    int32 eco_friendly_rollbacks = 10;         // Count of eco-friendly rollbacks executed
}

/**
 * Tracks real-time progress of rollback operations.
 */
message RollbackProgress {
    string rollback_id = 1;                    // Unique rollback operation identifier
    RollbackStatus current_status = 2;         // Current rollback status
    float progress_percentage = 3;             // Percentage completion of rollback
    string segment_id = 4;                     // Segment identifier
    string last_update_timestamp = 5;          // Last progress update timestamp
    string responsible_hyphen = 6;             // Hyphen responsible for rollback task
    int32 remaining_estimated_time = 7;        // Estimated time for rollback completion (in seconds)
    map<string, string> progress_metadata = 8; // Metadata for tracking progress
}

/**
 * Detects and resolves conflicts encountered during rollback.
 */
message RollbackConflictResolution {
    string conflict_id = 1;                    // Unique conflict identifier
    string segment_id = 2;                     // Target segment with conflict
    repeated string conflicting_changes = 3;   // List of conflicting changes
    string resolution_status = 4;              // Conflict resolution status
    string resolved_by = 5;                    // ID of resolver (user/system)
    string resolution_timestamp = 6;           // Resolution completion timestamp
    map<string, string> resolution_metadata = 7; // Additional resolution metadata
}

// ===========================
// SERVICE DEFINITION
// ===========================

/**
 * Service for managing rollback operations in the Seigr ecosystem.
 */
service RollbackService {
    rpc InitiateRollback (RollbackRequest) returns (RollbackLog);          // Initiates a rollback
    rpc ValidateRollback (RollbackRequest) returns (RollbackValidationResult); // Validates rollback feasibility
    rpc MonitorRollback (RollbackRequest) returns (RollbackProgress);     // Monitors rollback progress
    rpc ResolveConflict (RollbackConflictResolution) returns (RollbackLog); // Resolves rollback conflicts
    rpc GetRollbackHistory (RollbackRequest) returns (RollbackHistory);   // Fetches rollback history
}
