// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: access_policies.proto
// Protobuf C++ Version: 5.29.2

#ifndef access_5fpolicies_2eproto_2epb_2eh
#define access_5fpolicies_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "access_control.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_access_5fpolicies_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_access_5fpolicies_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_access_5fpolicies_2eproto;
namespace seigr {
namespace access_policies {
class AccessLifecyclePolicy;
struct AccessLifecyclePolicyDefaultTypeInternal;
extern AccessLifecyclePolicyDefaultTypeInternal _AccessLifecyclePolicy_default_instance_;
class AccessLifecyclePolicy_ConditionsEntry_DoNotUse;
struct AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal;
extern AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal _AccessLifecyclePolicy_ConditionsEntry_DoNotUse_default_instance_;
class AccessLifecyclePolicy_MetadataEntry_DoNotUse;
struct AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal _AccessLifecyclePolicy_MetadataEntry_DoNotUse_default_instance_;
class AccessPolicySet;
struct AccessPolicySetDefaultTypeInternal;
extern AccessPolicySetDefaultTypeInternal _AccessPolicySet_default_instance_;
class AccessPolicySet_MetadataEntry_DoNotUse;
struct AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal _AccessPolicySet_MetadataEntry_DoNotUse_default_instance_;
class PolicyCheckRequest;
struct PolicyCheckRequestDefaultTypeInternal;
extern PolicyCheckRequestDefaultTypeInternal _PolicyCheckRequest_default_instance_;
class PolicyCheckRequest_ContextEntry_DoNotUse;
struct PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal;
extern PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal _PolicyCheckRequest_ContextEntry_DoNotUse_default_instance_;
class PolicyCheckResponse;
struct PolicyCheckResponseDefaultTypeInternal;
extern PolicyCheckResponseDefaultTypeInternal _PolicyCheckResponse_default_instance_;
class PolicyCheckResponse_AuditMetadataEntry_DoNotUse;
struct PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal _PolicyCheckResponse_AuditMetadataEntry_DoNotUse_default_instance_;
class PolicyCheckResponse_DecisionMetadataEntry_DoNotUse;
struct PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal _PolicyCheckResponse_DecisionMetadataEntry_DoNotUse_default_instance_;
class PolicyEscalation;
struct PolicyEscalationDefaultTypeInternal;
extern PolicyEscalationDefaultTypeInternal _PolicyEscalation_default_instance_;
class PolicyEscalation_MetadataEntry_DoNotUse;
struct PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal _PolicyEscalation_MetadataEntry_DoNotUse_default_instance_;
}  // namespace access_policies
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace access_policies {
enum ActionType : int {
  ACTION_TYPE_UNDEFINED = 0,
  ACTION_TYPE_READ = 1,
  ACTION_TYPE_WRITE = 2,
  ACTION_TYPE_EXECUTE = 3,
  ACTION_TYPE_DELETE = 4,
  ACTION_TYPE_SHARE = 5,
  ACTION_TYPE_ROLLBACK = 6,
  ACTION_TYPE_MODIFY_POLICY = 7,
  ACTION_TYPE_AUDIT = 8,
  ACTION_TYPE_OVERRIDE_POLICY = 9,
  ACTION_TYPE_EMERGENCY_ACCESS = 10,
  ACTION_TYPE_VALIDATE = 11,
  ACTION_TYPE_PROVISION = 12,
  ACTION_TYPE_REVOKE = 13,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ActionType_IsValid(int value);
extern const uint32_t ActionType_internal_data_[];
constexpr ActionType ActionType_MIN = static_cast<ActionType>(0);
constexpr ActionType ActionType_MAX = static_cast<ActionType>(13);
constexpr int ActionType_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
ActionType_descriptor();
template <typename T>
const std::string& ActionType_Name(T value) {
  static_assert(std::is_same<T, ActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ActionType_Name().");
  return ActionType_Name(static_cast<ActionType>(value));
}
template <>
inline const std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ActionType_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool ActionType_Parse(absl::string_view name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
      ActionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PolicyEscalation_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyEscalation_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEscalation_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyEscalation_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyEscalation_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyEscalation_MetadataEntry_DoNotUse*>(
        &_PolicyEscalation_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyCheckResponse_DecisionMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyCheckResponse_DecisionMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyCheckResponse_DecisionMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyCheckResponse_DecisionMetadataEntry_DoNotUse*>(
        &_PolicyCheckResponse_DecisionMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyCheckResponse_AuditMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyCheckResponse_AuditMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCheckResponse_AuditMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyCheckResponse_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyCheckResponse_AuditMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyCheckResponse_AuditMetadataEntry_DoNotUse*>(
        &_PolicyCheckResponse_AuditMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyCheckRequest_ContextEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyCheckRequest_ContextEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCheckRequest_ContextEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyCheckRequest_ContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyCheckRequest_ContextEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyCheckRequest_ContextEntry_DoNotUse*>(
        &_PolicyCheckRequest_ContextEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessPolicySet_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessPolicySet_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessPolicySet_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessPolicySet_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessPolicySet_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessPolicySet_MetadataEntry_DoNotUse*>(
        &_AccessPolicySet_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessLifecyclePolicy_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessLifecyclePolicy_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLifecyclePolicy_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessLifecyclePolicy_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessLifecyclePolicy_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessLifecyclePolicy_MetadataEntry_DoNotUse*>(
        &_AccessLifecyclePolicy_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessLifecyclePolicy_ConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessLifecyclePolicy_ConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLifecyclePolicy_ConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessLifecyclePolicy_ConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessLifecyclePolicy_ConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessLifecyclePolicy_ConditionsEntry_DoNotUse*>(
        &_AccessLifecyclePolicy_ConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_access_5fpolicies_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyEscalation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.access_policies.PolicyEscalation) */ {
 public:
  inline PolicyEscalation() : PolicyEscalation(nullptr) {}
  ~PolicyEscalation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyEscalation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyEscalation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEscalation(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyEscalation(const PolicyEscalation& from) : PolicyEscalation(nullptr, from) {}
  inline PolicyEscalation(PolicyEscalation&& from) noexcept
      : PolicyEscalation(nullptr, std::move(from)) {}
  inline PolicyEscalation& operator=(const PolicyEscalation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyEscalation& operator=(PolicyEscalation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyEscalation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyEscalation* internal_default_instance() {
    return reinterpret_cast<const PolicyEscalation*>(
        &_PolicyEscalation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PolicyEscalation& a, PolicyEscalation& b) { a.Swap(&b); }
  inline void Swap(PolicyEscalation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyEscalation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyEscalation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyEscalation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyEscalation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyEscalation& from) { PolicyEscalation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyEscalation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.access_policies.PolicyEscalation"; }

 protected:
  explicit PolicyEscalation(::google::protobuf::Arena* arena);
  PolicyEscalation(::google::protobuf::Arena* arena, const PolicyEscalation& from);
  PolicyEscalation(::google::protobuf::Arena* arena, PolicyEscalation&& from) noexcept
      : PolicyEscalation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kEscalationIdFieldNumber = 1,
    kOriginalPolicyIdFieldNumber = 2,
    kTriggeredByIdFieldNumber = 3,
    kEscalationReasonFieldNumber = 4,
    kEscalationPathFieldNumber = 5,
    kEscalationTimestampFieldNumber = 7,
    kNewPolicyStatusFieldNumber = 6,
    kAutoResolvedFieldNumber = 9,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string escalation_id = 1;
  void clear_escalation_id() ;
  const std::string& escalation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_id(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_id();
  PROTOBUF_NODISCARD std::string* release_escalation_id();
  void set_allocated_escalation_id(std::string* value);

  private:
  const std::string& _internal_escalation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_id(
      const std::string& value);
  std::string* _internal_mutable_escalation_id();

  public:
  // string original_policy_id = 2;
  void clear_original_policy_id() ;
  const std::string& original_policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_original_policy_id();
  PROTOBUF_NODISCARD std::string* release_original_policy_id();
  void set_allocated_original_policy_id(std::string* value);

  private:
  const std::string& _internal_original_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_policy_id(
      const std::string& value);
  std::string* _internal_mutable_original_policy_id();

  public:
  // string triggered_by_id = 3;
  void clear_triggered_by_id() ;
  const std::string& triggered_by_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_triggered_by_id(Arg_&& arg, Args_... args);
  std::string* mutable_triggered_by_id();
  PROTOBUF_NODISCARD std::string* release_triggered_by_id();
  void set_allocated_triggered_by_id(std::string* value);

  private:
  const std::string& _internal_triggered_by_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_triggered_by_id(
      const std::string& value);
  std::string* _internal_mutable_triggered_by_id();

  public:
  // string escalation_reason = 4;
  void clear_escalation_reason() ;
  const std::string& escalation_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_reason(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_reason();
  PROTOBUF_NODISCARD std::string* release_escalation_reason();
  void set_allocated_escalation_reason(std::string* value);

  private:
  const std::string& _internal_escalation_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_reason(
      const std::string& value);
  std::string* _internal_mutable_escalation_reason();

  public:
  // string escalation_path = 5;
  void clear_escalation_path() ;
  const std::string& escalation_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_path(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_path();
  PROTOBUF_NODISCARD std::string* release_escalation_path();
  void set_allocated_escalation_path(std::string* value);

  private:
  const std::string& _internal_escalation_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_path(
      const std::string& value);
  std::string* _internal_mutable_escalation_path();

  public:
  // string escalation_timestamp = 7;
  void clear_escalation_timestamp() ;
  const std::string& escalation_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_timestamp();
  PROTOBUF_NODISCARD std::string* release_escalation_timestamp();
  void set_allocated_escalation_timestamp(std::string* value);

  private:
  const std::string& _internal_escalation_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_timestamp(
      const std::string& value);
  std::string* _internal_mutable_escalation_timestamp();

  public:
  // .seigr.access_control.PolicyStatus new_policy_status = 6;
  void clear_new_policy_status() ;
  ::seigr::access_control::PolicyStatus new_policy_status() const;
  void set_new_policy_status(::seigr::access_control::PolicyStatus value);

  private:
  ::seigr::access_control::PolicyStatus _internal_new_policy_status() const;
  void _internal_set_new_policy_status(::seigr::access_control::PolicyStatus value);

  public:
  // bool auto_resolved = 9;
  void clear_auto_resolved() ;
  bool auto_resolved() const;
  void set_auto_resolved(bool value);

  private:
  bool _internal_auto_resolved() const;
  void _internal_set_auto_resolved(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.access_policies.PolicyEscalation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      161, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyEscalation& from_msg);
    ::google::protobuf::internal::MapField<PolicyEscalation_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr escalation_id_;
    ::google::protobuf::internal::ArenaStringPtr original_policy_id_;
    ::google::protobuf::internal::ArenaStringPtr triggered_by_id_;
    ::google::protobuf::internal::ArenaStringPtr escalation_reason_;
    ::google::protobuf::internal::ArenaStringPtr escalation_path_;
    ::google::protobuf::internal::ArenaStringPtr escalation_timestamp_;
    int new_policy_status_;
    bool auto_resolved_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_access_5fpolicies_2eproto;
};
// -------------------------------------------------------------------

class PolicyCheckResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.access_policies.PolicyCheckResponse) */ {
 public:
  inline PolicyCheckResponse() : PolicyCheckResponse(nullptr) {}
  ~PolicyCheckResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyCheckResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyCheckResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCheckResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyCheckResponse(const PolicyCheckResponse& from) : PolicyCheckResponse(nullptr, from) {}
  inline PolicyCheckResponse(PolicyCheckResponse&& from) noexcept
      : PolicyCheckResponse(nullptr, std::move(from)) {}
  inline PolicyCheckResponse& operator=(const PolicyCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyCheckResponse& operator=(PolicyCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyCheckResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyCheckResponse*>(
        &_PolicyCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PolicyCheckResponse& a, PolicyCheckResponse& b) { a.Swap(&b); }
  inline void Swap(PolicyCheckResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyCheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyCheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyCheckResponse& from) { PolicyCheckResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyCheckResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.access_policies.PolicyCheckResponse"; }

 protected:
  explicit PolicyCheckResponse(::google::protobuf::Arena* arena);
  PolicyCheckResponse(::google::protobuf::Arena* arena, const PolicyCheckResponse& from);
  PolicyCheckResponse(::google::protobuf::Arena* arena, PolicyCheckResponse&& from) noexcept
      : PolicyCheckResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermittedActionsFieldNumber = 5,
    kAuditMetadataFieldNumber = 6,
    kDecisionMetadataFieldNumber = 13,
    kPolicyIdFieldNumber = 2,
    kDenialReasonFieldNumber = 4,
    kEscalationSuggestionFieldNumber = 9,
    kDecisionTimestampFieldNumber = 10,
    kEvaluatorIdFieldNumber = 12,
    kPolicyStatusFieldNumber = 3,
    kIsActionAllowedFieldNumber = 1,
    kEmergencyOverrideUsedFieldNumber = 11,
    kComplianceScoreFieldNumber = 7,
    kRiskScoreFieldNumber = 8,
  };
  // repeated .seigr.access_policies.ActionType permitted_actions = 5;
  int permitted_actions_size() const;
  private:
  int _internal_permitted_actions_size() const;

  public:
  void clear_permitted_actions() ;
  public:
  ::seigr::access_policies::ActionType permitted_actions(int index) const;
  void set_permitted_actions(int index, ::seigr::access_policies::ActionType value);
  void add_permitted_actions(::seigr::access_policies::ActionType value);
  const ::google::protobuf::RepeatedField<int>& permitted_actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_permitted_actions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_permitted_actions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_permitted_actions();

  public:
  // map<string, string> audit_metadata = 6;
  int audit_metadata_size() const;
  private:
  int _internal_audit_metadata_size() const;

  public:
  void clear_audit_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_audit_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_audit_metadata();

  public:
  // map<string, string> decision_metadata = 13;
  int decision_metadata_size() const;
  private:
  int _internal_decision_metadata_size() const;

  public:
  void clear_decision_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& decision_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_decision_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_decision_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_decision_metadata();

  public:
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string denial_reason = 4;
  void clear_denial_reason() ;
  const std::string& denial_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denial_reason(Arg_&& arg, Args_... args);
  std::string* mutable_denial_reason();
  PROTOBUF_NODISCARD std::string* release_denial_reason();
  void set_allocated_denial_reason(std::string* value);

  private:
  const std::string& _internal_denial_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denial_reason(
      const std::string& value);
  std::string* _internal_mutable_denial_reason();

  public:
  // string escalation_suggestion = 9;
  void clear_escalation_suggestion() ;
  const std::string& escalation_suggestion() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_suggestion(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_suggestion();
  PROTOBUF_NODISCARD std::string* release_escalation_suggestion();
  void set_allocated_escalation_suggestion(std::string* value);

  private:
  const std::string& _internal_escalation_suggestion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_suggestion(
      const std::string& value);
  std::string* _internal_mutable_escalation_suggestion();

  public:
  // string decision_timestamp = 10;
  void clear_decision_timestamp() ;
  const std::string& decision_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_decision_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_decision_timestamp();
  PROTOBUF_NODISCARD std::string* release_decision_timestamp();
  void set_allocated_decision_timestamp(std::string* value);

  private:
  const std::string& _internal_decision_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decision_timestamp(
      const std::string& value);
  std::string* _internal_mutable_decision_timestamp();

  public:
  // string evaluator_id = 12;
  void clear_evaluator_id() ;
  const std::string& evaluator_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_evaluator_id(Arg_&& arg, Args_... args);
  std::string* mutable_evaluator_id();
  PROTOBUF_NODISCARD std::string* release_evaluator_id();
  void set_allocated_evaluator_id(std::string* value);

  private:
  const std::string& _internal_evaluator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evaluator_id(
      const std::string& value);
  std::string* _internal_mutable_evaluator_id();

  public:
  // .seigr.access_control.PolicyStatus policy_status = 3;
  void clear_policy_status() ;
  ::seigr::access_control::PolicyStatus policy_status() const;
  void set_policy_status(::seigr::access_control::PolicyStatus value);

  private:
  ::seigr::access_control::PolicyStatus _internal_policy_status() const;
  void _internal_set_policy_status(::seigr::access_control::PolicyStatus value);

  public:
  // bool is_action_allowed = 1;
  void clear_is_action_allowed() ;
  bool is_action_allowed() const;
  void set_is_action_allowed(bool value);

  private:
  bool _internal_is_action_allowed() const;
  void _internal_set_is_action_allowed(bool value);

  public:
  // bool emergency_override_used = 11;
  void clear_emergency_override_used() ;
  bool emergency_override_used() const;
  void set_emergency_override_used(bool value);

  private:
  bool _internal_emergency_override_used() const;
  void _internal_set_emergency_override_used(bool value);

  public:
  // double compliance_score = 7;
  void clear_compliance_score() ;
  double compliance_score() const;
  void set_compliance_score(double value);

  private:
  double _internal_compliance_score() const;
  void _internal_set_compliance_score(double value);

  public:
  // double risk_score = 8;
  void clear_risk_score() ;
  double risk_score() const;
  void set_risk_score(double value);

  private:
  double _internal_risk_score() const;
  void _internal_set_risk_score(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.access_policies.PolicyCheckResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 2,
      162, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyCheckResponse& from_msg);
    ::google::protobuf::RepeatedField<int> permitted_actions_;
    ::google::protobuf::internal::CachedSize _permitted_actions_cached_byte_size_;
    ::google::protobuf::internal::MapField<PolicyCheckResponse_AuditMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        audit_metadata_;
    ::google::protobuf::internal::MapField<PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        decision_metadata_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr denial_reason_;
    ::google::protobuf::internal::ArenaStringPtr escalation_suggestion_;
    ::google::protobuf::internal::ArenaStringPtr decision_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr evaluator_id_;
    int policy_status_;
    bool is_action_allowed_;
    bool emergency_override_used_;
    double compliance_score_;
    double risk_score_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_access_5fpolicies_2eproto;
};
// -------------------------------------------------------------------

class PolicyCheckRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.access_policies.PolicyCheckRequest) */ {
 public:
  inline PolicyCheckRequest() : PolicyCheckRequest(nullptr) {}
  ~PolicyCheckRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyCheckRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyCheckRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyCheckRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyCheckRequest(const PolicyCheckRequest& from) : PolicyCheckRequest(nullptr, from) {}
  inline PolicyCheckRequest(PolicyCheckRequest&& from) noexcept
      : PolicyCheckRequest(nullptr, std::move(from)) {}
  inline PolicyCheckRequest& operator=(const PolicyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyCheckRequest& operator=(PolicyCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyCheckRequest*>(
        &_PolicyCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PolicyCheckRequest& a, PolicyCheckRequest& b) { a.Swap(&b); }
  inline void Swap(PolicyCheckRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyCheckRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyCheckRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyCheckRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyCheckRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyCheckRequest& from) { PolicyCheckRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyCheckRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.access_policies.PolicyCheckRequest"; }

 protected:
  explicit PolicyCheckRequest(::google::protobuf::Arena* arena);
  PolicyCheckRequest(::google::protobuf::Arena* arena, const PolicyCheckRequest& from);
  PolicyCheckRequest(::google::protobuf::Arena* arena, PolicyCheckRequest&& from) noexcept
      : PolicyCheckRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContextFieldNumber = 5,
    kRequestedActionsFieldNumber = 6,
    kRequesterIdFieldNumber = 1,
    kPolicyIdFieldNumber = 2,
    kResourceIdFieldNumber = 4,
    kIpAddressFieldNumber = 7,
    kDeviceInfoFieldNumber = 8,
    kRequestTimestampFieldNumber = 9,
    kNetworkConditionFieldNumber = 10,
    kSessionIdFieldNumber = 12,
    kCorrelationIdFieldNumber = 13,
    kActionFieldNumber = 3,
    kEmergencyOverrideFlagFieldNumber = 11,
  };
  // map<string, string> context = 5;
  int context_size() const;
  private:
  int _internal_context_size() const;

  public:
  void clear_context() ;
  const ::google::protobuf::Map<std::string, std::string>& context() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_context();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_context() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_context();

  public:
  // repeated .seigr.access_policies.ActionType requested_actions = 6;
  int requested_actions_size() const;
  private:
  int _internal_requested_actions_size() const;

  public:
  void clear_requested_actions() ;
  public:
  ::seigr::access_policies::ActionType requested_actions(int index) const;
  void set_requested_actions(int index, ::seigr::access_policies::ActionType value);
  void add_requested_actions(::seigr::access_policies::ActionType value);
  const ::google::protobuf::RepeatedField<int>& requested_actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_requested_actions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_requested_actions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_requested_actions();

  public:
  // string requester_id = 1;
  void clear_requester_id() ;
  const std::string& requester_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requester_id(Arg_&& arg, Args_... args);
  std::string* mutable_requester_id();
  PROTOBUF_NODISCARD std::string* release_requester_id();
  void set_allocated_requester_id(std::string* value);

  private:
  const std::string& _internal_requester_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_id(
      const std::string& value);
  std::string* _internal_mutable_requester_id();

  public:
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string resource_id = 4;
  void clear_resource_id() ;
  const std::string& resource_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resource_id(Arg_&& arg, Args_... args);
  std::string* mutable_resource_id();
  PROTOBUF_NODISCARD std::string* release_resource_id();
  void set_allocated_resource_id(std::string* value);

  private:
  const std::string& _internal_resource_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_id(
      const std::string& value);
  std::string* _internal_mutable_resource_id();

  public:
  // string ip_address = 7;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // string device_info = 8;
  void clear_device_info() ;
  const std::string& device_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_info(Arg_&& arg, Args_... args);
  std::string* mutable_device_info();
  PROTOBUF_NODISCARD std::string* release_device_info();
  void set_allocated_device_info(std::string* value);

  private:
  const std::string& _internal_device_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_info(
      const std::string& value);
  std::string* _internal_mutable_device_info();

  public:
  // string request_timestamp = 9;
  void clear_request_timestamp() ;
  const std::string& request_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_request_timestamp();
  PROTOBUF_NODISCARD std::string* release_request_timestamp();
  void set_allocated_request_timestamp(std::string* value);

  private:
  const std::string& _internal_request_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_timestamp(
      const std::string& value);
  std::string* _internal_mutable_request_timestamp();

  public:
  // string network_condition = 10;
  void clear_network_condition() ;
  const std::string& network_condition() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network_condition(Arg_&& arg, Args_... args);
  std::string* mutable_network_condition();
  PROTOBUF_NODISCARD std::string* release_network_condition();
  void set_allocated_network_condition(std::string* value);

  private:
  const std::string& _internal_network_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_condition(
      const std::string& value);
  std::string* _internal_mutable_network_condition();

  public:
  // string session_id = 12;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string correlation_id = 13;
  void clear_correlation_id() ;
  const std::string& correlation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_correlation_id(Arg_&& arg, Args_... args);
  std::string* mutable_correlation_id();
  PROTOBUF_NODISCARD std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* value);

  private:
  const std::string& _internal_correlation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correlation_id(
      const std::string& value);
  std::string* _internal_mutable_correlation_id();

  public:
  // .seigr.access_policies.ActionType action = 3;
  void clear_action() ;
  ::seigr::access_policies::ActionType action() const;
  void set_action(::seigr::access_policies::ActionType value);

  private:
  ::seigr::access_policies::ActionType _internal_action() const;
  void _internal_set_action(::seigr::access_policies::ActionType value);

  public:
  // bool emergency_override_flag = 11;
  void clear_emergency_override_flag() ;
  bool emergency_override_flag() const;
  void set_emergency_override_flag(bool value);

  private:
  bool _internal_emergency_override_flag() const;
  void _internal_set_emergency_override_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.access_policies.PolicyCheckRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      175, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyCheckRequest& from_msg);
    ::google::protobuf::internal::MapField<PolicyCheckRequest_ContextEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        context_;
    ::google::protobuf::RepeatedField<int> requested_actions_;
    ::google::protobuf::internal::CachedSize _requested_actions_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr requester_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr resource_id_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::google::protobuf::internal::ArenaStringPtr device_info_;
    ::google::protobuf::internal::ArenaStringPtr request_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr network_condition_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr correlation_id_;
    int action_;
    bool emergency_override_flag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_access_5fpolicies_2eproto;
};
// -------------------------------------------------------------------

class AccessLifecyclePolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.access_policies.AccessLifecyclePolicy) */ {
 public:
  inline AccessLifecyclePolicy() : AccessLifecyclePolicy(nullptr) {}
  ~AccessLifecyclePolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccessLifecyclePolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccessLifecyclePolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLifecyclePolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccessLifecyclePolicy(const AccessLifecyclePolicy& from) : AccessLifecyclePolicy(nullptr, from) {}
  inline AccessLifecyclePolicy(AccessLifecyclePolicy&& from) noexcept
      : AccessLifecyclePolicy(nullptr, std::move(from)) {}
  inline AccessLifecyclePolicy& operator=(const AccessLifecyclePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessLifecyclePolicy& operator=(AccessLifecyclePolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessLifecyclePolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessLifecyclePolicy* internal_default_instance() {
    return reinterpret_cast<const AccessLifecyclePolicy*>(
        &_AccessLifecyclePolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AccessLifecyclePolicy& a, AccessLifecyclePolicy& b) { a.Swap(&b); }
  inline void Swap(AccessLifecyclePolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessLifecyclePolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessLifecyclePolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccessLifecyclePolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccessLifecyclePolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccessLifecyclePolicy& from) { AccessLifecyclePolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccessLifecyclePolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.access_policies.AccessLifecyclePolicy"; }

 protected:
  explicit AccessLifecyclePolicy(::google::protobuf::Arena* arena);
  AccessLifecyclePolicy(::google::protobuf::Arena* arena, const AccessLifecyclePolicy& from);
  AccessLifecyclePolicy(::google::protobuf::Arena* arena, AccessLifecyclePolicy&& from) noexcept
      : AccessLifecyclePolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConditionsFieldNumber = 6,
    kMetadataFieldNumber = 8,
    kLifecyclePolicyIdFieldNumber = 1,
    kAssociatedPolicyIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kReviewIntervalFieldNumber = 7,
    kAutoRenewFieldNumber = 5,
  };
  // map<string, string> conditions = 6;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;

  public:
  void clear_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_conditions();

  public:
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string lifecycle_policy_id = 1;
  void clear_lifecycle_policy_id() ;
  const std::string& lifecycle_policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lifecycle_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_lifecycle_policy_id();
  PROTOBUF_NODISCARD std::string* release_lifecycle_policy_id();
  void set_allocated_lifecycle_policy_id(std::string* value);

  private:
  const std::string& _internal_lifecycle_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lifecycle_policy_id(
      const std::string& value);
  std::string* _internal_mutable_lifecycle_policy_id();

  public:
  // string associated_policy_id = 2;
  void clear_associated_policy_id() ;
  const std::string& associated_policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_associated_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_associated_policy_id();
  PROTOBUF_NODISCARD std::string* release_associated_policy_id();
  void set_allocated_associated_policy_id(std::string* value);

  private:
  const std::string& _internal_associated_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_policy_id(
      const std::string& value);
  std::string* _internal_mutable_associated_policy_id();

  public:
  // string start_time = 3;
  void clear_start_time() ;
  const std::string& start_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* value);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string end_time = 4;
  void clear_end_time() ;
  const std::string& end_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_time(Arg_&& arg, Args_... args);
  std::string* mutable_end_time();
  PROTOBUF_NODISCARD std::string* release_end_time();
  void set_allocated_end_time(std::string* value);

  private:
  const std::string& _internal_end_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_time(
      const std::string& value);
  std::string* _internal_mutable_end_time();

  public:
  // string review_interval = 7;
  void clear_review_interval() ;
  const std::string& review_interval() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_review_interval(Arg_&& arg, Args_... args);
  std::string* mutable_review_interval();
  PROTOBUF_NODISCARD std::string* release_review_interval();
  void set_allocated_review_interval(std::string* value);

  private:
  const std::string& _internal_review_interval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_review_interval(
      const std::string& value);
  std::string* _internal_mutable_review_interval();

  public:
  // bool auto_renew = 5;
  void clear_auto_renew() ;
  bool auto_renew() const;
  void set_auto_renew(bool value);

  private:
  bool _internal_auto_renew() const;
  void _internal_set_auto_renew(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.access_policies.AccessLifecyclePolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      150, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccessLifecyclePolicy& from_msg);
    ::google::protobuf::internal::MapField<AccessLifecyclePolicy_ConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        conditions_;
    ::google::protobuf::internal::MapField<AccessLifecyclePolicy_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr lifecycle_policy_id_;
    ::google::protobuf::internal::ArenaStringPtr associated_policy_id_;
    ::google::protobuf::internal::ArenaStringPtr start_time_;
    ::google::protobuf::internal::ArenaStringPtr end_time_;
    ::google::protobuf::internal::ArenaStringPtr review_interval_;
    bool auto_renew_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_access_5fpolicies_2eproto;
};
// -------------------------------------------------------------------

class AccessPolicySet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.access_policies.AccessPolicySet) */ {
 public:
  inline AccessPolicySet() : AccessPolicySet(nullptr) {}
  ~AccessPolicySet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccessPolicySet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccessPolicySet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessPolicySet(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccessPolicySet(const AccessPolicySet& from) : AccessPolicySet(nullptr, from) {}
  inline AccessPolicySet(AccessPolicySet&& from) noexcept
      : AccessPolicySet(nullptr, std::move(from)) {}
  inline AccessPolicySet& operator=(const AccessPolicySet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessPolicySet& operator=(AccessPolicySet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessPolicySet& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessPolicySet* internal_default_instance() {
    return reinterpret_cast<const AccessPolicySet*>(
        &_AccessPolicySet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AccessPolicySet& a, AccessPolicySet& b) { a.Swap(&b); }
  inline void Swap(AccessPolicySet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessPolicySet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessPolicySet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccessPolicySet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccessPolicySet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccessPolicySet& from) { AccessPolicySet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccessPolicySet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.access_policies.AccessPolicySet"; }

 protected:
  explicit AccessPolicySet(::google::protobuf::Arena* arena);
  AccessPolicySet(::google::protobuf::Arena* arena, const AccessPolicySet& from);
  AccessPolicySet(::google::protobuf::Arena* arena, AccessPolicySet&& from) noexcept
      : AccessPolicySet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPoliciesFieldNumber = 3,
    kInheritedSetIdsFieldNumber = 4,
    kMetadataFieldNumber = 8,
    kSetIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 6,
    kLastReviewedFieldNumber = 7,
    kMaxInheritanceDepthFieldNumber = 5,
    kConditionalInheritanceEnabledFieldNumber = 9,
    kEnforcedGloballyFieldNumber = 10,
  };
  // repeated .seigr.access_control.AccessPolicy policies = 3;
  int policies_size() const;
  private:
  int _internal_policies_size() const;

  public:
  void clear_policies() ;
  ::seigr::access_control::AccessPolicy* mutable_policies(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* mutable_policies();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& _internal_policies() const;
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* _internal_mutable_policies();
  public:
  const ::seigr::access_control::AccessPolicy& policies(int index) const;
  ::seigr::access_control::AccessPolicy* add_policies();
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& policies() const;
  // repeated string inherited_set_ids = 4;
  int inherited_set_ids_size() const;
  private:
  int _internal_inherited_set_ids_size() const;

  public:
  void clear_inherited_set_ids() ;
  const std::string& inherited_set_ids(int index) const;
  std::string* mutable_inherited_set_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inherited_set_ids(int index, Arg_&& value, Args_... args);
  std::string* add_inherited_set_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_inherited_set_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& inherited_set_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_inherited_set_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_inherited_set_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_inherited_set_ids();

  public:
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string set_id = 1;
  void clear_set_id() ;
  const std::string& set_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_set_id(Arg_&& arg, Args_... args);
  std::string* mutable_set_id();
  PROTOBUF_NODISCARD std::string* release_set_id();
  void set_allocated_set_id(std::string* value);

  private:
  const std::string& _internal_set_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_id(
      const std::string& value);
  std::string* _internal_mutable_set_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 6;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string last_reviewed = 7;
  void clear_last_reviewed() ;
  const std::string& last_reviewed() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_reviewed(Arg_&& arg, Args_... args);
  std::string* mutable_last_reviewed();
  PROTOBUF_NODISCARD std::string* release_last_reviewed();
  void set_allocated_last_reviewed(std::string* value);

  private:
  const std::string& _internal_last_reviewed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_reviewed(
      const std::string& value);
  std::string* _internal_mutable_last_reviewed();

  public:
  // int32 max_inheritance_depth = 5;
  void clear_max_inheritance_depth() ;
  ::int32_t max_inheritance_depth() const;
  void set_max_inheritance_depth(::int32_t value);

  private:
  ::int32_t _internal_max_inheritance_depth() const;
  void _internal_set_max_inheritance_depth(::int32_t value);

  public:
  // bool conditional_inheritance_enabled = 9;
  void clear_conditional_inheritance_enabled() ;
  bool conditional_inheritance_enabled() const;
  void set_conditional_inheritance_enabled(bool value);

  private:
  bool _internal_conditional_inheritance_enabled() const;
  void _internal_set_conditional_inheritance_enabled(bool value);

  public:
  // bool enforced_globally = 10;
  void clear_enforced_globally() ;
  bool enforced_globally() const;
  void set_enforced_globally(bool value);

  private:
  bool _internal_enforced_globally() const;
  void _internal_set_enforced_globally(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.access_policies.AccessPolicySet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      109, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccessPolicySet& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::access_control::AccessPolicy > policies_;
    ::google::protobuf::RepeatedPtrField<std::string> inherited_set_ids_;
    ::google::protobuf::internal::MapField<AccessPolicySet_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr set_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr last_reviewed_;
    ::int32_t max_inheritance_depth_;
    bool conditional_inheritance_enabled_;
    bool enforced_globally_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_access_5fpolicies_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccessPolicySet

// string set_id = 1;
inline void AccessPolicySet::clear_set_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_id_.ClearToEmpty();
}
inline const std::string& AccessPolicySet::set_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.set_id)
  return _internal_set_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessPolicySet::set_set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.set_id)
}
inline std::string* AccessPolicySet::mutable_set_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_set_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.set_id)
  return _s;
}
inline const std::string& AccessPolicySet::_internal_set_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.set_id_.Get();
}
inline void AccessPolicySet::_internal_set_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_id_.Set(value, GetArena());
}
inline std::string* AccessPolicySet::_internal_mutable_set_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.set_id_.Mutable( GetArena());
}
inline std::string* AccessPolicySet::release_set_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessPolicySet.set_id)
  return _impl_.set_id_.Release();
}
inline void AccessPolicySet::set_allocated_set_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.set_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.set_id_.IsDefault()) {
    _impl_.set_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessPolicySet.set_id)
}

// string name = 2;
inline void AccessPolicySet::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AccessPolicySet::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessPolicySet::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.name)
}
inline std::string* AccessPolicySet::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.name)
  return _s;
}
inline const std::string& AccessPolicySet::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void AccessPolicySet::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AccessPolicySet::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AccessPolicySet::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessPolicySet.name)
  return _impl_.name_.Release();
}
inline void AccessPolicySet::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessPolicySet.name)
}

// repeated .seigr.access_control.AccessPolicy policies = 3;
inline int AccessPolicySet::_internal_policies_size() const {
  return _internal_policies().size();
}
inline int AccessPolicySet::policies_size() const {
  return _internal_policies_size();
}
inline ::seigr::access_control::AccessPolicy* AccessPolicySet::mutable_policies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.policies)
  return _internal_mutable_policies()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* AccessPolicySet::mutable_policies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.access_policies.AccessPolicySet.policies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_policies();
}
inline const ::seigr::access_control::AccessPolicy& AccessPolicySet::policies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.policies)
  return _internal_policies().Get(index);
}
inline ::seigr::access_control::AccessPolicy* AccessPolicySet::add_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::access_control::AccessPolicy* _add = _internal_mutable_policies()->Add();
  // @@protoc_insertion_point(field_add:seigr.access_policies.AccessPolicySet.policies)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& AccessPolicySet::policies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.access_policies.AccessPolicySet.policies)
  return _internal_policies();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>&
AccessPolicySet::_internal_policies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policies_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>*
AccessPolicySet::_internal_mutable_policies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.policies_;
}

// repeated string inherited_set_ids = 4;
inline int AccessPolicySet::_internal_inherited_set_ids_size() const {
  return _internal_inherited_set_ids().size();
}
inline int AccessPolicySet::inherited_set_ids_size() const {
  return _internal_inherited_set_ids_size();
}
inline void AccessPolicySet::clear_inherited_set_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inherited_set_ids_.Clear();
}
inline std::string* AccessPolicySet::add_inherited_set_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_inherited_set_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.access_policies.AccessPolicySet.inherited_set_ids)
  return _s;
}
inline const std::string& AccessPolicySet::inherited_set_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.inherited_set_ids)
  return _internal_inherited_set_ids().Get(index);
}
inline std::string* AccessPolicySet::mutable_inherited_set_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.inherited_set_ids)
  return _internal_mutable_inherited_set_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AccessPolicySet::set_inherited_set_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_inherited_set_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.inherited_set_ids)
}
template <typename Arg_, typename... Args_>
inline void AccessPolicySet::add_inherited_set_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_inherited_set_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.access_policies.AccessPolicySet.inherited_set_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccessPolicySet::inherited_set_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.access_policies.AccessPolicySet.inherited_set_ids)
  return _internal_inherited_set_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccessPolicySet::mutable_inherited_set_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.access_policies.AccessPolicySet.inherited_set_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_inherited_set_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccessPolicySet::_internal_inherited_set_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inherited_set_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccessPolicySet::_internal_mutable_inherited_set_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.inherited_set_ids_;
}

// int32 max_inheritance_depth = 5;
inline void AccessPolicySet::clear_max_inheritance_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_inheritance_depth_ = 0;
}
inline ::int32_t AccessPolicySet::max_inheritance_depth() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.max_inheritance_depth)
  return _internal_max_inheritance_depth();
}
inline void AccessPolicySet::set_max_inheritance_depth(::int32_t value) {
  _internal_set_max_inheritance_depth(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.max_inheritance_depth)
}
inline ::int32_t AccessPolicySet::_internal_max_inheritance_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_inheritance_depth_;
}
inline void AccessPolicySet::_internal_set_max_inheritance_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_inheritance_depth_ = value;
}

// string version = 6;
inline void AccessPolicySet::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& AccessPolicySet::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessPolicySet::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.version)
}
inline std::string* AccessPolicySet::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.version)
  return _s;
}
inline const std::string& AccessPolicySet::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void AccessPolicySet::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* AccessPolicySet::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* AccessPolicySet::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessPolicySet.version)
  return _impl_.version_.Release();
}
inline void AccessPolicySet::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessPolicySet.version)
}

// string last_reviewed = 7;
inline void AccessPolicySet::clear_last_reviewed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_reviewed_.ClearToEmpty();
}
inline const std::string& AccessPolicySet::last_reviewed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.last_reviewed)
  return _internal_last_reviewed();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessPolicySet::set_last_reviewed(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_reviewed_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.last_reviewed)
}
inline std::string* AccessPolicySet::mutable_last_reviewed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_reviewed();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessPolicySet.last_reviewed)
  return _s;
}
inline const std::string& AccessPolicySet::_internal_last_reviewed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_reviewed_.Get();
}
inline void AccessPolicySet::_internal_set_last_reviewed(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_reviewed_.Set(value, GetArena());
}
inline std::string* AccessPolicySet::_internal_mutable_last_reviewed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_reviewed_.Mutable( GetArena());
}
inline std::string* AccessPolicySet::release_last_reviewed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessPolicySet.last_reviewed)
  return _impl_.last_reviewed_.Release();
}
inline void AccessPolicySet::set_allocated_last_reviewed(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_reviewed_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_reviewed_.IsDefault()) {
    _impl_.last_reviewed_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessPolicySet.last_reviewed)
}

// map<string, string> metadata = 8;
inline int AccessPolicySet::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AccessPolicySet::metadata_size() const {
  return _internal_metadata_size();
}
inline void AccessPolicySet::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessPolicySet::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessPolicySet::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.AccessPolicySet.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessPolicySet::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessPolicySet::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.AccessPolicySet.metadata)
  return _internal_mutable_metadata();
}

// bool conditional_inheritance_enabled = 9;
inline void AccessPolicySet::clear_conditional_inheritance_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditional_inheritance_enabled_ = false;
}
inline bool AccessPolicySet::conditional_inheritance_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.conditional_inheritance_enabled)
  return _internal_conditional_inheritance_enabled();
}
inline void AccessPolicySet::set_conditional_inheritance_enabled(bool value) {
  _internal_set_conditional_inheritance_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.conditional_inheritance_enabled)
}
inline bool AccessPolicySet::_internal_conditional_inheritance_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conditional_inheritance_enabled_;
}
inline void AccessPolicySet::_internal_set_conditional_inheritance_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditional_inheritance_enabled_ = value;
}

// bool enforced_globally = 10;
inline void AccessPolicySet::clear_enforced_globally() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforced_globally_ = false;
}
inline bool AccessPolicySet::enforced_globally() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessPolicySet.enforced_globally)
  return _internal_enforced_globally();
}
inline void AccessPolicySet::set_enforced_globally(bool value) {
  _internal_set_enforced_globally(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessPolicySet.enforced_globally)
}
inline bool AccessPolicySet::_internal_enforced_globally() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforced_globally_;
}
inline void AccessPolicySet::_internal_set_enforced_globally(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforced_globally_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyCheckRequest

// string requester_id = 1;
inline void PolicyCheckRequest::clear_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::requester_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.requester_id)
  return _internal_requester_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_requester_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.requester_id)
}
inline std::string* PolicyCheckRequest::mutable_requester_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requester_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.requester_id)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_requester_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requester_id_.Get();
}
inline void PolicyCheckRequest::_internal_set_requester_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requester_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_requester_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.requester_id)
  return _impl_.requester_id_.Release();
}
inline void PolicyCheckRequest::set_allocated_requester_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requester_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requester_id_.IsDefault()) {
    _impl_.requester_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.requester_id)
}

// string policy_id = 2;
inline void PolicyCheckRequest::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.policy_id)
}
inline std::string* PolicyCheckRequest::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.policy_id)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void PolicyCheckRequest::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.policy_id)
  return _impl_.policy_id_.Release();
}
inline void PolicyCheckRequest::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.policy_id)
}

// .seigr.access_policies.ActionType action = 3;
inline void PolicyCheckRequest::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::seigr::access_policies::ActionType PolicyCheckRequest::action() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.action)
  return _internal_action();
}
inline void PolicyCheckRequest::set_action(::seigr::access_policies::ActionType value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.action)
}
inline ::seigr::access_policies::ActionType PolicyCheckRequest::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::access_policies::ActionType>(_impl_.action_);
}
inline void PolicyCheckRequest::_internal_set_action(::seigr::access_policies::ActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// string resource_id = 4;
inline void PolicyCheckRequest::clear_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::resource_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.resource_id)
  return _internal_resource_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_resource_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.resource_id)
}
inline std::string* PolicyCheckRequest::mutable_resource_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resource_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.resource_id)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_resource_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_id_.Get();
}
inline void PolicyCheckRequest::_internal_set_resource_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resource_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.resource_id)
  return _impl_.resource_id_.Release();
}
inline void PolicyCheckRequest::set_allocated_resource_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resource_id_.IsDefault()) {
    _impl_.resource_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.resource_id)
}

// map<string, string> context = 5;
inline int PolicyCheckRequest::_internal_context_size() const {
  return _internal_context().size();
}
inline int PolicyCheckRequest::context_size() const {
  return _internal_context_size();
}
inline void PolicyCheckRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckRequest::context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.PolicyCheckRequest.context)
  return _internal_context();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckRequest::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.PolicyCheckRequest.context)
  return _internal_mutable_context();
}

// repeated .seigr.access_policies.ActionType requested_actions = 6;
inline int PolicyCheckRequest::_internal_requested_actions_size() const {
  return _internal_requested_actions().size();
}
inline int PolicyCheckRequest::requested_actions_size() const {
  return _internal_requested_actions_size();
}
inline void PolicyCheckRequest::clear_requested_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_actions_.Clear();
}
inline ::seigr::access_policies::ActionType PolicyCheckRequest::requested_actions(int index) const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.requested_actions)
  return static_cast<::seigr::access_policies::ActionType>(_internal_requested_actions().Get(index));
}
inline void PolicyCheckRequest::set_requested_actions(int index, ::seigr::access_policies::ActionType value) {
  _internal_mutable_requested_actions()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.requested_actions)
}
inline void PolicyCheckRequest::add_requested_actions(::seigr::access_policies::ActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_requested_actions()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.access_policies.PolicyCheckRequest.requested_actions)
}
inline const ::google::protobuf::RepeatedField<int>& PolicyCheckRequest::requested_actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.access_policies.PolicyCheckRequest.requested_actions)
  return _internal_requested_actions();
}
inline ::google::protobuf::RepeatedField<int>* PolicyCheckRequest::mutable_requested_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.access_policies.PolicyCheckRequest.requested_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_requested_actions();
}
inline const ::google::protobuf::RepeatedField<int>& PolicyCheckRequest::_internal_requested_actions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_actions_;
}
inline ::google::protobuf::RepeatedField<int>* PolicyCheckRequest::_internal_mutable_requested_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.requested_actions_;
}

// string ip_address = 7;
inline void PolicyCheckRequest::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.ip_address)
}
inline std::string* PolicyCheckRequest::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.ip_address)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void PolicyCheckRequest::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.ip_address)
  return _impl_.ip_address_.Release();
}
inline void PolicyCheckRequest::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.ip_address)
}

// string device_info = 8;
inline void PolicyCheckRequest::clear_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::device_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.device_info)
  return _internal_device_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_device_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.device_info)
}
inline std::string* PolicyCheckRequest::mutable_device_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.device_info)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_device_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_info_.Get();
}
inline void PolicyCheckRequest::_internal_set_device_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_info_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.device_info)
  return _impl_.device_info_.Release();
}
inline void PolicyCheckRequest::set_allocated_device_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_info_.IsDefault()) {
    _impl_.device_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.device_info)
}

// string request_timestamp = 9;
inline void PolicyCheckRequest::clear_request_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::request_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.request_timestamp)
  return _internal_request_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_request_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.request_timestamp)
}
inline std::string* PolicyCheckRequest::mutable_request_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.request_timestamp)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_request_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_timestamp_.Get();
}
inline void PolicyCheckRequest::_internal_set_request_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_request_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_timestamp_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_request_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.request_timestamp)
  return _impl_.request_timestamp_.Release();
}
inline void PolicyCheckRequest::set_allocated_request_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_timestamp_.IsDefault()) {
    _impl_.request_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.request_timestamp)
}

// string network_condition = 10;
inline void PolicyCheckRequest::clear_network_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_condition_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::network_condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.network_condition)
  return _internal_network_condition();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_network_condition(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_condition_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.network_condition)
}
inline std::string* PolicyCheckRequest::mutable_network_condition() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network_condition();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.network_condition)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_network_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_condition_.Get();
}
inline void PolicyCheckRequest::_internal_set_network_condition(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_condition_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_network_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.network_condition_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_network_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.network_condition)
  return _impl_.network_condition_.Release();
}
inline void PolicyCheckRequest::set_allocated_network_condition(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_condition_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_condition_.IsDefault()) {
    _impl_.network_condition_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.network_condition)
}

// bool emergency_override_flag = 11;
inline void PolicyCheckRequest::clear_emergency_override_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_override_flag_ = false;
}
inline bool PolicyCheckRequest::emergency_override_flag() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.emergency_override_flag)
  return _internal_emergency_override_flag();
}
inline void PolicyCheckRequest::set_emergency_override_flag(bool value) {
  _internal_set_emergency_override_flag(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.emergency_override_flag)
}
inline bool PolicyCheckRequest::_internal_emergency_override_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emergency_override_flag_;
}
inline void PolicyCheckRequest::_internal_set_emergency_override_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_override_flag_ = value;
}

// string session_id = 12;
inline void PolicyCheckRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.session_id)
}
inline std::string* PolicyCheckRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.session_id)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void PolicyCheckRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void PolicyCheckRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.session_id)
}

// string correlation_id = 13;
inline void PolicyCheckRequest::clear_correlation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.correlation_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckRequest::correlation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckRequest.correlation_id)
  return _internal_correlation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckRequest::set_correlation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.correlation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckRequest.correlation_id)
}
inline std::string* PolicyCheckRequest::mutable_correlation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_correlation_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckRequest.correlation_id)
  return _s;
}
inline const std::string& PolicyCheckRequest::_internal_correlation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.correlation_id_.Get();
}
inline void PolicyCheckRequest::_internal_set_correlation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.correlation_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckRequest::_internal_mutable_correlation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.correlation_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckRequest::release_correlation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckRequest.correlation_id)
  return _impl_.correlation_id_.Release();
}
inline void PolicyCheckRequest::set_allocated_correlation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.correlation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.correlation_id_.IsDefault()) {
    _impl_.correlation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckRequest.correlation_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyCheckResponse

// bool is_action_allowed = 1;
inline void PolicyCheckResponse::clear_is_action_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_action_allowed_ = false;
}
inline bool PolicyCheckResponse::is_action_allowed() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.is_action_allowed)
  return _internal_is_action_allowed();
}
inline void PolicyCheckResponse::set_is_action_allowed(bool value) {
  _internal_set_is_action_allowed(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.is_action_allowed)
}
inline bool PolicyCheckResponse::_internal_is_action_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_action_allowed_;
}
inline void PolicyCheckResponse::_internal_set_is_action_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_action_allowed_ = value;
}

// string policy_id = 2;
inline void PolicyCheckResponse::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckResponse::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckResponse::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.policy_id)
}
inline std::string* PolicyCheckResponse::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckResponse.policy_id)
  return _s;
}
inline const std::string& PolicyCheckResponse::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void PolicyCheckResponse::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckResponse::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckResponse::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckResponse.policy_id)
  return _impl_.policy_id_.Release();
}
inline void PolicyCheckResponse::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckResponse.policy_id)
}

// .seigr.access_control.PolicyStatus policy_status = 3;
inline void PolicyCheckResponse::clear_policy_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_status_ = 0;
}
inline ::seigr::access_control::PolicyStatus PolicyCheckResponse::policy_status() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.policy_status)
  return _internal_policy_status();
}
inline void PolicyCheckResponse::set_policy_status(::seigr::access_control::PolicyStatus value) {
  _internal_set_policy_status(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.policy_status)
}
inline ::seigr::access_control::PolicyStatus PolicyCheckResponse::_internal_policy_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::access_control::PolicyStatus>(_impl_.policy_status_);
}
inline void PolicyCheckResponse::_internal_set_policy_status(::seigr::access_control::PolicyStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_status_ = value;
}

// string denial_reason = 4;
inline void PolicyCheckResponse::clear_denial_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denial_reason_.ClearToEmpty();
}
inline const std::string& PolicyCheckResponse::denial_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.denial_reason)
  return _internal_denial_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckResponse::set_denial_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denial_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.denial_reason)
}
inline std::string* PolicyCheckResponse::mutable_denial_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denial_reason();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckResponse.denial_reason)
  return _s;
}
inline const std::string& PolicyCheckResponse::_internal_denial_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denial_reason_.Get();
}
inline void PolicyCheckResponse::_internal_set_denial_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denial_reason_.Set(value, GetArena());
}
inline std::string* PolicyCheckResponse::_internal_mutable_denial_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denial_reason_.Mutable( GetArena());
}
inline std::string* PolicyCheckResponse::release_denial_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckResponse.denial_reason)
  return _impl_.denial_reason_.Release();
}
inline void PolicyCheckResponse::set_allocated_denial_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denial_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denial_reason_.IsDefault()) {
    _impl_.denial_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckResponse.denial_reason)
}

// repeated .seigr.access_policies.ActionType permitted_actions = 5;
inline int PolicyCheckResponse::_internal_permitted_actions_size() const {
  return _internal_permitted_actions().size();
}
inline int PolicyCheckResponse::permitted_actions_size() const {
  return _internal_permitted_actions_size();
}
inline void PolicyCheckResponse::clear_permitted_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permitted_actions_.Clear();
}
inline ::seigr::access_policies::ActionType PolicyCheckResponse::permitted_actions(int index) const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.permitted_actions)
  return static_cast<::seigr::access_policies::ActionType>(_internal_permitted_actions().Get(index));
}
inline void PolicyCheckResponse::set_permitted_actions(int index, ::seigr::access_policies::ActionType value) {
  _internal_mutable_permitted_actions()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.permitted_actions)
}
inline void PolicyCheckResponse::add_permitted_actions(::seigr::access_policies::ActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_permitted_actions()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.access_policies.PolicyCheckResponse.permitted_actions)
}
inline const ::google::protobuf::RepeatedField<int>& PolicyCheckResponse::permitted_actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.access_policies.PolicyCheckResponse.permitted_actions)
  return _internal_permitted_actions();
}
inline ::google::protobuf::RepeatedField<int>* PolicyCheckResponse::mutable_permitted_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.access_policies.PolicyCheckResponse.permitted_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permitted_actions();
}
inline const ::google::protobuf::RepeatedField<int>& PolicyCheckResponse::_internal_permitted_actions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permitted_actions_;
}
inline ::google::protobuf::RepeatedField<int>* PolicyCheckResponse::_internal_mutable_permitted_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permitted_actions_;
}

// map<string, string> audit_metadata = 6;
inline int PolicyCheckResponse::_internal_audit_metadata_size() const {
  return _internal_audit_metadata().size();
}
inline int PolicyCheckResponse::audit_metadata_size() const {
  return _internal_audit_metadata_size();
}
inline void PolicyCheckResponse::clear_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckResponse::_internal_audit_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckResponse::audit_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.PolicyCheckResponse.audit_metadata)
  return _internal_audit_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckResponse::_internal_mutable_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audit_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckResponse::mutable_audit_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.PolicyCheckResponse.audit_metadata)
  return _internal_mutable_audit_metadata();
}

// double compliance_score = 7;
inline void PolicyCheckResponse::clear_compliance_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_score_ = 0;
}
inline double PolicyCheckResponse::compliance_score() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.compliance_score)
  return _internal_compliance_score();
}
inline void PolicyCheckResponse::set_compliance_score(double value) {
  _internal_set_compliance_score(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.compliance_score)
}
inline double PolicyCheckResponse::_internal_compliance_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_score_;
}
inline void PolicyCheckResponse::_internal_set_compliance_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_score_ = value;
}

// double risk_score = 8;
inline void PolicyCheckResponse::clear_risk_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_score_ = 0;
}
inline double PolicyCheckResponse::risk_score() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.risk_score)
  return _internal_risk_score();
}
inline void PolicyCheckResponse::set_risk_score(double value) {
  _internal_set_risk_score(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.risk_score)
}
inline double PolicyCheckResponse::_internal_risk_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.risk_score_;
}
inline void PolicyCheckResponse::_internal_set_risk_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risk_score_ = value;
}

// string escalation_suggestion = 9;
inline void PolicyCheckResponse::clear_escalation_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_suggestion_.ClearToEmpty();
}
inline const std::string& PolicyCheckResponse::escalation_suggestion() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.escalation_suggestion)
  return _internal_escalation_suggestion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckResponse::set_escalation_suggestion(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_suggestion_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.escalation_suggestion)
}
inline std::string* PolicyCheckResponse::mutable_escalation_suggestion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_suggestion();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckResponse.escalation_suggestion)
  return _s;
}
inline const std::string& PolicyCheckResponse::_internal_escalation_suggestion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_suggestion_.Get();
}
inline void PolicyCheckResponse::_internal_set_escalation_suggestion(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_suggestion_.Set(value, GetArena());
}
inline std::string* PolicyCheckResponse::_internal_mutable_escalation_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_suggestion_.Mutable( GetArena());
}
inline std::string* PolicyCheckResponse::release_escalation_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckResponse.escalation_suggestion)
  return _impl_.escalation_suggestion_.Release();
}
inline void PolicyCheckResponse::set_allocated_escalation_suggestion(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_suggestion_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_suggestion_.IsDefault()) {
    _impl_.escalation_suggestion_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckResponse.escalation_suggestion)
}

// string decision_timestamp = 10;
inline void PolicyCheckResponse::clear_decision_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_timestamp_.ClearToEmpty();
}
inline const std::string& PolicyCheckResponse::decision_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.decision_timestamp)
  return _internal_decision_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckResponse::set_decision_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.decision_timestamp)
}
inline std::string* PolicyCheckResponse::mutable_decision_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_decision_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckResponse.decision_timestamp)
  return _s;
}
inline const std::string& PolicyCheckResponse::_internal_decision_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.decision_timestamp_.Get();
}
inline void PolicyCheckResponse::_internal_set_decision_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_timestamp_.Set(value, GetArena());
}
inline std::string* PolicyCheckResponse::_internal_mutable_decision_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.decision_timestamp_.Mutable( GetArena());
}
inline std::string* PolicyCheckResponse::release_decision_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckResponse.decision_timestamp)
  return _impl_.decision_timestamp_.Release();
}
inline void PolicyCheckResponse::set_allocated_decision_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.decision_timestamp_.IsDefault()) {
    _impl_.decision_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckResponse.decision_timestamp)
}

// bool emergency_override_used = 11;
inline void PolicyCheckResponse::clear_emergency_override_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_override_used_ = false;
}
inline bool PolicyCheckResponse::emergency_override_used() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.emergency_override_used)
  return _internal_emergency_override_used();
}
inline void PolicyCheckResponse::set_emergency_override_used(bool value) {
  _internal_set_emergency_override_used(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.emergency_override_used)
}
inline bool PolicyCheckResponse::_internal_emergency_override_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emergency_override_used_;
}
inline void PolicyCheckResponse::_internal_set_emergency_override_used(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emergency_override_used_ = value;
}

// string evaluator_id = 12;
inline void PolicyCheckResponse::clear_evaluator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluator_id_.ClearToEmpty();
}
inline const std::string& PolicyCheckResponse::evaluator_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyCheckResponse.evaluator_id)
  return _internal_evaluator_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyCheckResponse::set_evaluator_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluator_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyCheckResponse.evaluator_id)
}
inline std::string* PolicyCheckResponse::mutable_evaluator_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_evaluator_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyCheckResponse.evaluator_id)
  return _s;
}
inline const std::string& PolicyCheckResponse::_internal_evaluator_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evaluator_id_.Get();
}
inline void PolicyCheckResponse::_internal_set_evaluator_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluator_id_.Set(value, GetArena());
}
inline std::string* PolicyCheckResponse::_internal_mutable_evaluator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.evaluator_id_.Mutable( GetArena());
}
inline std::string* PolicyCheckResponse::release_evaluator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyCheckResponse.evaluator_id)
  return _impl_.evaluator_id_.Release();
}
inline void PolicyCheckResponse::set_allocated_evaluator_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluator_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.evaluator_id_.IsDefault()) {
    _impl_.evaluator_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyCheckResponse.evaluator_id)
}

// map<string, string> decision_metadata = 13;
inline int PolicyCheckResponse::_internal_decision_metadata_size() const {
  return _internal_decision_metadata().size();
}
inline int PolicyCheckResponse::decision_metadata_size() const {
  return _internal_decision_metadata_size();
}
inline void PolicyCheckResponse::clear_decision_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckResponse::_internal_decision_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.decision_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyCheckResponse::decision_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.PolicyCheckResponse.decision_metadata)
  return _internal_decision_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckResponse::_internal_mutable_decision_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.decision_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyCheckResponse::mutable_decision_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.PolicyCheckResponse.decision_metadata)
  return _internal_mutable_decision_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyEscalation

// string escalation_id = 1;
inline void PolicyEscalation::clear_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::escalation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.escalation_id)
  return _internal_escalation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_escalation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.escalation_id)
}
inline std::string* PolicyEscalation::mutable_escalation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.escalation_id)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_escalation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_id_.Get();
}
inline void PolicyEscalation::_internal_set_escalation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_id_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.escalation_id)
  return _impl_.escalation_id_.Release();
}
inline void PolicyEscalation::set_allocated_escalation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_id_.IsDefault()) {
    _impl_.escalation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.escalation_id)
}

// string original_policy_id = 2;
inline void PolicyEscalation::clear_original_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_policy_id_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::original_policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.original_policy_id)
  return _internal_original_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_original_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.original_policy_id)
}
inline std::string* PolicyEscalation::mutable_original_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.original_policy_id)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_original_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_policy_id_.Get();
}
inline void PolicyEscalation::_internal_set_original_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_policy_id_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_original_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.original_policy_id_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_original_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.original_policy_id)
  return _impl_.original_policy_id_.Release();
}
inline void PolicyEscalation::set_allocated_original_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.original_policy_id_.IsDefault()) {
    _impl_.original_policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.original_policy_id)
}

// string triggered_by_id = 3;
inline void PolicyEscalation::clear_triggered_by_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_by_id_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::triggered_by_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.triggered_by_id)
  return _internal_triggered_by_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_triggered_by_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_by_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.triggered_by_id)
}
inline std::string* PolicyEscalation::mutable_triggered_by_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_triggered_by_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.triggered_by_id)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_triggered_by_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.triggered_by_id_.Get();
}
inline void PolicyEscalation::_internal_set_triggered_by_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_by_id_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_triggered_by_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.triggered_by_id_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_triggered_by_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.triggered_by_id)
  return _impl_.triggered_by_id_.Release();
}
inline void PolicyEscalation::set_allocated_triggered_by_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_by_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.triggered_by_id_.IsDefault()) {
    _impl_.triggered_by_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.triggered_by_id)
}

// string escalation_reason = 4;
inline void PolicyEscalation::clear_escalation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_reason_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::escalation_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.escalation_reason)
  return _internal_escalation_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_escalation_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.escalation_reason)
}
inline std::string* PolicyEscalation::mutable_escalation_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_reason();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.escalation_reason)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_escalation_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_reason_.Get();
}
inline void PolicyEscalation::_internal_set_escalation_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_reason_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_escalation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_reason_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_escalation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.escalation_reason)
  return _impl_.escalation_reason_.Release();
}
inline void PolicyEscalation::set_allocated_escalation_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_reason_.IsDefault()) {
    _impl_.escalation_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.escalation_reason)
}

// string escalation_path = 5;
inline void PolicyEscalation::clear_escalation_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::escalation_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.escalation_path)
  return _internal_escalation_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_escalation_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.escalation_path)
}
inline std::string* PolicyEscalation::mutable_escalation_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_path();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.escalation_path)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_escalation_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_path_.Get();
}
inline void PolicyEscalation::_internal_set_escalation_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_escalation_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_path_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_escalation_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.escalation_path)
  return _impl_.escalation_path_.Release();
}
inline void PolicyEscalation::set_allocated_escalation_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_path_.IsDefault()) {
    _impl_.escalation_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.escalation_path)
}

// .seigr.access_control.PolicyStatus new_policy_status = 6;
inline void PolicyEscalation::clear_new_policy_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_policy_status_ = 0;
}
inline ::seigr::access_control::PolicyStatus PolicyEscalation::new_policy_status() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.new_policy_status)
  return _internal_new_policy_status();
}
inline void PolicyEscalation::set_new_policy_status(::seigr::access_control::PolicyStatus value) {
  _internal_set_new_policy_status(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.new_policy_status)
}
inline ::seigr::access_control::PolicyStatus PolicyEscalation::_internal_new_policy_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::access_control::PolicyStatus>(_impl_.new_policy_status_);
}
inline void PolicyEscalation::_internal_set_new_policy_status(::seigr::access_control::PolicyStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_policy_status_ = value;
}

// string escalation_timestamp = 7;
inline void PolicyEscalation::clear_escalation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_timestamp_.ClearToEmpty();
}
inline const std::string& PolicyEscalation::escalation_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.escalation_timestamp)
  return _internal_escalation_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEscalation::set_escalation_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.escalation_timestamp)
}
inline std::string* PolicyEscalation::mutable_escalation_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.PolicyEscalation.escalation_timestamp)
  return _s;
}
inline const std::string& PolicyEscalation::_internal_escalation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_timestamp_.Get();
}
inline void PolicyEscalation::_internal_set_escalation_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_timestamp_.Set(value, GetArena());
}
inline std::string* PolicyEscalation::_internal_mutable_escalation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_timestamp_.Mutable( GetArena());
}
inline std::string* PolicyEscalation::release_escalation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.PolicyEscalation.escalation_timestamp)
  return _impl_.escalation_timestamp_.Release();
}
inline void PolicyEscalation::set_allocated_escalation_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_timestamp_.IsDefault()) {
    _impl_.escalation_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.PolicyEscalation.escalation_timestamp)
}

// map<string, string> metadata = 8;
inline int PolicyEscalation::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int PolicyEscalation::metadata_size() const {
  return _internal_metadata_size();
}
inline void PolicyEscalation::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyEscalation::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyEscalation::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.PolicyEscalation.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyEscalation::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyEscalation::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.PolicyEscalation.metadata)
  return _internal_mutable_metadata();
}

// bool auto_resolved = 9;
inline void PolicyEscalation::clear_auto_resolved() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_resolved_ = false;
}
inline bool PolicyEscalation::auto_resolved() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.PolicyEscalation.auto_resolved)
  return _internal_auto_resolved();
}
inline void PolicyEscalation::set_auto_resolved(bool value) {
  _internal_set_auto_resolved(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.PolicyEscalation.auto_resolved)
}
inline bool PolicyEscalation::_internal_auto_resolved() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_resolved_;
}
inline void PolicyEscalation::_internal_set_auto_resolved(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_resolved_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccessLifecyclePolicy

// string lifecycle_policy_id = 1;
inline void AccessLifecyclePolicy::clear_lifecycle_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lifecycle_policy_id_.ClearToEmpty();
}
inline const std::string& AccessLifecyclePolicy::lifecycle_policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id)
  return _internal_lifecycle_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLifecyclePolicy::set_lifecycle_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lifecycle_policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id)
}
inline std::string* AccessLifecyclePolicy::mutable_lifecycle_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lifecycle_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id)
  return _s;
}
inline const std::string& AccessLifecyclePolicy::_internal_lifecycle_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lifecycle_policy_id_.Get();
}
inline void AccessLifecyclePolicy::_internal_set_lifecycle_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lifecycle_policy_id_.Set(value, GetArena());
}
inline std::string* AccessLifecyclePolicy::_internal_mutable_lifecycle_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.lifecycle_policy_id_.Mutable( GetArena());
}
inline std::string* AccessLifecyclePolicy::release_lifecycle_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id)
  return _impl_.lifecycle_policy_id_.Release();
}
inline void AccessLifecyclePolicy::set_allocated_lifecycle_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lifecycle_policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.lifecycle_policy_id_.IsDefault()) {
    _impl_.lifecycle_policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id)
}

// string associated_policy_id = 2;
inline void AccessLifecyclePolicy::clear_associated_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_policy_id_.ClearToEmpty();
}
inline const std::string& AccessLifecyclePolicy::associated_policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.associated_policy_id)
  return _internal_associated_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLifecyclePolicy::set_associated_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.associated_policy_id)
}
inline std::string* AccessLifecyclePolicy::mutable_associated_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_associated_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessLifecyclePolicy.associated_policy_id)
  return _s;
}
inline const std::string& AccessLifecyclePolicy::_internal_associated_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.associated_policy_id_.Get();
}
inline void AccessLifecyclePolicy::_internal_set_associated_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_policy_id_.Set(value, GetArena());
}
inline std::string* AccessLifecyclePolicy::_internal_mutable_associated_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.associated_policy_id_.Mutable( GetArena());
}
inline std::string* AccessLifecyclePolicy::release_associated_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessLifecyclePolicy.associated_policy_id)
  return _impl_.associated_policy_id_.Release();
}
inline void AccessLifecyclePolicy::set_allocated_associated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.associated_policy_id_.IsDefault()) {
    _impl_.associated_policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessLifecyclePolicy.associated_policy_id)
}

// string start_time = 3;
inline void AccessLifecyclePolicy::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& AccessLifecyclePolicy::start_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLifecyclePolicy::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.start_time)
}
inline std::string* AccessLifecyclePolicy::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessLifecyclePolicy.start_time)
  return _s;
}
inline const std::string& AccessLifecyclePolicy::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_.Get();
}
inline void AccessLifecyclePolicy::_internal_set_start_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(value, GetArena());
}
inline std::string* AccessLifecyclePolicy::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.start_time_.Mutable( GetArena());
}
inline std::string* AccessLifecyclePolicy::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessLifecyclePolicy.start_time)
  return _impl_.start_time_.Release();
}
inline void AccessLifecyclePolicy::set_allocated_start_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.start_time_.IsDefault()) {
    _impl_.start_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessLifecyclePolicy.start_time)
}

// string end_time = 4;
inline void AccessLifecyclePolicy::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_.ClearToEmpty();
}
inline const std::string& AccessLifecyclePolicy::end_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.end_time)
  return _internal_end_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLifecyclePolicy::set_end_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.end_time)
}
inline std::string* AccessLifecyclePolicy::mutable_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessLifecyclePolicy.end_time)
  return _s;
}
inline const std::string& AccessLifecyclePolicy::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_.Get();
}
inline void AccessLifecyclePolicy::_internal_set_end_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_.Set(value, GetArena());
}
inline std::string* AccessLifecyclePolicy::_internal_mutable_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.end_time_.Mutable( GetArena());
}
inline std::string* AccessLifecyclePolicy::release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessLifecyclePolicy.end_time)
  return _impl_.end_time_.Release();
}
inline void AccessLifecyclePolicy::set_allocated_end_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.end_time_.IsDefault()) {
    _impl_.end_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessLifecyclePolicy.end_time)
}

// bool auto_renew = 5;
inline void AccessLifecyclePolicy::clear_auto_renew() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_renew_ = false;
}
inline bool AccessLifecyclePolicy::auto_renew() const {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.auto_renew)
  return _internal_auto_renew();
}
inline void AccessLifecyclePolicy::set_auto_renew(bool value) {
  _internal_set_auto_renew(value);
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.auto_renew)
}
inline bool AccessLifecyclePolicy::_internal_auto_renew() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_renew_;
}
inline void AccessLifecyclePolicy::_internal_set_auto_renew(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_renew_ = value;
}

// map<string, string> conditions = 6;
inline int AccessLifecyclePolicy::_internal_conditions_size() const {
  return _internal_conditions().size();
}
inline int AccessLifecyclePolicy::conditions_size() const {
  return _internal_conditions_size();
}
inline void AccessLifecyclePolicy::clear_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLifecyclePolicy::_internal_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLifecyclePolicy::conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.AccessLifecyclePolicy.conditions)
  return _internal_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLifecyclePolicy::_internal_mutable_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLifecyclePolicy::mutable_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.AccessLifecyclePolicy.conditions)
  return _internal_mutable_conditions();
}

// string review_interval = 7;
inline void AccessLifecyclePolicy::clear_review_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.review_interval_.ClearToEmpty();
}
inline const std::string& AccessLifecyclePolicy::review_interval() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.access_policies.AccessLifecyclePolicy.review_interval)
  return _internal_review_interval();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLifecyclePolicy::set_review_interval(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.review_interval_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.access_policies.AccessLifecyclePolicy.review_interval)
}
inline std::string* AccessLifecyclePolicy::mutable_review_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_review_interval();
  // @@protoc_insertion_point(field_mutable:seigr.access_policies.AccessLifecyclePolicy.review_interval)
  return _s;
}
inline const std::string& AccessLifecyclePolicy::_internal_review_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.review_interval_.Get();
}
inline void AccessLifecyclePolicy::_internal_set_review_interval(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.review_interval_.Set(value, GetArena());
}
inline std::string* AccessLifecyclePolicy::_internal_mutable_review_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.review_interval_.Mutable( GetArena());
}
inline std::string* AccessLifecyclePolicy::release_review_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.access_policies.AccessLifecyclePolicy.review_interval)
  return _impl_.review_interval_.Release();
}
inline void AccessLifecyclePolicy::set_allocated_review_interval(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.review_interval_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.review_interval_.IsDefault()) {
    _impl_.review_interval_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.access_policies.AccessLifecyclePolicy.review_interval)
}

// map<string, string> metadata = 8;
inline int AccessLifecyclePolicy::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AccessLifecyclePolicy::metadata_size() const {
  return _internal_metadata_size();
}
inline void AccessLifecyclePolicy::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLifecyclePolicy::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLifecyclePolicy::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.access_policies.AccessLifecyclePolicy.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLifecyclePolicy::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLifecyclePolicy::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.access_policies.AccessLifecyclePolicy.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace access_policies
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::access_policies::ActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::access_policies::ActionType>() {
  return ::seigr::access_policies::ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // access_5fpolicies_2eproto_2epb_2eh
