// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: streaming.proto
// Protobuf C++ Version: 5.29.2

#include "streaming.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seigr {
namespace streaming {
              template <typename>
PROTOBUF_CONSTEXPR StreamStatus_StatusMetadataEntry_DoNotUse::StreamStatus_StatusMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamStatus_StatusMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamStatus_StatusMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamStatus_StatusMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal _StreamStatus_StatusMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR StreamRecording_RecordingMetadataEntry_DoNotUse::StreamRecording_RecordingMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamRecording_RecordingMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamRecording_RecordingMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamRecording_RecordingMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal _StreamRecording_RecordingMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamMetricsSummary_MetricsMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal _StreamMetricsSummary_MetricsMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR StreamEventLog_EventMetadataEntry_DoNotUse::StreamEventLog_EventMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamEventLog_EventMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamEventLog_EventMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamEventLog_EventMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal _StreamEventLog_EventMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR StreamControl_ControlMetadataEntry_DoNotUse::StreamControl_ControlMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamControl_ControlMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamControl_ControlMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamControl_ControlMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal _StreamControl_ControlMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR StreamConfig_StreamMetadataEntry_DoNotUse::StreamConfig_StreamMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : StreamConfig_StreamMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : StreamConfig_StreamMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamConfig_StreamMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal _StreamConfig_StreamMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR MultiStreamConfig_BundleMetadataEntry_DoNotUse::MultiStreamConfig_BundleMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : MultiStreamConfig_BundleMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : MultiStreamConfig_BundleMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MultiStreamConfig_BundleMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal _MultiStreamConfig_BundleMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DataPacket_MetadataEntry_DoNotUse::DataPacket_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : DataPacket_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : DataPacket_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataPacket_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal _DataPacket_MetadataEntry_DoNotUse_default_instance_;

inline constexpr StreamStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_metadata_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_activity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        packets_sent_{::int64_t{0}},
        packets_received_{::int64_t{0}},
        packets_dropped_{::int64_t{0}},
        status_{static_cast< ::seigr::common::OperationalStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamStatus::StreamStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStatusDefaultTypeInternal() {}
  union {
    StreamStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStatusDefaultTypeInternal _StreamStatus_default_instance_;

inline constexpr StreamRecording::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : recording_metadata_{},
        recording_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        end_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_playback_enabled_{false},
        playback_speed_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRecording::StreamRecording(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamRecordingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRecordingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRecordingDefaultTypeInternal() {}
  union {
    StreamRecording _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRecordingDefaultTypeInternal _StreamRecording_default_instance_;

inline constexpr StreamMetricsSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metrics_metadata_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reporting_period_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_packets_sent_{::int64_t{0}},
        total_packets_received_{::int64_t{0}},
        total_packets_dropped_{::int64_t{0}},
        average_latency_ms_{0},
        packet_loss_rate_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamMetricsSummary::StreamMetricsSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamMetricsSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMetricsSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMetricsSummaryDefaultTypeInternal() {}
  union {
    StreamMetricsSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMetricsSummaryDefaultTypeInternal _StreamMetricsSummary_default_instance_;

inline constexpr StreamEventLog::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : event_metadata_{},
        event_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamEventLog::StreamEventLog(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamEventLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamEventLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamEventLogDefaultTypeInternal() {}
  union {
    StreamEventLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamEventLogDefaultTypeInternal _StreamEventLog_default_instance_;

inline constexpr StreamControl::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : control_metadata_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pause_{false},
        resume_{false},
        terminate_{false},
        update_buffer_size_{0},
        update_qos_level_{static_cast< ::seigr::streaming::StreamingQoSLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamControl::StreamControl(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamControlDefaultTypeInternal() {}
  union {
    StreamControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamControlDefaultTypeInternal _StreamControl_default_instance_;

inline constexpr StreamConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_metadata_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_source_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_type_{static_cast< ::seigr::streaming::StreamType >(0)},
        protocol_{static_cast< ::seigr::streaming::StreamingProtocol >(0)},
        qos_level_{static_cast< ::seigr::streaming::StreamingQoSLevel >(0)},
        priority_{static_cast< ::seigr::common::PriorityLevel >(0)},
        buffer_size_{0},
        enable_encryption_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamConfig::StreamConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamConfigDefaultTypeInternal() {}
  union {
    StreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamConfigDefaultTypeInternal _StreamConfig_default_instance_;

inline constexpr DataPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metadata_{},
        packet_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DataPacket::DataPacket(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketDefaultTypeInternal _DataPacket_default_instance_;

inline constexpr MultiStreamConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : streams_{},
        bundle_metadata_{},
        bundle_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shared_data_source_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shared_qos_level_{static_cast< ::seigr::streaming::StreamingQoSLevel >(0)},
        shared_protocol_{static_cast< ::seigr::streaming::StreamingProtocol >(0)},
        shared_priority_{static_cast< ::seigr::common::PriorityLevel >(0)},
        enable_batch_encryption_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultiStreamConfig::MultiStreamConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MultiStreamConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiStreamConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiStreamConfigDefaultTypeInternal() {}
  union {
    MultiStreamConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiStreamConfigDefaultTypeInternal _MultiStreamConfig_default_instance_;
}  // namespace streaming
}  // namespace seigr
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_streaming_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_streaming_2eproto = nullptr;
const ::uint32_t
    TableStruct_streaming_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.stream_type_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.qos_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.priority_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.buffer_size_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.data_source_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.enable_encryption_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.stream_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamConfig, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.bundle_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.streams_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.shared_qos_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.shared_protocol_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.shared_data_source_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.shared_priority_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.bundle_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::MultiStreamConfig, _impl_.enable_batch_encryption_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _impl_.packet_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _impl_.payload_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::DataPacket, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.packets_sent_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.packets_received_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.packets_dropped_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.last_activity_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamStatus, _impl_.status_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.recording_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.start_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.end_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.is_playback_enabled_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.playback_speed_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamRecording, _impl_.recording_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.pause_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.resume_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.terminate_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.update_buffer_size_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.update_qos_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamControl, _impl_.control_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _impl_.event_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamEventLog, _impl_.event_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.total_packets_sent_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.total_packets_received_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.total_packets_dropped_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.average_latency_ms_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.packet_loss_rate_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.reporting_period_),
        PROTOBUF_FIELD_OFFSET(::seigr::streaming::StreamMetricsSummary, _impl_.metrics_metadata_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse)},
        {12, -1, -1, sizeof(::seigr::streaming::StreamConfig)},
        {30, 40, -1, sizeof(::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse)},
        {42, -1, -1, sizeof(::seigr::streaming::MultiStreamConfig)},
        {58, 68, -1, sizeof(::seigr::streaming::DataPacket_MetadataEntry_DoNotUse)},
        {70, -1, -1, sizeof(::seigr::streaming::DataPacket)},
        {83, 93, -1, sizeof(::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse)},
        {95, -1, -1, sizeof(::seigr::streaming::StreamStatus)},
        {110, 120, -1, sizeof(::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse)},
        {122, -1, -1, sizeof(::seigr::streaming::StreamRecording)},
        {137, 147, -1, sizeof(::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse)},
        {149, -1, -1, sizeof(::seigr::streaming::StreamControl)},
        {164, 174, -1, sizeof(::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse)},
        {176, -1, -1, sizeof(::seigr::streaming::StreamEventLog)},
        {189, 199, -1, sizeof(::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse)},
        {201, -1, -1, sizeof(::seigr::streaming::StreamMetricsSummary)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::seigr::streaming::_StreamConfig_StreamMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamConfig_default_instance_._instance,
    &::seigr::streaming::_MultiStreamConfig_BundleMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_MultiStreamConfig_default_instance_._instance,
    &::seigr::streaming::_DataPacket_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_DataPacket_default_instance_._instance,
    &::seigr::streaming::_StreamStatus_StatusMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamStatus_default_instance_._instance,
    &::seigr::streaming::_StreamRecording_RecordingMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamRecording_default_instance_._instance,
    &::seigr::streaming::_StreamControl_ControlMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamControl_default_instance_._instance,
    &::seigr::streaming::_StreamEventLog_EventMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamEventLog_default_instance_._instance,
    &::seigr::streaming::_StreamMetricsSummary_MetricsMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::streaming::_StreamMetricsSummary_default_instance_._instance,
};
const char descriptor_table_protodef_streaming_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017streaming.proto\022\017seigr.streaming\032\014comm"
    "on.proto\"\316\003\n\014StreamConfig\022\021\n\tstream_id\030\001"
    " \001(\t\0220\n\013stream_type\030\002 \001(\0162\033.seigr.stream"
    "ing.StreamType\0224\n\010protocol\030\003 \001(\0162\".seigr"
    ".streaming.StreamingProtocol\0225\n\tqos_leve"
    "l\030\004 \001(\0162\".seigr.streaming.StreamingQoSLe"
    "vel\022-\n\010priority\030\005 \001(\0162\033.seigr.common.Pri"
    "orityLevel\022\023\n\013buffer_size\030\006 \001(\005\022\026\n\016data_"
    "source_id\030\007 \001(\t\022\031\n\021enable_encryption\030\010 \001"
    "(\010\022J\n\017stream_metadata\030\t \003(\01321.seigr.stre"
    "aming.StreamConfig.StreamMetadataEntry\022\022"
    "\n\ncreated_at\030\n \001(\t\0325\n\023StreamMetadataEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\317\003\n\021Mu"
    "ltiStreamConfig\022\021\n\tbundle_id\030\001 \001(\t\022.\n\007st"
    "reams\030\002 \003(\0132\035.seigr.streaming.StreamConf"
    "ig\022<\n\020shared_qos_level\030\003 \001(\0162\".seigr.str"
    "eaming.StreamingQoSLevel\022;\n\017shared_proto"
    "col\030\004 \001(\0162\".seigr.streaming.StreamingPro"
    "tocol\022\035\n\025shared_data_source_id\030\005 \001(\t\0224\n\017"
    "shared_priority\030\006 \001(\0162\033.seigr.common.Pri"
    "orityLevel\022O\n\017bundle_metadata\030\007 \003(\01326.se"
    "igr.streaming.MultiStreamConfig.BundleMe"
    "tadataEntry\022\037\n\027enable_batch_encryption\030\010"
    " \001(\010\0325\n\023BundleMetadataEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\t:\0028\001\"\304\001\n\nDataPacket\022\021\n\tpa"
    "cket_id\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022\017\n\007payl"
    "oad\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\t\022;\n\010metadata"
    "\030\005 \003(\0132).seigr.streaming.DataPacket.Meta"
    "dataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022"
    "\r\n\005value\030\002 \001(\t:\0028\001\"\265\002\n\014StreamStatus\022\021\n\ts"
    "tream_id\030\001 \001(\t\022/\n\006status\030\002 \001(\0162\037.seigr.c"
    "ommon.OperationalStatus\022\024\n\014packets_sent\030"
    "\003 \001(\003\022\030\n\020packets_received\030\004 \001(\003\022\027\n\017packe"
    "ts_dropped\030\005 \001(\003\022\025\n\rlast_activity\030\006 \001(\t\022"
    "J\n\017status_metadata\030\007 \003(\01321.seigr.streami"
    "ng.StreamStatus.StatusMetadataEntry\0325\n\023S"
    "tatusMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\t:\0028\001\"\256\002\n\017StreamRecording\022\024\n\014record"
    "ing_id\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022\027\n\017start"
    "_timestamp\030\003 \001(\t\022\025\n\rend_timestamp\030\004 \001(\t\022"
    "\033\n\023is_playback_enabled\030\005 \001(\010\022\026\n\016playback"
    "_speed\030\006 \001(\005\022S\n\022recording_metadata\030\007 \003(\013"
    "27.seigr.streaming.StreamRecording.Recor"
    "dingMetadataEntry\0328\n\026RecordingMetadataEn"
    "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\265\002\n\r"
    "StreamControl\022\021\n\tstream_id\030\001 \001(\t\022\r\n\005paus"
    "e\030\002 \001(\010\022\016\n\006resume\030\003 \001(\010\022\021\n\tterminate\030\004 \001"
    "(\010\022\032\n\022update_buffer_size\030\005 \001(\005\022<\n\020update"
    "_qos_level\030\006 \001(\0162\".seigr.streaming.Strea"
    "mingQoSLevel\022M\n\020control_metadata\030\007 \003(\01323"
    ".seigr.streaming.StreamControl.ControlMe"
    "tadataEntry\0326\n\024ControlMetadataEntry\022\013\n\003k"
    "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\332\001\n\016StreamEv"
    "entLog\022\020\n\010event_id\030\001 \001(\t\022\021\n\tstream_id\030\002 "
    "\001(\t\022\016\n\006action\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\t\022J"
    "\n\016event_metadata\030\005 \003(\01322.seigr.streaming"
    ".StreamEventLog.EventMetadataEntry\0324\n\022Ev"
    "entMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\t:\0028\001\"\342\002\n\024StreamMetricsSummary\022\021\n\tstr"
    "eam_id\030\001 \001(\t\022\032\n\022total_packets_sent\030\002 \001(\003"
    "\022\036\n\026total_packets_received\030\003 \001(\003\022\035\n\025tota"
    "l_packets_dropped\030\004 \001(\003\022\032\n\022average_laten"
    "cy_ms\030\005 \001(\001\022\030\n\020packet_loss_rate\030\006 \001(\001\022\030\n"
    "\020reporting_period\030\007 \001(\t\022T\n\020metrics_metad"
    "ata\030\010 \003(\0132:.seigr.streaming.StreamMetric"
    "sSummary.MetricsMetadataEntry\0326\n\024Metrics"
    "MetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t:\0028\001*\306\001\n\nStreamType\022\031\n\025STREAM_TYPE_UNDE"
    "FINED\020\000\022\033\n\027STREAM_TYPE_SENSOR_DATA\020\001\022\"\n\036"
    "STREAM_TYPE_REALTIME_ANALYTICS\020\002\022\032\n\026STRE"
    "AM_TYPE_EVENT_FEED\020\003\022\035\n\031STREAM_TYPE_USER"
    "_ACTIVITY\020\004\022!\n\035STREAM_TYPE_SYSTEM_MONITO"
    "RING\020\005*\240\001\n\021StreamingProtocol\022\035\n\031STREAM_P"
    "ROTOCOL_UNDEFINED\020\000\022\035\n\031STREAM_PROTOCOL_W"
    "EBSOCKET\020\001\022\030\n\024STREAM_PROTOCOL_GRPC\020\002\022\030\n\024"
    "STREAM_PROTOCOL_MQTT\020\003\022\031\n\025STREAM_PROTOCO"
    "L_HTTP2\020\004*\244\001\n\021StreamingQoSLevel\022\036\n\032STREA"
    "M_QOS_LEVEL_UNDEFINED\020\000\022\030\n\024STREAM_QOS_LE"
    "VEL_LOW\020\001\022\033\n\027STREAM_QOS_LEVEL_MEDIUM\020\002\022\031"
    "\n\025STREAM_QOS_LEVEL_HIGH\020\003\022\035\n\031STREAM_QOS_"
    "LEVEL_CRITICAL\020\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_streaming_2eproto_deps[1] =
    {
        &::descriptor_table_common_2eproto,
};
static ::absl::once_flag descriptor_table_streaming_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_streaming_2eproto = {
    false,
    false,
    3224,
    descriptor_table_protodef_streaming_2eproto,
    "streaming.proto",
    &descriptor_table_streaming_2eproto_once,
    descriptor_table_streaming_2eproto_deps,
    1,
    16,
    schemas,
    file_default_instances,
    TableStruct_streaming_2eproto::offsets,
    file_level_enum_descriptors_streaming_2eproto,
    file_level_service_descriptors_streaming_2eproto,
};
namespace seigr {
namespace streaming {
const ::google::protobuf::EnumDescriptor* StreamType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streaming_2eproto);
  return file_level_enum_descriptors_streaming_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t StreamType_internal_data_[] = {
    393216u, 0u, };
bool StreamType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* StreamingProtocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streaming_2eproto);
  return file_level_enum_descriptors_streaming_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t StreamingProtocol_internal_data_[] = {
    327680u, 0u, };
bool StreamingProtocol_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* StreamingQoSLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_streaming_2eproto);
  return file_level_enum_descriptors_streaming_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t StreamingQoSLevel_internal_data_[] = {
    327680u, 0u, };
bool StreamingQoSLevel_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamConfig_StreamMetadataEntry_DoNotUse::StreamConfig_StreamMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamConfig_StreamMetadataEntry_DoNotUse::StreamConfig_StreamMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamConfig_StreamMetadataEntry_DoNotUse::StreamConfig_StreamMetadataEntry_DoNotUse() : SuperType() {}
              StreamConfig_StreamMetadataEntry_DoNotUse::StreamConfig_StreamMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamConfig_StreamMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamConfig_StreamMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamConfig_StreamMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamConfig_StreamMetadataEntry_DoNotUse),
                                                          alignof(StreamConfig_StreamMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamConfig_StreamMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamConfig_StreamMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamConfig_StreamMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamConfig_StreamMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamConfig_StreamMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamConfig_StreamMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamConfig_StreamMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamConfig_StreamMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 65, 2> StreamConfig_StreamMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamConfig_StreamMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamConfig_StreamMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\60\3\5\0\0\0\0\0"
    "seigr.streaming.StreamConfig.StreamMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamConfig::_Internal {
 public:
};

StreamConfig::StreamConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE StreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamConfig& from_msg)
      : stream_metadata_{visibility, arena, from.stream_metadata_},
        stream_id_(arena, from.stream_id_),
        data_source_id_(arena, from.data_source_id_),
        created_at_(arena, from.created_at_),
        _cached_size_{0} {}

StreamConfig::StreamConfig(
    ::google::protobuf::Arena* arena,
    const StreamConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stream_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, stream_type_),
           offsetof(Impl_, enable_encryption_) -
               offsetof(Impl_, stream_type_) +
               sizeof(Impl_::enable_encryption_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE StreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stream_metadata_{visibility, arena},
        stream_id_(arena),
        data_source_id_(arena),
        created_at_(arena),
        _cached_size_{0} {}

inline void StreamConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stream_type_),
           0,
           offsetof(Impl_, enable_encryption_) -
               offsetof(Impl_, stream_type_) +
               sizeof(Impl_::enable_encryption_));
}
StreamConfig::~StreamConfig() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamConfig)
  SharedDtor(*this);
}
inline void StreamConfig::SharedDtor(MessageLite& self) {
  StreamConfig& this_ = static_cast<StreamConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.data_source_id_.Destroy();
  this_._impl_.created_at_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamConfig(arena);
}
constexpr auto StreamConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_metadata_) +
          decltype(StreamConfig::_impl_.stream_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_metadata_) +
          decltype(StreamConfig::_impl_.stream_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamConfig), alignof(StreamConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamConfig::PlacementNew_,
                                 sizeof(StreamConfig),
                                 alignof(StreamConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamConfig>(), &StreamConfig::ByteSizeLong,
            &StreamConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_._cached_size_),
        false,
    },
    &StreamConfig::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 93, 2> StreamConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_id_)}},
    // .seigr.streaming.StreamType stream_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.stream_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_type_)}},
    // .seigr.streaming.StreamingProtocol protocol = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.protocol_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_)}},
    // .seigr.streaming.StreamingQoSLevel qos_level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.qos_level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.qos_level_)}},
    // .seigr.common.PriorityLevel priority = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.priority_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.priority_)}},
    // int32 buffer_size = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamConfig, _impl_.buffer_size_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.buffer_size_)}},
    // string data_source_id = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.data_source_id_)}},
    // bool enable_encryption = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamConfig, _impl_.enable_encryption_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.enable_encryption_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string created_at = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.streaming.StreamType stream_type = 2;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .seigr.streaming.StreamingProtocol protocol = 3;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .seigr.streaming.StreamingQoSLevel qos_level = 4;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.qos_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .seigr.common.PriorityLevel priority = 5;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.priority_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 buffer_size = 6;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.buffer_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string data_source_id = 7;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.data_source_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool enable_encryption = 8;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.enable_encryption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> stream_metadata = 9;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string created_at = 10;
    {PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamConfig()._impl_.stream_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\34\11\0\0\0\0\0\16\0\17\12\0\0\0\0\0"
    "seigr.streaming.StreamConfig"
    "stream_id"
    "data_source_id"
    "stream_metadata"
    "created_at"
  }},
};

PROTOBUF_NOINLINE void StreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_metadata_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.data_source_id_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  ::memset(&_impl_.stream_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_encryption_) -
      reinterpret_cast<char*>(&_impl_.stream_type_)) + sizeof(_impl_.enable_encryption_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamConfig& this_ = static_cast<const StreamConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string stream_id = 1;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.stream_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .seigr.streaming.StreamType stream_type = 2;
          if (this_._internal_stream_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_stream_type(), target);
          }

          // .seigr.streaming.StreamingProtocol protocol = 3;
          if (this_._internal_protocol() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_protocol(), target);
          }

          // .seigr.streaming.StreamingQoSLevel qos_level = 4;
          if (this_._internal_qos_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_qos_level(), target);
          }

          // .seigr.common.PriorityLevel priority = 5;
          if (this_._internal_priority() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_priority(), target);
          }

          // int32 buffer_size = 6;
          if (this_._internal_buffer_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_buffer_size(), target);
          }

          // string data_source_id = 7;
          if (!this_._internal_data_source_id().empty()) {
            const std::string& _s = this_._internal_data_source_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.data_source_id");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // bool enable_encryption = 8;
          if (this_._internal_enable_encryption() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_enable_encryption(), target);
          }

          // map<string, string> stream_metadata = 9;
          if (!this_._internal_stream_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_stream_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.stream_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.stream_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.stream_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.stream_metadata");
              }
            }
          }

          // string created_at = 10;
          if (!this_._internal_created_at().empty()) {
            const std::string& _s = this_._internal_created_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamConfig.created_at");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamConfig::ByteSizeLong(const MessageLite& base) {
          const StreamConfig& this_ = static_cast<const StreamConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamConfig::ByteSizeLong() const {
          const StreamConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> stream_metadata = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_stream_metadata_size());
              for (const auto& entry : this_._internal_stream_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string stream_id = 1;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // string data_source_id = 7;
            if (!this_._internal_data_source_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_data_source_id());
            }
            // string created_at = 10;
            if (!this_._internal_created_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_created_at());
            }
            // .seigr.streaming.StreamType stream_type = 2;
            if (this_._internal_stream_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_stream_type());
            }
            // .seigr.streaming.StreamingProtocol protocol = 3;
            if (this_._internal_protocol() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_protocol());
            }
            // .seigr.streaming.StreamingQoSLevel qos_level = 4;
            if (this_._internal_qos_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_qos_level());
            }
            // .seigr.common.PriorityLevel priority = 5;
            if (this_._internal_priority() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_priority());
            }
            // int32 buffer_size = 6;
            if (this_._internal_buffer_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_buffer_size());
            }
            // bool enable_encryption = 8;
            if (this_._internal_enable_encryption() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamConfig*>(&to_msg);
  auto& from = static_cast<const StreamConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stream_metadata_.MergeFrom(from._impl_.stream_metadata_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_data_source_id().empty()) {
    _this->_internal_set_data_source_id(from._internal_data_source_id());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_stream_type() != 0) {
    _this->_impl_.stream_type_ = from._impl_.stream_type_;
  }
  if (from._internal_protocol() != 0) {
    _this->_impl_.protocol_ = from._impl_.protocol_;
  }
  if (from._internal_qos_level() != 0) {
    _this->_impl_.qos_level_ = from._impl_.qos_level_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_buffer_size() != 0) {
    _this->_impl_.buffer_size_ = from._impl_.buffer_size_;
  }
  if (from._internal_enable_encryption() != 0) {
    _this->_impl_.enable_encryption_ = from._impl_.enable_encryption_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamConfig::CopyFrom(const StreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamConfig::InternalSwap(StreamConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_metadata_.InternalSwap(&other->_impl_.stream_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_source_id_, &other->_impl_.data_source_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, &other->_impl_.created_at_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.enable_encryption_)
      + sizeof(StreamConfig::_impl_.enable_encryption_)
      - PROTOBUF_FIELD_OFFSET(StreamConfig, _impl_.stream_type_)>(
          reinterpret_cast<char*>(&_impl_.stream_type_),
          reinterpret_cast<char*>(&other->_impl_.stream_type_));
}

::google::protobuf::Metadata StreamConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              MultiStreamConfig_BundleMetadataEntry_DoNotUse::MultiStreamConfig_BundleMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              MultiStreamConfig_BundleMetadataEntry_DoNotUse::MultiStreamConfig_BundleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              MultiStreamConfig_BundleMetadataEntry_DoNotUse::MultiStreamConfig_BundleMetadataEntry_DoNotUse() : SuperType() {}
              MultiStreamConfig_BundleMetadataEntry_DoNotUse::MultiStreamConfig_BundleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* MultiStreamConfig_BundleMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) MultiStreamConfig_BundleMetadataEntry_DoNotUse(arena);
              }
              constexpr auto MultiStreamConfig_BundleMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MultiStreamConfig_BundleMetadataEntry_DoNotUse),
                                                          alignof(MultiStreamConfig_BundleMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull MultiStreamConfig_BundleMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_MultiStreamConfig_BundleMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &MultiStreamConfig_BundleMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<MultiStreamConfig_BundleMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &MultiStreamConfig_BundleMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &MultiStreamConfig_BundleMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &MultiStreamConfig_BundleMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* MultiStreamConfig_BundleMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 70, 2> MultiStreamConfig_BundleMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::MultiStreamConfig_BundleMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig_BundleMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\3\5\0\0\0\0\0"
    "seigr.streaming.MultiStreamConfig.BundleMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class MultiStreamConfig::_Internal {
 public:
};

MultiStreamConfig::MultiStreamConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.MultiStreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiStreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::MultiStreamConfig& from_msg)
      : streams_{visibility, arena, from.streams_},
        bundle_metadata_{visibility, arena, from.bundle_metadata_},
        bundle_id_(arena, from.bundle_id_),
        shared_data_source_id_(arena, from.shared_data_source_id_),
        _cached_size_{0} {}

MultiStreamConfig::MultiStreamConfig(
    ::google::protobuf::Arena* arena,
    const MultiStreamConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MultiStreamConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shared_qos_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, shared_qos_level_),
           offsetof(Impl_, enable_batch_encryption_) -
               offsetof(Impl_, shared_qos_level_) +
               sizeof(Impl_::enable_batch_encryption_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.MultiStreamConfig)
}
inline PROTOBUF_NDEBUG_INLINE MultiStreamConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : streams_{visibility, arena},
        bundle_metadata_{visibility, arena},
        bundle_id_(arena),
        shared_data_source_id_(arena),
        _cached_size_{0} {}

inline void MultiStreamConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shared_qos_level_),
           0,
           offsetof(Impl_, enable_batch_encryption_) -
               offsetof(Impl_, shared_qos_level_) +
               sizeof(Impl_::enable_batch_encryption_));
}
MultiStreamConfig::~MultiStreamConfig() {
  // @@protoc_insertion_point(destructor:seigr.streaming.MultiStreamConfig)
  SharedDtor(*this);
}
inline void MultiStreamConfig::SharedDtor(MessageLite& self) {
  MultiStreamConfig& this_ = static_cast<MultiStreamConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.bundle_id_.Destroy();
  this_._impl_.shared_data_source_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MultiStreamConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MultiStreamConfig(arena);
}
constexpr auto MultiStreamConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.streams_) +
          decltype(MultiStreamConfig::_impl_.streams_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.bundle_metadata_) +
          decltype(MultiStreamConfig::_impl_.bundle_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.bundle_metadata_) +
          decltype(MultiStreamConfig::_impl_.bundle_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MultiStreamConfig), alignof(MultiStreamConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MultiStreamConfig::PlacementNew_,
                                 sizeof(MultiStreamConfig),
                                 alignof(MultiStreamConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MultiStreamConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MultiStreamConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MultiStreamConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MultiStreamConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MultiStreamConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MultiStreamConfig>(), &MultiStreamConfig::ByteSizeLong,
            &MultiStreamConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_._cached_size_),
        false,
    },
    &MultiStreamConfig::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MultiStreamConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 95, 2> MultiStreamConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::MultiStreamConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool enable_batch_encryption = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MultiStreamConfig, _impl_.enable_batch_encryption_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.enable_batch_encryption_)}},
    // string bundle_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.bundle_id_)}},
    // repeated .seigr.streaming.StreamConfig streams = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.streams_)}},
    // .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultiStreamConfig, _impl_.shared_qos_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_qos_level_)}},
    // .seigr.streaming.StreamingProtocol shared_protocol = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultiStreamConfig, _impl_.shared_protocol_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_protocol_)}},
    // string shared_data_source_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_data_source_id_)}},
    // .seigr.common.PriorityLevel shared_priority = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MultiStreamConfig, _impl_.shared_priority_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_priority_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string bundle_id = 1;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.bundle_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.streaming.StreamConfig streams = 2;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.streams_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_qos_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .seigr.streaming.StreamingProtocol shared_protocol = 4;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string shared_data_source_id = 5;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_data_source_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.common.PriorityLevel shared_priority = 6;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_priority_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> bundle_metadata = 7;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.bundle_metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool enable_batch_encryption = 8;
    {PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.enable_batch_encryption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::streaming::StreamConfig>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(MultiStreamConfig()._impl_.bundle_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\41\11\0\0\0\25\0\17\0\0\0\0\0\0\0\0"
    "seigr.streaming.MultiStreamConfig"
    "bundle_id"
    "shared_data_source_id"
    "bundle_metadata"
  }},
};

PROTOBUF_NOINLINE void MultiStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.MultiStreamConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.streams_.Clear();
  _impl_.bundle_metadata_.Clear();
  _impl_.bundle_id_.ClearToEmpty();
  _impl_.shared_data_source_id_.ClearToEmpty();
  ::memset(&_impl_.shared_qos_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_batch_encryption_) -
      reinterpret_cast<char*>(&_impl_.shared_qos_level_)) + sizeof(_impl_.enable_batch_encryption_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MultiStreamConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MultiStreamConfig& this_ = static_cast<const MultiStreamConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MultiStreamConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MultiStreamConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.MultiStreamConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string bundle_id = 1;
          if (!this_._internal_bundle_id().empty()) {
            const std::string& _s = this_._internal_bundle_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.bundle_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .seigr.streaming.StreamConfig streams = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_streams_size());
               i < n; i++) {
            const auto& repfield = this_._internal_streams().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
          if (this_._internal_shared_qos_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_shared_qos_level(), target);
          }

          // .seigr.streaming.StreamingProtocol shared_protocol = 4;
          if (this_._internal_shared_protocol() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_shared_protocol(), target);
          }

          // string shared_data_source_id = 5;
          if (!this_._internal_shared_data_source_id().empty()) {
            const std::string& _s = this_._internal_shared_data_source_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.shared_data_source_id");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .seigr.common.PriorityLevel shared_priority = 6;
          if (this_._internal_shared_priority() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_shared_priority(), target);
          }

          // map<string, string> bundle_metadata = 7;
          if (!this_._internal_bundle_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_bundle_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.bundle_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.bundle_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.bundle_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.MultiStreamConfig.bundle_metadata");
              }
            }
          }

          // bool enable_batch_encryption = 8;
          if (this_._internal_enable_batch_encryption() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_enable_batch_encryption(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.MultiStreamConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MultiStreamConfig::ByteSizeLong(const MessageLite& base) {
          const MultiStreamConfig& this_ = static_cast<const MultiStreamConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MultiStreamConfig::ByteSizeLong() const {
          const MultiStreamConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.MultiStreamConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.streaming.StreamConfig streams = 2;
            {
              total_size += 1UL * this_._internal_streams_size();
              for (const auto& msg : this_._internal_streams()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> bundle_metadata = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_bundle_metadata_size());
              for (const auto& entry : this_._internal_bundle_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string bundle_id = 1;
            if (!this_._internal_bundle_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bundle_id());
            }
            // string shared_data_source_id = 5;
            if (!this_._internal_shared_data_source_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_shared_data_source_id());
            }
            // .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
            if (this_._internal_shared_qos_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_shared_qos_level());
            }
            // .seigr.streaming.StreamingProtocol shared_protocol = 4;
            if (this_._internal_shared_protocol() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_shared_protocol());
            }
            // .seigr.common.PriorityLevel shared_priority = 6;
            if (this_._internal_shared_priority() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_shared_priority());
            }
            // bool enable_batch_encryption = 8;
            if (this_._internal_enable_batch_encryption() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MultiStreamConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultiStreamConfig*>(&to_msg);
  auto& from = static_cast<const MultiStreamConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.MultiStreamConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_streams()->MergeFrom(
      from._internal_streams());
  _this->_impl_.bundle_metadata_.MergeFrom(from._impl_.bundle_metadata_);
  if (!from._internal_bundle_id().empty()) {
    _this->_internal_set_bundle_id(from._internal_bundle_id());
  }
  if (!from._internal_shared_data_source_id().empty()) {
    _this->_internal_set_shared_data_source_id(from._internal_shared_data_source_id());
  }
  if (from._internal_shared_qos_level() != 0) {
    _this->_impl_.shared_qos_level_ = from._impl_.shared_qos_level_;
  }
  if (from._internal_shared_protocol() != 0) {
    _this->_impl_.shared_protocol_ = from._impl_.shared_protocol_;
  }
  if (from._internal_shared_priority() != 0) {
    _this->_impl_.shared_priority_ = from._impl_.shared_priority_;
  }
  if (from._internal_enable_batch_encryption() != 0) {
    _this->_impl_.enable_batch_encryption_ = from._impl_.enable_batch_encryption_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStreamConfig::CopyFrom(const MultiStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.MultiStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultiStreamConfig::InternalSwap(MultiStreamConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.streams_.InternalSwap(&other->_impl_.streams_);
  _impl_.bundle_metadata_.InternalSwap(&other->_impl_.bundle_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bundle_id_, &other->_impl_.bundle_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shared_data_source_id_, &other->_impl_.shared_data_source_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.enable_batch_encryption_)
      + sizeof(MultiStreamConfig::_impl_.enable_batch_encryption_)
      - PROTOBUF_FIELD_OFFSET(MultiStreamConfig, _impl_.shared_qos_level_)>(
          reinterpret_cast<char*>(&_impl_.shared_qos_level_),
          reinterpret_cast<char*>(&other->_impl_.shared_qos_level_));
}

::google::protobuf::Metadata MultiStreamConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              DataPacket_MetadataEntry_DoNotUse::DataPacket_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              DataPacket_MetadataEntry_DoNotUse::DataPacket_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              DataPacket_MetadataEntry_DoNotUse::DataPacket_MetadataEntry_DoNotUse() : SuperType() {}
              DataPacket_MetadataEntry_DoNotUse::DataPacket_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* DataPacket_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) DataPacket_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto DataPacket_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataPacket_MetadataEntry_DoNotUse),
                                                          alignof(DataPacket_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull DataPacket_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_DataPacket_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &DataPacket_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<DataPacket_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &DataPacket_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &DataPacket_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &DataPacket_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* DataPacket_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> DataPacket_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::DataPacket_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(DataPacket_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\3\5\0\0\0\0\0"
    "seigr.streaming.DataPacket.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class DataPacket::_Internal {
 public:
};

DataPacket::DataPacket(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.DataPacket)
}
inline PROTOBUF_NDEBUG_INLINE DataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::DataPacket& from_msg)
      : metadata_{visibility, arena, from.metadata_},
        packet_id_(arena, from.packet_id_),
        stream_id_(arena, from.stream_id_),
        payload_(arena, from.payload_),
        timestamp_(arena, from.timestamp_),
        _cached_size_{0} {}

DataPacket::DataPacket(
    ::google::protobuf::Arena* arena,
    const DataPacket& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.DataPacket)
}
inline PROTOBUF_NDEBUG_INLINE DataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metadata_{visibility, arena},
        packet_id_(arena),
        stream_id_(arena),
        payload_(arena),
        timestamp_(arena),
        _cached_size_{0} {}

inline void DataPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:seigr.streaming.DataPacket)
  SharedDtor(*this);
}
inline void DataPacket::SharedDtor(MessageLite& self) {
  DataPacket& this_ = static_cast<DataPacket&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.packet_id_.Destroy();
  this_._impl_.stream_id_.Destroy();
  this_._impl_.payload_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DataPacket::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DataPacket(arena);
}
constexpr auto DataPacket::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.metadata_) +
          decltype(DataPacket::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.metadata_) +
          decltype(DataPacket::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataPacket), alignof(DataPacket), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataPacket::PlacementNew_,
                                 sizeof(DataPacket),
                                 alignof(DataPacket));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DataPacket::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DataPacket_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DataPacket::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DataPacket>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DataPacket::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DataPacket>(), &DataPacket::ByteSizeLong,
            &DataPacket::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DataPacket, _impl_._cached_size_),
        false,
    },
    &DataPacket::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DataPacket::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 70, 2> DataPacket::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::DataPacket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string timestamp = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.timestamp_)}},
    // string packet_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.packet_id_)}},
    // string stream_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.stream_id_)}},
    // bytes payload = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.payload_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string packet_id = 1;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.packet_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 2;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes payload = 3;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.payload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 5;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(DataPacket()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\32\11\11\0\11\10\0\0"
    "seigr.streaming.DataPacket"
    "packet_id"
    "stream_id"
    "timestamp"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.DataPacket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.packet_id_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DataPacket::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DataPacket& this_ = static_cast<const DataPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DataPacket::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DataPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.DataPacket)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string packet_id = 1;
          if (!this_._internal_packet_id().empty()) {
            const std::string& _s = this_._internal_packet_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.packet_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string stream_id = 2;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.stream_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bytes payload = 3;
          if (!this_._internal_payload().empty()) {
            const std::string& _s = this_._internal_payload();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // string timestamp = 4;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.timestamp");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // map<string, string> metadata = 5;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.DataPacket.metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.DataPacket)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DataPacket::ByteSizeLong(const MessageLite& base) {
          const DataPacket& this_ = static_cast<const DataPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DataPacket::ByteSizeLong() const {
          const DataPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.DataPacket)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> metadata = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string packet_id = 1;
            if (!this_._internal_packet_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_packet_id());
            }
            // string stream_id = 2;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // bytes payload = 3;
            if (!this_._internal_payload().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_payload());
            }
            // string timestamp = 4;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DataPacket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataPacket*>(&to_msg);
  auto& from = static_cast<const DataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.DataPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_packet_id().empty()) {
    _this->_internal_set_packet_id(from._internal_packet_id());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataPacket::InternalSwap(DataPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_id_, &other->_impl_.packet_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
}

::google::protobuf::Metadata DataPacket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamStatus_StatusMetadataEntry_DoNotUse::StreamStatus_StatusMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamStatus_StatusMetadataEntry_DoNotUse::StreamStatus_StatusMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamStatus_StatusMetadataEntry_DoNotUse::StreamStatus_StatusMetadataEntry_DoNotUse() : SuperType() {}
              StreamStatus_StatusMetadataEntry_DoNotUse::StreamStatus_StatusMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamStatus_StatusMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamStatus_StatusMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamStatus_StatusMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamStatus_StatusMetadataEntry_DoNotUse),
                                                          alignof(StreamStatus_StatusMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamStatus_StatusMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamStatus_StatusMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamStatus_StatusMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamStatus_StatusMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamStatus_StatusMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamStatus_StatusMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamStatus_StatusMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamStatus_StatusMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 65, 2> StreamStatus_StatusMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamStatus_StatusMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamStatus_StatusMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\60\3\5\0\0\0\0\0"
    "seigr.streaming.StreamStatus.StatusMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamStatus::_Internal {
 public:
};

StreamStatus::StreamStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamStatus)
}
inline PROTOBUF_NDEBUG_INLINE StreamStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamStatus& from_msg)
      : status_metadata_{visibility, arena, from.status_metadata_},
        stream_id_(arena, from.stream_id_),
        last_activity_(arena, from.last_activity_),
        _cached_size_{0} {}

StreamStatus::StreamStatus(
    ::google::protobuf::Arena* arena,
    const StreamStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packets_sent_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packets_sent_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, packets_sent_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamStatus)
}
inline PROTOBUF_NDEBUG_INLINE StreamStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : status_metadata_{visibility, arena},
        stream_id_(arena),
        last_activity_(arena),
        _cached_size_{0} {}

inline void StreamStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packets_sent_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, packets_sent_) +
               sizeof(Impl_::status_));
}
StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamStatus)
  SharedDtor(*this);
}
inline void StreamStatus::SharedDtor(MessageLite& self) {
  StreamStatus& this_ = static_cast<StreamStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.last_activity_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamStatus(arena);
}
constexpr auto StreamStatus::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_metadata_) +
          decltype(StreamStatus::_impl_.status_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_metadata_) +
          decltype(StreamStatus::_impl_.status_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamStatus), alignof(StreamStatus), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamStatus::PlacementNew_,
                                 sizeof(StreamStatus),
                                 alignof(StreamStatus));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamStatus>(), &StreamStatus::ByteSizeLong,
            &StreamStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_._cached_size_),
        false,
    },
    &StreamStatus::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 74, 2> StreamStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.stream_id_)}},
    // .seigr.common.OperationalStatus status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamStatus, _impl_.status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_)}},
    // int64 packets_sent = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamStatus, _impl_.packets_sent_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_sent_)}},
    // int64 packets_received = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamStatus, _impl_.packets_received_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_received_)}},
    // int64 packets_dropped = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamStatus, _impl_.packets_dropped_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_dropped_)}},
    // string last_activity = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.last_activity_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.common.OperationalStatus status = 2;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 packets_sent = 3;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_sent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 packets_received = 4;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_received_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 packets_dropped = 5;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_dropped_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string last_activity = 6;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.last_activity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> status_metadata = 7;
    {PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamStatus()._impl_.status_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\34\11\0\0\0\0\15\17"
    "seigr.streaming.StreamStatus"
    "stream_id"
    "last_activity"
    "status_metadata"
  }},
};

PROTOBUF_NOINLINE void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_metadata_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.last_activity_.ClearToEmpty();
  ::memset(&_impl_.packets_sent_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.packets_sent_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamStatus& this_ = static_cast<const StreamStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string stream_id = 1;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.stream_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .seigr.common.OperationalStatus status = 2;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_status(), target);
          }

          // int64 packets_sent = 3;
          if (this_._internal_packets_sent() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_packets_sent(), target);
          }

          // int64 packets_received = 4;
          if (this_._internal_packets_received() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_packets_received(), target);
          }

          // int64 packets_dropped = 5;
          if (this_._internal_packets_dropped() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_packets_dropped(), target);
          }

          // string last_activity = 6;
          if (!this_._internal_last_activity().empty()) {
            const std::string& _s = this_._internal_last_activity();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.last_activity");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // map<string, string> status_metadata = 7;
          if (!this_._internal_status_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_status_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.status_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.status_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.status_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamStatus.status_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamStatus::ByteSizeLong(const MessageLite& base) {
          const StreamStatus& this_ = static_cast<const StreamStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamStatus::ByteSizeLong() const {
          const StreamStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> status_metadata = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_status_metadata_size());
              for (const auto& entry : this_._internal_status_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string stream_id = 1;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // string last_activity = 6;
            if (!this_._internal_last_activity().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_activity());
            }
            // int64 packets_sent = 3;
            if (this_._internal_packets_sent() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_packets_sent());
            }
            // int64 packets_received = 4;
            if (this_._internal_packets_received() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_packets_received());
            }
            // int64 packets_dropped = 5;
            if (this_._internal_packets_dropped() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_packets_dropped());
            }
            // .seigr.common.OperationalStatus status = 2;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamStatus*>(&to_msg);
  auto& from = static_cast<const StreamStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.status_metadata_.MergeFrom(from._impl_.status_metadata_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_last_activity().empty()) {
    _this->_internal_set_last_activity(from._internal_last_activity());
  }
  if (from._internal_packets_sent() != 0) {
    _this->_impl_.packets_sent_ = from._impl_.packets_sent_;
  }
  if (from._internal_packets_received() != 0) {
    _this->_impl_.packets_received_ = from._impl_.packets_received_;
  }
  if (from._internal_packets_dropped() != 0) {
    _this->_impl_.packets_dropped_ = from._impl_.packets_dropped_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamStatus::InternalSwap(StreamStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.status_metadata_.InternalSwap(&other->_impl_.status_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_activity_, &other->_impl_.last_activity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.status_)
      + sizeof(StreamStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StreamStatus, _impl_.packets_sent_)>(
          reinterpret_cast<char*>(&_impl_.packets_sent_),
          reinterpret_cast<char*>(&other->_impl_.packets_sent_));
}

::google::protobuf::Metadata StreamStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamRecording_RecordingMetadataEntry_DoNotUse::StreamRecording_RecordingMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamRecording_RecordingMetadataEntry_DoNotUse::StreamRecording_RecordingMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamRecording_RecordingMetadataEntry_DoNotUse::StreamRecording_RecordingMetadataEntry_DoNotUse() : SuperType() {}
              StreamRecording_RecordingMetadataEntry_DoNotUse::StreamRecording_RecordingMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamRecording_RecordingMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamRecording_RecordingMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamRecording_RecordingMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamRecording_RecordingMetadataEntry_DoNotUse),
                                                          alignof(StreamRecording_RecordingMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamRecording_RecordingMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamRecording_RecordingMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamRecording_RecordingMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamRecording_RecordingMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamRecording_RecordingMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamRecording_RecordingMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamRecording_RecordingMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamRecording_RecordingMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 71, 2> StreamRecording_RecordingMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamRecording_RecordingMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamRecording_RecordingMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\3\5\0\0\0\0\0"
    "seigr.streaming.StreamRecording.RecordingMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamRecording::_Internal {
 public:
};

StreamRecording::StreamRecording(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamRecording)
}
inline PROTOBUF_NDEBUG_INLINE StreamRecording::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamRecording& from_msg)
      : recording_metadata_{visibility, arena, from.recording_metadata_},
        recording_id_(arena, from.recording_id_),
        stream_id_(arena, from.stream_id_),
        start_timestamp_(arena, from.start_timestamp_),
        end_timestamp_(arena, from.end_timestamp_),
        _cached_size_{0} {}

StreamRecording::StreamRecording(
    ::google::protobuf::Arena* arena,
    const StreamRecording& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamRecording* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_playback_enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_playback_enabled_),
           offsetof(Impl_, playback_speed_) -
               offsetof(Impl_, is_playback_enabled_) +
               sizeof(Impl_::playback_speed_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamRecording)
}
inline PROTOBUF_NDEBUG_INLINE StreamRecording::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : recording_metadata_{visibility, arena},
        recording_id_(arena),
        stream_id_(arena),
        start_timestamp_(arena),
        end_timestamp_(arena),
        _cached_size_{0} {}

inline void StreamRecording::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_playback_enabled_),
           0,
           offsetof(Impl_, playback_speed_) -
               offsetof(Impl_, is_playback_enabled_) +
               sizeof(Impl_::playback_speed_));
}
StreamRecording::~StreamRecording() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamRecording)
  SharedDtor(*this);
}
inline void StreamRecording::SharedDtor(MessageLite& self) {
  StreamRecording& this_ = static_cast<StreamRecording&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.recording_id_.Destroy();
  this_._impl_.stream_id_.Destroy();
  this_._impl_.start_timestamp_.Destroy();
  this_._impl_.end_timestamp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamRecording::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamRecording(arena);
}
constexpr auto StreamRecording::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.recording_metadata_) +
          decltype(StreamRecording::_impl_.recording_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.recording_metadata_) +
          decltype(StreamRecording::_impl_.recording_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamRecording), alignof(StreamRecording), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamRecording::PlacementNew_,
                                 sizeof(StreamRecording),
                                 alignof(StreamRecording));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamRecording::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamRecording_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamRecording::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamRecording>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamRecording::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamRecording>(), &StreamRecording::ByteSizeLong,
            &StreamRecording::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_._cached_size_),
        false,
    },
    &StreamRecording::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamRecording::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 107, 2> StreamRecording::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamRecording>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string recording_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.recording_id_)}},
    // string stream_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.stream_id_)}},
    // string start_timestamp = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.start_timestamp_)}},
    // string end_timestamp = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.end_timestamp_)}},
    // bool is_playback_enabled = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamRecording, _impl_.is_playback_enabled_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.is_playback_enabled_)}},
    // int32 playback_speed = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamRecording, _impl_.playback_speed_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.playback_speed_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string recording_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.recording_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 2;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string start_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.start_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string end_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.end_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_playback_enabled = 5;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.is_playback_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 playback_speed = 6;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.playback_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<string, string> recording_metadata = 7;
    {PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.recording_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamRecording()._impl_.recording_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\37\14\11\17\15\0\0\22"
    "seigr.streaming.StreamRecording"
    "recording_id"
    "stream_id"
    "start_timestamp"
    "end_timestamp"
    "recording_metadata"
  }},
};

PROTOBUF_NOINLINE void StreamRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamRecording)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recording_metadata_.Clear();
  _impl_.recording_id_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.start_timestamp_.ClearToEmpty();
  _impl_.end_timestamp_.ClearToEmpty();
  ::memset(&_impl_.is_playback_enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.playback_speed_) -
      reinterpret_cast<char*>(&_impl_.is_playback_enabled_)) + sizeof(_impl_.playback_speed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamRecording::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamRecording& this_ = static_cast<const StreamRecording&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamRecording::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamRecording& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamRecording)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string recording_id = 1;
          if (!this_._internal_recording_id().empty()) {
            const std::string& _s = this_._internal_recording_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.recording_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string stream_id = 2;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.stream_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string start_timestamp = 3;
          if (!this_._internal_start_timestamp().empty()) {
            const std::string& _s = this_._internal_start_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.start_timestamp");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string end_timestamp = 4;
          if (!this_._internal_end_timestamp().empty()) {
            const std::string& _s = this_._internal_end_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.end_timestamp");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool is_playback_enabled = 5;
          if (this_._internal_is_playback_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_playback_enabled(), target);
          }

          // int32 playback_speed = 6;
          if (this_._internal_playback_speed() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_playback_speed(), target);
          }

          // map<string, string> recording_metadata = 7;
          if (!this_._internal_recording_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_recording_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.recording_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.recording_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.recording_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamRecording.recording_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamRecording)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamRecording::ByteSizeLong(const MessageLite& base) {
          const StreamRecording& this_ = static_cast<const StreamRecording&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamRecording::ByteSizeLong() const {
          const StreamRecording& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamRecording)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> recording_metadata = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_recording_metadata_size());
              for (const auto& entry : this_._internal_recording_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string recording_id = 1;
            if (!this_._internal_recording_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_recording_id());
            }
            // string stream_id = 2;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // string start_timestamp = 3;
            if (!this_._internal_start_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_start_timestamp());
            }
            // string end_timestamp = 4;
            if (!this_._internal_end_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_end_timestamp());
            }
            // bool is_playback_enabled = 5;
            if (this_._internal_is_playback_enabled() != 0) {
              total_size += 2;
            }
            // int32 playback_speed = 6;
            if (this_._internal_playback_speed() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_playback_speed());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamRecording::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamRecording*>(&to_msg);
  auto& from = static_cast<const StreamRecording&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamRecording)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.recording_metadata_.MergeFrom(from._impl_.recording_metadata_);
  if (!from._internal_recording_id().empty()) {
    _this->_internal_set_recording_id(from._internal_recording_id());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_start_timestamp().empty()) {
    _this->_internal_set_start_timestamp(from._internal_start_timestamp());
  }
  if (!from._internal_end_timestamp().empty()) {
    _this->_internal_set_end_timestamp(from._internal_end_timestamp());
  }
  if (from._internal_is_playback_enabled() != 0) {
    _this->_impl_.is_playback_enabled_ = from._impl_.is_playback_enabled_;
  }
  if (from._internal_playback_speed() != 0) {
    _this->_impl_.playback_speed_ = from._impl_.playback_speed_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRecording::CopyFrom(const StreamRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamRecording::InternalSwap(StreamRecording* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.recording_metadata_.InternalSwap(&other->_impl_.recording_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recording_id_, &other->_impl_.recording_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.start_timestamp_, &other->_impl_.start_timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.end_timestamp_, &other->_impl_.end_timestamp_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.playback_speed_)
      + sizeof(StreamRecording::_impl_.playback_speed_)
      - PROTOBUF_FIELD_OFFSET(StreamRecording, _impl_.is_playback_enabled_)>(
          reinterpret_cast<char*>(&_impl_.is_playback_enabled_),
          reinterpret_cast<char*>(&other->_impl_.is_playback_enabled_));
}

::google::protobuf::Metadata StreamRecording::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamControl_ControlMetadataEntry_DoNotUse::StreamControl_ControlMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamControl_ControlMetadataEntry_DoNotUse::StreamControl_ControlMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamControl_ControlMetadataEntry_DoNotUse::StreamControl_ControlMetadataEntry_DoNotUse() : SuperType() {}
              StreamControl_ControlMetadataEntry_DoNotUse::StreamControl_ControlMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamControl_ControlMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamControl_ControlMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamControl_ControlMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamControl_ControlMetadataEntry_DoNotUse),
                                                          alignof(StreamControl_ControlMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamControl_ControlMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamControl_ControlMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamControl_ControlMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamControl_ControlMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamControl_ControlMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamControl_ControlMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamControl_ControlMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamControl_ControlMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 67, 2> StreamControl_ControlMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamControl_ControlMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamControl_ControlMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\62\3\5\0\0\0\0\0"
    "seigr.streaming.StreamControl.ControlMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamControl::_Internal {
 public:
};

StreamControl::StreamControl(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamControl)
}
inline PROTOBUF_NDEBUG_INLINE StreamControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamControl& from_msg)
      : control_metadata_{visibility, arena, from.control_metadata_},
        stream_id_(arena, from.stream_id_),
        _cached_size_{0} {}

StreamControl::StreamControl(
    ::google::protobuf::Arena* arena,
    const StreamControl& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamControl* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pause_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pause_),
           offsetof(Impl_, update_qos_level_) -
               offsetof(Impl_, pause_) +
               sizeof(Impl_::update_qos_level_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamControl)
}
inline PROTOBUF_NDEBUG_INLINE StreamControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : control_metadata_{visibility, arena},
        stream_id_(arena),
        _cached_size_{0} {}

inline void StreamControl::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pause_),
           0,
           offsetof(Impl_, update_qos_level_) -
               offsetof(Impl_, pause_) +
               sizeof(Impl_::update_qos_level_));
}
StreamControl::~StreamControl() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamControl)
  SharedDtor(*this);
}
inline void StreamControl::SharedDtor(MessageLite& self) {
  StreamControl& this_ = static_cast<StreamControl&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamControl::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamControl(arena);
}
constexpr auto StreamControl::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.control_metadata_) +
          decltype(StreamControl::_impl_.control_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.control_metadata_) +
          decltype(StreamControl::_impl_.control_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamControl), alignof(StreamControl), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamControl::PlacementNew_,
                                 sizeof(StreamControl),
                                 alignof(StreamControl));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamControl::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamControl_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamControl::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamControl>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamControl::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamControl>(), &StreamControl::ByteSizeLong,
            &StreamControl::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamControl, _impl_._cached_size_),
        false,
    },
    &StreamControl::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamControl::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 63, 2> StreamControl::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamControl>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.stream_id_)}},
    // bool pause = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamControl, _impl_.pause_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.pause_)}},
    // bool resume = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamControl, _impl_.resume_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.resume_)}},
    // bool terminate = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamControl, _impl_.terminate_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.terminate_)}},
    // int32 update_buffer_size = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamControl, _impl_.update_buffer_size_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.update_buffer_size_)}},
    // .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamControl, _impl_.update_qos_level_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.update_qos_level_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool pause = 2;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.pause_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool resume = 3;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.resume_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool terminate = 4;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.terminate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 update_buffer_size = 5;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.update_buffer_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.update_qos_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> control_metadata = 7;
    {PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.control_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamControl()._impl_.control_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\35\11\0\0\0\0\0\20"
    "seigr.streaming.StreamControl"
    "stream_id"
    "control_metadata"
  }},
};

PROTOBUF_NOINLINE void StreamControl::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamControl)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.control_metadata_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  ::memset(&_impl_.pause_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.update_qos_level_) -
      reinterpret_cast<char*>(&_impl_.pause_)) + sizeof(_impl_.update_qos_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamControl::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamControl& this_ = static_cast<const StreamControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamControl::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamControl)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string stream_id = 1;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamControl.stream_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool pause = 2;
          if (this_._internal_pause() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_pause(), target);
          }

          // bool resume = 3;
          if (this_._internal_resume() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_resume(), target);
          }

          // bool terminate = 4;
          if (this_._internal_terminate() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_terminate(), target);
          }

          // int32 update_buffer_size = 5;
          if (this_._internal_update_buffer_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_update_buffer_size(), target);
          }

          // .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
          if (this_._internal_update_qos_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_update_qos_level(), target);
          }

          // map<string, string> control_metadata = 7;
          if (!this_._internal_control_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_control_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamControl.control_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamControl.control_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamControl.control_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamControl.control_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamControl)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamControl::ByteSizeLong(const MessageLite& base) {
          const StreamControl& this_ = static_cast<const StreamControl&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamControl::ByteSizeLong() const {
          const StreamControl& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamControl)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> control_metadata = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_control_metadata_size());
              for (const auto& entry : this_._internal_control_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string stream_id = 1;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // bool pause = 2;
            if (this_._internal_pause() != 0) {
              total_size += 2;
            }
            // bool resume = 3;
            if (this_._internal_resume() != 0) {
              total_size += 2;
            }
            // bool terminate = 4;
            if (this_._internal_terminate() != 0) {
              total_size += 2;
            }
            // int32 update_buffer_size = 5;
            if (this_._internal_update_buffer_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_update_buffer_size());
            }
            // .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
            if (this_._internal_update_qos_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_update_qos_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamControl::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamControl*>(&to_msg);
  auto& from = static_cast<const StreamControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.control_metadata_.MergeFrom(from._impl_.control_metadata_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_pause() != 0) {
    _this->_impl_.pause_ = from._impl_.pause_;
  }
  if (from._internal_resume() != 0) {
    _this->_impl_.resume_ = from._impl_.resume_;
  }
  if (from._internal_terminate() != 0) {
    _this->_impl_.terminate_ = from._impl_.terminate_;
  }
  if (from._internal_update_buffer_size() != 0) {
    _this->_impl_.update_buffer_size_ = from._impl_.update_buffer_size_;
  }
  if (from._internal_update_qos_level() != 0) {
    _this->_impl_.update_qos_level_ = from._impl_.update_qos_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamControl::CopyFrom(const StreamControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamControl::InternalSwap(StreamControl* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.control_metadata_.InternalSwap(&other->_impl_.control_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.update_qos_level_)
      + sizeof(StreamControl::_impl_.update_qos_level_)
      - PROTOBUF_FIELD_OFFSET(StreamControl, _impl_.pause_)>(
          reinterpret_cast<char*>(&_impl_.pause_),
          reinterpret_cast<char*>(&other->_impl_.pause_));
}

::google::protobuf::Metadata StreamControl::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamEventLog_EventMetadataEntry_DoNotUse::StreamEventLog_EventMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamEventLog_EventMetadataEntry_DoNotUse::StreamEventLog_EventMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamEventLog_EventMetadataEntry_DoNotUse::StreamEventLog_EventMetadataEntry_DoNotUse() : SuperType() {}
              StreamEventLog_EventMetadataEntry_DoNotUse::StreamEventLog_EventMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamEventLog_EventMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamEventLog_EventMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamEventLog_EventMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamEventLog_EventMetadataEntry_DoNotUse),
                                                          alignof(StreamEventLog_EventMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamEventLog_EventMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamEventLog_EventMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamEventLog_EventMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamEventLog_EventMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamEventLog_EventMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamEventLog_EventMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamEventLog_EventMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamEventLog_EventMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 66, 2> StreamEventLog_EventMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamEventLog_EventMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog_EventMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\3\5\0\0\0\0\0"
    "seigr.streaming.StreamEventLog.EventMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamEventLog::_Internal {
 public:
};

StreamEventLog::StreamEventLog(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamEventLog)
}
inline PROTOBUF_NDEBUG_INLINE StreamEventLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamEventLog& from_msg)
      : event_metadata_{visibility, arena, from.event_metadata_},
        event_id_(arena, from.event_id_),
        stream_id_(arena, from.stream_id_),
        action_(arena, from.action_),
        timestamp_(arena, from.timestamp_),
        _cached_size_{0} {}

StreamEventLog::StreamEventLog(
    ::google::protobuf::Arena* arena,
    const StreamEventLog& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamEventLog* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamEventLog)
}
inline PROTOBUF_NDEBUG_INLINE StreamEventLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : event_metadata_{visibility, arena},
        event_id_(arena),
        stream_id_(arena),
        action_(arena),
        timestamp_(arena),
        _cached_size_{0} {}

inline void StreamEventLog::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamEventLog::~StreamEventLog() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamEventLog)
  SharedDtor(*this);
}
inline void StreamEventLog::SharedDtor(MessageLite& self) {
  StreamEventLog& this_ = static_cast<StreamEventLog&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.event_id_.Destroy();
  this_._impl_.stream_id_.Destroy();
  this_._impl_.action_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamEventLog::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamEventLog(arena);
}
constexpr auto StreamEventLog::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.event_metadata_) +
          decltype(StreamEventLog::_impl_.event_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.event_metadata_) +
          decltype(StreamEventLog::_impl_.event_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamEventLog), alignof(StreamEventLog), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamEventLog::PlacementNew_,
                                 sizeof(StreamEventLog),
                                 alignof(StreamEventLog));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamEventLog::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamEventLog_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamEventLog::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamEventLog>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamEventLog::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamEventLog>(), &StreamEventLog::ByteSizeLong,
            &StreamEventLog::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_._cached_size_),
        false,
    },
    &StreamEventLog::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamEventLog::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 85, 2> StreamEventLog::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamEventLog>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string timestamp = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.timestamp_)}},
    // string event_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.event_id_)}},
    // string stream_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.stream_id_)}},
    // string action = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string event_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.event_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_id = 2;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action = 3;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> event_metadata = 5;
    {PROTOBUF_FIELD_OFFSET(StreamEventLog, _impl_.event_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamEventLog()._impl_.event_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\36\10\11\6\11\16\0\0"
    "seigr.streaming.StreamEventLog"
    "event_id"
    "stream_id"
    "action"
    "timestamp"
    "event_metadata"
  }},
};

PROTOBUF_NOINLINE void StreamEventLog::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamEventLog)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_metadata_.Clear();
  _impl_.event_id_.ClearToEmpty();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamEventLog::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamEventLog& this_ = static_cast<const StreamEventLog&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamEventLog::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamEventLog& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamEventLog)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string event_id = 1;
          if (!this_._internal_event_id().empty()) {
            const std::string& _s = this_._internal_event_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.event_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string stream_id = 2;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.stream_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string action = 3;
          if (!this_._internal_action().empty()) {
            const std::string& _s = this_._internal_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.action");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string timestamp = 4;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.timestamp");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // map<string, string> event_metadata = 5;
          if (!this_._internal_event_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_event_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.event_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.event_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.event_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamEventLog.event_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamEventLog)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamEventLog::ByteSizeLong(const MessageLite& base) {
          const StreamEventLog& this_ = static_cast<const StreamEventLog&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamEventLog::ByteSizeLong() const {
          const StreamEventLog& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamEventLog)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> event_metadata = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_event_metadata_size());
              for (const auto& entry : this_._internal_event_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string event_id = 1;
            if (!this_._internal_event_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_event_id());
            }
            // string stream_id = 2;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // string action = 3;
            if (!this_._internal_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action());
            }
            // string timestamp = 4;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamEventLog::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamEventLog*>(&to_msg);
  auto& from = static_cast<const StreamEventLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamEventLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_metadata_.MergeFrom(from._impl_.event_metadata_);
  if (!from._internal_event_id().empty()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamEventLog::CopyFrom(const StreamEventLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamEventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamEventLog::InternalSwap(StreamEventLog* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_metadata_.InternalSwap(&other->_impl_.event_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_id_, &other->_impl_.event_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_, &other->_impl_.action_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
}

::google::protobuf::Metadata StreamEventLog::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse() : SuperType() {}
              StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(arena);
              }
              constexpr auto StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse),
                                                          alignof(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_StreamMetricsSummary_MetricsMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<StreamMetricsSummary_MetricsMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_streaming_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 74, 2> StreamMetricsSummary_MetricsMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamMetricsSummary_MetricsMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\3\5\0\0\0\0\0"
    "seigr.streaming.StreamMetricsSummary.MetricsMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class StreamMetricsSummary::_Internal {
 public:
};

StreamMetricsSummary::StreamMetricsSummary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.streaming.StreamMetricsSummary)
}
inline PROTOBUF_NDEBUG_INLINE StreamMetricsSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::streaming::StreamMetricsSummary& from_msg)
      : metrics_metadata_{visibility, arena, from.metrics_metadata_},
        stream_id_(arena, from.stream_id_),
        reporting_period_(arena, from.reporting_period_),
        _cached_size_{0} {}

StreamMetricsSummary::StreamMetricsSummary(
    ::google::protobuf::Arena* arena,
    const StreamMetricsSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamMetricsSummary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_packets_sent_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_packets_sent_),
           offsetof(Impl_, packet_loss_rate_) -
               offsetof(Impl_, total_packets_sent_) +
               sizeof(Impl_::packet_loss_rate_));

  // @@protoc_insertion_point(copy_constructor:seigr.streaming.StreamMetricsSummary)
}
inline PROTOBUF_NDEBUG_INLINE StreamMetricsSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metrics_metadata_{visibility, arena},
        stream_id_(arena),
        reporting_period_(arena),
        _cached_size_{0} {}

inline void StreamMetricsSummary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_packets_sent_),
           0,
           offsetof(Impl_, packet_loss_rate_) -
               offsetof(Impl_, total_packets_sent_) +
               sizeof(Impl_::packet_loss_rate_));
}
StreamMetricsSummary::~StreamMetricsSummary() {
  // @@protoc_insertion_point(destructor:seigr.streaming.StreamMetricsSummary)
  SharedDtor(*this);
}
inline void StreamMetricsSummary::SharedDtor(MessageLite& self) {
  StreamMetricsSummary& this_ = static_cast<StreamMetricsSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.reporting_period_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamMetricsSummary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamMetricsSummary(arena);
}
constexpr auto StreamMetricsSummary::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.metrics_metadata_) +
          decltype(StreamMetricsSummary::_impl_.metrics_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.metrics_metadata_) +
          decltype(StreamMetricsSummary::_impl_.metrics_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamMetricsSummary), alignof(StreamMetricsSummary), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamMetricsSummary::PlacementNew_,
                                 sizeof(StreamMetricsSummary),
                                 alignof(StreamMetricsSummary));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamMetricsSummary::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamMetricsSummary_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamMetricsSummary::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamMetricsSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamMetricsSummary::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamMetricsSummary>(), &StreamMetricsSummary::ByteSizeLong,
            &StreamMetricsSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_._cached_size_),
        false,
    },
    &StreamMetricsSummary::kDescriptorMethods,
    &descriptor_table_streaming_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamMetricsSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 94, 2> StreamMetricsSummary::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::streaming::StreamMetricsSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.stream_id_)}},
    // int64 total_packets_sent = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamMetricsSummary, _impl_.total_packets_sent_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_sent_)}},
    // int64 total_packets_received = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamMetricsSummary, _impl_.total_packets_received_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_received_)}},
    // int64 total_packets_dropped = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamMetricsSummary, _impl_.total_packets_dropped_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_dropped_)}},
    // double average_latency_ms = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.average_latency_ms_)}},
    // double packet_loss_rate = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.packet_loss_rate_)}},
    // string reporting_period = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.reporting_period_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.stream_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 total_packets_sent = 2;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_sent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_packets_received = 3;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_received_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_packets_dropped = 4;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_dropped_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // double average_latency_ms = 5;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.average_latency_ms_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double packet_loss_rate = 6;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.packet_loss_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string reporting_period = 7;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.reporting_period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metrics_metadata = 8;
    {PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.metrics_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StreamMetricsSummary()._impl_.metrics_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\44\11\0\0\0\0\0\20\20\0\0\0\0\0\0\0"
    "seigr.streaming.StreamMetricsSummary"
    "stream_id"
    "reporting_period"
    "metrics_metadata"
  }},
};

PROTOBUF_NOINLINE void StreamMetricsSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.streaming.StreamMetricsSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_metadata_.Clear();
  _impl_.stream_id_.ClearToEmpty();
  _impl_.reporting_period_.ClearToEmpty();
  ::memset(&_impl_.total_packets_sent_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.packet_loss_rate_) -
      reinterpret_cast<char*>(&_impl_.total_packets_sent_)) + sizeof(_impl_.packet_loss_rate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamMetricsSummary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamMetricsSummary& this_ = static_cast<const StreamMetricsSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamMetricsSummary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamMetricsSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.streaming.StreamMetricsSummary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string stream_id = 1;
          if (!this_._internal_stream_id().empty()) {
            const std::string& _s = this_._internal_stream_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.stream_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int64 total_packets_sent = 2;
          if (this_._internal_total_packets_sent() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_total_packets_sent(), target);
          }

          // int64 total_packets_received = 3;
          if (this_._internal_total_packets_received() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_total_packets_received(), target);
          }

          // int64 total_packets_dropped = 4;
          if (this_._internal_total_packets_dropped() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_total_packets_dropped(), target);
          }

          // double average_latency_ms = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_average_latency_ms()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_average_latency_ms(), target);
          }

          // double packet_loss_rate = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_packet_loss_rate(), target);
          }

          // string reporting_period = 7;
          if (!this_._internal_reporting_period().empty()) {
            const std::string& _s = this_._internal_reporting_period();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.reporting_period");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> metrics_metadata = 8;
          if (!this_._internal_metrics_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metrics_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.metrics_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.metrics_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.metrics_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.streaming.StreamMetricsSummary.metrics_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.streaming.StreamMetricsSummary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamMetricsSummary::ByteSizeLong(const MessageLite& base) {
          const StreamMetricsSummary& this_ = static_cast<const StreamMetricsSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamMetricsSummary::ByteSizeLong() const {
          const StreamMetricsSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.streaming.StreamMetricsSummary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> metrics_metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metrics_metadata_size());
              for (const auto& entry : this_._internal_metrics_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string stream_id = 1;
            if (!this_._internal_stream_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stream_id());
            }
            // string reporting_period = 7;
            if (!this_._internal_reporting_period().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reporting_period());
            }
            // int64 total_packets_sent = 2;
            if (this_._internal_total_packets_sent() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_packets_sent());
            }
            // int64 total_packets_received = 3;
            if (this_._internal_total_packets_received() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_packets_received());
            }
            // int64 total_packets_dropped = 4;
            if (this_._internal_total_packets_dropped() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_packets_dropped());
            }
            // double average_latency_ms = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_average_latency_ms()) != 0) {
              total_size += 9;
            }
            // double packet_loss_rate = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss_rate()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamMetricsSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamMetricsSummary*>(&to_msg);
  auto& from = static_cast<const StreamMetricsSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.streaming.StreamMetricsSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_metadata_.MergeFrom(from._impl_.metrics_metadata_);
  if (!from._internal_stream_id().empty()) {
    _this->_internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_reporting_period().empty()) {
    _this->_internal_set_reporting_period(from._internal_reporting_period());
  }
  if (from._internal_total_packets_sent() != 0) {
    _this->_impl_.total_packets_sent_ = from._impl_.total_packets_sent_;
  }
  if (from._internal_total_packets_received() != 0) {
    _this->_impl_.total_packets_received_ = from._impl_.total_packets_received_;
  }
  if (from._internal_total_packets_dropped() != 0) {
    _this->_impl_.total_packets_dropped_ = from._impl_.total_packets_dropped_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_average_latency_ms()) != 0) {
    _this->_impl_.average_latency_ms_ = from._impl_.average_latency_ms_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_packet_loss_rate()) != 0) {
    _this->_impl_.packet_loss_rate_ = from._impl_.packet_loss_rate_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMetricsSummary::CopyFrom(const StreamMetricsSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.streaming.StreamMetricsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamMetricsSummary::InternalSwap(StreamMetricsSummary* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_metadata_.InternalSwap(&other->_impl_.metrics_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporting_period_, &other->_impl_.reporting_period_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.packet_loss_rate_)
      + sizeof(StreamMetricsSummary::_impl_.packet_loss_rate_)
      - PROTOBUF_FIELD_OFFSET(StreamMetricsSummary, _impl_.total_packets_sent_)>(
          reinterpret_cast<char*>(&_impl_.total_packets_sent_),
          reinterpret_cast<char*>(&other->_impl_.total_packets_sent_));
}

::google::protobuf::Metadata StreamMetricsSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace streaming
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_streaming_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
