// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: seigr_cell.proto
// Protobuf C++ Version: 5.29.2

#ifndef seigr_5fcell_2eproto_2epb_2eh
#define seigr_5fcell_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_seigr_5fcell_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_seigr_5fcell_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_seigr_5fcell_2eproto;
namespace seigr {
namespace seigr_cell {
class CoordinateIndex;
struct CoordinateIndexDefaultTypeInternal;
extern CoordinateIndexDefaultTypeInternal _CoordinateIndex_default_instance_;
class CustomProperty;
struct CustomPropertyDefaultTypeInternal;
extern CustomPropertyDefaultTypeInternal _CustomProperty_default_instance_;
class ListSeigrCellsRequest;
struct ListSeigrCellsRequestDefaultTypeInternal;
extern ListSeigrCellsRequestDefaultTypeInternal _ListSeigrCellsRequest_default_instance_;
class ListSeigrCellsResponse;
struct ListSeigrCellsResponseDefaultTypeInternal;
extern ListSeigrCellsResponseDefaultTypeInternal _ListSeigrCellsResponse_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_MetadataExtrasEntry_DoNotUse;
struct Metadata_MetadataExtrasEntry_DoNotUseDefaultTypeInternal;
extern Metadata_MetadataExtrasEntry_DoNotUseDefaultTypeInternal _Metadata_MetadataExtrasEntry_DoNotUse_default_instance_;
class Permissions;
struct PermissionsDefaultTypeInternal;
extern PermissionsDefaultTypeInternal _Permissions_default_instance_;
class RE_License;
struct RE_LicenseDefaultTypeInternal;
extern RE_LicenseDefaultTypeInternal _RE_License_default_instance_;
class RE_License_LicenseMetadataEntry_DoNotUse;
struct RE_License_LicenseMetadataEntry_DoNotUseDefaultTypeInternal;
extern RE_License_LicenseMetadataEntry_DoNotUseDefaultTypeInternal _RE_License_LicenseMetadataEntry_DoNotUse_default_instance_;
class RetrieveSeigrCellRequest;
struct RetrieveSeigrCellRequestDefaultTypeInternal;
extern RetrieveSeigrCellRequestDefaultTypeInternal _RetrieveSeigrCellRequest_default_instance_;
class RetrieveSeigrCellResponse;
struct RetrieveSeigrCellResponseDefaultTypeInternal;
extern RetrieveSeigrCellResponseDefaultTypeInternal _RetrieveSeigrCellResponse_default_instance_;
class SeigrCell;
struct SeigrCellDefaultTypeInternal;
extern SeigrCellDefaultTypeInternal _SeigrCell_default_instance_;
class UpdateSeigrCellRequest;
struct UpdateSeigrCellRequestDefaultTypeInternal;
extern UpdateSeigrCellRequestDefaultTypeInternal _UpdateSeigrCellRequest_default_instance_;
class UpdateSeigrCellRequest_UpdatesEntry_DoNotUse;
struct UpdateSeigrCellRequest_UpdatesEntry_DoNotUseDefaultTypeInternal;
extern UpdateSeigrCellRequest_UpdatesEntry_DoNotUseDefaultTypeInternal _UpdateSeigrCellRequest_UpdatesEntry_DoNotUse_default_instance_;
class UpdateSeigrCellResponse;
struct UpdateSeigrCellResponseDefaultTypeInternal;
extern UpdateSeigrCellResponseDefaultTypeInternal _UpdateSeigrCellResponse_default_instance_;
class ValidateSeigrCellRequest;
struct ValidateSeigrCellRequestDefaultTypeInternal;
extern ValidateSeigrCellRequestDefaultTypeInternal _ValidateSeigrCellRequest_default_instance_;
class ValidateSeigrCellResponse;
struct ValidateSeigrCellResponseDefaultTypeInternal;
extern ValidateSeigrCellResponseDefaultTypeInternal _ValidateSeigrCellResponse_default_instance_;
class ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse;
struct ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUseDefaultTypeInternal;
extern ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUseDefaultTypeInternal _ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse_default_instance_;
}  // namespace seigr_cell
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace seigr_cell {

// ===================================================================


// -------------------------------------------------------------------

class ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse*>(
        &_ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_seigr_5fcell_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      83, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ValidateSeigrCellRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.ValidateSeigrCellRequest) */ {
 public:
  inline ValidateSeigrCellRequest() : ValidateSeigrCellRequest(nullptr) {}
  ~ValidateSeigrCellRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidateSeigrCellRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidateSeigrCellRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateSeigrCellRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidateSeigrCellRequest(const ValidateSeigrCellRequest& from) : ValidateSeigrCellRequest(nullptr, from) {}
  inline ValidateSeigrCellRequest(ValidateSeigrCellRequest&& from) noexcept
      : ValidateSeigrCellRequest(nullptr, std::move(from)) {}
  inline ValidateSeigrCellRequest& operator=(const ValidateSeigrCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSeigrCellRequest& operator=(ValidateSeigrCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateSeigrCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateSeigrCellRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateSeigrCellRequest*>(
        &_ValidateSeigrCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ValidateSeigrCellRequest& a, ValidateSeigrCellRequest& b) { a.Swap(&b); }
  inline void Swap(ValidateSeigrCellRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSeigrCellRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateSeigrCellRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidateSeigrCellRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidateSeigrCellRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidateSeigrCellRequest& from) { ValidateSeigrCellRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidateSeigrCellRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.ValidateSeigrCellRequest"; }

 protected:
  explicit ValidateSeigrCellRequest(::google::protobuf::Arena* arena);
  ValidateSeigrCellRequest(::google::protobuf::Arena* arena, const ValidateSeigrCellRequest& from);
  ValidateSeigrCellRequest(::google::protobuf::Arena* arena, ValidateSeigrCellRequest&& from) noexcept
      : ValidateSeigrCellRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellIdFieldNumber = 1,
  };
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.ValidateSeigrCellRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidateSeigrCellRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class UpdateSeigrCellResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.UpdateSeigrCellResponse) */ {
 public:
  inline UpdateSeigrCellResponse() : UpdateSeigrCellResponse(nullptr) {}
  ~UpdateSeigrCellResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateSeigrCellResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateSeigrCellResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSeigrCellResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateSeigrCellResponse(const UpdateSeigrCellResponse& from) : UpdateSeigrCellResponse(nullptr, from) {}
  inline UpdateSeigrCellResponse(UpdateSeigrCellResponse&& from) noexcept
      : UpdateSeigrCellResponse(nullptr, std::move(from)) {}
  inline UpdateSeigrCellResponse& operator=(const UpdateSeigrCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSeigrCellResponse& operator=(UpdateSeigrCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSeigrCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSeigrCellResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSeigrCellResponse*>(
        &_UpdateSeigrCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(UpdateSeigrCellResponse& a, UpdateSeigrCellResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateSeigrCellResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSeigrCellResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSeigrCellResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateSeigrCellResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSeigrCellResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateSeigrCellResponse& from) { UpdateSeigrCellResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateSeigrCellResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.UpdateSeigrCellResponse"; }

 protected:
  explicit UpdateSeigrCellResponse(::google::protobuf::Arena* arena);
  UpdateSeigrCellResponse(::google::protobuf::Arena* arena, const UpdateSeigrCellResponse& from);
  UpdateSeigrCellResponse(::google::protobuf::Arena* arena, UpdateSeigrCellResponse&& from) noexcept
      : UpdateSeigrCellResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.UpdateSeigrCellResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateSeigrCellResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class UpdateSeigrCellRequest_UpdatesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UpdateSeigrCellRequest_UpdatesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSeigrCellRequest_UpdatesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UpdateSeigrCellRequest_UpdatesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UpdateSeigrCellRequest_UpdatesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UpdateSeigrCellRequest_UpdatesEntry_DoNotUse*>(
        &_UpdateSeigrCellRequest_UpdatesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_seigr_5fcell_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RetrieveSeigrCellRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.RetrieveSeigrCellRequest) */ {
 public:
  inline RetrieveSeigrCellRequest() : RetrieveSeigrCellRequest(nullptr) {}
  ~RetrieveSeigrCellRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RetrieveSeigrCellRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RetrieveSeigrCellRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveSeigrCellRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RetrieveSeigrCellRequest(const RetrieveSeigrCellRequest& from) : RetrieveSeigrCellRequest(nullptr, from) {}
  inline RetrieveSeigrCellRequest(RetrieveSeigrCellRequest&& from) noexcept
      : RetrieveSeigrCellRequest(nullptr, std::move(from)) {}
  inline RetrieveSeigrCellRequest& operator=(const RetrieveSeigrCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveSeigrCellRequest& operator=(RetrieveSeigrCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveSeigrCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveSeigrCellRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveSeigrCellRequest*>(
        &_RetrieveSeigrCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RetrieveSeigrCellRequest& a, RetrieveSeigrCellRequest& b) { a.Swap(&b); }
  inline void Swap(RetrieveSeigrCellRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveSeigrCellRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveSeigrCellRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RetrieveSeigrCellRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveSeigrCellRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RetrieveSeigrCellRequest& from) { RetrieveSeigrCellRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RetrieveSeigrCellRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.RetrieveSeigrCellRequest"; }

 protected:
  explicit RetrieveSeigrCellRequest(::google::protobuf::Arena* arena);
  RetrieveSeigrCellRequest(::google::protobuf::Arena* arena, const RetrieveSeigrCellRequest& from);
  RetrieveSeigrCellRequest(::google::protobuf::Arena* arena, RetrieveSeigrCellRequest&& from) noexcept
      : RetrieveSeigrCellRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellIdFieldNumber = 1,
  };
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.RetrieveSeigrCellRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RetrieveSeigrCellRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class RE_License_LicenseMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RE_License_LicenseMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RE_License_LicenseMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RE_License_LicenseMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RE_License_LicenseMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RE_License_LicenseMetadataEntry_DoNotUse*>(
        &_RE_License_LicenseMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_seigr_5fcell_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Permissions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.Permissions) */ {
 public:
  inline Permissions() : Permissions(nullptr) {}
  ~Permissions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Permissions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Permissions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Permissions(
      ::google::protobuf::internal::ConstantInitialized);

  inline Permissions(const Permissions& from) : Permissions(nullptr, from) {}
  inline Permissions(Permissions&& from) noexcept
      : Permissions(nullptr, std::move(from)) {}
  inline Permissions& operator=(const Permissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permissions& operator=(Permissions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Permissions* internal_default_instance() {
    return reinterpret_cast<const Permissions*>(
        &_Permissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Permissions& a, Permissions& b) { a.Swap(&b); }
  inline void Swap(Permissions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permissions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Permissions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Permissions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Permissions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Permissions& from) { Permissions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Permissions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.Permissions"; }

 protected:
  explicit Permissions(::google::protobuf::Arena* arena);
  Permissions(::google::protobuf::Arena* arena, const Permissions& from);
  Permissions(::google::protobuf::Arena* arena, Permissions&& from) noexcept
      : Permissions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGeographicRestrictionFieldNumber = 4,
    kTemporalRestrictionFieldNumber = 5,
    kComplianceTagFieldNumber = 6,
    kAllowModificationFieldNumber = 1,
    kAllowDerivativesFieldNumber = 2,
    kAllowCommercialUseFieldNumber = 3,
  };
  // string geographic_restriction = 4;
  void clear_geographic_restriction() ;
  const std::string& geographic_restriction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_geographic_restriction(Arg_&& arg, Args_... args);
  std::string* mutable_geographic_restriction();
  PROTOBUF_NODISCARD std::string* release_geographic_restriction();
  void set_allocated_geographic_restriction(std::string* value);

  private:
  const std::string& _internal_geographic_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geographic_restriction(
      const std::string& value);
  std::string* _internal_mutable_geographic_restriction();

  public:
  // string temporal_restriction = 5;
  void clear_temporal_restriction() ;
  const std::string& temporal_restriction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_temporal_restriction(Arg_&& arg, Args_... args);
  std::string* mutable_temporal_restriction();
  PROTOBUF_NODISCARD std::string* release_temporal_restriction();
  void set_allocated_temporal_restriction(std::string* value);

  private:
  const std::string& _internal_temporal_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temporal_restriction(
      const std::string& value);
  std::string* _internal_mutable_temporal_restriction();

  public:
  // string compliance_tag = 6;
  void clear_compliance_tag() ;
  const std::string& compliance_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_tag(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_tag();
  PROTOBUF_NODISCARD std::string* release_compliance_tag();
  void set_allocated_compliance_tag(std::string* value);

  private:
  const std::string& _internal_compliance_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_tag(
      const std::string& value);
  std::string* _internal_mutable_compliance_tag();

  public:
  // bool allow_modification = 1;
  void clear_allow_modification() ;
  bool allow_modification() const;
  void set_allow_modification(bool value);

  private:
  bool _internal_allow_modification() const;
  void _internal_set_allow_modification(bool value);

  public:
  // bool allow_derivatives = 2;
  void clear_allow_derivatives() ;
  bool allow_derivatives() const;
  void set_allow_derivatives(bool value);

  private:
  bool _internal_allow_derivatives() const;
  void _internal_set_allow_derivatives(bool value);

  public:
  // bool allow_commercial_use = 3;
  void clear_allow_commercial_use() ;
  bool allow_commercial_use() const;
  void set_allow_commercial_use(bool value);

  private:
  bool _internal_allow_commercial_use() const;
  void _internal_set_allow_commercial_use(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.Permissions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Permissions& from_msg);
    ::google::protobuf::internal::ArenaStringPtr geographic_restriction_;
    ::google::protobuf::internal::ArenaStringPtr temporal_restriction_;
    ::google::protobuf::internal::ArenaStringPtr compliance_tag_;
    bool allow_modification_;
    bool allow_derivatives_;
    bool allow_commercial_use_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class Metadata_MetadataExtrasEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Metadata_MetadataExtrasEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata_MetadataExtrasEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Metadata_MetadataExtrasEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Metadata_MetadataExtrasEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Metadata_MetadataExtrasEntry_DoNotUse*>(
        &_Metadata_MetadataExtrasEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_seigr_5fcell_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ListSeigrCellsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.ListSeigrCellsRequest) */ {
 public:
  inline ListSeigrCellsRequest() : ListSeigrCellsRequest(nullptr) {}
  ~ListSeigrCellsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListSeigrCellsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListSeigrCellsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListSeigrCellsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListSeigrCellsRequest(const ListSeigrCellsRequest& from) : ListSeigrCellsRequest(nullptr, from) {}
  inline ListSeigrCellsRequest(ListSeigrCellsRequest&& from) noexcept
      : ListSeigrCellsRequest(nullptr, std::move(from)) {}
  inline ListSeigrCellsRequest& operator=(const ListSeigrCellsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSeigrCellsRequest& operator=(ListSeigrCellsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSeigrCellsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSeigrCellsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSeigrCellsRequest*>(
        &_ListSeigrCellsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(ListSeigrCellsRequest& a, ListSeigrCellsRequest& b) { a.Swap(&b); }
  inline void Swap(ListSeigrCellsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSeigrCellsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSeigrCellsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListSeigrCellsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListSeigrCellsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListSeigrCellsRequest& from) { ListSeigrCellsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListSeigrCellsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.ListSeigrCellsRequest"; }

 protected:
  explicit ListSeigrCellsRequest(::google::protobuf::Arena* arena);
  ListSeigrCellsRequest(::google::protobuf::Arena* arena, const ListSeigrCellsRequest& from);
  ListSeigrCellsRequest(::google::protobuf::Arena* arena, ListSeigrCellsRequest&& from) noexcept
      : ListSeigrCellsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 1,
    kAccessLevelFieldNumber = 2,
    kShowOnlyActiveFieldNumber = 3,
  };
  // repeated string tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string access_level = 2;
  void clear_access_level() ;
  const std::string& access_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_level(Arg_&& arg, Args_... args);
  std::string* mutable_access_level();
  PROTOBUF_NODISCARD std::string* release_access_level();
  void set_allocated_access_level(std::string* value);

  private:
  const std::string& _internal_access_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_level(
      const std::string& value);
  std::string* _internal_mutable_access_level();

  public:
  // bool show_only_active = 3;
  void clear_show_only_active() ;
  bool show_only_active() const;
  void set_show_only_active(bool value);

  private:
  bool _internal_show_only_active() const;
  void _internal_set_show_only_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.ListSeigrCellsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListSeigrCellsRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::ArenaStringPtr access_level_;
    bool show_only_active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class CustomProperty final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.CustomProperty) */ {
 public:
  inline CustomProperty() : CustomProperty(nullptr) {}
  ~CustomProperty() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CustomProperty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CustomProperty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CustomProperty(
      ::google::protobuf::internal::ConstantInitialized);

  inline CustomProperty(const CustomProperty& from) : CustomProperty(nullptr, from) {}
  inline CustomProperty(CustomProperty&& from) noexcept
      : CustomProperty(nullptr, std::move(from)) {}
  inline CustomProperty& operator=(const CustomProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomProperty& operator=(CustomProperty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomProperty* internal_default_instance() {
    return reinterpret_cast<const CustomProperty*>(
        &_CustomProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CustomProperty& a, CustomProperty& b) { a.Swap(&b); }
  inline void Swap(CustomProperty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomProperty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomProperty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CustomProperty>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CustomProperty& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CustomProperty& from) { CustomProperty::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CustomProperty* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.CustomProperty"; }

 protected:
  explicit CustomProperty(::google::protobuf::Arena* arena);
  CustomProperty(::google::protobuf::Arena* arena, const CustomProperty& from);
  CustomProperty(::google::protobuf::Arena* arena, CustomProperty&& from) noexcept
      : CustomProperty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kPropertyTypeFieldNumber = 3,
    kIsSensitiveFieldNumber = 4,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string property_type = 3;
  void clear_property_type() ;
  const std::string& property_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property_type(Arg_&& arg, Args_... args);
  std::string* mutable_property_type();
  PROTOBUF_NODISCARD std::string* release_property_type();
  void set_allocated_property_type(std::string* value);

  private:
  const std::string& _internal_property_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_type(
      const std::string& value);
  std::string* _internal_mutable_property_type();

  public:
  // bool is_sensitive = 4;
  void clear_is_sensitive() ;
  bool is_sensitive() const;
  void set_is_sensitive(bool value);

  private:
  bool _internal_is_sensitive() const;
  void _internal_set_is_sensitive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.CustomProperty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CustomProperty& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr property_type_;
    bool is_sensitive_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class CoordinateIndex final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.CoordinateIndex) */ {
 public:
  inline CoordinateIndex() : CoordinateIndex(nullptr) {}
  ~CoordinateIndex() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CoordinateIndex* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CoordinateIndex));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CoordinateIndex(
      ::google::protobuf::internal::ConstantInitialized);

  inline CoordinateIndex(const CoordinateIndex& from) : CoordinateIndex(nullptr, from) {}
  inline CoordinateIndex(CoordinateIndex&& from) noexcept
      : CoordinateIndex(nullptr, std::move(from)) {}
  inline CoordinateIndex& operator=(const CoordinateIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinateIndex& operator=(CoordinateIndex&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinateIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinateIndex* internal_default_instance() {
    return reinterpret_cast<const CoordinateIndex*>(
        &_CoordinateIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CoordinateIndex& a, CoordinateIndex& b) { a.Swap(&b); }
  inline void Swap(CoordinateIndex* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinateIndex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinateIndex* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CoordinateIndex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CoordinateIndex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CoordinateIndex& from) { CoordinateIndex::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CoordinateIndex* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.CoordinateIndex"; }

 protected:
  explicit CoordinateIndex(::google::protobuf::Arena* arena);
  CoordinateIndex(::google::protobuf::Arena* arena, const CoordinateIndex& from);
  CoordinateIndex(::google::protobuf::Arena* arena, CoordinateIndex&& from) noexcept
      : CoordinateIndex(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTFieldNumber = 4,
    kReferenceFrameFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // string t = 4;
  void clear_t() ;
  const std::string& t() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_t(Arg_&& arg, Args_... args);
  std::string* mutable_t();
  PROTOBUF_NODISCARD std::string* release_t();
  void set_allocated_t(std::string* value);

  private:
  const std::string& _internal_t() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t(
      const std::string& value);
  std::string* _internal_mutable_t();

  public:
  // string reference_frame = 5;
  void clear_reference_frame() ;
  const std::string& reference_frame() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference_frame(Arg_&& arg, Args_... args);
  std::string* mutable_reference_frame();
  PROTOBUF_NODISCARD std::string* release_reference_frame();
  void set_allocated_reference_frame(std::string* value);

  private:
  const std::string& _internal_reference_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_frame(
      const std::string& value);
  std::string* _internal_mutable_reference_frame();

  public:
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // int32 z = 3;
  void clear_z() ;
  ::int32_t z() const;
  void set_z(::int32_t value);

  private:
  ::int32_t _internal_z() const;
  void _internal_set_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.CoordinateIndex)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CoordinateIndex& from_msg);
    ::google::protobuf::internal::ArenaStringPtr t_;
    ::google::protobuf::internal::ArenaStringPtr reference_frame_;
    ::int32_t x_;
    ::int32_t y_;
    ::int32_t z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class ValidateSeigrCellResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.ValidateSeigrCellResponse) */ {
 public:
  inline ValidateSeigrCellResponse() : ValidateSeigrCellResponse(nullptr) {}
  ~ValidateSeigrCellResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidateSeigrCellResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidateSeigrCellResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidateSeigrCellResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidateSeigrCellResponse(const ValidateSeigrCellResponse& from) : ValidateSeigrCellResponse(nullptr, from) {}
  inline ValidateSeigrCellResponse(ValidateSeigrCellResponse&& from) noexcept
      : ValidateSeigrCellResponse(nullptr, std::move(from)) {}
  inline ValidateSeigrCellResponse& operator=(const ValidateSeigrCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateSeigrCellResponse& operator=(ValidateSeigrCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateSeigrCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateSeigrCellResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateSeigrCellResponse*>(
        &_ValidateSeigrCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ValidateSeigrCellResponse& a, ValidateSeigrCellResponse& b) { a.Swap(&b); }
  inline void Swap(ValidateSeigrCellResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateSeigrCellResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateSeigrCellResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidateSeigrCellResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidateSeigrCellResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidateSeigrCellResponse& from) { ValidateSeigrCellResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidateSeigrCellResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.ValidateSeigrCellResponse"; }

 protected:
  explicit ValidateSeigrCellResponse(::google::protobuf::Arena* arena);
  ValidateSeigrCellResponse(::google::protobuf::Arena* arena, const ValidateSeigrCellResponse& from);
  ValidateSeigrCellResponse(::google::protobuf::Arena* arena, ValidateSeigrCellResponse&& from) noexcept
      : ValidateSeigrCellResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationMetadataFieldNumber = 3,
    kValidationMessageFieldNumber = 2,
    kIsValidFieldNumber = 1,
  };
  // map<string, string> validation_metadata = 3;
  int validation_metadata_size() const;
  private:
  int _internal_validation_metadata_size() const;

  public:
  void clear_validation_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_validation_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_validation_metadata();

  public:
  // string validation_message = 2;
  void clear_validation_message() ;
  const std::string& validation_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_message(Arg_&& arg, Args_... args);
  std::string* mutable_validation_message();
  PROTOBUF_NODISCARD std::string* release_validation_message();
  void set_allocated_validation_message(std::string* value);

  private:
  const std::string& _internal_validation_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_message(
      const std::string& value);
  std::string* _internal_mutable_validation_message();

  public:
  // bool is_valid = 1;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.ValidateSeigrCellResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidateSeigrCellResponse& from_msg);
    ::google::protobuf::internal::MapField<ValidateSeigrCellResponse_ValidationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        validation_metadata_;
    ::google::protobuf::internal::ArenaStringPtr validation_message_;
    bool is_valid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class UpdateSeigrCellRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.UpdateSeigrCellRequest) */ {
 public:
  inline UpdateSeigrCellRequest() : UpdateSeigrCellRequest(nullptr) {}
  ~UpdateSeigrCellRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateSeigrCellRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateSeigrCellRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSeigrCellRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateSeigrCellRequest(const UpdateSeigrCellRequest& from) : UpdateSeigrCellRequest(nullptr, from) {}
  inline UpdateSeigrCellRequest(UpdateSeigrCellRequest&& from) noexcept
      : UpdateSeigrCellRequest(nullptr, std::move(from)) {}
  inline UpdateSeigrCellRequest& operator=(const UpdateSeigrCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSeigrCellRequest& operator=(UpdateSeigrCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSeigrCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSeigrCellRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSeigrCellRequest*>(
        &_UpdateSeigrCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UpdateSeigrCellRequest& a, UpdateSeigrCellRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateSeigrCellRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSeigrCellRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSeigrCellRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateSeigrCellRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSeigrCellRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateSeigrCellRequest& from) { UpdateSeigrCellRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateSeigrCellRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.UpdateSeigrCellRequest"; }

 protected:
  explicit UpdateSeigrCellRequest(::google::protobuf::Arena* arena);
  UpdateSeigrCellRequest(::google::protobuf::Arena* arena, const UpdateSeigrCellRequest& from);
  UpdateSeigrCellRequest(::google::protobuf::Arena* arena, UpdateSeigrCellRequest&& from) noexcept
      : UpdateSeigrCellRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatesFieldNumber = 2,
    kCellIdFieldNumber = 1,
  };
  // map<string, string> updates = 2;
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  const ::google::protobuf::Map<std::string, std::string>& updates() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_updates();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_updates() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_updates();

  public:
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.UpdateSeigrCellRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateSeigrCellRequest& from_msg);
    ::google::protobuf::internal::MapField<UpdateSeigrCellRequest_UpdatesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        updates_;
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class RE_License final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.RE_License) */ {
 public:
  inline RE_License() : RE_License(nullptr) {}
  ~RE_License() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RE_License* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RE_License));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RE_License(
      ::google::protobuf::internal::ConstantInitialized);

  inline RE_License(const RE_License& from) : RE_License(nullptr, from) {}
  inline RE_License(RE_License&& from) noexcept
      : RE_License(nullptr, std::move(from)) {}
  inline RE_License& operator=(const RE_License& from) {
    CopyFrom(from);
    return *this;
  }
  inline RE_License& operator=(RE_License&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RE_License& default_instance() {
    return *internal_default_instance();
  }
  static inline const RE_License* internal_default_instance() {
    return reinterpret_cast<const RE_License*>(
        &_RE_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RE_License& a, RE_License& b) { a.Swap(&b); }
  inline void Swap(RE_License* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RE_License* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RE_License* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RE_License>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RE_License& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RE_License& from) { RE_License::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RE_License* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.RE_License"; }

 protected:
  explicit RE_License(::google::protobuf::Arena* arena);
  RE_License(::google::protobuf::Arena* arena, const RE_License& from);
  RE_License(::google::protobuf::Arena* arena, RE_License&& from) noexcept
      : RE_License(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContributorsFieldNumber = 4,
    kLicenseMetadataFieldNumber = 7,
    kLicenseTypeFieldNumber = 1,
    kTermsFieldNumber = 2,
    kLicenseIdFieldNumber = 3,
    kEthicalUseGuidelineFieldNumber = 5,
    kPermissionsFieldNumber = 6,
  };
  // repeated string contributors = 4;
  int contributors_size() const;
  private:
  int _internal_contributors_size() const;

  public:
  void clear_contributors() ;
  const std::string& contributors(int index) const;
  std::string* mutable_contributors(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributors(int index, Arg_&& value, Args_... args);
  std::string* add_contributors();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_contributors(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& contributors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_contributors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_contributors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_contributors();

  public:
  // map<string, string> license_metadata = 7;
  int license_metadata_size() const;
  private:
  int _internal_license_metadata_size() const;

  public:
  void clear_license_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& license_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_license_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_license_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_license_metadata();

  public:
  // string license_type = 1;
  void clear_license_type() ;
  const std::string& license_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_license_type(Arg_&& arg, Args_... args);
  std::string* mutable_license_type();
  PROTOBUF_NODISCARD std::string* release_license_type();
  void set_allocated_license_type(std::string* value);

  private:
  const std::string& _internal_license_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license_type(
      const std::string& value);
  std::string* _internal_mutable_license_type();

  public:
  // string terms = 2;
  void clear_terms() ;
  const std::string& terms() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_terms(Arg_&& arg, Args_... args);
  std::string* mutable_terms();
  PROTOBUF_NODISCARD std::string* release_terms();
  void set_allocated_terms(std::string* value);

  private:
  const std::string& _internal_terms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_terms(
      const std::string& value);
  std::string* _internal_mutable_terms();

  public:
  // string license_id = 3;
  void clear_license_id() ;
  const std::string& license_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_license_id(Arg_&& arg, Args_... args);
  std::string* mutable_license_id();
  PROTOBUF_NODISCARD std::string* release_license_id();
  void set_allocated_license_id(std::string* value);

  private:
  const std::string& _internal_license_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license_id(
      const std::string& value);
  std::string* _internal_mutable_license_id();

  public:
  // string ethical_use_guideline = 5;
  void clear_ethical_use_guideline() ;
  const std::string& ethical_use_guideline() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ethical_use_guideline(Arg_&& arg, Args_... args);
  std::string* mutable_ethical_use_guideline();
  PROTOBUF_NODISCARD std::string* release_ethical_use_guideline();
  void set_allocated_ethical_use_guideline(std::string* value);

  private:
  const std::string& _internal_ethical_use_guideline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethical_use_guideline(
      const std::string& value);
  std::string* _internal_mutable_ethical_use_guideline();

  public:
  // .seigr.seigr_cell.Permissions permissions = 6;
  bool has_permissions() const;
  void clear_permissions() ;
  const ::seigr::seigr_cell::Permissions& permissions() const;
  PROTOBUF_NODISCARD ::seigr::seigr_cell::Permissions* release_permissions();
  ::seigr::seigr_cell::Permissions* mutable_permissions();
  void set_allocated_permissions(::seigr::seigr_cell::Permissions* value);
  void unsafe_arena_set_allocated_permissions(::seigr::seigr_cell::Permissions* value);
  ::seigr::seigr_cell::Permissions* unsafe_arena_release_permissions();

  private:
  const ::seigr::seigr_cell::Permissions& _internal_permissions() const;
  ::seigr::seigr_cell::Permissions* _internal_mutable_permissions();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.RE_License)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      112, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RE_License& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> contributors_;
    ::google::protobuf::internal::MapField<RE_License_LicenseMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        license_metadata_;
    ::google::protobuf::internal::ArenaStringPtr license_type_;
    ::google::protobuf::internal::ArenaStringPtr terms_;
    ::google::protobuf::internal::ArenaStringPtr license_id_;
    ::google::protobuf::internal::ArenaStringPtr ethical_use_guideline_;
    ::seigr::seigr_cell::Permissions* permissions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class Metadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metadata(const Metadata& from) : Metadata(nullptr, from) {}
  inline Metadata(Metadata&& from) noexcept
      : Metadata(nullptr, std::move(from)) {}
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
        &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Metadata& a, Metadata& b) { a.Swap(&b); }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metadata& from) { Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.Metadata"; }

 protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  Metadata(::google::protobuf::Arena* arena, const Metadata& from);
  Metadata(::google::protobuf::Arena* arena, Metadata&& from) noexcept
      : Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 9,
    kMetadataExtrasFieldNumber = 13,
    kCellIdFieldNumber = 1,
    kContributorIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kVersionFieldNumber = 4,
    kHashLinkFieldNumber = 5,
    kDataHashFieldNumber = 6,
    kLineageHashFieldNumber = 7,
    kAccessLevelFieldNumber = 8,
    kCompressionAlgorithmFieldNumber = 10,
    kSecurityClassificationFieldNumber = 12,
    kIsEncryptedFieldNumber = 11,
  };
  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // map<string, string> metadata_extras = 13;
  int metadata_extras_size() const;
  private:
  int _internal_metadata_extras_size() const;

  public:
  void clear_metadata_extras() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata_extras() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata_extras();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata_extras() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata_extras();

  public:
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // string contributor_id = 2;
  void clear_contributor_id() ;
  const std::string& contributor_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributor_id(Arg_&& arg, Args_... args);
  std::string* mutable_contributor_id();
  PROTOBUF_NODISCARD std::string* release_contributor_id();
  void set_allocated_contributor_id(std::string* value);

  private:
  const std::string& _internal_contributor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributor_id(
      const std::string& value);
  std::string* _internal_mutable_contributor_id();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string version = 4;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string hash_link = 5;
  void clear_hash_link() ;
  const std::string& hash_link() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash_link(Arg_&& arg, Args_... args);
  std::string* mutable_hash_link();
  PROTOBUF_NODISCARD std::string* release_hash_link();
  void set_allocated_hash_link(std::string* value);

  private:
  const std::string& _internal_hash_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_link(
      const std::string& value);
  std::string* _internal_mutable_hash_link();

  public:
  // string data_hash = 6;
  void clear_data_hash() ;
  const std::string& data_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_hash(Arg_&& arg, Args_... args);
  std::string* mutable_data_hash();
  PROTOBUF_NODISCARD std::string* release_data_hash();
  void set_allocated_data_hash(std::string* value);

  private:
  const std::string& _internal_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_hash(
      const std::string& value);
  std::string* _internal_mutable_data_hash();

  public:
  // string lineage_hash = 7;
  void clear_lineage_hash() ;
  const std::string& lineage_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lineage_hash(Arg_&& arg, Args_... args);
  std::string* mutable_lineage_hash();
  PROTOBUF_NODISCARD std::string* release_lineage_hash();
  void set_allocated_lineage_hash(std::string* value);

  private:
  const std::string& _internal_lineage_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lineage_hash(
      const std::string& value);
  std::string* _internal_mutable_lineage_hash();

  public:
  // string access_level = 8;
  void clear_access_level() ;
  const std::string& access_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_level(Arg_&& arg, Args_... args);
  std::string* mutable_access_level();
  PROTOBUF_NODISCARD std::string* release_access_level();
  void set_allocated_access_level(std::string* value);

  private:
  const std::string& _internal_access_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_level(
      const std::string& value);
  std::string* _internal_mutable_access_level();

  public:
  // string compression_algorithm = 10;
  void clear_compression_algorithm() ;
  const std::string& compression_algorithm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compression_algorithm(Arg_&& arg, Args_... args);
  std::string* mutable_compression_algorithm();
  PROTOBUF_NODISCARD std::string* release_compression_algorithm();
  void set_allocated_compression_algorithm(std::string* value);

  private:
  const std::string& _internal_compression_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compression_algorithm(
      const std::string& value);
  std::string* _internal_mutable_compression_algorithm();

  public:
  // string security_classification = 12;
  void clear_security_classification() ;
  const std::string& security_classification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_security_classification(Arg_&& arg, Args_... args);
  std::string* mutable_security_classification();
  PROTOBUF_NODISCARD std::string* release_security_classification();
  void set_allocated_security_classification(std::string* value);

  private:
  const std::string& _internal_security_classification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_classification(
      const std::string& value);
  std::string* _internal_mutable_security_classification();

  public:
  // bool is_encrypted = 11;
  void clear_is_encrypted() ;
  bool is_encrypted() const;
  void set_is_encrypted(bool value);

  private:
  bool _internal_is_encrypted() const;
  void _internal_set_is_encrypted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.Metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      184, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metadata& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::MapField<Metadata_MetadataExtrasEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_extras_;
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::ArenaStringPtr contributor_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr hash_link_;
    ::google::protobuf::internal::ArenaStringPtr data_hash_;
    ::google::protobuf::internal::ArenaStringPtr lineage_hash_;
    ::google::protobuf::internal::ArenaStringPtr access_level_;
    ::google::protobuf::internal::ArenaStringPtr compression_algorithm_;
    ::google::protobuf::internal::ArenaStringPtr security_classification_;
    bool is_encrypted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class SeigrCell final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.SeigrCell) */ {
 public:
  inline SeigrCell() : SeigrCell(nullptr) {}
  ~SeigrCell() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SeigrCell* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SeigrCell));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrCell(
      ::google::protobuf::internal::ConstantInitialized);

  inline SeigrCell(const SeigrCell& from) : SeigrCell(nullptr, from) {}
  inline SeigrCell(SeigrCell&& from) noexcept
      : SeigrCell(nullptr, std::move(from)) {}
  inline SeigrCell& operator=(const SeigrCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeigrCell& operator=(SeigrCell&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeigrCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeigrCell* internal_default_instance() {
    return reinterpret_cast<const SeigrCell*>(
        &_SeigrCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SeigrCell& a, SeigrCell& b) { a.Swap(&b); }
  inline void Swap(SeigrCell* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeigrCell* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeigrCell* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SeigrCell>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeigrCell& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SeigrCell& from) { SeigrCell::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SeigrCell* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.SeigrCell"; }

 protected:
  explicit SeigrCell(::google::protobuf::Arena* arena);
  SeigrCell(::google::protobuf::Arena* arena, const SeigrCell& from);
  SeigrCell(::google::protobuf::Arena* arena, SeigrCell&& from) noexcept
      : SeigrCell(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCustomPropertiesFieldNumber = 7,
    kDataContentFieldNumber = 1,
    kPrimaryRedundancyMarkerFieldNumber = 2,
    kSecondaryRedundancyMarkerFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kCoordinateIndexFieldNumber = 5,
    kReLicenseFieldNumber = 6,
  };
  // repeated .seigr.seigr_cell.CustomProperty custom_properties = 7;
  int custom_properties_size() const;
  private:
  int _internal_custom_properties_size() const;

  public:
  void clear_custom_properties() ;
  ::seigr::seigr_cell::CustomProperty* mutable_custom_properties(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>* mutable_custom_properties();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>& _internal_custom_properties() const;
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>* _internal_mutable_custom_properties();
  public:
  const ::seigr::seigr_cell::CustomProperty& custom_properties(int index) const;
  ::seigr::seigr_cell::CustomProperty* add_custom_properties();
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>& custom_properties() const;
  // bytes data_content = 1;
  void clear_data_content() ;
  const std::string& data_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_content(Arg_&& arg, Args_... args);
  std::string* mutable_data_content();
  PROTOBUF_NODISCARD std::string* release_data_content();
  void set_allocated_data_content(std::string* value);

  private:
  const std::string& _internal_data_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_content(
      const std::string& value);
  std::string* _internal_mutable_data_content();

  public:
  // bytes primary_redundancy_marker = 2;
  void clear_primary_redundancy_marker() ;
  const std::string& primary_redundancy_marker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_redundancy_marker(Arg_&& arg, Args_... args);
  std::string* mutable_primary_redundancy_marker();
  PROTOBUF_NODISCARD std::string* release_primary_redundancy_marker();
  void set_allocated_primary_redundancy_marker(std::string* value);

  private:
  const std::string& _internal_primary_redundancy_marker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_redundancy_marker(
      const std::string& value);
  std::string* _internal_mutable_primary_redundancy_marker();

  public:
  // bytes secondary_redundancy_marker = 3;
  void clear_secondary_redundancy_marker() ;
  const std::string& secondary_redundancy_marker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secondary_redundancy_marker(Arg_&& arg, Args_... args);
  std::string* mutable_secondary_redundancy_marker();
  PROTOBUF_NODISCARD std::string* release_secondary_redundancy_marker();
  void set_allocated_secondary_redundancy_marker(std::string* value);

  private:
  const std::string& _internal_secondary_redundancy_marker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondary_redundancy_marker(
      const std::string& value);
  std::string* _internal_mutable_secondary_redundancy_marker();

  public:
  // .seigr.seigr_cell.Metadata metadata = 4;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::seigr::seigr_cell::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::seigr::seigr_cell::Metadata* release_metadata();
  ::seigr::seigr_cell::Metadata* mutable_metadata();
  void set_allocated_metadata(::seigr::seigr_cell::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::seigr::seigr_cell::Metadata* value);
  ::seigr::seigr_cell::Metadata* unsafe_arena_release_metadata();

  private:
  const ::seigr::seigr_cell::Metadata& _internal_metadata() const;
  ::seigr::seigr_cell::Metadata* _internal_mutable_metadata();

  public:
  // .seigr.seigr_cell.CoordinateIndex coordinate_index = 5;
  bool has_coordinate_index() const;
  void clear_coordinate_index() ;
  const ::seigr::seigr_cell::CoordinateIndex& coordinate_index() const;
  PROTOBUF_NODISCARD ::seigr::seigr_cell::CoordinateIndex* release_coordinate_index();
  ::seigr::seigr_cell::CoordinateIndex* mutable_coordinate_index();
  void set_allocated_coordinate_index(::seigr::seigr_cell::CoordinateIndex* value);
  void unsafe_arena_set_allocated_coordinate_index(::seigr::seigr_cell::CoordinateIndex* value);
  ::seigr::seigr_cell::CoordinateIndex* unsafe_arena_release_coordinate_index();

  private:
  const ::seigr::seigr_cell::CoordinateIndex& _internal_coordinate_index() const;
  ::seigr::seigr_cell::CoordinateIndex* _internal_mutable_coordinate_index();

  public:
  // .seigr.seigr_cell.RE_License re_license = 6;
  bool has_re_license() const;
  void clear_re_license() ;
  const ::seigr::seigr_cell::RE_License& re_license() const;
  PROTOBUF_NODISCARD ::seigr::seigr_cell::RE_License* release_re_license();
  ::seigr::seigr_cell::RE_License* mutable_re_license();
  void set_allocated_re_license(::seigr::seigr_cell::RE_License* value);
  void unsafe_arena_set_allocated_re_license(::seigr::seigr_cell::RE_License* value);
  ::seigr::seigr_cell::RE_License* unsafe_arena_release_re_license();

  private:
  const ::seigr::seigr_cell::RE_License& _internal_re_license() const;
  ::seigr::seigr_cell::RE_License* _internal_mutable_re_license();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.SeigrCell)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SeigrCell& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seigr::seigr_cell::CustomProperty > custom_properties_;
    ::google::protobuf::internal::ArenaStringPtr data_content_;
    ::google::protobuf::internal::ArenaStringPtr primary_redundancy_marker_;
    ::google::protobuf::internal::ArenaStringPtr secondary_redundancy_marker_;
    ::seigr::seigr_cell::Metadata* metadata_;
    ::seigr::seigr_cell::CoordinateIndex* coordinate_index_;
    ::seigr::seigr_cell::RE_License* re_license_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class RetrieveSeigrCellResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.RetrieveSeigrCellResponse) */ {
 public:
  inline RetrieveSeigrCellResponse() : RetrieveSeigrCellResponse(nullptr) {}
  ~RetrieveSeigrCellResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RetrieveSeigrCellResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RetrieveSeigrCellResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveSeigrCellResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RetrieveSeigrCellResponse(const RetrieveSeigrCellResponse& from) : RetrieveSeigrCellResponse(nullptr, from) {}
  inline RetrieveSeigrCellResponse(RetrieveSeigrCellResponse&& from) noexcept
      : RetrieveSeigrCellResponse(nullptr, std::move(from)) {}
  inline RetrieveSeigrCellResponse& operator=(const RetrieveSeigrCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveSeigrCellResponse& operator=(RetrieveSeigrCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveSeigrCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveSeigrCellResponse* internal_default_instance() {
    return reinterpret_cast<const RetrieveSeigrCellResponse*>(
        &_RetrieveSeigrCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(RetrieveSeigrCellResponse& a, RetrieveSeigrCellResponse& b) { a.Swap(&b); }
  inline void Swap(RetrieveSeigrCellResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveSeigrCellResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveSeigrCellResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RetrieveSeigrCellResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveSeigrCellResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RetrieveSeigrCellResponse& from) { RetrieveSeigrCellResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RetrieveSeigrCellResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.RetrieveSeigrCellResponse"; }

 protected:
  explicit RetrieveSeigrCellResponse(::google::protobuf::Arena* arena);
  RetrieveSeigrCellResponse(::google::protobuf::Arena* arena, const RetrieveSeigrCellResponse& from);
  RetrieveSeigrCellResponse(::google::protobuf::Arena* arena, RetrieveSeigrCellResponse&& from) noexcept
      : RetrieveSeigrCellResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRetrievalTimestampFieldNumber = 2,
    kCellFieldNumber = 1,
  };
  // string retrieval_timestamp = 2;
  void clear_retrieval_timestamp() ;
  const std::string& retrieval_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retrieval_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_retrieval_timestamp();
  PROTOBUF_NODISCARD std::string* release_retrieval_timestamp();
  void set_allocated_retrieval_timestamp(std::string* value);

  private:
  const std::string& _internal_retrieval_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retrieval_timestamp(
      const std::string& value);
  std::string* _internal_mutable_retrieval_timestamp();

  public:
  // .seigr.seigr_cell.SeigrCell cell = 1;
  bool has_cell() const;
  void clear_cell() ;
  const ::seigr::seigr_cell::SeigrCell& cell() const;
  PROTOBUF_NODISCARD ::seigr::seigr_cell::SeigrCell* release_cell();
  ::seigr::seigr_cell::SeigrCell* mutable_cell();
  void set_allocated_cell(::seigr::seigr_cell::SeigrCell* value);
  void unsafe_arena_set_allocated_cell(::seigr::seigr_cell::SeigrCell* value);
  ::seigr::seigr_cell::SeigrCell* unsafe_arena_release_cell();

  private:
  const ::seigr::seigr_cell::SeigrCell& _internal_cell() const;
  ::seigr::seigr_cell::SeigrCell* _internal_mutable_cell();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.RetrieveSeigrCellResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RetrieveSeigrCellResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr retrieval_timestamp_;
    ::seigr::seigr_cell::SeigrCell* cell_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};
// -------------------------------------------------------------------

class ListSeigrCellsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_cell.ListSeigrCellsResponse) */ {
 public:
  inline ListSeigrCellsResponse() : ListSeigrCellsResponse(nullptr) {}
  ~ListSeigrCellsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListSeigrCellsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListSeigrCellsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListSeigrCellsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListSeigrCellsResponse(const ListSeigrCellsResponse& from) : ListSeigrCellsResponse(nullptr, from) {}
  inline ListSeigrCellsResponse(ListSeigrCellsResponse&& from) noexcept
      : ListSeigrCellsResponse(nullptr, std::move(from)) {}
  inline ListSeigrCellsResponse& operator=(const ListSeigrCellsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSeigrCellsResponse& operator=(ListSeigrCellsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSeigrCellsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSeigrCellsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSeigrCellsResponse*>(
        &_ListSeigrCellsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(ListSeigrCellsResponse& a, ListSeigrCellsResponse& b) { a.Swap(&b); }
  inline void Swap(ListSeigrCellsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSeigrCellsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSeigrCellsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListSeigrCellsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListSeigrCellsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListSeigrCellsResponse& from) { ListSeigrCellsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListSeigrCellsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_cell.ListSeigrCellsResponse"; }

 protected:
  explicit ListSeigrCellsResponse(::google::protobuf::Arena* arena);
  ListSeigrCellsResponse(::google::protobuf::Arena* arena, const ListSeigrCellsResponse& from);
  ListSeigrCellsResponse(::google::protobuf::Arena* arena, ListSeigrCellsResponse&& from) noexcept
      : ListSeigrCellsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellsFieldNumber = 1,
    kRetrievalTimestampFieldNumber = 2,
  };
  // repeated .seigr.seigr_cell.SeigrCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;

  public:
  void clear_cells() ;
  ::seigr::seigr_cell::SeigrCell* mutable_cells(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>* mutable_cells();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>& _internal_cells() const;
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>* _internal_mutable_cells();
  public:
  const ::seigr::seigr_cell::SeigrCell& cells(int index) const;
  ::seigr::seigr_cell::SeigrCell* add_cells();
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>& cells() const;
  // string retrieval_timestamp = 2;
  void clear_retrieval_timestamp() ;
  const std::string& retrieval_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retrieval_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_retrieval_timestamp();
  PROTOBUF_NODISCARD std::string* release_retrieval_timestamp();
  void set_allocated_retrieval_timestamp(std::string* value);

  private:
  const std::string& _internal_retrieval_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retrieval_timestamp(
      const std::string& value);
  std::string* _internal_mutable_retrieval_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_cell.ListSeigrCellsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListSeigrCellsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::seigr_cell::SeigrCell > cells_;
    ::google::protobuf::internal::ArenaStringPtr retrieval_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5fcell_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SeigrCell

// bytes data_content = 1;
inline void SeigrCell::clear_data_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_content_.ClearToEmpty();
}
inline const std::string& SeigrCell::data_content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.data_content)
  return _internal_data_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrCell::set_data_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.SeigrCell.data_content)
}
inline std::string* SeigrCell::mutable_data_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_content();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.data_content)
  return _s;
}
inline const std::string& SeigrCell::_internal_data_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_content_.Get();
}
inline void SeigrCell::_internal_set_data_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_content_.Set(value, GetArena());
}
inline std::string* SeigrCell::_internal_mutable_data_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_content_.Mutable( GetArena());
}
inline std::string* SeigrCell::release_data_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.data_content)
  return _impl_.data_content_.Release();
}
inline void SeigrCell::set_allocated_data_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_content_.IsDefault()) {
    _impl_.data_content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.data_content)
}

// bytes primary_redundancy_marker = 2;
inline void SeigrCell::clear_primary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_redundancy_marker_.ClearToEmpty();
}
inline const std::string& SeigrCell::primary_redundancy_marker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.primary_redundancy_marker)
  return _internal_primary_redundancy_marker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrCell::set_primary_redundancy_marker(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_redundancy_marker_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.SeigrCell.primary_redundancy_marker)
}
inline std::string* SeigrCell::mutable_primary_redundancy_marker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_redundancy_marker();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.primary_redundancy_marker)
  return _s;
}
inline const std::string& SeigrCell::_internal_primary_redundancy_marker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_redundancy_marker_.Get();
}
inline void SeigrCell::_internal_set_primary_redundancy_marker(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_redundancy_marker_.Set(value, GetArena());
}
inline std::string* SeigrCell::_internal_mutable_primary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_redundancy_marker_.Mutable( GetArena());
}
inline std::string* SeigrCell::release_primary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.primary_redundancy_marker)
  return _impl_.primary_redundancy_marker_.Release();
}
inline void SeigrCell::set_allocated_primary_redundancy_marker(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_redundancy_marker_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_redundancy_marker_.IsDefault()) {
    _impl_.primary_redundancy_marker_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.primary_redundancy_marker)
}

// bytes secondary_redundancy_marker = 3;
inline void SeigrCell::clear_secondary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_redundancy_marker_.ClearToEmpty();
}
inline const std::string& SeigrCell::secondary_redundancy_marker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.secondary_redundancy_marker)
  return _internal_secondary_redundancy_marker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrCell::set_secondary_redundancy_marker(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_redundancy_marker_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.SeigrCell.secondary_redundancy_marker)
}
inline std::string* SeigrCell::mutable_secondary_redundancy_marker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secondary_redundancy_marker();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.secondary_redundancy_marker)
  return _s;
}
inline const std::string& SeigrCell::_internal_secondary_redundancy_marker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secondary_redundancy_marker_.Get();
}
inline void SeigrCell::_internal_set_secondary_redundancy_marker(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_redundancy_marker_.Set(value, GetArena());
}
inline std::string* SeigrCell::_internal_mutable_secondary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secondary_redundancy_marker_.Mutable( GetArena());
}
inline std::string* SeigrCell::release_secondary_redundancy_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.secondary_redundancy_marker)
  return _impl_.secondary_redundancy_marker_.Release();
}
inline void SeigrCell::set_allocated_secondary_redundancy_marker(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_redundancy_marker_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secondary_redundancy_marker_.IsDefault()) {
    _impl_.secondary_redundancy_marker_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.secondary_redundancy_marker)
}

// .seigr.seigr_cell.Metadata metadata = 4;
inline bool SeigrCell::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void SeigrCell::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::seigr_cell::Metadata& SeigrCell::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::seigr_cell::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::seigr_cell::Metadata&>(::seigr::seigr_cell::_Metadata_default_instance_);
}
inline const ::seigr::seigr_cell::Metadata& SeigrCell::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.metadata)
  return _internal_metadata();
}
inline void SeigrCell::unsafe_arena_set_allocated_metadata(::seigr::seigr_cell::Metadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::seigr::seigr_cell::Metadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.seigr_cell.SeigrCell.metadata)
}
inline ::seigr::seigr_cell::Metadata* SeigrCell::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::Metadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::seigr_cell::Metadata* SeigrCell::unsafe_arena_release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::seigr::seigr_cell::Metadata* SeigrCell::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::seigr_cell::Metadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::seigr::seigr_cell::Metadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::seigr::seigr_cell::Metadata* SeigrCell::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::seigr_cell::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.metadata)
  return _msg;
}
inline void SeigrCell::set_allocated_metadata(::seigr::seigr_cell::Metadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::seigr::seigr_cell::Metadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.metadata)
}

// .seigr.seigr_cell.CoordinateIndex coordinate_index = 5;
inline bool SeigrCell::has_coordinate_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coordinate_index_ != nullptr);
  return value;
}
inline void SeigrCell::clear_coordinate_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coordinate_index_ != nullptr) _impl_.coordinate_index_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::seigr::seigr_cell::CoordinateIndex& SeigrCell::_internal_coordinate_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::seigr_cell::CoordinateIndex* p = _impl_.coordinate_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::seigr_cell::CoordinateIndex&>(::seigr::seigr_cell::_CoordinateIndex_default_instance_);
}
inline const ::seigr::seigr_cell::CoordinateIndex& SeigrCell::coordinate_index() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.coordinate_index)
  return _internal_coordinate_index();
}
inline void SeigrCell::unsafe_arena_set_allocated_coordinate_index(::seigr::seigr_cell::CoordinateIndex* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.coordinate_index_);
  }
  _impl_.coordinate_index_ = reinterpret_cast<::seigr::seigr_cell::CoordinateIndex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.seigr_cell.SeigrCell.coordinate_index)
}
inline ::seigr::seigr_cell::CoordinateIndex* SeigrCell::release_coordinate_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::seigr::seigr_cell::CoordinateIndex* released = _impl_.coordinate_index_;
  _impl_.coordinate_index_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::seigr_cell::CoordinateIndex* SeigrCell::unsafe_arena_release_coordinate_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.coordinate_index)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::seigr::seigr_cell::CoordinateIndex* temp = _impl_.coordinate_index_;
  _impl_.coordinate_index_ = nullptr;
  return temp;
}
inline ::seigr::seigr_cell::CoordinateIndex* SeigrCell::_internal_mutable_coordinate_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coordinate_index_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::seigr_cell::CoordinateIndex>(GetArena());
    _impl_.coordinate_index_ = reinterpret_cast<::seigr::seigr_cell::CoordinateIndex*>(p);
  }
  return _impl_.coordinate_index_;
}
inline ::seigr::seigr_cell::CoordinateIndex* SeigrCell::mutable_coordinate_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::seigr::seigr_cell::CoordinateIndex* _msg = _internal_mutable_coordinate_index();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.coordinate_index)
  return _msg;
}
inline void SeigrCell::set_allocated_coordinate_index(::seigr::seigr_cell::CoordinateIndex* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.coordinate_index_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.coordinate_index_ = reinterpret_cast<::seigr::seigr_cell::CoordinateIndex*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.coordinate_index)
}

// .seigr.seigr_cell.RE_License re_license = 6;
inline bool SeigrCell::has_re_license() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.re_license_ != nullptr);
  return value;
}
inline void SeigrCell::clear_re_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.re_license_ != nullptr) _impl_.re_license_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::seigr::seigr_cell::RE_License& SeigrCell::_internal_re_license() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::seigr_cell::RE_License* p = _impl_.re_license_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::seigr_cell::RE_License&>(::seigr::seigr_cell::_RE_License_default_instance_);
}
inline const ::seigr::seigr_cell::RE_License& SeigrCell::re_license() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.re_license)
  return _internal_re_license();
}
inline void SeigrCell::unsafe_arena_set_allocated_re_license(::seigr::seigr_cell::RE_License* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.re_license_);
  }
  _impl_.re_license_ = reinterpret_cast<::seigr::seigr_cell::RE_License*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.seigr_cell.SeigrCell.re_license)
}
inline ::seigr::seigr_cell::RE_License* SeigrCell::release_re_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seigr::seigr_cell::RE_License* released = _impl_.re_license_;
  _impl_.re_license_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::seigr_cell::RE_License* SeigrCell::unsafe_arena_release_re_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.SeigrCell.re_license)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::seigr::seigr_cell::RE_License* temp = _impl_.re_license_;
  _impl_.re_license_ = nullptr;
  return temp;
}
inline ::seigr::seigr_cell::RE_License* SeigrCell::_internal_mutable_re_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.re_license_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::seigr_cell::RE_License>(GetArena());
    _impl_.re_license_ = reinterpret_cast<::seigr::seigr_cell::RE_License*>(p);
  }
  return _impl_.re_license_;
}
inline ::seigr::seigr_cell::RE_License* SeigrCell::mutable_re_license() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::seigr::seigr_cell::RE_License* _msg = _internal_mutable_re_license();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.re_license)
  return _msg;
}
inline void SeigrCell::set_allocated_re_license(::seigr::seigr_cell::RE_License* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.re_license_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.re_license_ = reinterpret_cast<::seigr::seigr_cell::RE_License*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.SeigrCell.re_license)
}

// repeated .seigr.seigr_cell.CustomProperty custom_properties = 7;
inline int SeigrCell::_internal_custom_properties_size() const {
  return _internal_custom_properties().size();
}
inline int SeigrCell::custom_properties_size() const {
  return _internal_custom_properties_size();
}
inline void SeigrCell::clear_custom_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_properties_.Clear();
}
inline ::seigr::seigr_cell::CustomProperty* SeigrCell::mutable_custom_properties(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.SeigrCell.custom_properties)
  return _internal_mutable_custom_properties()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>* SeigrCell::mutable_custom_properties()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_cell.SeigrCell.custom_properties)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_custom_properties();
}
inline const ::seigr::seigr_cell::CustomProperty& SeigrCell::custom_properties(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.SeigrCell.custom_properties)
  return _internal_custom_properties().Get(index);
}
inline ::seigr::seigr_cell::CustomProperty* SeigrCell::add_custom_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::seigr_cell::CustomProperty* _add = _internal_mutable_custom_properties()->Add();
  // @@protoc_insertion_point(field_add:seigr.seigr_cell.SeigrCell.custom_properties)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>& SeigrCell::custom_properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_cell.SeigrCell.custom_properties)
  return _internal_custom_properties();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>&
SeigrCell::_internal_custom_properties() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_properties_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::CustomProperty>*
SeigrCell::_internal_mutable_custom_properties() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.custom_properties_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// string cell_id = 1;
inline void Metadata::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& Metadata::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.cell_id)
}
inline std::string* Metadata::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.cell_id)
  return _s;
}
inline const std::string& Metadata::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void Metadata::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* Metadata::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.cell_id)
  return _impl_.cell_id_.Release();
}
inline void Metadata::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.cell_id)
}

// string contributor_id = 2;
inline void Metadata::clear_contributor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributor_id_.ClearToEmpty();
}
inline const std::string& Metadata::contributor_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.contributor_id)
  return _internal_contributor_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_contributor_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributor_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.contributor_id)
}
inline std::string* Metadata::mutable_contributor_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributor_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.contributor_id)
  return _s;
}
inline const std::string& Metadata::_internal_contributor_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributor_id_.Get();
}
inline void Metadata::_internal_set_contributor_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributor_id_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_contributor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributor_id_.Mutable( GetArena());
}
inline std::string* Metadata::release_contributor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.contributor_id)
  return _impl_.contributor_id_.Release();
}
inline void Metadata::set_allocated_contributor_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributor_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contributor_id_.IsDefault()) {
    _impl_.contributor_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.contributor_id)
}

// string timestamp = 3;
inline void Metadata::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Metadata::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.timestamp)
}
inline std::string* Metadata::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.timestamp)
  return _s;
}
inline const std::string& Metadata::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Metadata::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Metadata::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Metadata::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.timestamp)
}

// string version = 4;
inline void Metadata::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Metadata::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.version)
}
inline std::string* Metadata::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.version)
  return _s;
}
inline const std::string& Metadata::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void Metadata::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Metadata::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.version)
  return _impl_.version_.Release();
}
inline void Metadata::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.version)
}

// string hash_link = 5;
inline void Metadata::clear_hash_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_link_.ClearToEmpty();
}
inline const std::string& Metadata::hash_link() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.hash_link)
  return _internal_hash_link();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_hash_link(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_link_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.hash_link)
}
inline std::string* Metadata::mutable_hash_link() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash_link();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.hash_link)
  return _s;
}
inline const std::string& Metadata::_internal_hash_link() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_link_.Get();
}
inline void Metadata::_internal_set_hash_link(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_link_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_hash_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_link_.Mutable( GetArena());
}
inline std::string* Metadata::release_hash_link() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.hash_link)
  return _impl_.hash_link_.Release();
}
inline void Metadata::set_allocated_hash_link(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_link_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_link_.IsDefault()) {
    _impl_.hash_link_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.hash_link)
}

// string data_hash = 6;
inline void Metadata::clear_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.ClearToEmpty();
}
inline const std::string& Metadata::data_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.data_hash)
  return _internal_data_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_data_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.data_hash)
}
inline std::string* Metadata::mutable_data_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_hash();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.data_hash)
  return _s;
}
inline const std::string& Metadata::_internal_data_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_hash_.Get();
}
inline void Metadata::_internal_set_data_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_hash_.Mutable( GetArena());
}
inline std::string* Metadata::release_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.data_hash)
  return _impl_.data_hash_.Release();
}
inline void Metadata::set_allocated_data_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_hash_.IsDefault()) {
    _impl_.data_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.data_hash)
}

// string lineage_hash = 7;
inline void Metadata::clear_lineage_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_hash_.ClearToEmpty();
}
inline const std::string& Metadata::lineage_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.lineage_hash)
  return _internal_lineage_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_lineage_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.lineage_hash)
}
inline std::string* Metadata::mutable_lineage_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lineage_hash();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.lineage_hash)
  return _s;
}
inline const std::string& Metadata::_internal_lineage_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lineage_hash_.Get();
}
inline void Metadata::_internal_set_lineage_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_hash_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_lineage_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.lineage_hash_.Mutable( GetArena());
}
inline std::string* Metadata::release_lineage_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.lineage_hash)
  return _impl_.lineage_hash_.Release();
}
inline void Metadata::set_allocated_lineage_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.lineage_hash_.IsDefault()) {
    _impl_.lineage_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.lineage_hash)
}

// string access_level = 8;
inline void Metadata::clear_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.ClearToEmpty();
}
inline const std::string& Metadata::access_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.access_level)
  return _internal_access_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_access_level(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.access_level)
}
inline std::string* Metadata::mutable_access_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_level();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.access_level)
  return _s;
}
inline const std::string& Metadata::_internal_access_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_level_.Get();
}
inline void Metadata::_internal_set_access_level(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_level_.Mutable( GetArena());
}
inline std::string* Metadata::release_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.access_level)
  return _impl_.access_level_.Release();
}
inline void Metadata::set_allocated_access_level(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_level_.IsDefault()) {
    _impl_.access_level_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.access_level)
}

// repeated string tags = 9;
inline int Metadata::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Metadata::tags_size() const {
  return _internal_tags_size();
}
inline void Metadata::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* Metadata::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.seigr_cell.Metadata.tags)
  return _s;
}
inline const std::string& Metadata::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.tags)
  return _internal_tags().Get(index);
}
inline std::string* Metadata::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Metadata::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.tags)
}
template <typename Arg_, typename... Args_>
inline void Metadata::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.seigr_cell.Metadata.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_cell.Metadata.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Metadata::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_cell.Metadata.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Metadata::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// string compression_algorithm = 10;
inline void Metadata::clear_compression_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_algorithm_.ClearToEmpty();
}
inline const std::string& Metadata::compression_algorithm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.compression_algorithm)
  return _internal_compression_algorithm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_compression_algorithm(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_algorithm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.compression_algorithm)
}
inline std::string* Metadata::mutable_compression_algorithm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compression_algorithm();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.compression_algorithm)
  return _s;
}
inline const std::string& Metadata::_internal_compression_algorithm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compression_algorithm_.Get();
}
inline void Metadata::_internal_set_compression_algorithm(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_algorithm_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_compression_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compression_algorithm_.Mutable( GetArena());
}
inline std::string* Metadata::release_compression_algorithm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.compression_algorithm)
  return _impl_.compression_algorithm_.Release();
}
inline void Metadata::set_allocated_compression_algorithm(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compression_algorithm_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compression_algorithm_.IsDefault()) {
    _impl_.compression_algorithm_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.compression_algorithm)
}

// bool is_encrypted = 11;
inline void Metadata::clear_is_encrypted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_encrypted_ = false;
}
inline bool Metadata::is_encrypted() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.is_encrypted)
  return _internal_is_encrypted();
}
inline void Metadata::set_is_encrypted(bool value) {
  _internal_set_is_encrypted(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.is_encrypted)
}
inline bool Metadata::_internal_is_encrypted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_encrypted_;
}
inline void Metadata::_internal_set_is_encrypted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_encrypted_ = value;
}

// string security_classification = 12;
inline void Metadata::clear_security_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_classification_.ClearToEmpty();
}
inline const std::string& Metadata::security_classification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Metadata.security_classification)
  return _internal_security_classification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_security_classification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_classification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Metadata.security_classification)
}
inline std::string* Metadata::mutable_security_classification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_security_classification();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Metadata.security_classification)
  return _s;
}
inline const std::string& Metadata::_internal_security_classification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.security_classification_.Get();
}
inline void Metadata::_internal_set_security_classification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_classification_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_security_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.security_classification_.Mutable( GetArena());
}
inline std::string* Metadata::release_security_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Metadata.security_classification)
  return _impl_.security_classification_.Release();
}
inline void Metadata::set_allocated_security_classification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_classification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.security_classification_.IsDefault()) {
    _impl_.security_classification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Metadata.security_classification)
}

// map<string, string> metadata_extras = 13;
inline int Metadata::_internal_metadata_extras_size() const {
  return _internal_metadata_extras().size();
}
inline int Metadata::metadata_extras_size() const {
  return _internal_metadata_extras_size();
}
inline void Metadata::clear_metadata_extras() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_extras_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metadata::_internal_metadata_extras() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_extras_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metadata::metadata_extras() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.seigr_cell.Metadata.metadata_extras)
  return _internal_metadata_extras();
}
inline ::google::protobuf::Map<std::string, std::string>* Metadata::_internal_mutable_metadata_extras() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_extras_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Metadata::mutable_metadata_extras() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.seigr_cell.Metadata.metadata_extras)
  return _internal_mutable_metadata_extras();
}

// -------------------------------------------------------------------

// CoordinateIndex

// int32 x = 1;
inline void CoordinateIndex::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline ::int32_t CoordinateIndex::x() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CoordinateIndex.x)
  return _internal_x();
}
inline void CoordinateIndex::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CoordinateIndex.x)
}
inline ::int32_t CoordinateIndex::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void CoordinateIndex::_internal_set_x(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// int32 y = 2;
inline void CoordinateIndex::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline ::int32_t CoordinateIndex::y() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CoordinateIndex.y)
  return _internal_y();
}
inline void CoordinateIndex::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CoordinateIndex.y)
}
inline ::int32_t CoordinateIndex::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void CoordinateIndex::_internal_set_y(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// int32 z = 3;
inline void CoordinateIndex::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline ::int32_t CoordinateIndex::z() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CoordinateIndex.z)
  return _internal_z();
}
inline void CoordinateIndex::set_z(::int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CoordinateIndex.z)
}
inline ::int32_t CoordinateIndex::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void CoordinateIndex::_internal_set_z(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// string t = 4;
inline void CoordinateIndex::clear_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_.ClearToEmpty();
}
inline const std::string& CoordinateIndex::t() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CoordinateIndex.t)
  return _internal_t();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoordinateIndex::set_t(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CoordinateIndex.t)
}
inline std::string* CoordinateIndex::mutable_t() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.CoordinateIndex.t)
  return _s;
}
inline const std::string& CoordinateIndex::_internal_t() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.t_.Get();
}
inline void CoordinateIndex::_internal_set_t(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_.Set(value, GetArena());
}
inline std::string* CoordinateIndex::_internal_mutable_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.t_.Mutable( GetArena());
}
inline std::string* CoordinateIndex::release_t() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.CoordinateIndex.t)
  return _impl_.t_.Release();
}
inline void CoordinateIndex::set_allocated_t(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.t_.IsDefault()) {
    _impl_.t_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.CoordinateIndex.t)
}

// string reference_frame = 5;
inline void CoordinateIndex::clear_reference_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_frame_.ClearToEmpty();
}
inline const std::string& CoordinateIndex::reference_frame() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CoordinateIndex.reference_frame)
  return _internal_reference_frame();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CoordinateIndex::set_reference_frame(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_frame_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CoordinateIndex.reference_frame)
}
inline std::string* CoordinateIndex::mutable_reference_frame() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reference_frame();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.CoordinateIndex.reference_frame)
  return _s;
}
inline const std::string& CoordinateIndex::_internal_reference_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_frame_.Get();
}
inline void CoordinateIndex::_internal_set_reference_frame(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_frame_.Set(value, GetArena());
}
inline std::string* CoordinateIndex::_internal_mutable_reference_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reference_frame_.Mutable( GetArena());
}
inline std::string* CoordinateIndex::release_reference_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.CoordinateIndex.reference_frame)
  return _impl_.reference_frame_.Release();
}
inline void CoordinateIndex::set_allocated_reference_frame(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_frame_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reference_frame_.IsDefault()) {
    _impl_.reference_frame_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.CoordinateIndex.reference_frame)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RE_License

// string license_type = 1;
inline void RE_License::clear_license_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_type_.ClearToEmpty();
}
inline const std::string& RE_License::license_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.license_type)
  return _internal_license_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RE_License::set_license_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RE_License.license_type)
}
inline std::string* RE_License::mutable_license_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_license_type();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.license_type)
  return _s;
}
inline const std::string& RE_License::_internal_license_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.license_type_.Get();
}
inline void RE_License::_internal_set_license_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_type_.Set(value, GetArena());
}
inline std::string* RE_License::_internal_mutable_license_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.license_type_.Mutable( GetArena());
}
inline std::string* RE_License::release_license_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RE_License.license_type)
  return _impl_.license_type_.Release();
}
inline void RE_License::set_allocated_license_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.license_type_.IsDefault()) {
    _impl_.license_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RE_License.license_type)
}

// string terms = 2;
inline void RE_License::clear_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.ClearToEmpty();
}
inline const std::string& RE_License::terms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.terms)
  return _internal_terms();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RE_License::set_terms(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RE_License.terms)
}
inline std::string* RE_License::mutable_terms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_terms();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.terms)
  return _s;
}
inline const std::string& RE_License::_internal_terms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terms_.Get();
}
inline void RE_License::_internal_set_terms(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.Set(value, GetArena());
}
inline std::string* RE_License::_internal_mutable_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.terms_.Mutable( GetArena());
}
inline std::string* RE_License::release_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RE_License.terms)
  return _impl_.terms_.Release();
}
inline void RE_License::set_allocated_terms(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.terms_.IsDefault()) {
    _impl_.terms_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RE_License.terms)
}

// string license_id = 3;
inline void RE_License::clear_license_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_id_.ClearToEmpty();
}
inline const std::string& RE_License::license_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.license_id)
  return _internal_license_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RE_License::set_license_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RE_License.license_id)
}
inline std::string* RE_License::mutable_license_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_license_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.license_id)
  return _s;
}
inline const std::string& RE_License::_internal_license_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.license_id_.Get();
}
inline void RE_License::_internal_set_license_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_id_.Set(value, GetArena());
}
inline std::string* RE_License::_internal_mutable_license_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.license_id_.Mutable( GetArena());
}
inline std::string* RE_License::release_license_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RE_License.license_id)
  return _impl_.license_id_.Release();
}
inline void RE_License::set_allocated_license_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.license_id_.IsDefault()) {
    _impl_.license_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RE_License.license_id)
}

// repeated string contributors = 4;
inline int RE_License::_internal_contributors_size() const {
  return _internal_contributors().size();
}
inline int RE_License::contributors_size() const {
  return _internal_contributors_size();
}
inline void RE_License::clear_contributors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributors_.Clear();
}
inline std::string* RE_License::add_contributors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_contributors()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.seigr_cell.RE_License.contributors)
  return _s;
}
inline const std::string& RE_License::contributors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.contributors)
  return _internal_contributors().Get(index);
}
inline std::string* RE_License::mutable_contributors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.contributors)
  return _internal_mutable_contributors()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RE_License::set_contributors(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_contributors()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RE_License.contributors)
}
template <typename Arg_, typename... Args_>
inline void RE_License::add_contributors(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_contributors(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.seigr_cell.RE_License.contributors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RE_License::contributors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_cell.RE_License.contributors)
  return _internal_contributors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RE_License::mutable_contributors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_cell.RE_License.contributors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contributors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RE_License::_internal_contributors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RE_License::_internal_mutable_contributors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contributors_;
}

// string ethical_use_guideline = 5;
inline void RE_License::clear_ethical_use_guideline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethical_use_guideline_.ClearToEmpty();
}
inline const std::string& RE_License::ethical_use_guideline() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.ethical_use_guideline)
  return _internal_ethical_use_guideline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RE_License::set_ethical_use_guideline(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethical_use_guideline_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RE_License.ethical_use_guideline)
}
inline std::string* RE_License::mutable_ethical_use_guideline() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ethical_use_guideline();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.ethical_use_guideline)
  return _s;
}
inline const std::string& RE_License::_internal_ethical_use_guideline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ethical_use_guideline_.Get();
}
inline void RE_License::_internal_set_ethical_use_guideline(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethical_use_guideline_.Set(value, GetArena());
}
inline std::string* RE_License::_internal_mutable_ethical_use_guideline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ethical_use_guideline_.Mutable( GetArena());
}
inline std::string* RE_License::release_ethical_use_guideline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RE_License.ethical_use_guideline)
  return _impl_.ethical_use_guideline_.Release();
}
inline void RE_License::set_allocated_ethical_use_guideline(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ethical_use_guideline_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ethical_use_guideline_.IsDefault()) {
    _impl_.ethical_use_guideline_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RE_License.ethical_use_guideline)
}

// .seigr.seigr_cell.Permissions permissions = 6;
inline bool RE_License::has_permissions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permissions_ != nullptr);
  return value;
}
inline void RE_License::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permissions_ != nullptr) _impl_.permissions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::seigr_cell::Permissions& RE_License::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::seigr_cell::Permissions* p = _impl_.permissions_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::seigr_cell::Permissions&>(::seigr::seigr_cell::_Permissions_default_instance_);
}
inline const ::seigr::seigr_cell::Permissions& RE_License::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RE_License.permissions)
  return _internal_permissions();
}
inline void RE_License::unsafe_arena_set_allocated_permissions(::seigr::seigr_cell::Permissions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permissions_);
  }
  _impl_.permissions_ = reinterpret_cast<::seigr::seigr_cell::Permissions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.seigr_cell.RE_License.permissions)
}
inline ::seigr::seigr_cell::Permissions* RE_License::release_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::Permissions* released = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::seigr_cell::Permissions* RE_License::unsafe_arena_release_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RE_License.permissions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::Permissions* temp = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
  return temp;
}
inline ::seigr::seigr_cell::Permissions* RE_License::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permissions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::seigr_cell::Permissions>(GetArena());
    _impl_.permissions_ = reinterpret_cast<::seigr::seigr_cell::Permissions*>(p);
  }
  return _impl_.permissions_;
}
inline ::seigr::seigr_cell::Permissions* RE_License::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::seigr_cell::Permissions* _msg = _internal_mutable_permissions();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RE_License.permissions)
  return _msg;
}
inline void RE_License::set_allocated_permissions(::seigr::seigr_cell::Permissions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.permissions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.permissions_ = reinterpret_cast<::seigr::seigr_cell::Permissions*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RE_License.permissions)
}

// map<string, string> license_metadata = 7;
inline int RE_License::_internal_license_metadata_size() const {
  return _internal_license_metadata().size();
}
inline int RE_License::license_metadata_size() const {
  return _internal_license_metadata_size();
}
inline void RE_License::clear_license_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RE_License::_internal_license_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.license_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RE_License::license_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.seigr_cell.RE_License.license_metadata)
  return _internal_license_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RE_License::_internal_mutable_license_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.license_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RE_License::mutable_license_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.seigr_cell.RE_License.license_metadata)
  return _internal_mutable_license_metadata();
}

// -------------------------------------------------------------------

// Permissions

// bool allow_modification = 1;
inline void Permissions::clear_allow_modification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_modification_ = false;
}
inline bool Permissions::allow_modification() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.allow_modification)
  return _internal_allow_modification();
}
inline void Permissions::set_allow_modification(bool value) {
  _internal_set_allow_modification(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.allow_modification)
}
inline bool Permissions::_internal_allow_modification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_modification_;
}
inline void Permissions::_internal_set_allow_modification(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_modification_ = value;
}

// bool allow_derivatives = 2;
inline void Permissions::clear_allow_derivatives() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_derivatives_ = false;
}
inline bool Permissions::allow_derivatives() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.allow_derivatives)
  return _internal_allow_derivatives();
}
inline void Permissions::set_allow_derivatives(bool value) {
  _internal_set_allow_derivatives(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.allow_derivatives)
}
inline bool Permissions::_internal_allow_derivatives() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_derivatives_;
}
inline void Permissions::_internal_set_allow_derivatives(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_derivatives_ = value;
}

// bool allow_commercial_use = 3;
inline void Permissions::clear_allow_commercial_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_commercial_use_ = false;
}
inline bool Permissions::allow_commercial_use() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.allow_commercial_use)
  return _internal_allow_commercial_use();
}
inline void Permissions::set_allow_commercial_use(bool value) {
  _internal_set_allow_commercial_use(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.allow_commercial_use)
}
inline bool Permissions::_internal_allow_commercial_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_commercial_use_;
}
inline void Permissions::_internal_set_allow_commercial_use(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_commercial_use_ = value;
}

// string geographic_restriction = 4;
inline void Permissions::clear_geographic_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geographic_restriction_.ClearToEmpty();
}
inline const std::string& Permissions::geographic_restriction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.geographic_restriction)
  return _internal_geographic_restriction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Permissions::set_geographic_restriction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geographic_restriction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.geographic_restriction)
}
inline std::string* Permissions::mutable_geographic_restriction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_geographic_restriction();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Permissions.geographic_restriction)
  return _s;
}
inline const std::string& Permissions::_internal_geographic_restriction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.geographic_restriction_.Get();
}
inline void Permissions::_internal_set_geographic_restriction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geographic_restriction_.Set(value, GetArena());
}
inline std::string* Permissions::_internal_mutable_geographic_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.geographic_restriction_.Mutable( GetArena());
}
inline std::string* Permissions::release_geographic_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Permissions.geographic_restriction)
  return _impl_.geographic_restriction_.Release();
}
inline void Permissions::set_allocated_geographic_restriction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geographic_restriction_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.geographic_restriction_.IsDefault()) {
    _impl_.geographic_restriction_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Permissions.geographic_restriction)
}

// string temporal_restriction = 5;
inline void Permissions::clear_temporal_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_restriction_.ClearToEmpty();
}
inline const std::string& Permissions::temporal_restriction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.temporal_restriction)
  return _internal_temporal_restriction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Permissions::set_temporal_restriction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_restriction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.temporal_restriction)
}
inline std::string* Permissions::mutable_temporal_restriction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_temporal_restriction();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Permissions.temporal_restriction)
  return _s;
}
inline const std::string& Permissions::_internal_temporal_restriction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temporal_restriction_.Get();
}
inline void Permissions::_internal_set_temporal_restriction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_restriction_.Set(value, GetArena());
}
inline std::string* Permissions::_internal_mutable_temporal_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.temporal_restriction_.Mutable( GetArena());
}
inline std::string* Permissions::release_temporal_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Permissions.temporal_restriction)
  return _impl_.temporal_restriction_.Release();
}
inline void Permissions::set_allocated_temporal_restriction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporal_restriction_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.temporal_restriction_.IsDefault()) {
    _impl_.temporal_restriction_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Permissions.temporal_restriction)
}

// string compliance_tag = 6;
inline void Permissions::clear_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.ClearToEmpty();
}
inline const std::string& Permissions::compliance_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.Permissions.compliance_tag)
  return _internal_compliance_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Permissions::set_compliance_tag(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.Permissions.compliance_tag)
}
inline std::string* Permissions::mutable_compliance_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_tag();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.Permissions.compliance_tag)
  return _s;
}
inline const std::string& Permissions::_internal_compliance_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_tag_.Get();
}
inline void Permissions::_internal_set_compliance_tag(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(value, GetArena());
}
inline std::string* Permissions::_internal_mutable_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_tag_.Mutable( GetArena());
}
inline std::string* Permissions::release_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.Permissions.compliance_tag)
  return _impl_.compliance_tag_.Release();
}
inline void Permissions::set_allocated_compliance_tag(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_tag_.IsDefault()) {
    _impl_.compliance_tag_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.Permissions.compliance_tag)
}

// -------------------------------------------------------------------

// CustomProperty

// string key = 1;
inline void CustomProperty::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CustomProperty::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CustomProperty.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomProperty::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CustomProperty.key)
}
inline std::string* CustomProperty::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.CustomProperty.key)
  return _s;
}
inline const std::string& CustomProperty::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void CustomProperty::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* CustomProperty::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* CustomProperty::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.CustomProperty.key)
  return _impl_.key_.Release();
}
inline void CustomProperty::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.CustomProperty.key)
}

// string value = 2;
inline void CustomProperty::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& CustomProperty::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CustomProperty.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomProperty::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CustomProperty.value)
}
inline std::string* CustomProperty::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.CustomProperty.value)
  return _s;
}
inline const std::string& CustomProperty::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void CustomProperty::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* CustomProperty::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* CustomProperty::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.CustomProperty.value)
  return _impl_.value_.Release();
}
inline void CustomProperty::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.CustomProperty.value)
}

// string property_type = 3;
inline void CustomProperty::clear_property_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_type_.ClearToEmpty();
}
inline const std::string& CustomProperty::property_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CustomProperty.property_type)
  return _internal_property_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomProperty::set_property_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CustomProperty.property_type)
}
inline std::string* CustomProperty::mutable_property_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_property_type();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.CustomProperty.property_type)
  return _s;
}
inline const std::string& CustomProperty::_internal_property_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.property_type_.Get();
}
inline void CustomProperty::_internal_set_property_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_type_.Set(value, GetArena());
}
inline std::string* CustomProperty::_internal_mutable_property_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.property_type_.Mutable( GetArena());
}
inline std::string* CustomProperty::release_property_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.CustomProperty.property_type)
  return _impl_.property_type_.Release();
}
inline void CustomProperty::set_allocated_property_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.property_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.property_type_.IsDefault()) {
    _impl_.property_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.CustomProperty.property_type)
}

// bool is_sensitive = 4;
inline void CustomProperty::clear_is_sensitive() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_sensitive_ = false;
}
inline bool CustomProperty::is_sensitive() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.CustomProperty.is_sensitive)
  return _internal_is_sensitive();
}
inline void CustomProperty::set_is_sensitive(bool value) {
  _internal_set_is_sensitive(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.CustomProperty.is_sensitive)
}
inline bool CustomProperty::_internal_is_sensitive() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_sensitive_;
}
inline void CustomProperty::_internal_set_is_sensitive(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_sensitive_ = value;
}

// -------------------------------------------------------------------

// ValidateSeigrCellRequest

// string cell_id = 1;
inline void ValidateSeigrCellRequest::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& ValidateSeigrCellRequest::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ValidateSeigrCellRequest.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidateSeigrCellRequest::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ValidateSeigrCellRequest.cell_id)
}
inline std::string* ValidateSeigrCellRequest::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ValidateSeigrCellRequest.cell_id)
  return _s;
}
inline const std::string& ValidateSeigrCellRequest::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void ValidateSeigrCellRequest::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* ValidateSeigrCellRequest::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* ValidateSeigrCellRequest::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.ValidateSeigrCellRequest.cell_id)
  return _impl_.cell_id_.Release();
}
inline void ValidateSeigrCellRequest::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.ValidateSeigrCellRequest.cell_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ValidateSeigrCellResponse

// bool is_valid = 1;
inline void ValidateSeigrCellResponse::clear_is_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = false;
}
inline bool ValidateSeigrCellResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ValidateSeigrCellResponse.is_valid)
  return _internal_is_valid();
}
inline void ValidateSeigrCellResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ValidateSeigrCellResponse.is_valid)
}
inline bool ValidateSeigrCellResponse::_internal_is_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_valid_;
}
inline void ValidateSeigrCellResponse::_internal_set_is_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = value;
}

// string validation_message = 2;
inline void ValidateSeigrCellResponse::clear_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.ClearToEmpty();
}
inline const std::string& ValidateSeigrCellResponse::validation_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ValidateSeigrCellResponse.validation_message)
  return _internal_validation_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidateSeigrCellResponse::set_validation_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ValidateSeigrCellResponse.validation_message)
}
inline std::string* ValidateSeigrCellResponse::mutable_validation_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ValidateSeigrCellResponse.validation_message)
  return _s;
}
inline const std::string& ValidateSeigrCellResponse::_internal_validation_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_message_.Get();
}
inline void ValidateSeigrCellResponse::_internal_set_validation_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.Set(value, GetArena());
}
inline std::string* ValidateSeigrCellResponse::_internal_mutable_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_message_.Mutable( GetArena());
}
inline std::string* ValidateSeigrCellResponse::release_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.ValidateSeigrCellResponse.validation_message)
  return _impl_.validation_message_.Release();
}
inline void ValidateSeigrCellResponse::set_allocated_validation_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_message_.IsDefault()) {
    _impl_.validation_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.ValidateSeigrCellResponse.validation_message)
}

// map<string, string> validation_metadata = 3;
inline int ValidateSeigrCellResponse::_internal_validation_metadata_size() const {
  return _internal_validation_metadata().size();
}
inline int ValidateSeigrCellResponse::validation_metadata_size() const {
  return _internal_validation_metadata_size();
}
inline void ValidateSeigrCellResponse::clear_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ValidateSeigrCellResponse::_internal_validation_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ValidateSeigrCellResponse::validation_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.seigr_cell.ValidateSeigrCellResponse.validation_metadata)
  return _internal_validation_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ValidateSeigrCellResponse::_internal_mutable_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ValidateSeigrCellResponse::mutable_validation_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.seigr_cell.ValidateSeigrCellResponse.validation_metadata)
  return _internal_mutable_validation_metadata();
}

// -------------------------------------------------------------------

// RetrieveSeigrCellRequest

// string cell_id = 1;
inline void RetrieveSeigrCellRequest::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& RetrieveSeigrCellRequest::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RetrieveSeigrCellRequest.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveSeigrCellRequest::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RetrieveSeigrCellRequest.cell_id)
}
inline std::string* RetrieveSeigrCellRequest::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RetrieveSeigrCellRequest.cell_id)
  return _s;
}
inline const std::string& RetrieveSeigrCellRequest::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void RetrieveSeigrCellRequest::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* RetrieveSeigrCellRequest::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* RetrieveSeigrCellRequest::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RetrieveSeigrCellRequest.cell_id)
  return _impl_.cell_id_.Release();
}
inline void RetrieveSeigrCellRequest::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RetrieveSeigrCellRequest.cell_id)
}

// -------------------------------------------------------------------

// RetrieveSeigrCellResponse

// .seigr.seigr_cell.SeigrCell cell = 1;
inline bool RetrieveSeigrCellResponse::has_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_ != nullptr);
  return value;
}
inline void RetrieveSeigrCellResponse::clear_cell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cell_ != nullptr) _impl_.cell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::seigr_cell::SeigrCell& RetrieveSeigrCellResponse::_internal_cell() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::seigr_cell::SeigrCell* p = _impl_.cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::seigr_cell::SeigrCell&>(::seigr::seigr_cell::_SeigrCell_default_instance_);
}
inline const ::seigr::seigr_cell::SeigrCell& RetrieveSeigrCellResponse::cell() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RetrieveSeigrCellResponse.cell)
  return _internal_cell();
}
inline void RetrieveSeigrCellResponse::unsafe_arena_set_allocated_cell(::seigr::seigr_cell::SeigrCell* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cell_);
  }
  _impl_.cell_ = reinterpret_cast<::seigr::seigr_cell::SeigrCell*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.seigr_cell.RetrieveSeigrCellResponse.cell)
}
inline ::seigr::seigr_cell::SeigrCell* RetrieveSeigrCellResponse::release_cell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::SeigrCell* released = _impl_.cell_;
  _impl_.cell_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::seigr_cell::SeigrCell* RetrieveSeigrCellResponse::unsafe_arena_release_cell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RetrieveSeigrCellResponse.cell)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::seigr_cell::SeigrCell* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
  return temp;
}
inline ::seigr::seigr_cell::SeigrCell* RetrieveSeigrCellResponse::_internal_mutable_cell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cell_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::seigr_cell::SeigrCell>(GetArena());
    _impl_.cell_ = reinterpret_cast<::seigr::seigr_cell::SeigrCell*>(p);
  }
  return _impl_.cell_;
}
inline ::seigr::seigr_cell::SeigrCell* RetrieveSeigrCellResponse::mutable_cell() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::seigr_cell::SeigrCell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RetrieveSeigrCellResponse.cell)
  return _msg;
}
inline void RetrieveSeigrCellResponse::set_allocated_cell(::seigr::seigr_cell::SeigrCell* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cell_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cell_ = reinterpret_cast<::seigr::seigr_cell::SeigrCell*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RetrieveSeigrCellResponse.cell)
}

// string retrieval_timestamp = 2;
inline void RetrieveSeigrCellResponse::clear_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.ClearToEmpty();
}
inline const std::string& RetrieveSeigrCellResponse::retrieval_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.RetrieveSeigrCellResponse.retrieval_timestamp)
  return _internal_retrieval_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveSeigrCellResponse::set_retrieval_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.RetrieveSeigrCellResponse.retrieval_timestamp)
}
inline std::string* RetrieveSeigrCellResponse::mutable_retrieval_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retrieval_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.RetrieveSeigrCellResponse.retrieval_timestamp)
  return _s;
}
inline const std::string& RetrieveSeigrCellResponse::_internal_retrieval_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retrieval_timestamp_.Get();
}
inline void RetrieveSeigrCellResponse::_internal_set_retrieval_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.Set(value, GetArena());
}
inline std::string* RetrieveSeigrCellResponse::_internal_mutable_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retrieval_timestamp_.Mutable( GetArena());
}
inline std::string* RetrieveSeigrCellResponse::release_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.RetrieveSeigrCellResponse.retrieval_timestamp)
  return _impl_.retrieval_timestamp_.Release();
}
inline void RetrieveSeigrCellResponse::set_allocated_retrieval_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.retrieval_timestamp_.IsDefault()) {
    _impl_.retrieval_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.RetrieveSeigrCellResponse.retrieval_timestamp)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdateSeigrCellRequest

// string cell_id = 1;
inline void UpdateSeigrCellRequest::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& UpdateSeigrCellRequest::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.UpdateSeigrCellRequest.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSeigrCellRequest::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.UpdateSeigrCellRequest.cell_id)
}
inline std::string* UpdateSeigrCellRequest::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.UpdateSeigrCellRequest.cell_id)
  return _s;
}
inline const std::string& UpdateSeigrCellRequest::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void UpdateSeigrCellRequest::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* UpdateSeigrCellRequest::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* UpdateSeigrCellRequest::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.UpdateSeigrCellRequest.cell_id)
  return _impl_.cell_id_.Release();
}
inline void UpdateSeigrCellRequest::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.UpdateSeigrCellRequest.cell_id)
}

// map<string, string> updates = 2;
inline int UpdateSeigrCellRequest::_internal_updates_size() const {
  return _internal_updates().size();
}
inline int UpdateSeigrCellRequest::updates_size() const {
  return _internal_updates_size();
}
inline void UpdateSeigrCellRequest::clear_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updates_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UpdateSeigrCellRequest::_internal_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updates_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UpdateSeigrCellRequest::updates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.seigr_cell.UpdateSeigrCellRequest.updates)
  return _internal_updates();
}
inline ::google::protobuf::Map<std::string, std::string>* UpdateSeigrCellRequest::_internal_mutable_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.updates_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UpdateSeigrCellRequest::mutable_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.seigr_cell.UpdateSeigrCellRequest.updates)
  return _internal_mutable_updates();
}

// -------------------------------------------------------------------

// UpdateSeigrCellResponse

// bool success = 1;
inline void UpdateSeigrCellResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UpdateSeigrCellResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.UpdateSeigrCellResponse.success)
  return _internal_success();
}
inline void UpdateSeigrCellResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.UpdateSeigrCellResponse.success)
}
inline bool UpdateSeigrCellResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UpdateSeigrCellResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void UpdateSeigrCellResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateSeigrCellResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.UpdateSeigrCellResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSeigrCellResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.UpdateSeigrCellResponse.message)
}
inline std::string* UpdateSeigrCellResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.UpdateSeigrCellResponse.message)
  return _s;
}
inline const std::string& UpdateSeigrCellResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UpdateSeigrCellResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UpdateSeigrCellResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UpdateSeigrCellResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.UpdateSeigrCellResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateSeigrCellResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.UpdateSeigrCellResponse.message)
}

// -------------------------------------------------------------------

// ListSeigrCellsRequest

// repeated string tags = 1;
inline int ListSeigrCellsRequest::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int ListSeigrCellsRequest::tags_size() const {
  return _internal_tags_size();
}
inline void ListSeigrCellsRequest::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* ListSeigrCellsRequest::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.seigr_cell.ListSeigrCellsRequest.tags)
  return _s;
}
inline const std::string& ListSeigrCellsRequest::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ListSeigrCellsRequest.tags)
  return _internal_tags().Get(index);
}
inline std::string* ListSeigrCellsRequest::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ListSeigrCellsRequest.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ListSeigrCellsRequest::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ListSeigrCellsRequest.tags)
}
template <typename Arg_, typename... Args_>
inline void ListSeigrCellsRequest::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.seigr_cell.ListSeigrCellsRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListSeigrCellsRequest::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_cell.ListSeigrCellsRequest.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListSeigrCellsRequest::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_cell.ListSeigrCellsRequest.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListSeigrCellsRequest::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListSeigrCellsRequest::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// string access_level = 2;
inline void ListSeigrCellsRequest::clear_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.ClearToEmpty();
}
inline const std::string& ListSeigrCellsRequest::access_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ListSeigrCellsRequest.access_level)
  return _internal_access_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListSeigrCellsRequest::set_access_level(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ListSeigrCellsRequest.access_level)
}
inline std::string* ListSeigrCellsRequest::mutable_access_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_level();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ListSeigrCellsRequest.access_level)
  return _s;
}
inline const std::string& ListSeigrCellsRequest::_internal_access_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_level_.Get();
}
inline void ListSeigrCellsRequest::_internal_set_access_level(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.Set(value, GetArena());
}
inline std::string* ListSeigrCellsRequest::_internal_mutable_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_level_.Mutable( GetArena());
}
inline std::string* ListSeigrCellsRequest::release_access_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.ListSeigrCellsRequest.access_level)
  return _impl_.access_level_.Release();
}
inline void ListSeigrCellsRequest::set_allocated_access_level(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_level_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_level_.IsDefault()) {
    _impl_.access_level_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.ListSeigrCellsRequest.access_level)
}

// bool show_only_active = 3;
inline void ListSeigrCellsRequest::clear_show_only_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_only_active_ = false;
}
inline bool ListSeigrCellsRequest::show_only_active() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ListSeigrCellsRequest.show_only_active)
  return _internal_show_only_active();
}
inline void ListSeigrCellsRequest::set_show_only_active(bool value) {
  _internal_set_show_only_active(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ListSeigrCellsRequest.show_only_active)
}
inline bool ListSeigrCellsRequest::_internal_show_only_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_only_active_;
}
inline void ListSeigrCellsRequest::_internal_set_show_only_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_only_active_ = value;
}

// -------------------------------------------------------------------

// ListSeigrCellsResponse

// repeated .seigr.seigr_cell.SeigrCell cells = 1;
inline int ListSeigrCellsResponse::_internal_cells_size() const {
  return _internal_cells().size();
}
inline int ListSeigrCellsResponse::cells_size() const {
  return _internal_cells_size();
}
inline void ListSeigrCellsResponse::clear_cells() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cells_.Clear();
}
inline ::seigr::seigr_cell::SeigrCell* ListSeigrCellsResponse::mutable_cells(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ListSeigrCellsResponse.cells)
  return _internal_mutable_cells()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>* ListSeigrCellsResponse::mutable_cells()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_cell.ListSeigrCellsResponse.cells)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cells();
}
inline const ::seigr::seigr_cell::SeigrCell& ListSeigrCellsResponse::cells(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ListSeigrCellsResponse.cells)
  return _internal_cells().Get(index);
}
inline ::seigr::seigr_cell::SeigrCell* ListSeigrCellsResponse::add_cells() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::seigr_cell::SeigrCell* _add = _internal_mutable_cells()->Add();
  // @@protoc_insertion_point(field_add:seigr.seigr_cell.ListSeigrCellsResponse.cells)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>& ListSeigrCellsResponse::cells() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_cell.ListSeigrCellsResponse.cells)
  return _internal_cells();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>&
ListSeigrCellsResponse::_internal_cells() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cells_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_cell::SeigrCell>*
ListSeigrCellsResponse::_internal_mutable_cells() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cells_;
}

// string retrieval_timestamp = 2;
inline void ListSeigrCellsResponse::clear_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.ClearToEmpty();
}
inline const std::string& ListSeigrCellsResponse::retrieval_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_cell.ListSeigrCellsResponse.retrieval_timestamp)
  return _internal_retrieval_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListSeigrCellsResponse::set_retrieval_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_cell.ListSeigrCellsResponse.retrieval_timestamp)
}
inline std::string* ListSeigrCellsResponse::mutable_retrieval_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retrieval_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_cell.ListSeigrCellsResponse.retrieval_timestamp)
  return _s;
}
inline const std::string& ListSeigrCellsResponse::_internal_retrieval_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retrieval_timestamp_.Get();
}
inline void ListSeigrCellsResponse::_internal_set_retrieval_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.Set(value, GetArena());
}
inline std::string* ListSeigrCellsResponse::_internal_mutable_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retrieval_timestamp_.Mutable( GetArena());
}
inline std::string* ListSeigrCellsResponse::release_retrieval_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_cell.ListSeigrCellsResponse.retrieval_timestamp)
  return _impl_.retrieval_timestamp_.Release();
}
inline void ListSeigrCellsResponse::set_allocated_retrieval_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retrieval_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.retrieval_timestamp_.IsDefault()) {
    _impl_.retrieval_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_cell.ListSeigrCellsResponse.retrieval_timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace seigr_cell
}  // namespace seigr


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // seigr_5fcell_2eproto_2epb_2eh
