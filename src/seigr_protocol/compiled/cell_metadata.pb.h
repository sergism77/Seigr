// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cell_metadata.proto
// Protobuf C++ Version: 5.29.2

#ifndef cell_5fmetadata_2eproto_2epb_2eh
#define cell_5fmetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cell_5fmetadata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cell_5fmetadata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cell_5fmetadata_2eproto;
namespace seigr {
namespace cell_metadata {
class CellLifecycleCommand;
struct CellLifecycleCommandDefaultTypeInternal;
extern CellLifecycleCommandDefaultTypeInternal _CellLifecycleCommand_default_instance_;
class CellLifecycleCommand_MetadataEntry_DoNotUse;
struct CellLifecycleCommand_MetadataEntry_DoNotUseDefaultTypeInternal;
extern CellLifecycleCommand_MetadataEntry_DoNotUseDefaultTypeInternal _CellLifecycleCommand_MetadataEntry_DoNotUse_default_instance_;
class CellMetadata;
struct CellMetadataDefaultTypeInternal;
extern CellMetadataDefaultTypeInternal _CellMetadata_default_instance_;
class CellMetadataQuery;
struct CellMetadataQueryDefaultTypeInternal;
extern CellMetadataQueryDefaultTypeInternal _CellMetadataQuery_default_instance_;
class CellMetadataQuery_AdditionalFiltersEntry_DoNotUse;
struct CellMetadataQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal;
extern CellMetadataQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal _CellMetadataQuery_AdditionalFiltersEntry_DoNotUse_default_instance_;
class CellMetadataStats;
struct CellMetadataStatsDefaultTypeInternal;
extern CellMetadataStatsDefaultTypeInternal _CellMetadataStats_default_instance_;
class CellMetadataStats_CellTypeCountsEntry_DoNotUse;
struct CellMetadataStats_CellTypeCountsEntry_DoNotUseDefaultTypeInternal;
extern CellMetadataStats_CellTypeCountsEntry_DoNotUseDefaultTypeInternal _CellMetadataStats_CellTypeCountsEntry_DoNotUse_default_instance_;
class CellMetadata_CustomAttributesEntry_DoNotUse;
struct CellMetadata_CustomAttributesEntry_DoNotUseDefaultTypeInternal;
extern CellMetadata_CustomAttributesEntry_DoNotUseDefaultTypeInternal _CellMetadata_CustomAttributesEntry_DoNotUse_default_instance_;
class CellMetadata_ProtocolAttributesEntry_DoNotUse;
struct CellMetadata_ProtocolAttributesEntry_DoNotUseDefaultTypeInternal;
extern CellMetadata_ProtocolAttributesEntry_DoNotUseDefaultTypeInternal _CellMetadata_ProtocolAttributesEntry_DoNotUse_default_instance_;
class CellOperationLog;
struct CellOperationLogDefaultTypeInternal;
extern CellOperationLogDefaultTypeInternal _CellOperationLog_default_instance_;
class CellOperationLog_MetadataEntry_DoNotUse;
struct CellOperationLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern CellOperationLog_MetadataEntry_DoNotUseDefaultTypeInternal _CellOperationLog_MetadataEntry_DoNotUse_default_instance_;
class CellOperationResponse;
struct CellOperationResponseDefaultTypeInternal;
extern CellOperationResponseDefaultTypeInternal _CellOperationResponse_default_instance_;
class CellOperationResponse_ResponseMetadataEntry_DoNotUse;
struct CellOperationResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal;
extern CellOperationResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal _CellOperationResponse_ResponseMetadataEntry_DoNotUse_default_instance_;
}  // namespace cell_metadata
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace cell_metadata {
enum CellStatus : int {
  CELL_STATUS_UNDEFINED = 0,
  CELL_ACTIVE = 1,
  CELL_ARCHIVED = 2,
  CELL_IN_TRANSIT = 3,
  CELL_PENDING_REVIEW = 4,
  CELL_COMPROMISED = 5,
  CELL_DEPRECATED = 6,
  CellStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CellStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CellStatus_IsValid(int value);
extern const uint32_t CellStatus_internal_data_[];
constexpr CellStatus CellStatus_MIN = static_cast<CellStatus>(0);
constexpr CellStatus CellStatus_MAX = static_cast<CellStatus>(6);
constexpr int CellStatus_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
CellStatus_descriptor();
template <typename T>
const std::string& CellStatus_Name(T value) {
  static_assert(std::is_same<T, CellStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CellStatus_Name().");
  return CellStatus_Name(static_cast<CellStatus>(value));
}
template <>
inline const std::string& CellStatus_Name(CellStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CellStatus_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool CellStatus_Parse(absl::string_view name, CellStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CellStatus>(
      CellStatus_descriptor(), name, value);
}
enum CellType : int {
  CELL_TYPE_UNDEFINED = 0,
  DATA_CELL = 1,
  LOG_CELL = 2,
  METADATA_CELL = 3,
  BACKUP_CELL = 4,
  CONFIGURATION_CELL = 5,
  CellType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CellType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CellType_IsValid(int value);
extern const uint32_t CellType_internal_data_[];
constexpr CellType CellType_MIN = static_cast<CellType>(0);
constexpr CellType CellType_MAX = static_cast<CellType>(5);
constexpr int CellType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
CellType_descriptor();
template <typename T>
const std::string& CellType_Name(T value) {
  static_assert(std::is_same<T, CellType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CellType_Name().");
  return CellType_Name(static_cast<CellType>(value));
}
template <>
inline const std::string& CellType_Name(CellType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CellType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool CellType_Parse(absl::string_view name, CellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CellType>(
      CellType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CellOperationResponse_ResponseMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellOperationResponse_ResponseMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellOperationResponse_ResponseMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellOperationResponse_ResponseMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellOperationResponse_ResponseMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellOperationResponse_ResponseMetadataEntry_DoNotUse*>(
        &_CellOperationResponse_ResponseMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellOperationLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellOperationLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellOperationLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellOperationLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellOperationLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellOperationLog_MetadataEntry_DoNotUse*>(
        &_CellOperationLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellMetadataStats_CellTypeCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  CellMetadataStats_CellTypeCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadataStats_CellTypeCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellMetadataStats_CellTypeCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellMetadataStats_CellTypeCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellMetadataStats_CellTypeCountsEntry_DoNotUse*>(
        &_CellMetadataStats_CellTypeCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellMetadataQuery_AdditionalFiltersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellMetadataQuery_AdditionalFiltersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadataQuery_AdditionalFiltersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellMetadataQuery_AdditionalFiltersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellMetadataQuery_AdditionalFiltersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellMetadataQuery_AdditionalFiltersEntry_DoNotUse*>(
        &_CellMetadataQuery_AdditionalFiltersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellMetadata_ProtocolAttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellMetadata_ProtocolAttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadata_ProtocolAttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellMetadata_ProtocolAttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellMetadata_ProtocolAttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellMetadata_ProtocolAttributesEntry_DoNotUse*>(
        &_CellMetadata_ProtocolAttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      73, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellMetadata_CustomAttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellMetadata_CustomAttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadata_CustomAttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellMetadata_CustomAttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellMetadata_CustomAttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellMetadata_CustomAttributesEntry_DoNotUse*>(
        &_CellMetadata_CustomAttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellLifecycleCommand_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CellLifecycleCommand_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellLifecycleCommand_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CellLifecycleCommand_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CellLifecycleCommand_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CellLifecycleCommand_MetadataEntry_DoNotUse*>(
        &_CellLifecycleCommand_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cell_5fmetadata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CellOperationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellOperationResponse) */ {
 public:
  inline CellOperationResponse() : CellOperationResponse(nullptr) {}
  ~CellOperationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellOperationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellOperationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellOperationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellOperationResponse(const CellOperationResponse& from) : CellOperationResponse(nullptr, from) {}
  inline CellOperationResponse(CellOperationResponse&& from) noexcept
      : CellOperationResponse(nullptr, std::move(from)) {}
  inline CellOperationResponse& operator=(const CellOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellOperationResponse& operator=(CellOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellOperationResponse* internal_default_instance() {
    return reinterpret_cast<const CellOperationResponse*>(
        &_CellOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(CellOperationResponse& a, CellOperationResponse& b) { a.Swap(&b); }
  inline void Swap(CellOperationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellOperationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellOperationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellOperationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellOperationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellOperationResponse& from) { CellOperationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellOperationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellOperationResponse"; }

 protected:
  explicit CellOperationResponse(::google::protobuf::Arena* arena);
  CellOperationResponse(::google::protobuf::Arena* arena, const CellOperationResponse& from);
  CellOperationResponse(::google::protobuf::Arena* arena, CellOperationResponse&& from) noexcept
      : CellOperationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseMetadataFieldNumber = 5,
    kCellIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kUpdatedTimestampFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // map<string, string> response_metadata = 5;
  int response_metadata_size() const;
  private:
  int _internal_response_metadata_size() const;

  public:
  void clear_response_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_response_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_response_metadata();

  public:
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string updated_timestamp = 4;
  void clear_updated_timestamp() ;
  const std::string& updated_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updated_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_updated_timestamp();
  PROTOBUF_NODISCARD std::string* release_updated_timestamp();
  void set_allocated_updated_timestamp(std::string* value);

  private:
  const std::string& _internal_updated_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_timestamp(
      const std::string& value);
  std::string* _internal_mutable_updated_timestamp();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellOperationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      98, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellOperationResponse& from_msg);
    ::google::protobuf::internal::MapField<CellOperationResponse_ResponseMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        response_metadata_;
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr updated_timestamp_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CellOperationLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellOperationLog) */ {
 public:
  inline CellOperationLog() : CellOperationLog(nullptr) {}
  ~CellOperationLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellOperationLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellOperationLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellOperationLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellOperationLog(const CellOperationLog& from) : CellOperationLog(nullptr, from) {}
  inline CellOperationLog(CellOperationLog&& from) noexcept
      : CellOperationLog(nullptr, std::move(from)) {}
  inline CellOperationLog& operator=(const CellOperationLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellOperationLog& operator=(CellOperationLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellOperationLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellOperationLog* internal_default_instance() {
    return reinterpret_cast<const CellOperationLog*>(
        &_CellOperationLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CellOperationLog& a, CellOperationLog& b) { a.Swap(&b); }
  inline void Swap(CellOperationLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellOperationLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellOperationLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellOperationLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellOperationLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellOperationLog& from) { CellOperationLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellOperationLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellOperationLog"; }

 protected:
  explicit CellOperationLog(::google::protobuf::Arena* arena);
  CellOperationLog(::google::protobuf::Arena* arena, const CellOperationLog& from);
  CellOperationLog(::google::protobuf::Arena* arena, CellOperationLog&& from) noexcept
      : CellOperationLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kOperationIdFieldNumber = 1,
    kOperationTypeFieldNumber = 2,
    kPerformedByFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kStatusFieldNumber = 5,
    kDetailsFieldNumber = 6,
    kErrorCodeFieldNumber = 8,
    kOriginatingIpFieldNumber = 9,
    kDeviceInfoFieldNumber = 10,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string operation_id = 1;
  void clear_operation_id() ;
  const std::string& operation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation_id(Arg_&& arg, Args_... args);
  std::string* mutable_operation_id();
  PROTOBUF_NODISCARD std::string* release_operation_id();
  void set_allocated_operation_id(std::string* value);

  private:
  const std::string& _internal_operation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_id(
      const std::string& value);
  std::string* _internal_mutable_operation_id();

  public:
  // string operation_type = 2;
  void clear_operation_type() ;
  const std::string& operation_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation_type(Arg_&& arg, Args_... args);
  std::string* mutable_operation_type();
  PROTOBUF_NODISCARD std::string* release_operation_type();
  void set_allocated_operation_type(std::string* value);

  private:
  const std::string& _internal_operation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_type(
      const std::string& value);
  std::string* _internal_mutable_operation_type();

  public:
  // string performed_by = 3;
  void clear_performed_by() ;
  const std::string& performed_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_performed_by(Arg_&& arg, Args_... args);
  std::string* mutable_performed_by();
  PROTOBUF_NODISCARD std::string* release_performed_by();
  void set_allocated_performed_by(std::string* value);

  private:
  const std::string& _internal_performed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_performed_by(
      const std::string& value);
  std::string* _internal_mutable_performed_by();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string status = 5;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string details = 6;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string error_code = 8;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // string originating_ip = 9;
  void clear_originating_ip() ;
  const std::string& originating_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originating_ip(Arg_&& arg, Args_... args);
  std::string* mutable_originating_ip();
  PROTOBUF_NODISCARD std::string* release_originating_ip();
  void set_allocated_originating_ip(std::string* value);

  private:
  const std::string& _internal_originating_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originating_ip(
      const std::string& value);
  std::string* _internal_mutable_originating_ip();

  public:
  // string device_info = 10;
  void clear_device_info() ;
  const std::string& device_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_info(Arg_&& arg, Args_... args);
  std::string* mutable_device_info();
  PROTOBUF_NODISCARD std::string* release_device_info();
  void set_allocated_device_info(std::string* value);

  private:
  const std::string& _internal_device_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_info(
      const std::string& value);
  std::string* _internal_mutable_device_info();

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellOperationLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      156, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellOperationLog& from_msg);
    ::google::protobuf::internal::MapField<CellOperationLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr operation_id_;
    ::google::protobuf::internal::ArenaStringPtr operation_type_;
    ::google::protobuf::internal::ArenaStringPtr performed_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::ArenaStringPtr originating_ip_;
    ::google::protobuf::internal::ArenaStringPtr device_info_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CellMetadataStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellMetadataStats) */ {
 public:
  inline CellMetadataStats() : CellMetadataStats(nullptr) {}
  ~CellMetadataStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellMetadataStats* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellMetadataStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadataStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellMetadataStats(const CellMetadataStats& from) : CellMetadataStats(nullptr, from) {}
  inline CellMetadataStats(CellMetadataStats&& from) noexcept
      : CellMetadataStats(nullptr, std::move(from)) {}
  inline CellMetadataStats& operator=(const CellMetadataStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellMetadataStats& operator=(CellMetadataStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellMetadataStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellMetadataStats* internal_default_instance() {
    return reinterpret_cast<const CellMetadataStats*>(
        &_CellMetadataStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(CellMetadataStats& a, CellMetadataStats& b) { a.Swap(&b); }
  inline void Swap(CellMetadataStats* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellMetadataStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellMetadataStats* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellMetadataStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellMetadataStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellMetadataStats& from) { CellMetadataStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellMetadataStats* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellMetadataStats"; }

 protected:
  explicit CellMetadataStats(::google::protobuf::Arena* arena);
  CellMetadataStats(::google::protobuf::Arena* arena, const CellMetadataStats& from);
  CellMetadataStats(::google::protobuf::Arena* arena, CellMetadataStats&& from) noexcept
      : CellMetadataStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellTypeCountsFieldNumber = 6,
    kLastUpdateTimestampFieldNumber = 7,
    kTotalCellsFieldNumber = 1,
    kActiveCellsFieldNumber = 2,
    kArchivedCellsFieldNumber = 3,
    kCompromisedCellsFieldNumber = 4,
    kAverageRetentionPeriodFieldNumber = 5,
  };
  // map<string, int32> cell_type_counts = 6;
  int cell_type_counts_size() const;
  private:
  int _internal_cell_type_counts_size() const;

  public:
  void clear_cell_type_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& cell_type_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_cell_type_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_cell_type_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_cell_type_counts();

  public:
  // string last_update_timestamp = 7;
  void clear_last_update_timestamp() ;
  const std::string& last_update_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_update_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_update_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_update_timestamp();
  void set_allocated_last_update_timestamp(std::string* value);

  private:
  const std::string& _internal_last_update_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_update_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_update_timestamp();

  public:
  // int32 total_cells = 1;
  void clear_total_cells() ;
  ::int32_t total_cells() const;
  void set_total_cells(::int32_t value);

  private:
  ::int32_t _internal_total_cells() const;
  void _internal_set_total_cells(::int32_t value);

  public:
  // int32 active_cells = 2;
  void clear_active_cells() ;
  ::int32_t active_cells() const;
  void set_active_cells(::int32_t value);

  private:
  ::int32_t _internal_active_cells() const;
  void _internal_set_active_cells(::int32_t value);

  public:
  // int32 archived_cells = 3;
  void clear_archived_cells() ;
  ::int32_t archived_cells() const;
  void set_archived_cells(::int32_t value);

  private:
  ::int32_t _internal_archived_cells() const;
  void _internal_set_archived_cells(::int32_t value);

  public:
  // int32 compromised_cells = 4;
  void clear_compromised_cells() ;
  ::int32_t compromised_cells() const;
  void set_compromised_cells(::int32_t value);

  private:
  ::int32_t _internal_compromised_cells() const;
  void _internal_set_compromised_cells(::int32_t value);

  public:
  // double average_retention_period = 5;
  void clear_average_retention_period() ;
  double average_retention_period() const;
  void set_average_retention_period(double value);

  private:
  double _internal_average_retention_period() const;
  void _internal_set_average_retention_period(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellMetadataStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      83, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellMetadataStats& from_msg);
    ::google::protobuf::internal::MapField<CellMetadataStats_CellTypeCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        cell_type_counts_;
    ::google::protobuf::internal::ArenaStringPtr last_update_timestamp_;
    ::int32_t total_cells_;
    ::int32_t active_cells_;
    ::int32_t archived_cells_;
    ::int32_t compromised_cells_;
    double average_retention_period_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CellMetadataQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellMetadataQuery) */ {
 public:
  inline CellMetadataQuery() : CellMetadataQuery(nullptr) {}
  ~CellMetadataQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellMetadataQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellMetadataQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadataQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellMetadataQuery(const CellMetadataQuery& from) : CellMetadataQuery(nullptr, from) {}
  inline CellMetadataQuery(CellMetadataQuery&& from) noexcept
      : CellMetadataQuery(nullptr, std::move(from)) {}
  inline CellMetadataQuery& operator=(const CellMetadataQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellMetadataQuery& operator=(CellMetadataQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellMetadataQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellMetadataQuery* internal_default_instance() {
    return reinterpret_cast<const CellMetadataQuery*>(
        &_CellMetadataQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(CellMetadataQuery& a, CellMetadataQuery& b) { a.Swap(&b); }
  inline void Swap(CellMetadataQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellMetadataQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellMetadataQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellMetadataQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellMetadataQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellMetadataQuery& from) { CellMetadataQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellMetadataQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellMetadataQuery"; }

 protected:
  explicit CellMetadataQuery(::google::protobuf::Arena* arena);
  CellMetadataQuery(::google::protobuf::Arena* arena, const CellMetadataQuery& from);
  CellMetadataQuery(::google::protobuf::Arena* arena, CellMetadataQuery&& from) noexcept
      : CellMetadataQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCellIdsFieldNumber = 1,
    kStatusesFieldNumber = 2,
    kTypesFieldNumber = 3,
    kAdditionalFiltersFieldNumber = 7,
    kCreatedByFieldNumber = 4,
    kDateRangeStartFieldNumber = 5,
    kDateRangeEndFieldNumber = 6,
  };
  // repeated string cell_ids = 1;
  int cell_ids_size() const;
  private:
  int _internal_cell_ids_size() const;

  public:
  void clear_cell_ids() ;
  const std::string& cell_ids(int index) const;
  std::string* mutable_cell_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_ids(int index, Arg_&& value, Args_... args);
  std::string* add_cell_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_cell_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& cell_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cell_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cell_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cell_ids();

  public:
  // repeated .seigr.cell_metadata.CellStatus statuses = 2;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;

  public:
  void clear_statuses() ;
  public:
  ::seigr::cell_metadata::CellStatus statuses(int index) const;
  void set_statuses(int index, ::seigr::cell_metadata::CellStatus value);
  void add_statuses(::seigr::cell_metadata::CellStatus value);
  const ::google::protobuf::RepeatedField<int>& statuses() const;
  ::google::protobuf::RepeatedField<int>* mutable_statuses();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_statuses() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_statuses();

  public:
  // repeated .seigr.cell_metadata.CellType types = 3;
  int types_size() const;
  private:
  int _internal_types_size() const;

  public:
  void clear_types() ;
  public:
  ::seigr::cell_metadata::CellType types(int index) const;
  void set_types(int index, ::seigr::cell_metadata::CellType value);
  void add_types(::seigr::cell_metadata::CellType value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_types();

  public:
  // map<string, string> additional_filters = 7;
  int additional_filters_size() const;
  private:
  int _internal_additional_filters_size() const;

  public:
  void clear_additional_filters() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_filters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_filters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_filters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_filters();

  public:
  // string created_by = 4;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string date_range_start = 5;
  void clear_date_range_start() ;
  const std::string& date_range_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_start(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_start();
  PROTOBUF_NODISCARD std::string* release_date_range_start();
  void set_allocated_date_range_start(std::string* value);

  private:
  const std::string& _internal_date_range_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_start(
      const std::string& value);
  std::string* _internal_mutable_date_range_start();

  public:
  // string date_range_end = 6;
  void clear_date_range_end() ;
  const std::string& date_range_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_end(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_end();
  PROTOBUF_NODISCARD std::string* release_date_range_end();
  void set_allocated_date_range_end(std::string* value);

  private:
  const std::string& _internal_date_range_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_end(
      const std::string& value);
  std::string* _internal_mutable_date_range_end();

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellMetadataQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      112, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellMetadataQuery& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> cell_ids_;
    ::google::protobuf::RepeatedField<int> statuses_;
    ::google::protobuf::internal::CachedSize _statuses_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> types_;
    ::google::protobuf::internal::CachedSize _types_cached_byte_size_;
    ::google::protobuf::internal::MapField<CellMetadataQuery_AdditionalFiltersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_filters_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr date_range_start_;
    ::google::protobuf::internal::ArenaStringPtr date_range_end_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CellLifecycleCommand final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellLifecycleCommand) */ {
 public:
  inline CellLifecycleCommand() : CellLifecycleCommand(nullptr) {}
  ~CellLifecycleCommand() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellLifecycleCommand* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellLifecycleCommand));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellLifecycleCommand(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellLifecycleCommand(const CellLifecycleCommand& from) : CellLifecycleCommand(nullptr, from) {}
  inline CellLifecycleCommand(CellLifecycleCommand&& from) noexcept
      : CellLifecycleCommand(nullptr, std::move(from)) {}
  inline CellLifecycleCommand& operator=(const CellLifecycleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellLifecycleCommand& operator=(CellLifecycleCommand&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellLifecycleCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellLifecycleCommand* internal_default_instance() {
    return reinterpret_cast<const CellLifecycleCommand*>(
        &_CellLifecycleCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CellLifecycleCommand& a, CellLifecycleCommand& b) { a.Swap(&b); }
  inline void Swap(CellLifecycleCommand* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellLifecycleCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellLifecycleCommand* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellLifecycleCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellLifecycleCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellLifecycleCommand& from) { CellLifecycleCommand::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellLifecycleCommand* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellLifecycleCommand"; }

 protected:
  explicit CellLifecycleCommand(::google::protobuf::Arena* arena);
  CellLifecycleCommand(::google::protobuf::Arena* arena, const CellLifecycleCommand& from);
  CellLifecycleCommand(::google::protobuf::Arena* arena, CellLifecycleCommand&& from) noexcept
      : CellLifecycleCommand(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 5,
    kCellIdFieldNumber = 1,
    kCommandTypeFieldNumber = 2,
    kInitiatedByFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // string command_type = 2;
  void clear_command_type() ;
  const std::string& command_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command_type(Arg_&& arg, Args_... args);
  std::string* mutable_command_type();
  PROTOBUF_NODISCARD std::string* release_command_type();
  void set_allocated_command_type(std::string* value);

  private:
  const std::string& _internal_command_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_type(
      const std::string& value);
  std::string* _internal_mutable_command_type();

  public:
  // string initiated_by = 3;
  void clear_initiated_by() ;
  const std::string& initiated_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initiated_by(Arg_&& arg, Args_... args);
  std::string* mutable_initiated_by();
  PROTOBUF_NODISCARD std::string* release_initiated_by();
  void set_allocated_initiated_by(std::string* value);

  private:
  const std::string& _internal_initiated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiated_by(
      const std::string& value);
  std::string* _internal_mutable_initiated_by();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellLifecycleCommand)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellLifecycleCommand& from_msg);
    ::google::protobuf::internal::MapField<CellLifecycleCommand_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::ArenaStringPtr command_type_;
    ::google::protobuf::internal::ArenaStringPtr initiated_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class CellMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.cell_metadata.CellMetadata) */ {
 public:
  inline CellMetadata() : CellMetadata(nullptr) {}
  ~CellMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CellMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CellMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CellMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline CellMetadata(const CellMetadata& from) : CellMetadata(nullptr, from) {}
  inline CellMetadata(CellMetadata&& from) noexcept
      : CellMetadata(nullptr, std::move(from)) {}
  inline CellMetadata& operator=(const CellMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellMetadata& operator=(CellMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellMetadata* internal_default_instance() {
    return reinterpret_cast<const CellMetadata*>(
        &_CellMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CellMetadata& a, CellMetadata& b) { a.Swap(&b); }
  inline void Swap(CellMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CellMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CellMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CellMetadata& from) { CellMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CellMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.cell_metadata.CellMetadata"; }

 protected:
  explicit CellMetadata(::google::protobuf::Arena* arena);
  CellMetadata(::google::protobuf::Arena* arena, const CellMetadata& from);
  CellMetadata(::google::protobuf::Arena* arena, CellMetadata&& from) noexcept
      : CellMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLineageFieldNumber = 8,
    kCustomAttributesFieldNumber = 9,
    kOperationLogsFieldNumber = 10,
    kAuthorizedUsersFieldNumber = 13,
    kProtocolAttributesFieldNumber = 17,
    kDependenciesFieldNumber = 22,
    kCellIdFieldNumber = 1,
    kCreatedByFieldNumber = 4,
    kCreationTimestampFieldNumber = 5,
    kLastModifiedTimestampFieldNumber = 6,
    kPrimaryHashFieldNumber = 7,
    kRetentionPeriodFieldNumber = 11,
    kCompliancePolicyFieldNumber = 12,
    kEncryptionProtocolFieldNumber = 14,
    kNetworkProtocolFieldNumber = 15,
    kBackupLocationFieldNumber = 16,
    kStorageLocationFieldNumber = 20,
    kArchivalPolicyFieldNumber = 21,
    kDataClassificationFieldNumber = 23,
    kVersionFieldNumber = 24,
    kLastAccessedByFieldNumber = 25,
    kLastAccessedTimestampFieldNumber = 26,
    kCellStatusFieldNumber = 2,
    kCellTypeFieldNumber = 3,
    kIsEncryptedFieldNumber = 18,
    kAccessLogsEnabledFieldNumber = 19,
  };
  // repeated string lineage = 8;
  int lineage_size() const;
  private:
  int _internal_lineage_size() const;

  public:
  void clear_lineage() ;
  const std::string& lineage(int index) const;
  std::string* mutable_lineage(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lineage(int index, Arg_&& value, Args_... args);
  std::string* add_lineage();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_lineage(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& lineage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_lineage();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_lineage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_lineage();

  public:
  // map<string, string> custom_attributes = 9;
  int custom_attributes_size() const;
  private:
  int _internal_custom_attributes_size() const;

  public:
  void clear_custom_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& custom_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_custom_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_custom_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_custom_attributes();

  public:
  // repeated .seigr.cell_metadata.CellOperationLog operation_logs = 10;
  int operation_logs_size() const;
  private:
  int _internal_operation_logs_size() const;

  public:
  void clear_operation_logs() ;
  ::seigr::cell_metadata::CellOperationLog* mutable_operation_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>* mutable_operation_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>& _internal_operation_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>* _internal_mutable_operation_logs();
  public:
  const ::seigr::cell_metadata::CellOperationLog& operation_logs(int index) const;
  ::seigr::cell_metadata::CellOperationLog* add_operation_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>& operation_logs() const;
  // repeated string authorized_users = 13;
  int authorized_users_size() const;
  private:
  int _internal_authorized_users_size() const;

  public:
  void clear_authorized_users() ;
  const std::string& authorized_users(int index) const;
  std::string* mutable_authorized_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_users(int index, Arg_&& value, Args_... args);
  std::string* add_authorized_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_authorized_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& authorized_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_authorized_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_authorized_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_authorized_users();

  public:
  // map<string, string> protocol_attributes = 17;
  int protocol_attributes_size() const;
  private:
  int _internal_protocol_attributes_size() const;

  public:
  void clear_protocol_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& protocol_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_protocol_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_protocol_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_protocol_attributes();

  public:
  // repeated string dependencies = 22;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;

  public:
  void clear_dependencies() ;
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependencies(int index, Arg_&& value, Args_... args);
  std::string* add_dependencies();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dependencies(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dependencies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dependencies();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dependencies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dependencies();

  public:
  // string cell_id = 1;
  void clear_cell_id() ;
  const std::string& cell_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cell_id(Arg_&& arg, Args_... args);
  std::string* mutable_cell_id();
  PROTOBUF_NODISCARD std::string* release_cell_id();
  void set_allocated_cell_id(std::string* value);

  private:
  const std::string& _internal_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_id(
      const std::string& value);
  std::string* _internal_mutable_cell_id();

  public:
  // string created_by = 4;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string creation_timestamp = 5;
  void clear_creation_timestamp() ;
  const std::string& creation_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creation_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_creation_timestamp();
  PROTOBUF_NODISCARD std::string* release_creation_timestamp();
  void set_allocated_creation_timestamp(std::string* value);

  private:
  const std::string& _internal_creation_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_timestamp(
      const std::string& value);
  std::string* _internal_mutable_creation_timestamp();

  public:
  // string last_modified_timestamp = 6;
  void clear_last_modified_timestamp() ;
  const std::string& last_modified_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_modified_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_modified_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_modified_timestamp();
  void set_allocated_last_modified_timestamp(std::string* value);

  private:
  const std::string& _internal_last_modified_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_modified_timestamp();

  public:
  // string primary_hash = 7;
  void clear_primary_hash() ;
  const std::string& primary_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_hash(Arg_&& arg, Args_... args);
  std::string* mutable_primary_hash();
  PROTOBUF_NODISCARD std::string* release_primary_hash();
  void set_allocated_primary_hash(std::string* value);

  private:
  const std::string& _internal_primary_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_hash(
      const std::string& value);
  std::string* _internal_mutable_primary_hash();

  public:
  // string retention_period = 11;
  void clear_retention_period() ;
  const std::string& retention_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retention_period(Arg_&& arg, Args_... args);
  std::string* mutable_retention_period();
  PROTOBUF_NODISCARD std::string* release_retention_period();
  void set_allocated_retention_period(std::string* value);

  private:
  const std::string& _internal_retention_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retention_period(
      const std::string& value);
  std::string* _internal_mutable_retention_period();

  public:
  // string compliance_policy = 12;
  void clear_compliance_policy() ;
  const std::string& compliance_policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_policy(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_policy();
  PROTOBUF_NODISCARD std::string* release_compliance_policy();
  void set_allocated_compliance_policy(std::string* value);

  private:
  const std::string& _internal_compliance_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_policy(
      const std::string& value);
  std::string* _internal_mutable_compliance_policy();

  public:
  // string encryption_protocol = 14;
  void clear_encryption_protocol() ;
  const std::string& encryption_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encryption_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_encryption_protocol();
  PROTOBUF_NODISCARD std::string* release_encryption_protocol();
  void set_allocated_encryption_protocol(std::string* value);

  private:
  const std::string& _internal_encryption_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_protocol(
      const std::string& value);
  std::string* _internal_mutable_encryption_protocol();

  public:
  // string network_protocol = 15;
  void clear_network_protocol() ;
  const std::string& network_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_network_protocol();
  PROTOBUF_NODISCARD std::string* release_network_protocol();
  void set_allocated_network_protocol(std::string* value);

  private:
  const std::string& _internal_network_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_protocol(
      const std::string& value);
  std::string* _internal_mutable_network_protocol();

  public:
  // string backup_location = 16;
  void clear_backup_location() ;
  const std::string& backup_location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_backup_location(Arg_&& arg, Args_... args);
  std::string* mutable_backup_location();
  PROTOBUF_NODISCARD std::string* release_backup_location();
  void set_allocated_backup_location(std::string* value);

  private:
  const std::string& _internal_backup_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backup_location(
      const std::string& value);
  std::string* _internal_mutable_backup_location();

  public:
  // string storage_location = 20;
  void clear_storage_location() ;
  const std::string& storage_location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_storage_location(Arg_&& arg, Args_... args);
  std::string* mutable_storage_location();
  PROTOBUF_NODISCARD std::string* release_storage_location();
  void set_allocated_storage_location(std::string* value);

  private:
  const std::string& _internal_storage_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_location(
      const std::string& value);
  std::string* _internal_mutable_storage_location();

  public:
  // string archival_policy = 21;
  void clear_archival_policy() ;
  const std::string& archival_policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_archival_policy(Arg_&& arg, Args_... args);
  std::string* mutable_archival_policy();
  PROTOBUF_NODISCARD std::string* release_archival_policy();
  void set_allocated_archival_policy(std::string* value);

  private:
  const std::string& _internal_archival_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_archival_policy(
      const std::string& value);
  std::string* _internal_mutable_archival_policy();

  public:
  // string data_classification = 23;
  void clear_data_classification() ;
  const std::string& data_classification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_classification(Arg_&& arg, Args_... args);
  std::string* mutable_data_classification();
  PROTOBUF_NODISCARD std::string* release_data_classification();
  void set_allocated_data_classification(std::string* value);

  private:
  const std::string& _internal_data_classification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_classification(
      const std::string& value);
  std::string* _internal_mutable_data_classification();

  public:
  // string version = 24;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string last_accessed_by = 25;
  void clear_last_accessed_by() ;
  const std::string& last_accessed_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_accessed_by(Arg_&& arg, Args_... args);
  std::string* mutable_last_accessed_by();
  PROTOBUF_NODISCARD std::string* release_last_accessed_by();
  void set_allocated_last_accessed_by(std::string* value);

  private:
  const std::string& _internal_last_accessed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_accessed_by(
      const std::string& value);
  std::string* _internal_mutable_last_accessed_by();

  public:
  // string last_accessed_timestamp = 26;
  void clear_last_accessed_timestamp() ;
  const std::string& last_accessed_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_accessed_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_accessed_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_accessed_timestamp();
  void set_allocated_last_accessed_timestamp(std::string* value);

  private:
  const std::string& _internal_last_accessed_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_accessed_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_accessed_timestamp();

  public:
  // .seigr.cell_metadata.CellStatus cell_status = 2;
  void clear_cell_status() ;
  ::seigr::cell_metadata::CellStatus cell_status() const;
  void set_cell_status(::seigr::cell_metadata::CellStatus value);

  private:
  ::seigr::cell_metadata::CellStatus _internal_cell_status() const;
  void _internal_set_cell_status(::seigr::cell_metadata::CellStatus value);

  public:
  // .seigr.cell_metadata.CellType cell_type = 3;
  void clear_cell_type() ;
  ::seigr::cell_metadata::CellType cell_type() const;
  void set_cell_type(::seigr::cell_metadata::CellType value);

  private:
  ::seigr::cell_metadata::CellType _internal_cell_type() const;
  void _internal_set_cell_type(::seigr::cell_metadata::CellType value);

  public:
  // bool is_encrypted = 18;
  void clear_is_encrypted() ;
  bool is_encrypted() const;
  void set_is_encrypted(bool value);

  private:
  bool _internal_is_encrypted() const;
  void _internal_set_is_encrypted(bool value);

  public:
  // bool access_logs_enabled = 19;
  void clear_access_logs_enabled() ;
  bool access_logs_enabled() const;
  void set_access_logs_enabled(bool value);

  private:
  bool _internal_access_logs_enabled() const;
  void _internal_set_access_logs_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.cell_metadata.CellMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 26, 3,
      385, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CellMetadata& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> lineage_;
    ::google::protobuf::internal::MapField<CellMetadata_CustomAttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        custom_attributes_;
    ::google::protobuf::RepeatedPtrField< ::seigr::cell_metadata::CellOperationLog > operation_logs_;
    ::google::protobuf::RepeatedPtrField<std::string> authorized_users_;
    ::google::protobuf::internal::MapField<CellMetadata_ProtocolAttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        protocol_attributes_;
    ::google::protobuf::RepeatedPtrField<std::string> dependencies_;
    ::google::protobuf::internal::ArenaStringPtr cell_id_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr creation_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr last_modified_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr primary_hash_;
    ::google::protobuf::internal::ArenaStringPtr retention_period_;
    ::google::protobuf::internal::ArenaStringPtr compliance_policy_;
    ::google::protobuf::internal::ArenaStringPtr encryption_protocol_;
    ::google::protobuf::internal::ArenaStringPtr network_protocol_;
    ::google::protobuf::internal::ArenaStringPtr backup_location_;
    ::google::protobuf::internal::ArenaStringPtr storage_location_;
    ::google::protobuf::internal::ArenaStringPtr archival_policy_;
    ::google::protobuf::internal::ArenaStringPtr data_classification_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr last_accessed_by_;
    ::google::protobuf::internal::ArenaStringPtr last_accessed_timestamp_;
    int cell_status_;
    int cell_type_;
    bool is_encrypted_;
    bool access_logs_enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cell_5fmetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellOperationLog

// string operation_id = 1;
inline void CellOperationLog::clear_operation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_id_.ClearToEmpty();
}
inline const std::string& CellOperationLog::operation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.operation_id)
  return _internal_operation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_operation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.operation_id)
}
inline std::string* CellOperationLog::mutable_operation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation_id();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.operation_id)
  return _s;
}
inline const std::string& CellOperationLog::_internal_operation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_id_.Get();
}
inline void CellOperationLog::_internal_set_operation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_id_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_operation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operation_id_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_operation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.operation_id)
  return _impl_.operation_id_.Release();
}
inline void CellOperationLog::set_allocated_operation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_id_.IsDefault()) {
    _impl_.operation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.operation_id)
}

// string operation_type = 2;
inline void CellOperationLog::clear_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.ClearToEmpty();
}
inline const std::string& CellOperationLog::operation_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.operation_type)
  return _internal_operation_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_operation_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.operation_type)
}
inline std::string* CellOperationLog::mutable_operation_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation_type();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.operation_type)
  return _s;
}
inline const std::string& CellOperationLog::_internal_operation_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_type_.Get();
}
inline void CellOperationLog::_internal_set_operation_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operation_type_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.operation_type)
  return _impl_.operation_type_.Release();
}
inline void CellOperationLog::set_allocated_operation_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_type_.IsDefault()) {
    _impl_.operation_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.operation_type)
}

// string performed_by = 3;
inline void CellOperationLog::clear_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.ClearToEmpty();
}
inline const std::string& CellOperationLog::performed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.performed_by)
  return _internal_performed_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_performed_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.performed_by)
}
inline std::string* CellOperationLog::mutable_performed_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_performed_by();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.performed_by)
  return _s;
}
inline const std::string& CellOperationLog::_internal_performed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.performed_by_.Get();
}
inline void CellOperationLog::_internal_set_performed_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.performed_by_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.performed_by)
  return _impl_.performed_by_.Release();
}
inline void CellOperationLog::set_allocated_performed_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.performed_by_.IsDefault()) {
    _impl_.performed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.performed_by)
}

// string timestamp = 4;
inline void CellOperationLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& CellOperationLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.timestamp)
}
inline std::string* CellOperationLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.timestamp)
  return _s;
}
inline const std::string& CellOperationLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void CellOperationLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void CellOperationLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.timestamp)
}

// string status = 5;
inline void CellOperationLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& CellOperationLog::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.status)
}
inline std::string* CellOperationLog::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.status)
  return _s;
}
inline const std::string& CellOperationLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void CellOperationLog::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.status)
  return _impl_.status_.Release();
}
inline void CellOperationLog::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.status)
}

// string details = 6;
inline void CellOperationLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& CellOperationLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.details)
}
inline std::string* CellOperationLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.details)
  return _s;
}
inline const std::string& CellOperationLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void CellOperationLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.details)
  return _impl_.details_.Release();
}
inline void CellOperationLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.details)
}

// map<string, string> metadata = 7;
inline int CellOperationLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int CellOperationLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void CellOperationLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellOperationLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellOperationLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellOperationLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* CellOperationLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellOperationLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellOperationLog.metadata)
  return _internal_mutable_metadata();
}

// string error_code = 8;
inline void CellOperationLog::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& CellOperationLog::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.error_code)
}
inline std::string* CellOperationLog::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.error_code)
  return _s;
}
inline const std::string& CellOperationLog::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void CellOperationLog::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.error_code)
  return _impl_.error_code_.Release();
}
inline void CellOperationLog::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.error_code)
}

// string originating_ip = 9;
inline void CellOperationLog::clear_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.ClearToEmpty();
}
inline const std::string& CellOperationLog::originating_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.originating_ip)
  return _internal_originating_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_originating_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.originating_ip)
}
inline std::string* CellOperationLog::mutable_originating_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originating_ip();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.originating_ip)
  return _s;
}
inline const std::string& CellOperationLog::_internal_originating_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.originating_ip_.Get();
}
inline void CellOperationLog::_internal_set_originating_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.originating_ip_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.originating_ip)
  return _impl_.originating_ip_.Release();
}
inline void CellOperationLog::set_allocated_originating_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.originating_ip_.IsDefault()) {
    _impl_.originating_ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.originating_ip)
}

// string device_info = 10;
inline void CellOperationLog::clear_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.ClearToEmpty();
}
inline const std::string& CellOperationLog::device_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationLog.device_info)
  return _internal_device_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationLog::set_device_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationLog.device_info)
}
inline std::string* CellOperationLog::mutable_device_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationLog.device_info)
  return _s;
}
inline const std::string& CellOperationLog::_internal_device_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_info_.Get();
}
inline void CellOperationLog::_internal_set_device_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(value, GetArena());
}
inline std::string* CellOperationLog::_internal_mutable_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_info_.Mutable( GetArena());
}
inline std::string* CellOperationLog::release_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationLog.device_info)
  return _impl_.device_info_.Release();
}
inline void CellOperationLog::set_allocated_device_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_info_.IsDefault()) {
    _impl_.device_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationLog.device_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellMetadata

// string cell_id = 1;
inline void CellMetadata::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& CellMetadata::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.cell_id)
}
inline std::string* CellMetadata::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.cell_id)
  return _s;
}
inline const std::string& CellMetadata::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void CellMetadata::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.cell_id)
  return _impl_.cell_id_.Release();
}
inline void CellMetadata::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.cell_id)
}

// .seigr.cell_metadata.CellStatus cell_status = 2;
inline void CellMetadata::clear_cell_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_status_ = 0;
}
inline ::seigr::cell_metadata::CellStatus CellMetadata::cell_status() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.cell_status)
  return _internal_cell_status();
}
inline void CellMetadata::set_cell_status(::seigr::cell_metadata::CellStatus value) {
  _internal_set_cell_status(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.cell_status)
}
inline ::seigr::cell_metadata::CellStatus CellMetadata::_internal_cell_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::cell_metadata::CellStatus>(_impl_.cell_status_);
}
inline void CellMetadata::_internal_set_cell_status(::seigr::cell_metadata::CellStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_status_ = value;
}

// .seigr.cell_metadata.CellType cell_type = 3;
inline void CellMetadata::clear_cell_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_type_ = 0;
}
inline ::seigr::cell_metadata::CellType CellMetadata::cell_type() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.cell_type)
  return _internal_cell_type();
}
inline void CellMetadata::set_cell_type(::seigr::cell_metadata::CellType value) {
  _internal_set_cell_type(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.cell_type)
}
inline ::seigr::cell_metadata::CellType CellMetadata::_internal_cell_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::cell_metadata::CellType>(_impl_.cell_type_);
}
inline void CellMetadata::_internal_set_cell_type(::seigr::cell_metadata::CellType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_type_ = value;
}

// string created_by = 4;
inline void CellMetadata::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& CellMetadata::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.created_by)
}
inline std::string* CellMetadata::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.created_by)
  return _s;
}
inline const std::string& CellMetadata::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void CellMetadata::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.created_by)
  return _impl_.created_by_.Release();
}
inline void CellMetadata::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.created_by)
}

// string creation_timestamp = 5;
inline void CellMetadata::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.ClearToEmpty();
}
inline const std::string& CellMetadata::creation_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.creation_timestamp)
  return _internal_creation_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_creation_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.creation_timestamp)
}
inline std::string* CellMetadata::mutable_creation_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creation_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.creation_timestamp)
  return _s;
}
inline const std::string& CellMetadata::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_.Get();
}
inline void CellMetadata::_internal_set_creation_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creation_timestamp_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.creation_timestamp)
  return _impl_.creation_timestamp_.Release();
}
inline void CellMetadata::set_allocated_creation_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creation_timestamp_.IsDefault()) {
    _impl_.creation_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.creation_timestamp)
}

// string last_modified_timestamp = 6;
inline void CellMetadata::clear_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.ClearToEmpty();
}
inline const std::string& CellMetadata::last_modified_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.last_modified_timestamp)
  return _internal_last_modified_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_last_modified_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.last_modified_timestamp)
}
inline std::string* CellMetadata::mutable_last_modified_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_modified_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.last_modified_timestamp)
  return _s;
}
inline const std::string& CellMetadata::_internal_last_modified_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_timestamp_.Get();
}
inline void CellMetadata::_internal_set_last_modified_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_modified_timestamp_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_last_modified_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.last_modified_timestamp)
  return _impl_.last_modified_timestamp_.Release();
}
inline void CellMetadata::set_allocated_last_modified_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_modified_timestamp_.IsDefault()) {
    _impl_.last_modified_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.last_modified_timestamp)
}

// string primary_hash = 7;
inline void CellMetadata::clear_primary_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_hash_.ClearToEmpty();
}
inline const std::string& CellMetadata::primary_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.primary_hash)
  return _internal_primary_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_primary_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.primary_hash)
}
inline std::string* CellMetadata::mutable_primary_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_hash();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.primary_hash)
  return _s;
}
inline const std::string& CellMetadata::_internal_primary_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_hash_.Get();
}
inline void CellMetadata::_internal_set_primary_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_hash_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_primary_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_hash_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_primary_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.primary_hash)
  return _impl_.primary_hash_.Release();
}
inline void CellMetadata::set_allocated_primary_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_hash_.IsDefault()) {
    _impl_.primary_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.primary_hash)
}

// repeated string lineage = 8;
inline int CellMetadata::_internal_lineage_size() const {
  return _internal_lineage().size();
}
inline int CellMetadata::lineage_size() const {
  return _internal_lineage_size();
}
inline void CellMetadata::clear_lineage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lineage_.Clear();
}
inline std::string* CellMetadata::add_lineage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_lineage()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.cell_metadata.CellMetadata.lineage)
  return _s;
}
inline const std::string& CellMetadata::lineage(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.lineage)
  return _internal_lineage().Get(index);
}
inline std::string* CellMetadata::mutable_lineage(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.lineage)
  return _internal_mutable_lineage()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::set_lineage(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_lineage()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.lineage)
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::add_lineage(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_lineage(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadata.lineage)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::lineage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadata.lineage)
  return _internal_lineage();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::mutable_lineage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadata.lineage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lineage();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::_internal_lineage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lineage_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::_internal_mutable_lineage() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lineage_;
}

// map<string, string> custom_attributes = 9;
inline int CellMetadata::_internal_custom_attributes_size() const {
  return _internal_custom_attributes().size();
}
inline int CellMetadata::custom_attributes_size() const {
  return _internal_custom_attributes_size();
}
inline void CellMetadata::clear_custom_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadata::_internal_custom_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadata::custom_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellMetadata.custom_attributes)
  return _internal_custom_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadata::_internal_mutable_custom_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.custom_attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadata::mutable_custom_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellMetadata.custom_attributes)
  return _internal_mutable_custom_attributes();
}

// repeated .seigr.cell_metadata.CellOperationLog operation_logs = 10;
inline int CellMetadata::_internal_operation_logs_size() const {
  return _internal_operation_logs().size();
}
inline int CellMetadata::operation_logs_size() const {
  return _internal_operation_logs_size();
}
inline void CellMetadata::clear_operation_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_logs_.Clear();
}
inline ::seigr::cell_metadata::CellOperationLog* CellMetadata::mutable_operation_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.operation_logs)
  return _internal_mutable_operation_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>* CellMetadata::mutable_operation_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadata.operation_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_operation_logs();
}
inline const ::seigr::cell_metadata::CellOperationLog& CellMetadata::operation_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.operation_logs)
  return _internal_operation_logs().Get(index);
}
inline ::seigr::cell_metadata::CellOperationLog* CellMetadata::add_operation_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::cell_metadata::CellOperationLog* _add = _internal_mutable_operation_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadata.operation_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>& CellMetadata::operation_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadata.operation_logs)
  return _internal_operation_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>&
CellMetadata::_internal_operation_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::cell_metadata::CellOperationLog>*
CellMetadata::_internal_mutable_operation_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.operation_logs_;
}

// string retention_period = 11;
inline void CellMetadata::clear_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.ClearToEmpty();
}
inline const std::string& CellMetadata::retention_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.retention_period)
  return _internal_retention_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_retention_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.retention_period)
}
inline std::string* CellMetadata::mutable_retention_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retention_period();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.retention_period)
  return _s;
}
inline const std::string& CellMetadata::_internal_retention_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retention_period_.Get();
}
inline void CellMetadata::_internal_set_retention_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.retention_period_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.retention_period)
  return _impl_.retention_period_.Release();
}
inline void CellMetadata::set_allocated_retention_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.retention_period_.IsDefault()) {
    _impl_.retention_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.retention_period)
}

// string compliance_policy = 12;
inline void CellMetadata::clear_compliance_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_policy_.ClearToEmpty();
}
inline const std::string& CellMetadata::compliance_policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.compliance_policy)
  return _internal_compliance_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_compliance_policy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.compliance_policy)
}
inline std::string* CellMetadata::mutable_compliance_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_policy();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.compliance_policy)
  return _s;
}
inline const std::string& CellMetadata::_internal_compliance_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_policy_.Get();
}
inline void CellMetadata::_internal_set_compliance_policy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_policy_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_compliance_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_policy_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_compliance_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.compliance_policy)
  return _impl_.compliance_policy_.Release();
}
inline void CellMetadata::set_allocated_compliance_policy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_policy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_policy_.IsDefault()) {
    _impl_.compliance_policy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.compliance_policy)
}

// repeated string authorized_users = 13;
inline int CellMetadata::_internal_authorized_users_size() const {
  return _internal_authorized_users().size();
}
inline int CellMetadata::authorized_users_size() const {
  return _internal_authorized_users_size();
}
inline void CellMetadata::clear_authorized_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorized_users_.Clear();
}
inline std::string* CellMetadata::add_authorized_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_authorized_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.cell_metadata.CellMetadata.authorized_users)
  return _s;
}
inline const std::string& CellMetadata::authorized_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.authorized_users)
  return _internal_authorized_users().Get(index);
}
inline std::string* CellMetadata::mutable_authorized_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.authorized_users)
  return _internal_mutable_authorized_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::set_authorized_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_authorized_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.authorized_users)
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::add_authorized_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_authorized_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadata.authorized_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::authorized_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadata.authorized_users)
  return _internal_authorized_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::mutable_authorized_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadata.authorized_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_authorized_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::_internal_authorized_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authorized_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::_internal_mutable_authorized_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.authorized_users_;
}

// string encryption_protocol = 14;
inline void CellMetadata::clear_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.ClearToEmpty();
}
inline const std::string& CellMetadata::encryption_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.encryption_protocol)
  return _internal_encryption_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_encryption_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.encryption_protocol)
}
inline std::string* CellMetadata::mutable_encryption_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encryption_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.encryption_protocol)
  return _s;
}
inline const std::string& CellMetadata::_internal_encryption_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encryption_protocol_.Get();
}
inline void CellMetadata::_internal_set_encryption_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encryption_protocol_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_encryption_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.encryption_protocol)
  return _impl_.encryption_protocol_.Release();
}
inline void CellMetadata::set_allocated_encryption_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encryption_protocol_.IsDefault()) {
    _impl_.encryption_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.encryption_protocol)
}

// string network_protocol = 15;
inline void CellMetadata::clear_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.ClearToEmpty();
}
inline const std::string& CellMetadata::network_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.network_protocol)
  return _internal_network_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_network_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.network_protocol)
}
inline std::string* CellMetadata::mutable_network_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.network_protocol)
  return _s;
}
inline const std::string& CellMetadata::_internal_network_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_protocol_.Get();
}
inline void CellMetadata::_internal_set_network_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.network_protocol_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_network_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.network_protocol)
  return _impl_.network_protocol_.Release();
}
inline void CellMetadata::set_allocated_network_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_protocol_.IsDefault()) {
    _impl_.network_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.network_protocol)
}

// string backup_location = 16;
inline void CellMetadata::clear_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_location_.ClearToEmpty();
}
inline const std::string& CellMetadata::backup_location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.backup_location)
  return _internal_backup_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_backup_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.backup_location)
}
inline std::string* CellMetadata::mutable_backup_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_backup_location();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.backup_location)
  return _s;
}
inline const std::string& CellMetadata::_internal_backup_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.backup_location_.Get();
}
inline void CellMetadata::_internal_set_backup_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_location_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.backup_location_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_backup_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.backup_location)
  return _impl_.backup_location_.Release();
}
inline void CellMetadata::set_allocated_backup_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.backup_location_.IsDefault()) {
    _impl_.backup_location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.backup_location)
}

// map<string, string> protocol_attributes = 17;
inline int CellMetadata::_internal_protocol_attributes_size() const {
  return _internal_protocol_attributes().size();
}
inline int CellMetadata::protocol_attributes_size() const {
  return _internal_protocol_attributes_size();
}
inline void CellMetadata::clear_protocol_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadata::_internal_protocol_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadata::protocol_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellMetadata.protocol_attributes)
  return _internal_protocol_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadata::_internal_mutable_protocol_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadata::mutable_protocol_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellMetadata.protocol_attributes)
  return _internal_mutable_protocol_attributes();
}

// bool is_encrypted = 18;
inline void CellMetadata::clear_is_encrypted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_encrypted_ = false;
}
inline bool CellMetadata::is_encrypted() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.is_encrypted)
  return _internal_is_encrypted();
}
inline void CellMetadata::set_is_encrypted(bool value) {
  _internal_set_is_encrypted(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.is_encrypted)
}
inline bool CellMetadata::_internal_is_encrypted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_encrypted_;
}
inline void CellMetadata::_internal_set_is_encrypted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_encrypted_ = value;
}

// bool access_logs_enabled = 19;
inline void CellMetadata::clear_access_logs_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_logs_enabled_ = false;
}
inline bool CellMetadata::access_logs_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.access_logs_enabled)
  return _internal_access_logs_enabled();
}
inline void CellMetadata::set_access_logs_enabled(bool value) {
  _internal_set_access_logs_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.access_logs_enabled)
}
inline bool CellMetadata::_internal_access_logs_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_logs_enabled_;
}
inline void CellMetadata::_internal_set_access_logs_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_logs_enabled_ = value;
}

// string storage_location = 20;
inline void CellMetadata::clear_storage_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.storage_location_.ClearToEmpty();
}
inline const std::string& CellMetadata::storage_location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.storage_location)
  return _internal_storage_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_storage_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.storage_location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.storage_location)
}
inline std::string* CellMetadata::mutable_storage_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_storage_location();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.storage_location)
  return _s;
}
inline const std::string& CellMetadata::_internal_storage_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.storage_location_.Get();
}
inline void CellMetadata::_internal_set_storage_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.storage_location_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_storage_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.storage_location_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_storage_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.storage_location)
  return _impl_.storage_location_.Release();
}
inline void CellMetadata::set_allocated_storage_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.storage_location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.storage_location_.IsDefault()) {
    _impl_.storage_location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.storage_location)
}

// string archival_policy = 21;
inline void CellMetadata::clear_archival_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archival_policy_.ClearToEmpty();
}
inline const std::string& CellMetadata::archival_policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.archival_policy)
  return _internal_archival_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_archival_policy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archival_policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.archival_policy)
}
inline std::string* CellMetadata::mutable_archival_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_archival_policy();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.archival_policy)
  return _s;
}
inline const std::string& CellMetadata::_internal_archival_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.archival_policy_.Get();
}
inline void CellMetadata::_internal_set_archival_policy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archival_policy_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_archival_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.archival_policy_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_archival_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.archival_policy)
  return _impl_.archival_policy_.Release();
}
inline void CellMetadata::set_allocated_archival_policy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archival_policy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.archival_policy_.IsDefault()) {
    _impl_.archival_policy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.archival_policy)
}

// repeated string dependencies = 22;
inline int CellMetadata::_internal_dependencies_size() const {
  return _internal_dependencies().size();
}
inline int CellMetadata::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void CellMetadata::clear_dependencies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependencies_.Clear();
}
inline std::string* CellMetadata::add_dependencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dependencies()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.cell_metadata.CellMetadata.dependencies)
  return _s;
}
inline const std::string& CellMetadata::dependencies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.dependencies)
  return _internal_dependencies().Get(index);
}
inline std::string* CellMetadata::mutable_dependencies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.dependencies)
  return _internal_mutable_dependencies()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::set_dependencies(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dependencies()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.dependencies)
}
template <typename Arg_, typename... Args_>
inline void CellMetadata::add_dependencies(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dependencies(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadata.dependencies)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::dependencies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadata.dependencies)
  return _internal_dependencies();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::mutable_dependencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadata.dependencies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dependencies();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadata::_internal_dependencies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependencies_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadata::_internal_mutable_dependencies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dependencies_;
}

// string data_classification = 23;
inline void CellMetadata::clear_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_classification_.ClearToEmpty();
}
inline const std::string& CellMetadata::data_classification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.data_classification)
  return _internal_data_classification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_data_classification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_classification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.data_classification)
}
inline std::string* CellMetadata::mutable_data_classification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_classification();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.data_classification)
  return _s;
}
inline const std::string& CellMetadata::_internal_data_classification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_classification_.Get();
}
inline void CellMetadata::_internal_set_data_classification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_classification_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_classification_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.data_classification)
  return _impl_.data_classification_.Release();
}
inline void CellMetadata::set_allocated_data_classification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_classification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_classification_.IsDefault()) {
    _impl_.data_classification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.data_classification)
}

// string version = 24;
inline void CellMetadata::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& CellMetadata::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.version)
}
inline std::string* CellMetadata::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.version)
  return _s;
}
inline const std::string& CellMetadata::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void CellMetadata::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.version)
  return _impl_.version_.Release();
}
inline void CellMetadata::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.version)
}

// string last_accessed_by = 25;
inline void CellMetadata::clear_last_accessed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_by_.ClearToEmpty();
}
inline const std::string& CellMetadata::last_accessed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.last_accessed_by)
  return _internal_last_accessed_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_last_accessed_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.last_accessed_by)
}
inline std::string* CellMetadata::mutable_last_accessed_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_accessed_by();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.last_accessed_by)
  return _s;
}
inline const std::string& CellMetadata::_internal_last_accessed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_accessed_by_.Get();
}
inline void CellMetadata::_internal_set_last_accessed_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_by_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_last_accessed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_accessed_by_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_last_accessed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.last_accessed_by)
  return _impl_.last_accessed_by_.Release();
}
inline void CellMetadata::set_allocated_last_accessed_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_accessed_by_.IsDefault()) {
    _impl_.last_accessed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.last_accessed_by)
}

// string last_accessed_timestamp = 26;
inline void CellMetadata::clear_last_accessed_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_timestamp_.ClearToEmpty();
}
inline const std::string& CellMetadata::last_accessed_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadata.last_accessed_timestamp)
  return _internal_last_accessed_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadata::set_last_accessed_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadata.last_accessed_timestamp)
}
inline std::string* CellMetadata::mutable_last_accessed_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_accessed_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadata.last_accessed_timestamp)
  return _s;
}
inline const std::string& CellMetadata::_internal_last_accessed_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_accessed_timestamp_.Get();
}
inline void CellMetadata::_internal_set_last_accessed_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_timestamp_.Set(value, GetArena());
}
inline std::string* CellMetadata::_internal_mutable_last_accessed_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_accessed_timestamp_.Mutable( GetArena());
}
inline std::string* CellMetadata::release_last_accessed_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadata.last_accessed_timestamp)
  return _impl_.last_accessed_timestamp_.Release();
}
inline void CellMetadata::set_allocated_last_accessed_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_accessed_timestamp_.IsDefault()) {
    _impl_.last_accessed_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadata.last_accessed_timestamp)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellLifecycleCommand

// string cell_id = 1;
inline void CellLifecycleCommand::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& CellLifecycleCommand::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellLifecycleCommand.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellLifecycleCommand::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellLifecycleCommand.cell_id)
}
inline std::string* CellLifecycleCommand::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellLifecycleCommand.cell_id)
  return _s;
}
inline const std::string& CellLifecycleCommand::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void CellLifecycleCommand::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* CellLifecycleCommand::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* CellLifecycleCommand::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellLifecycleCommand.cell_id)
  return _impl_.cell_id_.Release();
}
inline void CellLifecycleCommand::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellLifecycleCommand.cell_id)
}

// string command_type = 2;
inline void CellLifecycleCommand::clear_command_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_type_.ClearToEmpty();
}
inline const std::string& CellLifecycleCommand::command_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellLifecycleCommand.command_type)
  return _internal_command_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellLifecycleCommand::set_command_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellLifecycleCommand.command_type)
}
inline std::string* CellLifecycleCommand::mutable_command_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_command_type();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellLifecycleCommand.command_type)
  return _s;
}
inline const std::string& CellLifecycleCommand::_internal_command_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_type_.Get();
}
inline void CellLifecycleCommand::_internal_set_command_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_type_.Set(value, GetArena());
}
inline std::string* CellLifecycleCommand::_internal_mutable_command_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.command_type_.Mutable( GetArena());
}
inline std::string* CellLifecycleCommand::release_command_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellLifecycleCommand.command_type)
  return _impl_.command_type_.Release();
}
inline void CellLifecycleCommand::set_allocated_command_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.command_type_.IsDefault()) {
    _impl_.command_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellLifecycleCommand.command_type)
}

// string initiated_by = 3;
inline void CellLifecycleCommand::clear_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.ClearToEmpty();
}
inline const std::string& CellLifecycleCommand::initiated_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellLifecycleCommand.initiated_by)
  return _internal_initiated_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellLifecycleCommand::set_initiated_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellLifecycleCommand.initiated_by)
}
inline std::string* CellLifecycleCommand::mutable_initiated_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initiated_by();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellLifecycleCommand.initiated_by)
  return _s;
}
inline const std::string& CellLifecycleCommand::_internal_initiated_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initiated_by_.Get();
}
inline void CellLifecycleCommand::_internal_set_initiated_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(value, GetArena());
}
inline std::string* CellLifecycleCommand::_internal_mutable_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initiated_by_.Mutable( GetArena());
}
inline std::string* CellLifecycleCommand::release_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellLifecycleCommand.initiated_by)
  return _impl_.initiated_by_.Release();
}
inline void CellLifecycleCommand::set_allocated_initiated_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initiated_by_.IsDefault()) {
    _impl_.initiated_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellLifecycleCommand.initiated_by)
}

// string timestamp = 4;
inline void CellLifecycleCommand::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& CellLifecycleCommand::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellLifecycleCommand.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellLifecycleCommand::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellLifecycleCommand.timestamp)
}
inline std::string* CellLifecycleCommand::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellLifecycleCommand.timestamp)
  return _s;
}
inline const std::string& CellLifecycleCommand::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void CellLifecycleCommand::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* CellLifecycleCommand::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* CellLifecycleCommand::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellLifecycleCommand.timestamp)
  return _impl_.timestamp_.Release();
}
inline void CellLifecycleCommand::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellLifecycleCommand.timestamp)
}

// map<string, string> metadata = 5;
inline int CellLifecycleCommand::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int CellLifecycleCommand::metadata_size() const {
  return _internal_metadata_size();
}
inline void CellLifecycleCommand::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellLifecycleCommand::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellLifecycleCommand::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellLifecycleCommand.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* CellLifecycleCommand::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellLifecycleCommand::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellLifecycleCommand.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellOperationResponse

// string cell_id = 1;
inline void CellOperationResponse::clear_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.ClearToEmpty();
}
inline const std::string& CellOperationResponse::cell_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationResponse.cell_id)
  return _internal_cell_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationResponse::set_cell_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationResponse.cell_id)
}
inline std::string* CellOperationResponse::mutable_cell_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationResponse.cell_id)
  return _s;
}
inline const std::string& CellOperationResponse::_internal_cell_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_id_.Get();
}
inline void CellOperationResponse::_internal_set_cell_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.Set(value, GetArena());
}
inline std::string* CellOperationResponse::_internal_mutable_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_id_.Mutable( GetArena());
}
inline std::string* CellOperationResponse::release_cell_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationResponse.cell_id)
  return _impl_.cell_id_.Release();
}
inline void CellOperationResponse::set_allocated_cell_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cell_id_.IsDefault()) {
    _impl_.cell_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationResponse.cell_id)
}

// bool success = 2;
inline void CellOperationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CellOperationResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationResponse.success)
  return _internal_success();
}
inline void CellOperationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationResponse.success)
}
inline bool CellOperationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CellOperationResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 3;
inline void CellOperationResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CellOperationResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationResponse.message)
}
inline std::string* CellOperationResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationResponse.message)
  return _s;
}
inline const std::string& CellOperationResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CellOperationResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CellOperationResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CellOperationResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationResponse.message)
  return _impl_.message_.Release();
}
inline void CellOperationResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationResponse.message)
}

// string updated_timestamp = 4;
inline void CellOperationResponse::clear_updated_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_timestamp_.ClearToEmpty();
}
inline const std::string& CellOperationResponse::updated_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellOperationResponse.updated_timestamp)
  return _internal_updated_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellOperationResponse::set_updated_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellOperationResponse.updated_timestamp)
}
inline std::string* CellOperationResponse::mutable_updated_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updated_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellOperationResponse.updated_timestamp)
  return _s;
}
inline const std::string& CellOperationResponse::_internal_updated_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_timestamp_.Get();
}
inline void CellOperationResponse::_internal_set_updated_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_timestamp_.Set(value, GetArena());
}
inline std::string* CellOperationResponse::_internal_mutable_updated_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.updated_timestamp_.Mutable( GetArena());
}
inline std::string* CellOperationResponse::release_updated_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellOperationResponse.updated_timestamp)
  return _impl_.updated_timestamp_.Release();
}
inline void CellOperationResponse::set_allocated_updated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.updated_timestamp_.IsDefault()) {
    _impl_.updated_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellOperationResponse.updated_timestamp)
}

// map<string, string> response_metadata = 5;
inline int CellOperationResponse::_internal_response_metadata_size() const {
  return _internal_response_metadata().size();
}
inline int CellOperationResponse::response_metadata_size() const {
  return _internal_response_metadata_size();
}
inline void CellOperationResponse::clear_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellOperationResponse::_internal_response_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellOperationResponse::response_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellOperationResponse.response_metadata)
  return _internal_response_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* CellOperationResponse::_internal_mutable_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellOperationResponse::mutable_response_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellOperationResponse.response_metadata)
  return _internal_mutable_response_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellMetadataQuery

// repeated string cell_ids = 1;
inline int CellMetadataQuery::_internal_cell_ids_size() const {
  return _internal_cell_ids().size();
}
inline int CellMetadataQuery::cell_ids_size() const {
  return _internal_cell_ids_size();
}
inline void CellMetadataQuery::clear_cell_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_ids_.Clear();
}
inline std::string* CellMetadataQuery::add_cell_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_cell_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.cell_metadata.CellMetadataQuery.cell_ids)
  return _s;
}
inline const std::string& CellMetadataQuery::cell_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.cell_ids)
  return _internal_cell_ids().Get(index);
}
inline std::string* CellMetadataQuery::mutable_cell_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadataQuery.cell_ids)
  return _internal_mutable_cell_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CellMetadataQuery::set_cell_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_cell_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.cell_ids)
}
template <typename Arg_, typename... Args_>
inline void CellMetadataQuery::add_cell_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_cell_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadataQuery.cell_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadataQuery::cell_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadataQuery.cell_ids)
  return _internal_cell_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadataQuery::mutable_cell_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadataQuery.cell_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cell_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CellMetadataQuery::_internal_cell_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CellMetadataQuery::_internal_mutable_cell_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cell_ids_;
}

// repeated .seigr.cell_metadata.CellStatus statuses = 2;
inline int CellMetadataQuery::_internal_statuses_size() const {
  return _internal_statuses().size();
}
inline int CellMetadataQuery::statuses_size() const {
  return _internal_statuses_size();
}
inline void CellMetadataQuery::clear_statuses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statuses_.Clear();
}
inline ::seigr::cell_metadata::CellStatus CellMetadataQuery::statuses(int index) const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.statuses)
  return static_cast<::seigr::cell_metadata::CellStatus>(_internal_statuses().Get(index));
}
inline void CellMetadataQuery::set_statuses(int index, ::seigr::cell_metadata::CellStatus value) {
  _internal_mutable_statuses()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.statuses)
}
inline void CellMetadataQuery::add_statuses(::seigr::cell_metadata::CellStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_statuses()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadataQuery.statuses)
}
inline const ::google::protobuf::RepeatedField<int>& CellMetadataQuery::statuses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadataQuery.statuses)
  return _internal_statuses();
}
inline ::google::protobuf::RepeatedField<int>* CellMetadataQuery::mutable_statuses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadataQuery.statuses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_statuses();
}
inline const ::google::protobuf::RepeatedField<int>& CellMetadataQuery::_internal_statuses()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.statuses_;
}
inline ::google::protobuf::RepeatedField<int>* CellMetadataQuery::_internal_mutable_statuses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.statuses_;
}

// repeated .seigr.cell_metadata.CellType types = 3;
inline int CellMetadataQuery::_internal_types_size() const {
  return _internal_types().size();
}
inline int CellMetadataQuery::types_size() const {
  return _internal_types_size();
}
inline void CellMetadataQuery::clear_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.types_.Clear();
}
inline ::seigr::cell_metadata::CellType CellMetadataQuery::types(int index) const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.types)
  return static_cast<::seigr::cell_metadata::CellType>(_internal_types().Get(index));
}
inline void CellMetadataQuery::set_types(int index, ::seigr::cell_metadata::CellType value) {
  _internal_mutable_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.types)
}
inline void CellMetadataQuery::add_types(::seigr::cell_metadata::CellType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_types()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.cell_metadata.CellMetadataQuery.types)
}
inline const ::google::protobuf::RepeatedField<int>& CellMetadataQuery::types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.cell_metadata.CellMetadataQuery.types)
  return _internal_types();
}
inline ::google::protobuf::RepeatedField<int>* CellMetadataQuery::mutable_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.cell_metadata.CellMetadataQuery.types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_types();
}
inline const ::google::protobuf::RepeatedField<int>& CellMetadataQuery::_internal_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.types_;
}
inline ::google::protobuf::RepeatedField<int>* CellMetadataQuery::_internal_mutable_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.types_;
}

// string created_by = 4;
inline void CellMetadataQuery::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& CellMetadataQuery::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadataQuery::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.created_by)
}
inline std::string* CellMetadataQuery::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadataQuery.created_by)
  return _s;
}
inline const std::string& CellMetadataQuery::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void CellMetadataQuery::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* CellMetadataQuery::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* CellMetadataQuery::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadataQuery.created_by)
  return _impl_.created_by_.Release();
}
inline void CellMetadataQuery::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadataQuery.created_by)
}

// string date_range_start = 5;
inline void CellMetadataQuery::clear_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.ClearToEmpty();
}
inline const std::string& CellMetadataQuery::date_range_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.date_range_start)
  return _internal_date_range_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadataQuery::set_date_range_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.date_range_start)
}
inline std::string* CellMetadataQuery::mutable_date_range_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_start();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadataQuery.date_range_start)
  return _s;
}
inline const std::string& CellMetadataQuery::_internal_date_range_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_start_.Get();
}
inline void CellMetadataQuery::_internal_set_date_range_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(value, GetArena());
}
inline std::string* CellMetadataQuery::_internal_mutable_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_start_.Mutable( GetArena());
}
inline std::string* CellMetadataQuery::release_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadataQuery.date_range_start)
  return _impl_.date_range_start_.Release();
}
inline void CellMetadataQuery::set_allocated_date_range_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_start_.IsDefault()) {
    _impl_.date_range_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadataQuery.date_range_start)
}

// string date_range_end = 6;
inline void CellMetadataQuery::clear_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.ClearToEmpty();
}
inline const std::string& CellMetadataQuery::date_range_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataQuery.date_range_end)
  return _internal_date_range_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadataQuery::set_date_range_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataQuery.date_range_end)
}
inline std::string* CellMetadataQuery::mutable_date_range_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_end();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadataQuery.date_range_end)
  return _s;
}
inline const std::string& CellMetadataQuery::_internal_date_range_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_end_.Get();
}
inline void CellMetadataQuery::_internal_set_date_range_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(value, GetArena());
}
inline std::string* CellMetadataQuery::_internal_mutable_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_end_.Mutable( GetArena());
}
inline std::string* CellMetadataQuery::release_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadataQuery.date_range_end)
  return _impl_.date_range_end_.Release();
}
inline void CellMetadataQuery::set_allocated_date_range_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_end_.IsDefault()) {
    _impl_.date_range_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadataQuery.date_range_end)
}

// map<string, string> additional_filters = 7;
inline int CellMetadataQuery::_internal_additional_filters_size() const {
  return _internal_additional_filters().size();
}
inline int CellMetadataQuery::additional_filters_size() const {
  return _internal_additional_filters_size();
}
inline void CellMetadataQuery::clear_additional_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_filters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadataQuery::_internal_additional_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_filters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CellMetadataQuery::additional_filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellMetadataQuery.additional_filters)
  return _internal_additional_filters();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadataQuery::_internal_mutable_additional_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_filters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CellMetadataQuery::mutable_additional_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellMetadataQuery.additional_filters)
  return _internal_mutable_additional_filters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CellMetadataStats

// int32 total_cells = 1;
inline void CellMetadataStats::clear_total_cells() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_cells_ = 0;
}
inline ::int32_t CellMetadataStats::total_cells() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.total_cells)
  return _internal_total_cells();
}
inline void CellMetadataStats::set_total_cells(::int32_t value) {
  _internal_set_total_cells(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.total_cells)
}
inline ::int32_t CellMetadataStats::_internal_total_cells() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_cells_;
}
inline void CellMetadataStats::_internal_set_total_cells(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_cells_ = value;
}

// int32 active_cells = 2;
inline void CellMetadataStats::clear_active_cells() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_cells_ = 0;
}
inline ::int32_t CellMetadataStats::active_cells() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.active_cells)
  return _internal_active_cells();
}
inline void CellMetadataStats::set_active_cells(::int32_t value) {
  _internal_set_active_cells(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.active_cells)
}
inline ::int32_t CellMetadataStats::_internal_active_cells() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_cells_;
}
inline void CellMetadataStats::_internal_set_active_cells(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_cells_ = value;
}

// int32 archived_cells = 3;
inline void CellMetadataStats::clear_archived_cells() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archived_cells_ = 0;
}
inline ::int32_t CellMetadataStats::archived_cells() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.archived_cells)
  return _internal_archived_cells();
}
inline void CellMetadataStats::set_archived_cells(::int32_t value) {
  _internal_set_archived_cells(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.archived_cells)
}
inline ::int32_t CellMetadataStats::_internal_archived_cells() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.archived_cells_;
}
inline void CellMetadataStats::_internal_set_archived_cells(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.archived_cells_ = value;
}

// int32 compromised_cells = 4;
inline void CellMetadataStats::clear_compromised_cells() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compromised_cells_ = 0;
}
inline ::int32_t CellMetadataStats::compromised_cells() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.compromised_cells)
  return _internal_compromised_cells();
}
inline void CellMetadataStats::set_compromised_cells(::int32_t value) {
  _internal_set_compromised_cells(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.compromised_cells)
}
inline ::int32_t CellMetadataStats::_internal_compromised_cells() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compromised_cells_;
}
inline void CellMetadataStats::_internal_set_compromised_cells(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compromised_cells_ = value;
}

// double average_retention_period = 5;
inline void CellMetadataStats::clear_average_retention_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_retention_period_ = 0;
}
inline double CellMetadataStats::average_retention_period() const {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.average_retention_period)
  return _internal_average_retention_period();
}
inline void CellMetadataStats::set_average_retention_period(double value) {
  _internal_set_average_retention_period(value);
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.average_retention_period)
}
inline double CellMetadataStats::_internal_average_retention_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_retention_period_;
}
inline void CellMetadataStats::_internal_set_average_retention_period(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_retention_period_ = value;
}

// map<string, int32> cell_type_counts = 6;
inline int CellMetadataStats::_internal_cell_type_counts_size() const {
  return _internal_cell_type_counts().size();
}
inline int CellMetadataStats::cell_type_counts_size() const {
  return _internal_cell_type_counts_size();
}
inline void CellMetadataStats::clear_cell_type_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cell_type_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& CellMetadataStats::_internal_cell_type_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cell_type_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& CellMetadataStats::cell_type_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.cell_metadata.CellMetadataStats.cell_type_counts)
  return _internal_cell_type_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* CellMetadataStats::_internal_mutable_cell_type_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cell_type_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* CellMetadataStats::mutable_cell_type_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.cell_metadata.CellMetadataStats.cell_type_counts)
  return _internal_mutable_cell_type_counts();
}

// string last_update_timestamp = 7;
inline void CellMetadataStats::clear_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.ClearToEmpty();
}
inline const std::string& CellMetadataStats::last_update_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.cell_metadata.CellMetadataStats.last_update_timestamp)
  return _internal_last_update_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CellMetadataStats::set_last_update_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.cell_metadata.CellMetadataStats.last_update_timestamp)
}
inline std::string* CellMetadataStats::mutable_last_update_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_update_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.cell_metadata.CellMetadataStats.last_update_timestamp)
  return _s;
}
inline const std::string& CellMetadataStats::_internal_last_update_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_update_timestamp_.Get();
}
inline void CellMetadataStats::_internal_set_last_update_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.Set(value, GetArena());
}
inline std::string* CellMetadataStats::_internal_mutable_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_update_timestamp_.Mutable( GetArena());
}
inline std::string* CellMetadataStats::release_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.cell_metadata.CellMetadataStats.last_update_timestamp)
  return _impl_.last_update_timestamp_.Release();
}
inline void CellMetadataStats::set_allocated_last_update_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_update_timestamp_.IsDefault()) {
    _impl_.last_update_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.cell_metadata.CellMetadataStats.last_update_timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cell_metadata
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::cell_metadata::CellStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::cell_metadata::CellStatus>() {
  return ::seigr::cell_metadata::CellStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::cell_metadata::CellType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::cell_metadata::CellType>() {
  return ::seigr::cell_metadata::CellType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cell_5fmetadata_2eproto_2epb_2eh
