// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: audit.proto
// Protobuf C++ Version: 5.29.2

#ifndef audit_2eproto_2epb_2eh
#define audit_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_audit_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_audit_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_audit_2eproto;
namespace seigr {
namespace audit {
class AuditConfig;
struct AuditConfigDefaultTypeInternal;
extern AuditConfigDefaultTypeInternal _AuditConfig_default_instance_;
class AuditConfig_MetadataEntry_DoNotUse;
struct AuditConfig_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditConfig_MetadataEntry_DoNotUseDefaultTypeInternal _AuditConfig_MetadataEntry_DoNotUse_default_instance_;
class AuditEntry;
struct AuditEntryDefaultTypeInternal;
extern AuditEntryDefaultTypeInternal _AuditEntry_default_instance_;
class AuditEntry_MetadataEntry_DoNotUse;
struct AuditEntry_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditEntry_MetadataEntry_DoNotUseDefaultTypeInternal _AuditEntry_MetadataEntry_DoNotUse_default_instance_;
class AuditTrail;
struct AuditTrailDefaultTypeInternal;
extern AuditTrailDefaultTypeInternal _AuditTrail_default_instance_;
class AuditTrail_QueryMetadataEntry_DoNotUse;
struct AuditTrail_QueryMetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditTrail_QueryMetadataEntry_DoNotUseDefaultTypeInternal _AuditTrail_QueryMetadataEntry_DoNotUse_default_instance_;
}  // namespace audit
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace audit {
enum AuditSeverity : int {
  AUDIT_SEVERITY_UNDEFINED = 0,
  AUDIT_INFO = 1,
  AUDIT_WARNING = 2,
  AUDIT_CRITICAL = 3,
  AuditSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuditSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuditSeverity_IsValid(int value);
extern const uint32_t AuditSeverity_internal_data_[];
constexpr AuditSeverity AuditSeverity_MIN = static_cast<AuditSeverity>(0);
constexpr AuditSeverity AuditSeverity_MAX = static_cast<AuditSeverity>(3);
constexpr int AuditSeverity_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AuditSeverity_descriptor();
template <typename T>
const std::string& AuditSeverity_Name(T value) {
  static_assert(std::is_same<T, AuditSeverity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuditSeverity_Name().");
  return AuditSeverity_Name(static_cast<AuditSeverity>(value));
}
template <>
inline const std::string& AuditSeverity_Name(AuditSeverity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuditSeverity_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuditSeverity_Parse(absl::string_view name, AuditSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuditSeverity>(
      AuditSeverity_descriptor(), name, value);
}
enum AuditActionType : int {
  AUDIT_ACTION_UNDEFINED = 0,
  AUDIT_ACTION_CREATE = 1,
  AUDIT_ACTION_UPDATE = 2,
  AUDIT_ACTION_DELETE = 3,
  AUDIT_ACTION_ACCESS = 4,
  AUDIT_ACTION_EXPORT = 5,
  AUDIT_ACTION_IMPORT = 6,
  AuditActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuditActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuditActionType_IsValid(int value);
extern const uint32_t AuditActionType_internal_data_[];
constexpr AuditActionType AuditActionType_MIN = static_cast<AuditActionType>(0);
constexpr AuditActionType AuditActionType_MAX = static_cast<AuditActionType>(6);
constexpr int AuditActionType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
AuditActionType_descriptor();
template <typename T>
const std::string& AuditActionType_Name(T value) {
  static_assert(std::is_same<T, AuditActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuditActionType_Name().");
  return AuditActionType_Name(static_cast<AuditActionType>(value));
}
template <>
inline const std::string& AuditActionType_Name(AuditActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuditActionType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool AuditActionType_Parse(absl::string_view name, AuditActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuditActionType>(
      AuditActionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AuditTrail_QueryMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditTrail_QueryMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditTrail_QueryMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditTrail_QueryMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditTrail_QueryMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditTrail_QueryMetadataEntry_DoNotUse*>(
        &_AuditTrail_QueryMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditEntry_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditEntry_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditEntry_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditEntry_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditEntry_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditEntry_MetadataEntry_DoNotUse*>(
        &_AuditEntry_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditConfig_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditConfig_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditConfig_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditConfig_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditConfig_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditConfig_MetadataEntry_DoNotUse*>(
        &_AuditConfig_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditEntry) */ {
 public:
  inline AuditEntry() : AuditEntry(nullptr) {}
  ~AuditEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditEntry(const AuditEntry& from) : AuditEntry(nullptr, from) {}
  inline AuditEntry(AuditEntry&& from) noexcept
      : AuditEntry(nullptr, std::move(from)) {}
  inline AuditEntry& operator=(const AuditEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditEntry& operator=(AuditEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditEntry* internal_default_instance() {
    return reinterpret_cast<const AuditEntry*>(
        &_AuditEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AuditEntry& a, AuditEntry& b) { a.Swap(&b); }
  inline void Swap(AuditEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditEntry& from) { AuditEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditEntry"; }

 protected:
  explicit AuditEntry(::google::protobuf::Arena* arena);
  AuditEntry(::google::protobuf::Arena* arena, const AuditEntry& from);
  AuditEntry(::google::protobuf::Arena* arena, AuditEntry&& from) noexcept
      : AuditEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kAuditIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kResourceIdFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kOutcomeFieldNumber = 7,
    kHashFieldNumber = 9,
    kActionFieldNumber = 4,
    kSeverityFieldNumber = 5,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string audit_id = 1;
  void clear_audit_id() ;
  const std::string& audit_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audit_id(Arg_&& arg, Args_... args);
  std::string* mutable_audit_id();
  PROTOBUF_NODISCARD std::string* release_audit_id();
  void set_allocated_audit_id(std::string* value);

  private:
  const std::string& _internal_audit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audit_id(
      const std::string& value);
  std::string* _internal_mutable_audit_id();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string resource_id = 3;
  void clear_resource_id() ;
  const std::string& resource_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resource_id(Arg_&& arg, Args_... args);
  std::string* mutable_resource_id();
  PROTOBUF_NODISCARD std::string* release_resource_id();
  void set_allocated_resource_id(std::string* value);

  private:
  const std::string& _internal_resource_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_id(
      const std::string& value);
  std::string* _internal_mutable_resource_id();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string outcome = 7;
  void clear_outcome() ;
  const std::string& outcome() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outcome(Arg_&& arg, Args_... args);
  std::string* mutable_outcome();
  PROTOBUF_NODISCARD std::string* release_outcome();
  void set_allocated_outcome(std::string* value);

  private:
  const std::string& _internal_outcome() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outcome(
      const std::string& value);
  std::string* _internal_mutable_outcome();

  public:
  // string hash = 9;
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // .seigr.audit.AuditActionType action = 4;
  void clear_action() ;
  ::seigr::audit::AuditActionType action() const;
  void set_action(::seigr::audit::AuditActionType value);

  private:
  ::seigr::audit::AuditActionType _internal_action() const;
  void _internal_set_action(::seigr::audit::AuditActionType value);

  public:
  // .seigr.audit.AuditSeverity severity = 5;
  void clear_severity() ;
  ::seigr::audit::AuditSeverity severity() const;
  void set_severity(::seigr::audit::AuditSeverity value);

  private:
  ::seigr::audit::AuditSeverity _internal_severity() const;
  void _internal_set_severity(::seigr::audit::AuditSeverity value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditEntry& from_msg);
    ::google::protobuf::internal::MapField<AuditEntry_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr audit_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr resource_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr outcome_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    int action_;
    int severity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_2eproto;
};
// -------------------------------------------------------------------

class AuditConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditConfig) */ {
 public:
  inline AuditConfig() : AuditConfig(nullptr) {}
  ~AuditConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditConfig(const AuditConfig& from) : AuditConfig(nullptr, from) {}
  inline AuditConfig(AuditConfig&& from) noexcept
      : AuditConfig(nullptr, std::move(from)) {}
  inline AuditConfig& operator=(const AuditConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditConfig& operator=(AuditConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditConfig* internal_default_instance() {
    return reinterpret_cast<const AuditConfig*>(
        &_AuditConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AuditConfig& a, AuditConfig& b) { a.Swap(&b); }
  inline void Swap(AuditConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditConfig& from) { AuditConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditConfig"; }

 protected:
  explicit AuditConfig(::google::protobuf::Arena* arena);
  AuditConfig(::google::protobuf::Arena* arena, const AuditConfig& from);
  AuditConfig(::google::protobuf::Arena* arena, AuditConfig&& from) noexcept
      : AuditConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 4,
    kLoggingLevelFieldNumber = 2,
    kRetentionDaysFieldNumber = 1,
    kEnableHashVerificationFieldNumber = 3,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string logging_level = 2;
  void clear_logging_level() ;
  const std::string& logging_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logging_level(Arg_&& arg, Args_... args);
  std::string* mutable_logging_level();
  PROTOBUF_NODISCARD std::string* release_logging_level();
  void set_allocated_logging_level(std::string* value);

  private:
  const std::string& _internal_logging_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logging_level(
      const std::string& value);
  std::string* _internal_mutable_logging_level();

  public:
  // int32 retention_days = 1;
  void clear_retention_days() ;
  ::int32_t retention_days() const;
  void set_retention_days(::int32_t value);

  private:
  ::int32_t _internal_retention_days() const;
  void _internal_set_retention_days(::int32_t value);

  public:
  // bool enable_hash_verification = 3;
  void clear_enable_hash_verification() ;
  bool enable_hash_verification() const;
  void set_enable_hash_verification(bool value);

  private:
  bool _internal_enable_hash_verification() const;
  void _internal_set_enable_hash_verification(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditConfig& from_msg);
    ::google::protobuf::internal::MapField<AuditConfig_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr logging_level_;
    ::int32_t retention_days_;
    bool enable_hash_verification_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_2eproto;
};
// -------------------------------------------------------------------

class AuditTrail final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditTrail) */ {
 public:
  inline AuditTrail() : AuditTrail(nullptr) {}
  ~AuditTrail() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditTrail* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditTrail));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditTrail(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditTrail(const AuditTrail& from) : AuditTrail(nullptr, from) {}
  inline AuditTrail(AuditTrail&& from) noexcept
      : AuditTrail(nullptr, std::move(from)) {}
  inline AuditTrail& operator=(const AuditTrail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditTrail& operator=(AuditTrail&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditTrail& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditTrail* internal_default_instance() {
    return reinterpret_cast<const AuditTrail*>(
        &_AuditTrail_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AuditTrail& a, AuditTrail& b) { a.Swap(&b); }
  inline void Swap(AuditTrail* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditTrail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditTrail* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditTrail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditTrail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditTrail& from) { AuditTrail::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditTrail* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditTrail"; }

 protected:
  explicit AuditTrail(::google::protobuf::Arena* arena);
  AuditTrail(::google::protobuf::Arena* arena, const AuditTrail& from);
  AuditTrail(::google::protobuf::Arena* arena, AuditTrail&& from) noexcept
      : AuditTrail(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 2,
    kQueryMetadataFieldNumber = 3,
    kTrailIdFieldNumber = 1,
    kGeneratedAtFieldNumber = 4,
  };
  // repeated .seigr.audit.AuditEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::seigr::audit::AuditEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>* _internal_mutable_entries();
  public:
  const ::seigr::audit::AuditEntry& entries(int index) const;
  ::seigr::audit::AuditEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>& entries() const;
  // map<string, string> query_metadata = 3;
  int query_metadata_size() const;
  private:
  int _internal_query_metadata_size() const;

  public:
  void clear_query_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& query_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_query_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_query_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_query_metadata();

  public:
  // string trail_id = 1;
  void clear_trail_id() ;
  const std::string& trail_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trail_id(Arg_&& arg, Args_... args);
  std::string* mutable_trail_id();
  PROTOBUF_NODISCARD std::string* release_trail_id();
  void set_allocated_trail_id(std::string* value);

  private:
  const std::string& _internal_trail_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trail_id(
      const std::string& value);
  std::string* _internal_mutable_trail_id();

  public:
  // string generated_at = 4;
  void clear_generated_at() ;
  const std::string& generated_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generated_at(Arg_&& arg, Args_... args);
  std::string* mutable_generated_at();
  PROTOBUF_NODISCARD std::string* release_generated_at();
  void set_allocated_generated_at(std::string* value);

  private:
  const std::string& _internal_generated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generated_at(
      const std::string& value);
  std::string* _internal_mutable_generated_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditTrail)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditTrail& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::audit::AuditEntry > entries_;
    ::google::protobuf::internal::MapField<AuditTrail_QueryMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        query_metadata_;
    ::google::protobuf::internal::ArenaStringPtr trail_id_;
    ::google::protobuf::internal::ArenaStringPtr generated_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditEntry

// string audit_id = 1;
inline void AuditEntry::clear_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.ClearToEmpty();
}
inline const std::string& AuditEntry::audit_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.audit_id)
  return _internal_audit_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_audit_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.audit_id)
}
inline std::string* AuditEntry::mutable_audit_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audit_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.audit_id)
  return _s;
}
inline const std::string& AuditEntry::_internal_audit_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_id_.Get();
}
inline void AuditEntry::_internal_set_audit_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audit_id_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.audit_id)
  return _impl_.audit_id_.Release();
}
inline void AuditEntry::set_allocated_audit_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audit_id_.IsDefault()) {
    _impl_.audit_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.audit_id)
}

// string user_id = 2;
inline void AuditEntry::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& AuditEntry::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.user_id)
}
inline std::string* AuditEntry::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.user_id)
  return _s;
}
inline const std::string& AuditEntry::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void AuditEntry::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.user_id)
  return _impl_.user_id_.Release();
}
inline void AuditEntry::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.user_id)
}

// string resource_id = 3;
inline void AuditEntry::clear_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.ClearToEmpty();
}
inline const std::string& AuditEntry::resource_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.resource_id)
  return _internal_resource_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_resource_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.resource_id)
}
inline std::string* AuditEntry::mutable_resource_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resource_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.resource_id)
  return _s;
}
inline const std::string& AuditEntry::_internal_resource_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_id_.Get();
}
inline void AuditEntry::_internal_set_resource_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resource_id_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_resource_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.resource_id)
  return _impl_.resource_id_.Release();
}
inline void AuditEntry::set_allocated_resource_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resource_id_.IsDefault()) {
    _impl_.resource_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.resource_id)
}

// .seigr.audit.AuditActionType action = 4;
inline void AuditEntry::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::seigr::audit::AuditActionType AuditEntry::action() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.action)
  return _internal_action();
}
inline void AuditEntry::set_action(::seigr::audit::AuditActionType value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.action)
}
inline ::seigr::audit::AuditActionType AuditEntry::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::audit::AuditActionType>(_impl_.action_);
}
inline void AuditEntry::_internal_set_action(::seigr::audit::AuditActionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// .seigr.audit.AuditSeverity severity = 5;
inline void AuditEntry::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = 0;
}
inline ::seigr::audit::AuditSeverity AuditEntry::severity() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.severity)
  return _internal_severity();
}
inline void AuditEntry::set_severity(::seigr::audit::AuditSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.severity)
}
inline ::seigr::audit::AuditSeverity AuditEntry::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::audit::AuditSeverity>(_impl_.severity_);
}
inline void AuditEntry::_internal_set_severity(::seigr::audit::AuditSeverity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = value;
}

// string timestamp = 6;
inline void AuditEntry::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& AuditEntry::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.timestamp)
}
inline std::string* AuditEntry::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.timestamp)
  return _s;
}
inline const std::string& AuditEntry::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void AuditEntry::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.timestamp)
  return _impl_.timestamp_.Release();
}
inline void AuditEntry::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.timestamp)
}

// string outcome = 7;
inline void AuditEntry::clear_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_.ClearToEmpty();
}
inline const std::string& AuditEntry::outcome() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.outcome)
  return _internal_outcome();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_outcome(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.outcome)
}
inline std::string* AuditEntry::mutable_outcome() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outcome();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.outcome)
  return _s;
}
inline const std::string& AuditEntry::_internal_outcome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outcome_.Get();
}
inline void AuditEntry::_internal_set_outcome(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.outcome_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.outcome)
  return _impl_.outcome_.Release();
}
inline void AuditEntry::set_allocated_outcome(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.outcome_.IsDefault()) {
    _impl_.outcome_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.outcome)
}

// map<string, string> metadata = 8;
inline int AuditEntry::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AuditEntry::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuditEntry::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditEntry::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditEntry::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditEntry.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditEntry::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditEntry::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditEntry.metadata)
  return _internal_mutable_metadata();
}

// string hash = 9;
inline void AuditEntry::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& AuditEntry::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditEntry.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditEntry::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditEntry.hash)
}
inline std::string* AuditEntry::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditEntry.hash)
  return _s;
}
inline const std::string& AuditEntry::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void AuditEntry::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* AuditEntry::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* AuditEntry::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditEntry.hash)
  return _impl_.hash_.Release();
}
inline void AuditEntry::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditEntry.hash)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditTrail

// string trail_id = 1;
inline void AuditTrail::clear_trail_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trail_id_.ClearToEmpty();
}
inline const std::string& AuditTrail::trail_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditTrail.trail_id)
  return _internal_trail_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditTrail::set_trail_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trail_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditTrail.trail_id)
}
inline std::string* AuditTrail::mutable_trail_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trail_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditTrail.trail_id)
  return _s;
}
inline const std::string& AuditTrail::_internal_trail_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trail_id_.Get();
}
inline void AuditTrail::_internal_set_trail_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trail_id_.Set(value, GetArena());
}
inline std::string* AuditTrail::_internal_mutable_trail_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.trail_id_.Mutable( GetArena());
}
inline std::string* AuditTrail::release_trail_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditTrail.trail_id)
  return _impl_.trail_id_.Release();
}
inline void AuditTrail::set_allocated_trail_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trail_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.trail_id_.IsDefault()) {
    _impl_.trail_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditTrail.trail_id)
}

// repeated .seigr.audit.AuditEntry entries = 2;
inline int AuditTrail::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AuditTrail::entries_size() const {
  return _internal_entries_size();
}
inline void AuditTrail::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::seigr::audit::AuditEntry* AuditTrail::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditTrail.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>* AuditTrail::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditTrail.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::seigr::audit::AuditEntry& AuditTrail::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditTrail.entries)
  return _internal_entries().Get(index);
}
inline ::seigr::audit::AuditEntry* AuditTrail::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::audit::AuditEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:seigr.audit.AuditTrail.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>& AuditTrail::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditTrail.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>&
AuditTrail::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditEntry>*
AuditTrail::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// map<string, string> query_metadata = 3;
inline int AuditTrail::_internal_query_metadata_size() const {
  return _internal_query_metadata().size();
}
inline int AuditTrail::query_metadata_size() const {
  return _internal_query_metadata_size();
}
inline void AuditTrail::clear_query_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditTrail::_internal_query_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditTrail::query_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditTrail.query_metadata)
  return _internal_query_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditTrail::_internal_mutable_query_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.query_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditTrail::mutable_query_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditTrail.query_metadata)
  return _internal_mutable_query_metadata();
}

// string generated_at = 4;
inline void AuditTrail::clear_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.ClearToEmpty();
}
inline const std::string& AuditTrail::generated_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditTrail.generated_at)
  return _internal_generated_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditTrail::set_generated_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditTrail.generated_at)
}
inline std::string* AuditTrail::mutable_generated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generated_at();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditTrail.generated_at)
  return _s;
}
inline const std::string& AuditTrail::_internal_generated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_at_.Get();
}
inline void AuditTrail::_internal_set_generated_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.Set(value, GetArena());
}
inline std::string* AuditTrail::_internal_mutable_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.generated_at_.Mutable( GetArena());
}
inline std::string* AuditTrail::release_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditTrail.generated_at)
  return _impl_.generated_at_.Release();
}
inline void AuditTrail::set_allocated_generated_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generated_at_.IsDefault()) {
    _impl_.generated_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditTrail.generated_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditConfig

// int32 retention_days = 1;
inline void AuditConfig::clear_retention_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_days_ = 0;
}
inline ::int32_t AuditConfig::retention_days() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditConfig.retention_days)
  return _internal_retention_days();
}
inline void AuditConfig::set_retention_days(::int32_t value) {
  _internal_set_retention_days(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditConfig.retention_days)
}
inline ::int32_t AuditConfig::_internal_retention_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retention_days_;
}
inline void AuditConfig::_internal_set_retention_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retention_days_ = value;
}

// string logging_level = 2;
inline void AuditConfig::clear_logging_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logging_level_.ClearToEmpty();
}
inline const std::string& AuditConfig::logging_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditConfig.logging_level)
  return _internal_logging_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditConfig::set_logging_level(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logging_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditConfig.logging_level)
}
inline std::string* AuditConfig::mutable_logging_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logging_level();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditConfig.logging_level)
  return _s;
}
inline const std::string& AuditConfig::_internal_logging_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logging_level_.Get();
}
inline void AuditConfig::_internal_set_logging_level(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logging_level_.Set(value, GetArena());
}
inline std::string* AuditConfig::_internal_mutable_logging_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.logging_level_.Mutable( GetArena());
}
inline std::string* AuditConfig::release_logging_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditConfig.logging_level)
  return _impl_.logging_level_.Release();
}
inline void AuditConfig::set_allocated_logging_level(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logging_level_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logging_level_.IsDefault()) {
    _impl_.logging_level_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditConfig.logging_level)
}

// bool enable_hash_verification = 3;
inline void AuditConfig::clear_enable_hash_verification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_hash_verification_ = false;
}
inline bool AuditConfig::enable_hash_verification() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditConfig.enable_hash_verification)
  return _internal_enable_hash_verification();
}
inline void AuditConfig::set_enable_hash_verification(bool value) {
  _internal_set_enable_hash_verification(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditConfig.enable_hash_verification)
}
inline bool AuditConfig::_internal_enable_hash_verification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_hash_verification_;
}
inline void AuditConfig::_internal_set_enable_hash_verification(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_hash_verification_ = value;
}

// map<string, string> metadata = 4;
inline int AuditConfig::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AuditConfig::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuditConfig::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditConfig::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditConfig::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditConfig.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditConfig::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditConfig::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditConfig.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace audit
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::audit::AuditSeverity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::audit::AuditSeverity>() {
  return ::seigr::audit::AuditSeverity_descriptor();
}
template <>
struct is_proto_enum<::seigr::audit::AuditActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::audit::AuditActionType>() {
  return ::seigr::audit::AuditActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // audit_2eproto_2epb_2eh
