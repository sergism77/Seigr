syntax = "proto3";

package seigr;

import "file_metadata.proto";
import "segment_metadata.proto";
import "lineage.proto";
import "pipeline.proto";
import "access_control.proto";
import "replication.proto";
import "hashing.proto"; // Ensure import for HashData, HashAlgorithm, and VerificationStatus

// Primary message for managing seed clusters in the Seigr network.
message SeedDotSeigr {
    string root_hash = 1;                        // Primary root hash for uniquely identifying the seed
    string seed_hash = 2;                        // Unique hash representing this specific seed cluster
    string creation_timestamp = 3;               // ISO 8601 timestamp of when the seed was created
    
    repeated SegmentMetadata segments = 4;       // Metadata for segments within this seed
    repeated string connected_clusters = 5;      // References to other clusters linked to this seed
    repeated LineageEntry lineage_entries = 6;   // Lineage entries tracking modifications and history

    bool is_secondary_active = 7;                // Flag indicating if secondary clusters are active
    string version = 8;                          // Version identifier for this SeedDotSeigr structure
    FileMetadata file_metadata = 9;              // Metadata related to the seedâ€™s core file and content

    repeated TemporalLayer temporal_layers = 10; // Historical states for rollback and recovery
    int64 last_ping = 11;                        // Last recorded network ping for connectivity
    AccessControlList acl = 12;                  // Access control list defining permissions

    HashData integrity_checksum_data = 13;       // Correct use of HashData for integrity data
    repeated PipelineStage pipeline_stages = 14; // Workflow processing stages within the seed

    repeated seigr.OperationLog operation_logs = 15; // Logs of actions and operations on the seed

    VerificationStatus integrity_status = 16;    // Updated to use VerificationStatus
    string last_verified = 17;                   // Timestamp of the most recent successful integrity check

    repeated IntegrityVerification integrity_history = 18; // History of past integrity checks
    map<string, bytes> custom_data = 19;         // Customizable data for flexible information

    ReplicationStatus replication_status = 20;   // Current replication status of this seed in the network
    repeated Compatibility compatibility_history = 21; // Log of compatibility updates

    map<string, string> metadata = 22;           // Additional contextual metadata for the seed
}

// Message for logging detailed integrity checks on segments within the seed.
message IntegrityVerification {
    VerificationStatus status = 1;               // Updated to use VerificationStatus
    string timestamp = 2;                        // Timestamp of the integrity check
    string verifier_id = 3;                      // ID of the verifier (optional)
    map<string, string> details = 4;             // Additional details or context
    string integrity_level = 5;                  // Level of integrity verification (e.g., "FULL", "QUICK")
    string error_message = 6;                    // Error message if verification fails
    string integrity_context = 7;                // Additional context or area of focus
}

// Message to handle compatibility tracking and migration information for version updates.
message Compatibility {
    string target_version = 1;                   // Version identifier for compatibility target
    string migration_status = 2;                 // Status of migration efforts (e.g., "COMPLETED")
    map<string, string> compatibility_notes = 3; // Notes about compatibility issues
    string last_tested = 4;                      // Timestamp of the last compatibility check
    repeated string affected_components = 5;     // Components impacted by compatibility issues
    map<string, string> migration_metadata = 6;  // Metadata for migration context
    string migration_strategy = 7;               // Strategy for compatibility adjustments
    bool adaptive_migration_enabled = 8;         // Enables adaptive migration adjustments
}
