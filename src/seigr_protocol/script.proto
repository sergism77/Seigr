syntax = "proto3";

package seigr.script;

import "error_handling.proto";  // seigr.ErrorResolutionStrategy
import "pipeline.proto";        // seigr.OperationStatus

/**
 * Script Protocol
 *
 * Defines the framework for managing and executing scripts in the Seigr ecosystem,
 * ensuring robust error handling, scalability, and eco-conscious operations.
 */

// ===========================
// ENUM DEFINITIONS
// ===========================

/**
 * Defines allowed actions a script can perform.
 */
enum AllowedAction {
    SCRIPT_ACTION_UNDEFINED = 0;        // Undefined action
    READ = 1;                           // Read data/files
    WRITE = 2;                          // Write data/files
    EXECUTE = 3;                        // Execute code/commands
    DELETE = 4;                         // Delete data/files
    NETWORK_ACCESS = 5;                 // Network access
    SYSTEM_CALL = 6;                    // System-level calls
    LOGGING = 7;                        // Logging events
    ADAPTIVE_RESOURCE_MANAGEMENT = 8;   // Adaptive resource management
    FILE_TRANSFER = 9;                  // File transfer operations
}

/**
 * Defines logging levels for script execution.
 */
enum LogLevel {
    LOG_LEVEL_UNDEFINED = 0;
    LOG_LEVEL_DEBUG = 1;
    LOG_LEVEL_INFO = 2;
    LOG_LEVEL_WARNING = 3;
    LOG_LEVEL_ERROR = 4;
    LOG_LEVEL_CRITICAL = 5;
}

// ===========================
// SCRIPT DEFINITION
// ===========================

/**
 * Represents a script with execution constraints and sandboxing options.
 */
message Script {
    string script_id = 1;                   // Unique identifier for the script
    string language = 2;                    // Script language (e.g., Python, JavaScript, WASM)
    bytes code = 3;                         // Script code (binary or plain text)
    map<string, string> environment = 4;    // Environment variables/settings
    bool is_sandboxed = 5;                  // Sandbox isolation enabled/disabled

    string version = 6;                     // Script version
    bytes code_hash = 7;                    // Integrity hash for script code

    int32 max_runtime_ms = 8;               // Max runtime in milliseconds
    int32 max_memory_mb = 9;                // Max memory usage in MB
    int32 max_cpu_usage_percent = 10;       // Max CPU usage percentage
    int32 max_disk_usage_mb = 11;           // Max disk usage in MB
    bool allow_external_network = 12;       // Allow network access

    repeated AllowedAction allowed_actions = 13; // Allowed actions
    repeated string dependencies = 14;      // Required dependencies

    seigr.error_handling.ErrorResolutionStrategy error_handling = 15; // Error handling strategy
    LogLevel log_level = 16;                // Logging level

    map<string, string> metadata = 17;      // Additional metadata
    bool enable_tracing = 18;               // Enable tracing
    bool enable_profiling = 19;             // Enable profiling
    bool requires_user_input = 20;          // User interaction required
    bool eco_mode = 21;                     // Eco-conscious execution mode
    bool enable_detailed_metrics = 22;      // Enable collection of detailed metrics
}

// ===========================
// SCRIPT EXECUTION
// ===========================

/**
 * Represents a script execution request.
 */
message ScriptExecutionRequest {
    string request_id = 1;                  // Unique request ID
    string script_id = 2;                   // Script to execute
    map<string, string> input_parameters = 3; // Input parameters
    string initiated_by = 4;                // User/system initiating execution
    string requested_at = 5;                // Request timestamp
    bool async_execution = 6;               // Asynchronous execution
    int32 timeout_limit_ms = 7;             // Execution timeout
    string priority_level = 8;              // Execution priority
    bool eco_mode_enabled = 9;              // Eco-conscious execution
    bool enable_execution_snapshot = 10;    // Enable snapshots for rollback
}

/**
 * Represents the result of a script execution.
 */
message ScriptExecutionResult {
    string request_id = 1;                  // Request ID
    string script_id = 2;                   // Script ID
    bool success = 3;                       // Execution success status
    string result_data = 4;                 // Output data/result
    string error_message = 5;               // Error message if failed
    string completed_at = 6;                // Completion timestamp
    map<string, string> execution_metadata = 7; // Execution metadata
    repeated string warnings = 8;           // Execution warnings
    float execution_duration_ms = 9;        // Execution duration
    int64 memory_used_bytes = 10;           // Memory usage in bytes
    int64 disk_usage_bytes = 11;            // Disk usage in bytes
    float energy_consumption_kwh = 12;      // Energy consumed during execution
}

// ===========================
// DEPENDENCY MANAGEMENT
// ===========================

/**
 * Handles dependency management for scripts.
 */
message DependencyManager {
    repeated string local_dependencies = 1; // Local dependencies
    repeated string remote_dependencies = 2; // Remote dependencies
    map<string, string> dependency_metadata = 3; // Dependency metadata
    string dependency_checksum = 4;         // Dependency validation checksum
    bool auto_resolve_conflicts = 5;        // Auto-resolve version conflicts
    bool cache_dependencies = 6;            // Enable dependency caching
    string dependency_source_type = 7;      // Source type (local/external)
    int32 max_dependency_size_mb = 8;       // Max size of dependencies
    string dependency_resolution_strategy = 9; // Strategy for resolving conflicts
}

// ===========================
// MONITORING AND LOGGING
// ===========================

/**
 * Monitors real-time script execution metrics.
 */
message ScriptMonitoring {
    string script_id = 1;                   // Script ID
    string execution_id = 2;                // Execution instance ID
    float cpu_usage = 3;                    // CPU usage in %
    float memory_usage = 4;                 // Memory usage in MB
    float disk_usage = 5;                   // Disk usage in MB
    string last_checked_at = 6;             // Last monitoring check timestamp
    string status_message = 7;              // Status details
    map<string, string> monitoring_metadata = 8; // Metadata
    int32 current_step = 9;                 // Current execution step
    string progress_percentage = 10;        // Execution progress
    bool flagged_for_manual_review = 11;    // Requires manual review
    float estimated_energy_usage_kwh = 12;  // Energy usage estimate
    bool is_sandbox_violation_detected = 13; // Flag for sandbox violation
}

// ===========================
// CONFIGURATION
// ===========================

/**
 * Configuration for script execution environments.
 */
message ScriptConfig {
    int32 global_max_runtime_ms = 1;        // Global max runtime
    int32 global_memory_limit_mb = 2;       // Global memory limit
    bool enforce_sandboxing = 3;            // Enforce sandbox
    map<string, string> environment_vars = 4; // Default environment variables
    repeated AllowedAction global_allowed_actions = 5; // Globally allowed actions
    string fallback_script_id = 6;          // Fallback script ID
    bool enable_execution_logs = 7;         // Enable execution logs
    map<string, string> error_handling_overrides = 8; // Error handling strategies
    int32 max_retries_on_failure = 9;       // Max retries
    bool eco_mode_default = 10;             // Default eco-mode
    bool enable_global_snapshot = 11;       // Enable global execution snapshots
}

// ===========================
// EXECUTION HISTORY
// ===========================

/**
 * Tracks historical script executions.
 */
message ScriptExecutionHistory {
    string script_id = 1;                   // Script ID
    repeated ScriptExecutionRecord executions = 2; // Execution records
    int32 total_executions = 3;             // Total executions
    int32 successful_executions = 4;        // Successful executions
    int32 failed_executions = 5;            // Failed executions
    map<string, string> history_metadata = 6; // Metadata
}

/**
 * Represents an individual execution record.
 */
message ScriptExecutionRecord {
    string execution_id = 1;                // Execution instance ID
    string executed_at = 2;                 // Execution start time
    string finished_at = 3;                 // Execution end time
    seigr.pipeline.OperationStatus result_status = 4; // Execution status
    map<string, string> execution_details = 5; // Execution details
    string execution_summary = 6;           // Execution summary
    repeated string alerts = 7;             // Alerts during execution
    bool eco_execution_flag = 8;            // Eco-conscious execution flag
    string snapshot_reference = 9;          // Snapshot reference for rollback
}
