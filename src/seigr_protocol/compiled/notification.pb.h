// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: notification.proto
// Protobuf C++ Version: 5.29.2

#ifndef notification_2eproto_2epb_2eh
#define notification_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_notification_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_notification_2eproto;
namespace seigr {
namespace notification {
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class NotificationBatch;
struct NotificationBatchDefaultTypeInternal;
extern NotificationBatchDefaultTypeInternal _NotificationBatch_default_instance_;
class NotificationBatch_MetadataEntry_DoNotUse;
struct NotificationBatch_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NotificationBatch_MetadataEntry_DoNotUseDefaultTypeInternal _NotificationBatch_MetadataEntry_DoNotUse_default_instance_;
class NotificationEvent;
struct NotificationEventDefaultTypeInternal;
extern NotificationEventDefaultTypeInternal _NotificationEvent_default_instance_;
class NotificationEvent_MetadataEntry_DoNotUse;
struct NotificationEvent_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NotificationEvent_MetadataEntry_DoNotUseDefaultTypeInternal _NotificationEvent_MetadataEntry_DoNotUse_default_instance_;
class NotificationHistory;
struct NotificationHistoryDefaultTypeInternal;
extern NotificationHistoryDefaultTypeInternal _NotificationHistory_default_instance_;
class NotificationHistory_EngagementMetricsEntry_DoNotUse;
struct NotificationHistory_EngagementMetricsEntry_DoNotUseDefaultTypeInternal;
extern NotificationHistory_EngagementMetricsEntry_DoNotUseDefaultTypeInternal _NotificationHistory_EngagementMetricsEntry_DoNotUse_default_instance_;
class NotificationHistory_NotificationCountsEntry_DoNotUse;
struct NotificationHistory_NotificationCountsEntry_DoNotUseDefaultTypeInternal;
extern NotificationHistory_NotificationCountsEntry_DoNotUseDefaultTypeInternal _NotificationHistory_NotificationCountsEntry_DoNotUse_default_instance_;
class NotificationHistory_PriorityCountsEntry_DoNotUse;
struct NotificationHistory_PriorityCountsEntry_DoNotUseDefaultTypeInternal;
extern NotificationHistory_PriorityCountsEntry_DoNotUseDefaultTypeInternal _NotificationHistory_PriorityCountsEntry_DoNotUse_default_instance_;
class NotificationHistory_ResponseTimeAverageEntry_DoNotUse;
struct NotificationHistory_ResponseTimeAverageEntry_DoNotUseDefaultTypeInternal;
extern NotificationHistory_ResponseTimeAverageEntry_DoNotUseDefaultTypeInternal _NotificationHistory_ResponseTimeAverageEntry_DoNotUse_default_instance_;
class NotificationPreferences;
struct NotificationPreferencesDefaultTypeInternal;
extern NotificationPreferencesDefaultTypeInternal _NotificationPreferences_default_instance_;
class NotificationPreferences_EscalationConditionsEntry_DoNotUse;
struct NotificationPreferences_EscalationConditionsEntry_DoNotUseDefaultTypeInternal;
extern NotificationPreferences_EscalationConditionsEntry_DoNotUseDefaultTypeInternal _NotificationPreferences_EscalationConditionsEntry_DoNotUse_default_instance_;
class NotificationPreferences_TypePreferencesEntry_DoNotUse;
struct NotificationPreferences_TypePreferencesEntry_DoNotUseDefaultTypeInternal;
extern NotificationPreferences_TypePreferencesEntry_DoNotUseDefaultTypeInternal _NotificationPreferences_TypePreferencesEntry_DoNotUse_default_instance_;
class NotificationSchedule;
struct NotificationScheduleDefaultTypeInternal;
extern NotificationScheduleDefaultTypeInternal _NotificationSchedule_default_instance_;
class NotificationSchedule_SchedulingMetadataEntry_DoNotUse;
struct NotificationSchedule_SchedulingMetadataEntry_DoNotUseDefaultTypeInternal;
extern NotificationSchedule_SchedulingMetadataEntry_DoNotUseDefaultTypeInternal _NotificationSchedule_SchedulingMetadataEntry_DoNotUse_default_instance_;
class NotificationStatus;
struct NotificationStatusDefaultTypeInternal;
extern NotificationStatusDefaultTypeInternal _NotificationStatus_default_instance_;
class NotificationStatus_DeliveryMetadataEntry_DoNotUse;
struct NotificationStatus_DeliveryMetadataEntry_DoNotUseDefaultTypeInternal;
extern NotificationStatus_DeliveryMetadataEntry_DoNotUseDefaultTypeInternal _NotificationStatus_DeliveryMetadataEntry_DoNotUse_default_instance_;
class Notification_AdaptiveParametersEntry_DoNotUse;
struct Notification_AdaptiveParametersEntry_DoNotUseDefaultTypeInternal;
extern Notification_AdaptiveParametersEntry_DoNotUseDefaultTypeInternal _Notification_AdaptiveParametersEntry_DoNotUse_default_instance_;
class Notification_MetadataEntry_DoNotUse;
struct Notification_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Notification_MetadataEntry_DoNotUseDefaultTypeInternal _Notification_MetadataEntry_DoNotUse_default_instance_;
class Notification_ResponseOptionsEntry_DoNotUse;
struct Notification_ResponseOptionsEntry_DoNotUseDefaultTypeInternal;
extern Notification_ResponseOptionsEntry_DoNotUseDefaultTypeInternal _Notification_ResponseOptionsEntry_DoNotUse_default_instance_;
class SystemAlert;
struct SystemAlertDefaultTypeInternal;
extern SystemAlertDefaultTypeInternal _SystemAlert_default_instance_;
class SystemAlert_AlertMetadataEntry_DoNotUse;
struct SystemAlert_AlertMetadataEntry_DoNotUseDefaultTypeInternal;
extern SystemAlert_AlertMetadataEntry_DoNotUseDefaultTypeInternal _SystemAlert_AlertMetadataEntry_DoNotUse_default_instance_;
class UserNotificationSettings;
struct UserNotificationSettingsDefaultTypeInternal;
extern UserNotificationSettingsDefaultTypeInternal _UserNotificationSettings_default_instance_;
class UserNotificationSettings_PreferencesMetadataEntry_DoNotUse;
struct UserNotificationSettings_PreferencesMetadataEntry_DoNotUseDefaultTypeInternal;
extern UserNotificationSettings_PreferencesMetadataEntry_DoNotUseDefaultTypeInternal _UserNotificationSettings_PreferencesMetadataEntry_DoNotUse_default_instance_;
}  // namespace notification
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace notification {
enum NotificationType : int {
  NOTIFICATION_UNDEFINED = 0,
  NOTIFICATION_INFO = 1,
  NOTIFICATION_ALERT = 2,
  NOTIFICATION_WARNING = 3,
  NOTIFICATION_ERROR = 4,
  NOTIFICATION_SUCCESS = 5,
  NOTIFICATION_SYSTEM_UPDATE = 6,
  NotificationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NotificationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NotificationType_IsValid(int value);
extern const uint32_t NotificationType_internal_data_[];
constexpr NotificationType NotificationType_MIN = static_cast<NotificationType>(0);
constexpr NotificationType NotificationType_MAX = static_cast<NotificationType>(6);
constexpr int NotificationType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
NotificationType_descriptor();
template <typename T>
const std::string& NotificationType_Name(T value) {
  static_assert(std::is_same<T, NotificationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NotificationType_Name().");
  return NotificationType_Name(static_cast<NotificationType>(value));
}
template <>
inline const std::string& NotificationType_Name(NotificationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NotificationType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool NotificationType_Parse(absl::string_view name, NotificationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotificationType>(
      NotificationType_descriptor(), name, value);
}
enum DeliveryMethod : int {
  DELIVERY_UNDEFINED = 0,
  DELIVERY_EMAIL = 1,
  DELIVERY_SMS = 2,
  DELIVERY_PUSH = 3,
  DELIVERY_SYSTEM_ALERT = 4,
  DELIVERY_WEBHOOK = 5,
  DELIVERY_BATCH = 6,
  DELIVERY_ADAPTIVE = 7,
  DeliveryMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeliveryMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeliveryMethod_IsValid(int value);
extern const uint32_t DeliveryMethod_internal_data_[];
constexpr DeliveryMethod DeliveryMethod_MIN = static_cast<DeliveryMethod>(0);
constexpr DeliveryMethod DeliveryMethod_MAX = static_cast<DeliveryMethod>(7);
constexpr int DeliveryMethod_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
DeliveryMethod_descriptor();
template <typename T>
const std::string& DeliveryMethod_Name(T value) {
  static_assert(std::is_same<T, DeliveryMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeliveryMethod_Name().");
  return DeliveryMethod_Name(static_cast<DeliveryMethod>(value));
}
template <>
inline const std::string& DeliveryMethod_Name(DeliveryMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeliveryMethod_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool DeliveryMethod_Parse(absl::string_view name, DeliveryMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeliveryMethod>(
      DeliveryMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserNotificationSettings_PreferencesMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserNotificationSettings_PreferencesMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserNotificationSettings_PreferencesMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserNotificationSettings_PreferencesMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserNotificationSettings_PreferencesMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserNotificationSettings_PreferencesMetadataEntry_DoNotUse*>(
        &_UserNotificationSettings_PreferencesMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      85, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SystemAlert_AlertMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SystemAlert_AlertMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemAlert_AlertMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SystemAlert_AlertMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SystemAlert_AlertMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SystemAlert_AlertMetadataEntry_DoNotUse*>(
        &_SystemAlert_AlertMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationStatus_DeliveryMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NotificationStatus_DeliveryMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationStatus_DeliveryMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationStatus_DeliveryMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationStatus_DeliveryMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationStatus_DeliveryMetadataEntry_DoNotUse*>(
        &_NotificationStatus_DeliveryMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationSchedule_SchedulingMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NotificationSchedule_SchedulingMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationSchedule_SchedulingMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationSchedule_SchedulingMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationSchedule_SchedulingMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationSchedule_SchedulingMetadataEntry_DoNotUse*>(
        &_NotificationSchedule_SchedulingMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationPreferences_TypePreferencesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  NotificationPreferences_TypePreferencesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationPreferences_TypePreferencesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationPreferences_TypePreferencesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationPreferences_TypePreferencesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationPreferences_TypePreferencesEntry_DoNotUse*>(
        &_NotificationPreferences_TypePreferencesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationPreferences_EscalationConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  NotificationPreferences_EscalationConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationPreferences_EscalationConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationPreferences_EscalationConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationPreferences_EscalationConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationPreferences_EscalationConditionsEntry_DoNotUse*>(
        &_NotificationPreferences_EscalationConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationHistory_ResponseTimeAverageEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  NotificationHistory_ResponseTimeAverageEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationHistory_ResponseTimeAverageEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationHistory_ResponseTimeAverageEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationHistory_ResponseTimeAverageEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationHistory_ResponseTimeAverageEntry_DoNotUse*>(
        &_NotificationHistory_ResponseTimeAverageEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationHistory_PriorityCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  NotificationHistory_PriorityCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationHistory_PriorityCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationHistory_PriorityCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationHistory_PriorityCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationHistory_PriorityCountsEntry_DoNotUse*>(
        &_NotificationHistory_PriorityCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationHistory_NotificationCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  NotificationHistory_NotificationCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationHistory_NotificationCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationHistory_NotificationCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationHistory_NotificationCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationHistory_NotificationCountsEntry_DoNotUse*>(
        &_NotificationHistory_NotificationCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationHistory_EngagementMetricsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NotificationHistory_EngagementMetricsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationHistory_EngagementMetricsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationHistory_EngagementMetricsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationHistory_EngagementMetricsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationHistory_EngagementMetricsEntry_DoNotUse*>(
        &_NotificationHistory_EngagementMetricsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationEvent_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NotificationEvent_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationEvent_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationEvent_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationEvent_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationEvent_MetadataEntry_DoNotUse*>(
        &_NotificationEvent_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NotificationBatch_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NotificationBatch_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationBatch_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NotificationBatch_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NotificationBatch_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NotificationBatch_MetadataEntry_DoNotUse*>(
        &_NotificationBatch_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Notification_ResponseOptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Notification_ResponseOptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Notification_ResponseOptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Notification_ResponseOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Notification_ResponseOptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Notification_ResponseOptionsEntry_DoNotUse*>(
        &_Notification_ResponseOptionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Notification_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Notification_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Notification_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Notification_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Notification_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Notification_MetadataEntry_DoNotUse*>(
        &_Notification_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Notification_AdaptiveParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Notification_AdaptiveParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Notification_AdaptiveParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Notification_AdaptiveParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Notification_AdaptiveParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Notification_AdaptiveParametersEntry_DoNotUse*>(
        &_Notification_AdaptiveParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_notification_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UserNotificationSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.UserNotificationSettings) */ {
 public:
  inline UserNotificationSettings() : UserNotificationSettings(nullptr) {}
  ~UserNotificationSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserNotificationSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserNotificationSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserNotificationSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserNotificationSettings(const UserNotificationSettings& from) : UserNotificationSettings(nullptr, from) {}
  inline UserNotificationSettings(UserNotificationSettings&& from) noexcept
      : UserNotificationSettings(nullptr, std::move(from)) {}
  inline UserNotificationSettings& operator=(const UserNotificationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserNotificationSettings& operator=(UserNotificationSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserNotificationSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserNotificationSettings* internal_default_instance() {
    return reinterpret_cast<const UserNotificationSettings*>(
        &_UserNotificationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(UserNotificationSettings& a, UserNotificationSettings& b) { a.Swap(&b); }
  inline void Swap(UserNotificationSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserNotificationSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserNotificationSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserNotificationSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserNotificationSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserNotificationSettings& from) { UserNotificationSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserNotificationSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.UserNotificationSettings"; }

 protected:
  explicit UserNotificationSettings(::google::protobuf::Arena* arena);
  UserNotificationSettings(::google::protobuf::Arena* arena, const UserNotificationSettings& from);
  UserNotificationSettings(::google::protobuf::Arena* arena, UserNotificationSettings&& from) noexcept
      : UserNotificationSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPreferredChannelsFieldNumber = 2,
    kPreferencesMetadataFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kNotificationFrequencyFieldNumber = 3,
  };
  // repeated string preferred_channels = 2;
  int preferred_channels_size() const;
  private:
  int _internal_preferred_channels_size() const;

  public:
  void clear_preferred_channels() ;
  const std::string& preferred_channels(int index) const;
  std::string* mutable_preferred_channels(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_preferred_channels(int index, Arg_&& value, Args_... args);
  std::string* add_preferred_channels();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_preferred_channels(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& preferred_channels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_preferred_channels();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_preferred_channels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_preferred_channels();

  public:
  // map<string, string> preferences_metadata = 4;
  int preferences_metadata_size() const;
  private:
  int _internal_preferences_metadata_size() const;

  public:
  void clear_preferences_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& preferences_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_preferences_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_preferences_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_preferences_metadata();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string notification_frequency = 3;
  void clear_notification_frequency() ;
  const std::string& notification_frequency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notification_frequency(Arg_&& arg, Args_... args);
  std::string* mutable_notification_frequency();
  PROTOBUF_NODISCARD std::string* release_notification_frequency();
  void set_allocated_notification_frequency(std::string* value);

  private:
  const std::string& _internal_notification_frequency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_frequency(
      const std::string& value);
  std::string* _internal_mutable_notification_frequency();

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.UserNotificationSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      119, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserNotificationSettings& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> preferred_channels_;
    ::google::protobuf::internal::MapField<UserNotificationSettings_PreferencesMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        preferences_metadata_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr notification_frequency_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class SystemAlert final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.SystemAlert) */ {
 public:
  inline SystemAlert() : SystemAlert(nullptr) {}
  ~SystemAlert() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SystemAlert* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SystemAlert));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemAlert(
      ::google::protobuf::internal::ConstantInitialized);

  inline SystemAlert(const SystemAlert& from) : SystemAlert(nullptr, from) {}
  inline SystemAlert(SystemAlert&& from) noexcept
      : SystemAlert(nullptr, std::move(from)) {}
  inline SystemAlert& operator=(const SystemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemAlert& operator=(SystemAlert&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemAlert* internal_default_instance() {
    return reinterpret_cast<const SystemAlert*>(
        &_SystemAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(SystemAlert& a, SystemAlert& b) { a.Swap(&b); }
  inline void Swap(SystemAlert* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemAlert* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemAlert* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SystemAlert>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemAlert& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SystemAlert& from) { SystemAlert::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SystemAlert* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.SystemAlert"; }

 protected:
  explicit SystemAlert(::google::protobuf::Arena* arena);
  SystemAlert(::google::protobuf::Arena* arena, const SystemAlert& from);
  SystemAlert(::google::protobuf::Arena* arena, SystemAlert&& from) noexcept
      : SystemAlert(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAlertMetadataFieldNumber = 6,
    kAlertIdFieldNumber = 1,
    kAlertTypeFieldNumber = 2,
    kSeverityFieldNumber = 3,
    kMessageFieldNumber = 4,
    kTriggeredAtFieldNumber = 5,
  };
  // map<string, string> alert_metadata = 6;
  int alert_metadata_size() const;
  private:
  int _internal_alert_metadata_size() const;

  public:
  void clear_alert_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& alert_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_alert_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_alert_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_alert_metadata();

  public:
  // string alert_id = 1;
  void clear_alert_id() ;
  const std::string& alert_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_id(Arg_&& arg, Args_... args);
  std::string* mutable_alert_id();
  PROTOBUF_NODISCARD std::string* release_alert_id();
  void set_allocated_alert_id(std::string* value);

  private:
  const std::string& _internal_alert_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_id(
      const std::string& value);
  std::string* _internal_mutable_alert_id();

  public:
  // string alert_type = 2;
  void clear_alert_type() ;
  const std::string& alert_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_type(Arg_&& arg, Args_... args);
  std::string* mutable_alert_type();
  PROTOBUF_NODISCARD std::string* release_alert_type();
  void set_allocated_alert_type(std::string* value);

  private:
  const std::string& _internal_alert_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_type(
      const std::string& value);
  std::string* _internal_mutable_alert_type();

  public:
  // string severity = 3;
  void clear_severity() ;
  const std::string& severity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_severity(Arg_&& arg, Args_... args);
  std::string* mutable_severity();
  PROTOBUF_NODISCARD std::string* release_severity();
  void set_allocated_severity(std::string* value);

  private:
  const std::string& _internal_severity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_severity(
      const std::string& value);
  std::string* _internal_mutable_severity();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string triggered_at = 5;
  void clear_triggered_at() ;
  const std::string& triggered_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_triggered_at(Arg_&& arg, Args_... args);
  std::string* mutable_triggered_at();
  PROTOBUF_NODISCARD std::string* release_triggered_at();
  void set_allocated_triggered_at(std::string* value);

  private:
  const std::string& _internal_triggered_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_triggered_at(
      const std::string& value);
  std::string* _internal_mutable_triggered_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.SystemAlert)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      98, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SystemAlert& from_msg);
    ::google::protobuf::internal::MapField<SystemAlert_AlertMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        alert_metadata_;
    ::google::protobuf::internal::ArenaStringPtr alert_id_;
    ::google::protobuf::internal::ArenaStringPtr alert_type_;
    ::google::protobuf::internal::ArenaStringPtr severity_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr triggered_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationStatus) */ {
 public:
  inline NotificationStatus() : NotificationStatus(nullptr) {}
  ~NotificationStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationStatus(const NotificationStatus& from) : NotificationStatus(nullptr, from) {}
  inline NotificationStatus(NotificationStatus&& from) noexcept
      : NotificationStatus(nullptr, std::move(from)) {}
  inline NotificationStatus& operator=(const NotificationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationStatus& operator=(NotificationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationStatus* internal_default_instance() {
    return reinterpret_cast<const NotificationStatus*>(
        &_NotificationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(NotificationStatus& a, NotificationStatus& b) { a.Swap(&b); }
  inline void Swap(NotificationStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationStatus& from) { NotificationStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationStatus"; }

 protected:
  explicit NotificationStatus(::google::protobuf::Arena* arena);
  NotificationStatus(::google::protobuf::Arena* arena, const NotificationStatus& from);
  NotificationStatus(::google::protobuf::Arena* arena, NotificationStatus&& from) noexcept
      : NotificationStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeliveryMetadataFieldNumber = 8,
    kNotificationIdFieldNumber = 1,
    kRecipientIdFieldNumber = 2,
    kDeliveredAtFieldNumber = 5,
    kAcknowledgedAtFieldNumber = 6,
    kFailureReasonFieldNumber = 7,
    kLastRetryTimestampFieldNumber = 10,
    kEscalationPolicyFieldNumber = 11,
    kAdaptiveResponseActionFieldNumber = 12,
    kDeliveredFieldNumber = 3,
    kAcknowledgedFieldNumber = 4,
    kRetryAttemptsFieldNumber = 9,
  };
  // map<string, string> delivery_metadata = 8;
  int delivery_metadata_size() const;
  private:
  int _internal_delivery_metadata_size() const;

  public:
  void clear_delivery_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& delivery_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_delivery_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_delivery_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_delivery_metadata();

  public:
  // string notification_id = 1;
  void clear_notification_id() ;
  const std::string& notification_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notification_id(Arg_&& arg, Args_... args);
  std::string* mutable_notification_id();
  PROTOBUF_NODISCARD std::string* release_notification_id();
  void set_allocated_notification_id(std::string* value);

  private:
  const std::string& _internal_notification_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_id(
      const std::string& value);
  std::string* _internal_mutable_notification_id();

  public:
  // string recipient_id = 2;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // string delivered_at = 5;
  void clear_delivered_at() ;
  const std::string& delivered_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delivered_at(Arg_&& arg, Args_... args);
  std::string* mutable_delivered_at();
  PROTOBUF_NODISCARD std::string* release_delivered_at();
  void set_allocated_delivered_at(std::string* value);

  private:
  const std::string& _internal_delivered_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delivered_at(
      const std::string& value);
  std::string* _internal_mutable_delivered_at();

  public:
  // string acknowledged_at = 6;
  void clear_acknowledged_at() ;
  const std::string& acknowledged_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acknowledged_at(Arg_&& arg, Args_... args);
  std::string* mutable_acknowledged_at();
  PROTOBUF_NODISCARD std::string* release_acknowledged_at();
  void set_allocated_acknowledged_at(std::string* value);

  private:
  const std::string& _internal_acknowledged_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acknowledged_at(
      const std::string& value);
  std::string* _internal_mutable_acknowledged_at();

  public:
  // string failure_reason = 7;
  void clear_failure_reason() ;
  const std::string& failure_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_failure_reason(Arg_&& arg, Args_... args);
  std::string* mutable_failure_reason();
  PROTOBUF_NODISCARD std::string* release_failure_reason();
  void set_allocated_failure_reason(std::string* value);

  private:
  const std::string& _internal_failure_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure_reason(
      const std::string& value);
  std::string* _internal_mutable_failure_reason();

  public:
  // string last_retry_timestamp = 10;
  void clear_last_retry_timestamp() ;
  const std::string& last_retry_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_retry_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_retry_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_retry_timestamp();
  void set_allocated_last_retry_timestamp(std::string* value);

  private:
  const std::string& _internal_last_retry_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_retry_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_retry_timestamp();

  public:
  // string escalation_policy = 11;
  void clear_escalation_policy() ;
  const std::string& escalation_policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_policy(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_policy();
  PROTOBUF_NODISCARD std::string* release_escalation_policy();
  void set_allocated_escalation_policy(std::string* value);

  private:
  const std::string& _internal_escalation_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_policy(
      const std::string& value);
  std::string* _internal_mutable_escalation_policy();

  public:
  // string adaptive_response_action = 12;
  void clear_adaptive_response_action() ;
  const std::string& adaptive_response_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_adaptive_response_action(Arg_&& arg, Args_... args);
  std::string* mutable_adaptive_response_action();
  PROTOBUF_NODISCARD std::string* release_adaptive_response_action();
  void set_allocated_adaptive_response_action(std::string* value);

  private:
  const std::string& _internal_adaptive_response_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adaptive_response_action(
      const std::string& value);
  std::string* _internal_mutable_adaptive_response_action();

  public:
  // bool delivered = 3;
  void clear_delivered() ;
  bool delivered() const;
  void set_delivered(bool value);

  private:
  bool _internal_delivered() const;
  void _internal_set_delivered(bool value);

  public:
  // bool acknowledged = 4;
  void clear_acknowledged() ;
  bool acknowledged() const;
  void set_acknowledged(bool value);

  private:
  bool _internal_acknowledged() const;
  void _internal_set_acknowledged(bool value);

  public:
  // int32 retry_attempts = 9;
  void clear_retry_attempts() ;
  ::int32_t retry_attempts() const;
  void set_retry_attempts(::int32_t value);

  private:
  ::int32_t _internal_retry_attempts() const;
  void _internal_set_retry_attempts(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 1,
      200, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationStatus& from_msg);
    ::google::protobuf::internal::MapField<NotificationStatus_DeliveryMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        delivery_metadata_;
    ::google::protobuf::internal::ArenaStringPtr notification_id_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::ArenaStringPtr delivered_at_;
    ::google::protobuf::internal::ArenaStringPtr acknowledged_at_;
    ::google::protobuf::internal::ArenaStringPtr failure_reason_;
    ::google::protobuf::internal::ArenaStringPtr last_retry_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr escalation_policy_;
    ::google::protobuf::internal::ArenaStringPtr adaptive_response_action_;
    bool delivered_;
    bool acknowledged_;
    ::int32_t retry_attempts_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationSchedule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationSchedule) */ {
 public:
  inline NotificationSchedule() : NotificationSchedule(nullptr) {}
  ~NotificationSchedule() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationSchedule* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationSchedule));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationSchedule(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationSchedule(const NotificationSchedule& from) : NotificationSchedule(nullptr, from) {}
  inline NotificationSchedule(NotificationSchedule&& from) noexcept
      : NotificationSchedule(nullptr, std::move(from)) {}
  inline NotificationSchedule& operator=(const NotificationSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationSchedule& operator=(NotificationSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationSchedule* internal_default_instance() {
    return reinterpret_cast<const NotificationSchedule*>(
        &_NotificationSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(NotificationSchedule& a, NotificationSchedule& b) { a.Swap(&b); }
  inline void Swap(NotificationSchedule* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationSchedule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationSchedule* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationSchedule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationSchedule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationSchedule& from) { NotificationSchedule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationSchedule* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationSchedule"; }

 protected:
  explicit NotificationSchedule(::google::protobuf::Arena* arena);
  NotificationSchedule(::google::protobuf::Arena* arena, const NotificationSchedule& from);
  NotificationSchedule(::google::protobuf::Arena* arena, NotificationSchedule&& from) noexcept
      : NotificationSchedule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSchedulingMetadataFieldNumber = 6,
    kNotificationIdFieldNumber = 1,
    kScheduledTimeFieldNumber = 2,
    kRecurrencePatternFieldNumber = 4,
    kEndDateFieldNumber = 5,
    kGracePeriodMinutesFieldNumber = 7,
    kRecurringFieldNumber = 3,
    kAutoRetryOnFailureFieldNumber = 8,
    kUserActivityDependentFieldNumber = 10,
    kAdaptiveGracePeriodFieldNumber = 9,
  };
  // map<string, string> scheduling_metadata = 6;
  int scheduling_metadata_size() const;
  private:
  int _internal_scheduling_metadata_size() const;

  public:
  void clear_scheduling_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& scheduling_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_scheduling_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_scheduling_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_scheduling_metadata();

  public:
  // string notification_id = 1;
  void clear_notification_id() ;
  const std::string& notification_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notification_id(Arg_&& arg, Args_... args);
  std::string* mutable_notification_id();
  PROTOBUF_NODISCARD std::string* release_notification_id();
  void set_allocated_notification_id(std::string* value);

  private:
  const std::string& _internal_notification_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_id(
      const std::string& value);
  std::string* _internal_mutable_notification_id();

  public:
  // string scheduled_time = 2;
  void clear_scheduled_time() ;
  const std::string& scheduled_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scheduled_time(Arg_&& arg, Args_... args);
  std::string* mutable_scheduled_time();
  PROTOBUF_NODISCARD std::string* release_scheduled_time();
  void set_allocated_scheduled_time(std::string* value);

  private:
  const std::string& _internal_scheduled_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scheduled_time(
      const std::string& value);
  std::string* _internal_mutable_scheduled_time();

  public:
  // string recurrence_pattern = 4;
  void clear_recurrence_pattern() ;
  const std::string& recurrence_pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recurrence_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_recurrence_pattern();
  PROTOBUF_NODISCARD std::string* release_recurrence_pattern();
  void set_allocated_recurrence_pattern(std::string* value);

  private:
  const std::string& _internal_recurrence_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recurrence_pattern(
      const std::string& value);
  std::string* _internal_mutable_recurrence_pattern();

  public:
  // string end_date = 5;
  void clear_end_date() ;
  const std::string& end_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_date(Arg_&& arg, Args_... args);
  std::string* mutable_end_date();
  PROTOBUF_NODISCARD std::string* release_end_date();
  void set_allocated_end_date(std::string* value);

  private:
  const std::string& _internal_end_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_date(
      const std::string& value);
  std::string* _internal_mutable_end_date();

  public:
  // int32 grace_period_minutes = 7;
  void clear_grace_period_minutes() ;
  ::int32_t grace_period_minutes() const;
  void set_grace_period_minutes(::int32_t value);

  private:
  ::int32_t _internal_grace_period_minutes() const;
  void _internal_set_grace_period_minutes(::int32_t value);

  public:
  // bool recurring = 3;
  void clear_recurring() ;
  bool recurring() const;
  void set_recurring(bool value);

  private:
  bool _internal_recurring() const;
  void _internal_set_recurring(bool value);

  public:
  // bool auto_retry_on_failure = 8;
  void clear_auto_retry_on_failure() ;
  bool auto_retry_on_failure() const;
  void set_auto_retry_on_failure(bool value);

  private:
  bool _internal_auto_retry_on_failure() const;
  void _internal_set_auto_retry_on_failure(bool value);

  public:
  // bool user_activity_dependent = 10;
  void clear_user_activity_dependent() ;
  bool user_activity_dependent() const;
  void set_user_activity_dependent(bool value);

  private:
  bool _internal_user_activity_dependent() const;
  void _internal_set_user_activity_dependent(bool value);

  public:
  // int32 adaptive_grace_period = 9;
  void clear_adaptive_grace_period() ;
  ::int32_t adaptive_grace_period() const;
  void set_adaptive_grace_period(::int32_t value);

  private:
  ::int32_t _internal_adaptive_grace_period() const;
  void _internal_set_adaptive_grace_period(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationSchedule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      130, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationSchedule& from_msg);
    ::google::protobuf::internal::MapField<NotificationSchedule_SchedulingMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        scheduling_metadata_;
    ::google::protobuf::internal::ArenaStringPtr notification_id_;
    ::google::protobuf::internal::ArenaStringPtr scheduled_time_;
    ::google::protobuf::internal::ArenaStringPtr recurrence_pattern_;
    ::google::protobuf::internal::ArenaStringPtr end_date_;
    ::int32_t grace_period_minutes_;
    bool recurring_;
    bool auto_retry_on_failure_;
    bool user_activity_dependent_;
    ::int32_t adaptive_grace_period_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationPreferences final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationPreferences) */ {
 public:
  inline NotificationPreferences() : NotificationPreferences(nullptr) {}
  ~NotificationPreferences() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationPreferences* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationPreferences));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationPreferences(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationPreferences(const NotificationPreferences& from) : NotificationPreferences(nullptr, from) {}
  inline NotificationPreferences(NotificationPreferences&& from) noexcept
      : NotificationPreferences(nullptr, std::move(from)) {}
  inline NotificationPreferences& operator=(const NotificationPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationPreferences& operator=(NotificationPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationPreferences* internal_default_instance() {
    return reinterpret_cast<const NotificationPreferences*>(
        &_NotificationPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(NotificationPreferences& a, NotificationPreferences& b) { a.Swap(&b); }
  inline void Swap(NotificationPreferences* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationPreferences* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationPreferences* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationPreferences>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationPreferences& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationPreferences& from) { NotificationPreferences::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationPreferences* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationPreferences"; }

 protected:
  explicit NotificationPreferences(::google::protobuf::Arena* arena);
  NotificationPreferences(::google::protobuf::Arena* arena, const NotificationPreferences& from);
  NotificationPreferences(::google::protobuf::Arena* arena, NotificationPreferences&& from) noexcept
      : NotificationPreferences(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPreferredMethodsFieldNumber = 2,
    kTypePreferencesFieldNumber = 4,
    kEscalationConditionsFieldNumber = 10,
    kRecipientIdFieldNumber = 1,
    kDoNotDisturbStartFieldNumber = 6,
    kDoNotDisturbEndFieldNumber = 7,
    kCustomNotificationIntervalFieldNumber = 9,
    kMaxDailyNotificationsFieldNumber = 5,
    kMuteNotificationsFieldNumber = 3,
    kDynamicThresholdsFieldNumber = 11,
    kMinimumPriorityFieldNumber = 8,
    kMaxUrgentNotificationsFieldNumber = 12,
  };
  // repeated .seigr.notification.DeliveryMethod preferred_methods = 2;
  int preferred_methods_size() const;
  private:
  int _internal_preferred_methods_size() const;

  public:
  void clear_preferred_methods() ;
  public:
  ::seigr::notification::DeliveryMethod preferred_methods(int index) const;
  void set_preferred_methods(int index, ::seigr::notification::DeliveryMethod value);
  void add_preferred_methods(::seigr::notification::DeliveryMethod value);
  const ::google::protobuf::RepeatedField<int>& preferred_methods() const;
  ::google::protobuf::RepeatedField<int>* mutable_preferred_methods();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_preferred_methods() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_preferred_methods();

  public:
  // map<string, bool> type_preferences = 4;
  int type_preferences_size() const;
  private:
  int _internal_type_preferences_size() const;

  public:
  void clear_type_preferences() ;
  const ::google::protobuf::Map<std::string, bool>& type_preferences() const;
  ::google::protobuf::Map<std::string, bool>* mutable_type_preferences();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_type_preferences() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_type_preferences();

  public:
  // map<string, bool> escalation_conditions = 10;
  int escalation_conditions_size() const;
  private:
  int _internal_escalation_conditions_size() const;

  public:
  void clear_escalation_conditions() ;
  const ::google::protobuf::Map<std::string, bool>& escalation_conditions() const;
  ::google::protobuf::Map<std::string, bool>* mutable_escalation_conditions();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_escalation_conditions() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_escalation_conditions();

  public:
  // string recipient_id = 1;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // string do_not_disturb_start = 6;
  void clear_do_not_disturb_start() ;
  const std::string& do_not_disturb_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_do_not_disturb_start(Arg_&& arg, Args_... args);
  std::string* mutable_do_not_disturb_start();
  PROTOBUF_NODISCARD std::string* release_do_not_disturb_start();
  void set_allocated_do_not_disturb_start(std::string* value);

  private:
  const std::string& _internal_do_not_disturb_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_do_not_disturb_start(
      const std::string& value);
  std::string* _internal_mutable_do_not_disturb_start();

  public:
  // string do_not_disturb_end = 7;
  void clear_do_not_disturb_end() ;
  const std::string& do_not_disturb_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_do_not_disturb_end(Arg_&& arg, Args_... args);
  std::string* mutable_do_not_disturb_end();
  PROTOBUF_NODISCARD std::string* release_do_not_disturb_end();
  void set_allocated_do_not_disturb_end(std::string* value);

  private:
  const std::string& _internal_do_not_disturb_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_do_not_disturb_end(
      const std::string& value);
  std::string* _internal_mutable_do_not_disturb_end();

  public:
  // string custom_notification_interval = 9;
  void clear_custom_notification_interval() ;
  const std::string& custom_notification_interval() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom_notification_interval(Arg_&& arg, Args_... args);
  std::string* mutable_custom_notification_interval();
  PROTOBUF_NODISCARD std::string* release_custom_notification_interval();
  void set_allocated_custom_notification_interval(std::string* value);

  private:
  const std::string& _internal_custom_notification_interval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_notification_interval(
      const std::string& value);
  std::string* _internal_mutable_custom_notification_interval();

  public:
  // int32 max_daily_notifications = 5;
  void clear_max_daily_notifications() ;
  ::int32_t max_daily_notifications() const;
  void set_max_daily_notifications(::int32_t value);

  private:
  ::int32_t _internal_max_daily_notifications() const;
  void _internal_set_max_daily_notifications(::int32_t value);

  public:
  // bool mute_notifications = 3;
  void clear_mute_notifications() ;
  bool mute_notifications() const;
  void set_mute_notifications(bool value);

  private:
  bool _internal_mute_notifications() const;
  void _internal_set_mute_notifications(bool value);

  public:
  // bool dynamic_thresholds = 11;
  void clear_dynamic_thresholds() ;
  bool dynamic_thresholds() const;
  void set_dynamic_thresholds(bool value);

  private:
  bool _internal_dynamic_thresholds() const;
  void _internal_set_dynamic_thresholds(bool value);

  public:
  // .seigr.common.PriorityLevel minimum_priority = 8;
  void clear_minimum_priority() ;
  ::seigr::common::PriorityLevel minimum_priority() const;
  void set_minimum_priority(::seigr::common::PriorityLevel value);

  private:
  ::seigr::common::PriorityLevel _internal_minimum_priority() const;
  void _internal_set_minimum_priority(::seigr::common::PriorityLevel value);

  public:
  // int32 max_urgent_notifications = 12;
  void clear_max_urgent_notifications() ;
  ::int32_t max_urgent_notifications() const;
  void set_max_urgent_notifications(::int32_t value);

  private:
  ::int32_t _internal_max_urgent_notifications() const;
  void _internal_set_max_urgent_notifications(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationPreferences)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 2,
      174, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationPreferences& from_msg);
    ::google::protobuf::RepeatedField<int> preferred_methods_;
    ::google::protobuf::internal::CachedSize _preferred_methods_cached_byte_size_;
    ::google::protobuf::internal::MapField<NotificationPreferences_TypePreferencesEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        type_preferences_;
    ::google::protobuf::internal::MapField<NotificationPreferences_EscalationConditionsEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        escalation_conditions_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::ArenaStringPtr do_not_disturb_start_;
    ::google::protobuf::internal::ArenaStringPtr do_not_disturb_end_;
    ::google::protobuf::internal::ArenaStringPtr custom_notification_interval_;
    ::int32_t max_daily_notifications_;
    bool mute_notifications_;
    bool dynamic_thresholds_;
    int minimum_priority_;
    ::int32_t max_urgent_notifications_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationEvent) */ {
 public:
  inline NotificationEvent() : NotificationEvent(nullptr) {}
  ~NotificationEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationEvent(const NotificationEvent& from) : NotificationEvent(nullptr, from) {}
  inline NotificationEvent(NotificationEvent&& from) noexcept
      : NotificationEvent(nullptr, std::move(from)) {}
  inline NotificationEvent& operator=(const NotificationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationEvent& operator=(NotificationEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationEvent* internal_default_instance() {
    return reinterpret_cast<const NotificationEvent*>(
        &_NotificationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(NotificationEvent& a, NotificationEvent& b) { a.Swap(&b); }
  inline void Swap(NotificationEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationEvent& from) { NotificationEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationEvent"; }

 protected:
  explicit NotificationEvent(::google::protobuf::Arena* arena);
  NotificationEvent(::google::protobuf::Arena* arena, const NotificationEvent& from);
  NotificationEvent(::google::protobuf::Arena* arena, NotificationEvent&& from) noexcept
      : NotificationEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetUsersFieldNumber = 4,
    kMetadataFieldNumber = 6,
    kEventIdFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 5,
  };
  // repeated string target_users = 4;
  int target_users_size() const;
  private:
  int _internal_target_users_size() const;

  public:
  void clear_target_users() ;
  const std::string& target_users(int index) const;
  std::string* mutable_target_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_users(int index, Arg_&& value, Args_... args);
  std::string* add_target_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_target_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& target_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_target_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_target_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_target_users();

  public:
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string event_id = 1;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string severity = 2;
  void clear_severity() ;
  const std::string& severity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_severity(Arg_&& arg, Args_... args);
  std::string* mutable_severity();
  PROTOBUF_NODISCARD std::string* release_severity();
  void set_allocated_severity(std::string* value);

  private:
  const std::string& _internal_severity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_severity(
      const std::string& value);
  std::string* _internal_mutable_severity();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationEvent& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> target_users_;
    ::google::protobuf::internal::MapField<NotificationEvent_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr severity_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class Notification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Notification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Notification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Notification(
      ::google::protobuf::internal::ConstantInitialized);

  inline Notification(const Notification& from) : Notification(nullptr, from) {}
  inline Notification(Notification&& from) noexcept
      : Notification(nullptr, std::move(from)) {}
  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
        &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Notification& a, Notification& b) { a.Swap(&b); }
  inline void Swap(Notification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Notification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Notification& from) { Notification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Notification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.Notification"; }

 protected:
  explicit Notification(::google::protobuf::Arena* arena);
  Notification(::google::protobuf::Arena* arena, const Notification& from);
  Notification(::google::protobuf::Arena* arena, Notification&& from) noexcept
      : Notification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kActionableItemsFieldNumber = 13,
    kResponseOptionsFieldNumber = 15,
    kAdaptiveParametersFieldNumber = 17,
    kNotificationIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kRecipientIdFieldNumber = 4,
    kTimestampFieldNumber = 6,
    kActionUrlFieldNumber = 11,
    kCallbackUrlFieldNumber = 16,
    kTypeFieldNumber = 2,
    kDeliveryMethodFieldNumber = 5,
    kRetryCountFieldNumber = 9,
    kPriorityFieldNumber = 10,
    kRequiresAcknowledgmentFieldNumber = 8,
    kAggregateableFieldNumber = 14,
    kTimeToLiveSecondsFieldNumber = 12,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string actionable_items = 13;
  int actionable_items_size() const;
  private:
  int _internal_actionable_items_size() const;

  public:
  void clear_actionable_items() ;
  const std::string& actionable_items(int index) const;
  std::string* mutable_actionable_items(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actionable_items(int index, Arg_&& value, Args_... args);
  std::string* add_actionable_items();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_actionable_items(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& actionable_items() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_actionable_items();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_actionable_items() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_actionable_items();

  public:
  // map<string, string> response_options = 15;
  int response_options_size() const;
  private:
  int _internal_response_options_size() const;

  public:
  void clear_response_options() ;
  const ::google::protobuf::Map<std::string, std::string>& response_options() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_response_options();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_response_options() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_response_options();

  public:
  // map<string, string> adaptive_parameters = 17;
  int adaptive_parameters_size() const;
  private:
  int _internal_adaptive_parameters_size() const;

  public:
  void clear_adaptive_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& adaptive_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_adaptive_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_adaptive_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_adaptive_parameters();

  public:
  // string notification_id = 1;
  void clear_notification_id() ;
  const std::string& notification_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notification_id(Arg_&& arg, Args_... args);
  std::string* mutable_notification_id();
  PROTOBUF_NODISCARD std::string* release_notification_id();
  void set_allocated_notification_id(std::string* value);

  private:
  const std::string& _internal_notification_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_id(
      const std::string& value);
  std::string* _internal_mutable_notification_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string recipient_id = 4;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string action_url = 11;
  void clear_action_url() ;
  const std::string& action_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_url(Arg_&& arg, Args_... args);
  std::string* mutable_action_url();
  PROTOBUF_NODISCARD std::string* release_action_url();
  void set_allocated_action_url(std::string* value);

  private:
  const std::string& _internal_action_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_url(
      const std::string& value);
  std::string* _internal_mutable_action_url();

  public:
  // string callback_url = 16;
  void clear_callback_url() ;
  const std::string& callback_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callback_url(Arg_&& arg, Args_... args);
  std::string* mutable_callback_url();
  PROTOBUF_NODISCARD std::string* release_callback_url();
  void set_allocated_callback_url(std::string* value);

  private:
  const std::string& _internal_callback_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_url(
      const std::string& value);
  std::string* _internal_mutable_callback_url();

  public:
  // .seigr.notification.NotificationType type = 2;
  void clear_type() ;
  ::seigr::notification::NotificationType type() const;
  void set_type(::seigr::notification::NotificationType value);

  private:
  ::seigr::notification::NotificationType _internal_type() const;
  void _internal_set_type(::seigr::notification::NotificationType value);

  public:
  // .seigr.notification.DeliveryMethod delivery_method = 5;
  void clear_delivery_method() ;
  ::seigr::notification::DeliveryMethod delivery_method() const;
  void set_delivery_method(::seigr::notification::DeliveryMethod value);

  private:
  ::seigr::notification::DeliveryMethod _internal_delivery_method() const;
  void _internal_set_delivery_method(::seigr::notification::DeliveryMethod value);

  public:
  // int32 retry_count = 9;
  void clear_retry_count() ;
  ::int32_t retry_count() const;
  void set_retry_count(::int32_t value);

  private:
  ::int32_t _internal_retry_count() const;
  void _internal_set_retry_count(::int32_t value);

  public:
  // .seigr.common.PriorityLevel priority = 10;
  void clear_priority() ;
  ::seigr::common::PriorityLevel priority() const;
  void set_priority(::seigr::common::PriorityLevel value);

  private:
  ::seigr::common::PriorityLevel _internal_priority() const;
  void _internal_set_priority(::seigr::common::PriorityLevel value);

  public:
  // bool requires_acknowledgment = 8;
  void clear_requires_acknowledgment() ;
  bool requires_acknowledgment() const;
  void set_requires_acknowledgment(bool value);

  private:
  bool _internal_requires_acknowledgment() const;
  void _internal_set_requires_acknowledgment(bool value);

  public:
  // bool aggregateable = 14;
  void clear_aggregateable() ;
  bool aggregateable() const;
  void set_aggregateable(bool value);

  private:
  bool _internal_aggregateable() const;
  void _internal_set_aggregateable(bool value);

  public:
  // int32 time_to_live_seconds = 12;
  void clear_time_to_live_seconds() ;
  ::int32_t time_to_live_seconds() const;
  void set_time_to_live_seconds(::int32_t value);

  private:
  ::int32_t _internal_time_to_live_seconds() const;
  void _internal_set_time_to_live_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.Notification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 17, 3,
      180, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Notification& from_msg);
    ::google::protobuf::internal::MapField<Notification_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> actionable_items_;
    ::google::protobuf::internal::MapField<Notification_ResponseOptionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        response_options_;
    ::google::protobuf::internal::MapField<Notification_AdaptiveParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        adaptive_parameters_;
    ::google::protobuf::internal::ArenaStringPtr notification_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr action_url_;
    ::google::protobuf::internal::ArenaStringPtr callback_url_;
    int type_;
    int delivery_method_;
    ::int32_t retry_count_;
    int priority_;
    bool requires_acknowledgment_;
    bool aggregateable_;
    ::int32_t time_to_live_seconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationHistory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationHistory) */ {
 public:
  inline NotificationHistory() : NotificationHistory(nullptr) {}
  ~NotificationHistory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationHistory* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationHistory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationHistory(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationHistory(const NotificationHistory& from) : NotificationHistory(nullptr, from) {}
  inline NotificationHistory(NotificationHistory&& from) noexcept
      : NotificationHistory(nullptr, std::move(from)) {}
  inline NotificationHistory& operator=(const NotificationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationHistory& operator=(NotificationHistory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationHistory* internal_default_instance() {
    return reinterpret_cast<const NotificationHistory*>(
        &_NotificationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(NotificationHistory& a, NotificationHistory& b) { a.Swap(&b); }
  inline void Swap(NotificationHistory* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationHistory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationHistory* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationHistory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationHistory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationHistory& from) { NotificationHistory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationHistory* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationHistory"; }

 protected:
  explicit NotificationHistory(::google::protobuf::Arena* arena);
  NotificationHistory(::google::protobuf::Arena* arena, const NotificationHistory& from);
  NotificationHistory(::google::protobuf::Arena* arena, NotificationHistory&& from) noexcept
      : NotificationHistory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotificationsFieldNumber = 2,
    kNotificationCountsFieldNumber = 5,
    kPriorityCountsFieldNumber = 7,
    kResponseTimeAverageFieldNumber = 8,
    kEngagementMetricsFieldNumber = 9,
    kRecipientIdFieldNumber = 1,
    kStartDateFieldNumber = 3,
    kEndDateFieldNumber = 4,
    kTotalNotificationsFieldNumber = 6,
  };
  // repeated .seigr.notification.Notification notifications = 2;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;

  public:
  void clear_notifications() ;
  ::seigr::notification::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* mutable_notifications();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& _internal_notifications() const;
  ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* _internal_mutable_notifications();
  public:
  const ::seigr::notification::Notification& notifications(int index) const;
  ::seigr::notification::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& notifications() const;
  // map<string, int32> notification_counts = 5;
  int notification_counts_size() const;
  private:
  int _internal_notification_counts_size() const;

  public:
  void clear_notification_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& notification_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_notification_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_notification_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_notification_counts();

  public:
  // map<string, int32> priority_counts = 7;
  int priority_counts_size() const;
  private:
  int _internal_priority_counts_size() const;

  public:
  void clear_priority_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& priority_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_priority_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_priority_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_priority_counts();

  public:
  // map<string, int32> response_time_average = 8;
  int response_time_average_size() const;
  private:
  int _internal_response_time_average_size() const;

  public:
  void clear_response_time_average() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& response_time_average() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_response_time_average();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_response_time_average() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_response_time_average();

  public:
  // map<string, string> engagement_metrics = 9;
  int engagement_metrics_size() const;
  private:
  int _internal_engagement_metrics_size() const;

  public:
  void clear_engagement_metrics() ;
  const ::google::protobuf::Map<std::string, std::string>& engagement_metrics() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_engagement_metrics();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_engagement_metrics() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_engagement_metrics();

  public:
  // string recipient_id = 1;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // string start_date = 3;
  void clear_start_date() ;
  const std::string& start_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_date(Arg_&& arg, Args_... args);
  std::string* mutable_start_date();
  PROTOBUF_NODISCARD std::string* release_start_date();
  void set_allocated_start_date(std::string* value);

  private:
  const std::string& _internal_start_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_date(
      const std::string& value);
  std::string* _internal_mutable_start_date();

  public:
  // string end_date = 4;
  void clear_end_date() ;
  const std::string& end_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_date(Arg_&& arg, Args_... args);
  std::string* mutable_end_date();
  PROTOBUF_NODISCARD std::string* release_end_date();
  void set_allocated_end_date(std::string* value);

  private:
  const std::string& _internal_end_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_date(
      const std::string& value);
  std::string* _internal_mutable_end_date();

  public:
  // int32 total_notifications = 6;
  void clear_total_notifications() ;
  ::int32_t total_notifications() const;
  void set_total_notifications(::int32_t value);

  private:
  ::int32_t _internal_total_notifications() const;
  void _internal_set_total_notifications(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationHistory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 5,
      158, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationHistory& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::notification::Notification > notifications_;
    ::google::protobuf::internal::MapField<NotificationHistory_NotificationCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        notification_counts_;
    ::google::protobuf::internal::MapField<NotificationHistory_PriorityCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        priority_counts_;
    ::google::protobuf::internal::MapField<NotificationHistory_ResponseTimeAverageEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        response_time_average_;
    ::google::protobuf::internal::MapField<NotificationHistory_EngagementMetricsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        engagement_metrics_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::ArenaStringPtr start_date_;
    ::google::protobuf::internal::ArenaStringPtr end_date_;
    ::int32_t total_notifications_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};
// -------------------------------------------------------------------

class NotificationBatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.notification.NotificationBatch) */ {
 public:
  inline NotificationBatch() : NotificationBatch(nullptr) {}
  ~NotificationBatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationBatch* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationBatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationBatch(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationBatch(const NotificationBatch& from) : NotificationBatch(nullptr, from) {}
  inline NotificationBatch(NotificationBatch&& from) noexcept
      : NotificationBatch(nullptr, std::move(from)) {}
  inline NotificationBatch& operator=(const NotificationBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationBatch& operator=(NotificationBatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationBatch* internal_default_instance() {
    return reinterpret_cast<const NotificationBatch*>(
        &_NotificationBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NotificationBatch& a, NotificationBatch& b) { a.Swap(&b); }
  inline void Swap(NotificationBatch* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationBatch* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationBatch& from) { NotificationBatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationBatch* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.notification.NotificationBatch"; }

 protected:
  explicit NotificationBatch(::google::protobuf::Arena* arena);
  NotificationBatch(::google::protobuf::Arena* arena, const NotificationBatch& from);
  NotificationBatch(::google::protobuf::Arena* arena, NotificationBatch&& from) noexcept
      : NotificationBatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotificationsFieldNumber = 2,
    kMetadataFieldNumber = 5,
    kBatchIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kDeliveryMethodFieldNumber = 4,
    kTotalRetriesFieldNumber = 7,
    kRequiresBatchAcknowledgmentFieldNumber = 6,
    kAdaptiveBatchScalingFieldNumber = 8,
  };
  // repeated .seigr.notification.Notification notifications = 2;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;

  public:
  void clear_notifications() ;
  ::seigr::notification::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* mutable_notifications();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& _internal_notifications() const;
  ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* _internal_mutable_notifications();
  public:
  const ::seigr::notification::Notification& notifications(int index) const;
  ::seigr::notification::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& notifications() const;
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string batch_id = 1;
  void clear_batch_id() ;
  const std::string& batch_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* value);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // .seigr.notification.DeliveryMethod delivery_method = 4;
  void clear_delivery_method() ;
  ::seigr::notification::DeliveryMethod delivery_method() const;
  void set_delivery_method(::seigr::notification::DeliveryMethod value);

  private:
  ::seigr::notification::DeliveryMethod _internal_delivery_method() const;
  void _internal_set_delivery_method(::seigr::notification::DeliveryMethod value);

  public:
  // int32 total_retries = 7;
  void clear_total_retries() ;
  ::int32_t total_retries() const;
  void set_total_retries(::int32_t value);

  private:
  ::int32_t _internal_total_retries() const;
  void _internal_set_total_retries(::int32_t value);

  public:
  // bool requires_batch_acknowledgment = 6;
  void clear_requires_batch_acknowledgment() ;
  bool requires_batch_acknowledgment() const;
  void set_requires_batch_acknowledgment(bool value);

  private:
  bool _internal_requires_batch_acknowledgment() const;
  void _internal_set_requires_batch_acknowledgment(bool value);

  public:
  // bool adaptive_batch_scaling = 8;
  void clear_adaptive_batch_scaling() ;
  bool adaptive_batch_scaling() const;
  void set_adaptive_batch_scaling(bool value);

  private:
  bool _internal_adaptive_batch_scaling() const;
  void _internal_set_adaptive_batch_scaling(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.notification.NotificationBatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationBatch& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::notification::Notification > notifications_;
    ::google::protobuf::internal::MapField<NotificationBatch_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr batch_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    int delivery_method_;
    ::int32_t total_retries_;
    bool requires_batch_acknowledgment_;
    bool adaptive_batch_scaling_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notification_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Notification

// string notification_id = 1;
inline void Notification::clear_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.ClearToEmpty();
}
inline const std::string& Notification::notification_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.notification_id)
  return _internal_notification_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_notification_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.notification_id)
}
inline std::string* Notification::mutable_notification_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notification_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.notification_id)
  return _s;
}
inline const std::string& Notification::_internal_notification_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_id_.Get();
}
inline void Notification::_internal_set_notification_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notification_id_.Mutable( GetArena());
}
inline std::string* Notification::release_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.notification_id)
  return _impl_.notification_id_.Release();
}
inline void Notification::set_allocated_notification_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.notification_id_.IsDefault()) {
    _impl_.notification_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.notification_id)
}

// .seigr.notification.NotificationType type = 2;
inline void Notification::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::notification::NotificationType Notification::type() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.type)
  return _internal_type();
}
inline void Notification::set_type(::seigr::notification::NotificationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.type)
}
inline ::seigr::notification::NotificationType Notification::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::notification::NotificationType>(_impl_.type_);
}
inline void Notification::_internal_set_type(::seigr::notification::NotificationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string message = 3;
inline void Notification::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Notification::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.message)
}
inline std::string* Notification::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.message)
  return _s;
}
inline const std::string& Notification::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Notification::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Notification::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.message)
  return _impl_.message_.Release();
}
inline void Notification::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.message)
}

// string recipient_id = 4;
inline void Notification::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& Notification::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.recipient_id)
}
inline std::string* Notification::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.recipient_id)
  return _s;
}
inline const std::string& Notification::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void Notification::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* Notification::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void Notification::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.recipient_id)
}

// .seigr.notification.DeliveryMethod delivery_method = 5;
inline void Notification::clear_delivery_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivery_method_ = 0;
}
inline ::seigr::notification::DeliveryMethod Notification::delivery_method() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.delivery_method)
  return _internal_delivery_method();
}
inline void Notification::set_delivery_method(::seigr::notification::DeliveryMethod value) {
  _internal_set_delivery_method(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.delivery_method)
}
inline ::seigr::notification::DeliveryMethod Notification::_internal_delivery_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::notification::DeliveryMethod>(_impl_.delivery_method_);
}
inline void Notification::_internal_set_delivery_method(::seigr::notification::DeliveryMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivery_method_ = value;
}

// string timestamp = 6;
inline void Notification::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Notification::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.timestamp)
}
inline std::string* Notification::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.timestamp)
  return _s;
}
inline const std::string& Notification::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Notification::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Notification::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Notification::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.timestamp)
}

// map<string, string> metadata = 7;
inline int Notification::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Notification::metadata_size() const {
  return _internal_metadata_size();
}
inline void Notification::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.Notification.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.Notification.metadata)
  return _internal_mutable_metadata();
}

// bool requires_acknowledgment = 8;
inline void Notification::clear_requires_acknowledgment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = false;
}
inline bool Notification::requires_acknowledgment() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.requires_acknowledgment)
  return _internal_requires_acknowledgment();
}
inline void Notification::set_requires_acknowledgment(bool value) {
  _internal_set_requires_acknowledgment(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.requires_acknowledgment)
}
inline bool Notification::_internal_requires_acknowledgment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_acknowledgment_;
}
inline void Notification::_internal_set_requires_acknowledgment(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = value;
}

// int32 retry_count = 9;
inline void Notification::clear_retry_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_count_ = 0;
}
inline ::int32_t Notification::retry_count() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.retry_count)
  return _internal_retry_count();
}
inline void Notification::set_retry_count(::int32_t value) {
  _internal_set_retry_count(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.retry_count)
}
inline ::int32_t Notification::_internal_retry_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_count_;
}
inline void Notification::_internal_set_retry_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_count_ = value;
}

// .seigr.common.PriorityLevel priority = 10;
inline void Notification::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = 0;
}
inline ::seigr::common::PriorityLevel Notification::priority() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.priority)
  return _internal_priority();
}
inline void Notification::set_priority(::seigr::common::PriorityLevel value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.priority)
}
inline ::seigr::common::PriorityLevel Notification::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::PriorityLevel>(_impl_.priority_);
}
inline void Notification::_internal_set_priority(::seigr::common::PriorityLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// string action_url = 11;
inline void Notification::clear_action_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_url_.ClearToEmpty();
}
inline const std::string& Notification::action_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.action_url)
  return _internal_action_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_action_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.action_url)
}
inline std::string* Notification::mutable_action_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_url();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.action_url)
  return _s;
}
inline const std::string& Notification::_internal_action_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_url_.Get();
}
inline void Notification::_internal_set_action_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_url_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_action_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_url_.Mutable( GetArena());
}
inline std::string* Notification::release_action_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.action_url)
  return _impl_.action_url_.Release();
}
inline void Notification::set_allocated_action_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_url_.IsDefault()) {
    _impl_.action_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.action_url)
}

// int32 time_to_live_seconds = 12;
inline void Notification::clear_time_to_live_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_to_live_seconds_ = 0;
}
inline ::int32_t Notification::time_to_live_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.time_to_live_seconds)
  return _internal_time_to_live_seconds();
}
inline void Notification::set_time_to_live_seconds(::int32_t value) {
  _internal_set_time_to_live_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.time_to_live_seconds)
}
inline ::int32_t Notification::_internal_time_to_live_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_to_live_seconds_;
}
inline void Notification::_internal_set_time_to_live_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_to_live_seconds_ = value;
}

// repeated string actionable_items = 13;
inline int Notification::_internal_actionable_items_size() const {
  return _internal_actionable_items().size();
}
inline int Notification::actionable_items_size() const {
  return _internal_actionable_items_size();
}
inline void Notification::clear_actionable_items() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actionable_items_.Clear();
}
inline std::string* Notification::add_actionable_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_actionable_items()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.notification.Notification.actionable_items)
  return _s;
}
inline const std::string& Notification::actionable_items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.actionable_items)
  return _internal_actionable_items().Get(index);
}
inline std::string* Notification::mutable_actionable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.actionable_items)
  return _internal_mutable_actionable_items()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Notification::set_actionable_items(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_actionable_items()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.actionable_items)
}
template <typename Arg_, typename... Args_>
inline void Notification::add_actionable_items(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_actionable_items(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.notification.Notification.actionable_items)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Notification::actionable_items() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.Notification.actionable_items)
  return _internal_actionable_items();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Notification::mutable_actionable_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.Notification.actionable_items)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actionable_items();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Notification::_internal_actionable_items() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actionable_items_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Notification::_internal_mutable_actionable_items() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actionable_items_;
}

// bool aggregateable = 14;
inline void Notification::clear_aggregateable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregateable_ = false;
}
inline bool Notification::aggregateable() const {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.aggregateable)
  return _internal_aggregateable();
}
inline void Notification::set_aggregateable(bool value) {
  _internal_set_aggregateable(value);
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.aggregateable)
}
inline bool Notification::_internal_aggregateable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aggregateable_;
}
inline void Notification::_internal_set_aggregateable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregateable_ = value;
}

// map<string, string> response_options = 15;
inline int Notification::_internal_response_options_size() const {
  return _internal_response_options().size();
}
inline int Notification::response_options_size() const {
  return _internal_response_options_size();
}
inline void Notification::clear_response_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_options_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::_internal_response_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::response_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.Notification.response_options)
  return _internal_response_options();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::_internal_mutable_response_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::mutable_response_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.Notification.response_options)
  return _internal_mutable_response_options();
}

// string callback_url = 16;
inline void Notification::clear_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.ClearToEmpty();
}
inline const std::string& Notification::callback_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.Notification.callback_url)
  return _internal_callback_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Notification::set_callback_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.Notification.callback_url)
}
inline std::string* Notification::mutable_callback_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callback_url();
  // @@protoc_insertion_point(field_mutable:seigr.notification.Notification.callback_url)
  return _s;
}
inline const std::string& Notification::_internal_callback_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callback_url_.Get();
}
inline void Notification::_internal_set_callback_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.Set(value, GetArena());
}
inline std::string* Notification::_internal_mutable_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.callback_url_.Mutable( GetArena());
}
inline std::string* Notification::release_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.Notification.callback_url)
  return _impl_.callback_url_.Release();
}
inline void Notification::set_allocated_callback_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.callback_url_.IsDefault()) {
    _impl_.callback_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.Notification.callback_url)
}

// map<string, string> adaptive_parameters = 17;
inline int Notification::_internal_adaptive_parameters_size() const {
  return _internal_adaptive_parameters().size();
}
inline int Notification::adaptive_parameters_size() const {
  return _internal_adaptive_parameters_size();
}
inline void Notification::clear_adaptive_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::_internal_adaptive_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Notification::adaptive_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.Notification.adaptive_parameters)
  return _internal_adaptive_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::_internal_mutable_adaptive_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.adaptive_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Notification::mutable_adaptive_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.Notification.adaptive_parameters)
  return _internal_mutable_adaptive_parameters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationStatus

// string notification_id = 1;
inline void NotificationStatus::clear_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.ClearToEmpty();
}
inline const std::string& NotificationStatus::notification_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.notification_id)
  return _internal_notification_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_notification_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.notification_id)
}
inline std::string* NotificationStatus::mutable_notification_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notification_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.notification_id)
  return _s;
}
inline const std::string& NotificationStatus::_internal_notification_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_id_.Get();
}
inline void NotificationStatus::_internal_set_notification_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notification_id_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.notification_id)
  return _impl_.notification_id_.Release();
}
inline void NotificationStatus::set_allocated_notification_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.notification_id_.IsDefault()) {
    _impl_.notification_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.notification_id)
}

// string recipient_id = 2;
inline void NotificationStatus::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& NotificationStatus::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.recipient_id)
}
inline std::string* NotificationStatus::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.recipient_id)
  return _s;
}
inline const std::string& NotificationStatus::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void NotificationStatus::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void NotificationStatus::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.recipient_id)
}

// bool delivered = 3;
inline void NotificationStatus::clear_delivered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_ = false;
}
inline bool NotificationStatus::delivered() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.delivered)
  return _internal_delivered();
}
inline void NotificationStatus::set_delivered(bool value) {
  _internal_set_delivered(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.delivered)
}
inline bool NotificationStatus::_internal_delivered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delivered_;
}
inline void NotificationStatus::_internal_set_delivered(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_ = value;
}

// bool acknowledged = 4;
inline void NotificationStatus::clear_acknowledged() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_ = false;
}
inline bool NotificationStatus::acknowledged() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.acknowledged)
  return _internal_acknowledged();
}
inline void NotificationStatus::set_acknowledged(bool value) {
  _internal_set_acknowledged(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.acknowledged)
}
inline bool NotificationStatus::_internal_acknowledged() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acknowledged_;
}
inline void NotificationStatus::_internal_set_acknowledged(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_ = value;
}

// string delivered_at = 5;
inline void NotificationStatus::clear_delivered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_at_.ClearToEmpty();
}
inline const std::string& NotificationStatus::delivered_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.delivered_at)
  return _internal_delivered_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_delivered_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.delivered_at)
}
inline std::string* NotificationStatus::mutable_delivered_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_delivered_at();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.delivered_at)
  return _s;
}
inline const std::string& NotificationStatus::_internal_delivered_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delivered_at_.Get();
}
inline void NotificationStatus::_internal_set_delivered_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_at_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_delivered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.delivered_at_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_delivered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.delivered_at)
  return _impl_.delivered_at_.Release();
}
inline void NotificationStatus::set_allocated_delivered_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivered_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.delivered_at_.IsDefault()) {
    _impl_.delivered_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.delivered_at)
}

// string acknowledged_at = 6;
inline void NotificationStatus::clear_acknowledged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_at_.ClearToEmpty();
}
inline const std::string& NotificationStatus::acknowledged_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.acknowledged_at)
  return _internal_acknowledged_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_acknowledged_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.acknowledged_at)
}
inline std::string* NotificationStatus::mutable_acknowledged_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_acknowledged_at();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.acknowledged_at)
  return _s;
}
inline const std::string& NotificationStatus::_internal_acknowledged_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acknowledged_at_.Get();
}
inline void NotificationStatus::_internal_set_acknowledged_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_at_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_acknowledged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.acknowledged_at_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_acknowledged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.acknowledged_at)
  return _impl_.acknowledged_at_.Release();
}
inline void NotificationStatus::set_allocated_acknowledged_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledged_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.acknowledged_at_.IsDefault()) {
    _impl_.acknowledged_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.acknowledged_at)
}

// string failure_reason = 7;
inline void NotificationStatus::clear_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.ClearToEmpty();
}
inline const std::string& NotificationStatus::failure_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.failure_reason)
  return _internal_failure_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_failure_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.failure_reason)
}
inline std::string* NotificationStatus::mutable_failure_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_failure_reason();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.failure_reason)
  return _s;
}
inline const std::string& NotificationStatus::_internal_failure_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failure_reason_.Get();
}
inline void NotificationStatus::_internal_set_failure_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.failure_reason_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.failure_reason)
  return _impl_.failure_reason_.Release();
}
inline void NotificationStatus::set_allocated_failure_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.failure_reason_.IsDefault()) {
    _impl_.failure_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.failure_reason)
}

// map<string, string> delivery_metadata = 8;
inline int NotificationStatus::_internal_delivery_metadata_size() const {
  return _internal_delivery_metadata().size();
}
inline int NotificationStatus::delivery_metadata_size() const {
  return _internal_delivery_metadata_size();
}
inline void NotificationStatus::clear_delivery_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivery_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationStatus::_internal_delivery_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delivery_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationStatus::delivery_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationStatus.delivery_metadata)
  return _internal_delivery_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationStatus::_internal_mutable_delivery_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.delivery_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationStatus::mutable_delivery_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationStatus.delivery_metadata)
  return _internal_mutable_delivery_metadata();
}

// int32 retry_attempts = 9;
inline void NotificationStatus::clear_retry_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempts_ = 0;
}
inline ::int32_t NotificationStatus::retry_attempts() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.retry_attempts)
  return _internal_retry_attempts();
}
inline void NotificationStatus::set_retry_attempts(::int32_t value) {
  _internal_set_retry_attempts(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.retry_attempts)
}
inline ::int32_t NotificationStatus::_internal_retry_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_attempts_;
}
inline void NotificationStatus::_internal_set_retry_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempts_ = value;
}

// string last_retry_timestamp = 10;
inline void NotificationStatus::clear_last_retry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_retry_timestamp_.ClearToEmpty();
}
inline const std::string& NotificationStatus::last_retry_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.last_retry_timestamp)
  return _internal_last_retry_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_last_retry_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_retry_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.last_retry_timestamp)
}
inline std::string* NotificationStatus::mutable_last_retry_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_retry_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.last_retry_timestamp)
  return _s;
}
inline const std::string& NotificationStatus::_internal_last_retry_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_retry_timestamp_.Get();
}
inline void NotificationStatus::_internal_set_last_retry_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_retry_timestamp_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_last_retry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_retry_timestamp_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_last_retry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.last_retry_timestamp)
  return _impl_.last_retry_timestamp_.Release();
}
inline void NotificationStatus::set_allocated_last_retry_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_retry_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_retry_timestamp_.IsDefault()) {
    _impl_.last_retry_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.last_retry_timestamp)
}

// string escalation_policy = 11;
inline void NotificationStatus::clear_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.ClearToEmpty();
}
inline const std::string& NotificationStatus::escalation_policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.escalation_policy)
  return _internal_escalation_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_escalation_policy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.escalation_policy)
}
inline std::string* NotificationStatus::mutable_escalation_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_policy();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.escalation_policy)
  return _s;
}
inline const std::string& NotificationStatus::_internal_escalation_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_policy_.Get();
}
inline void NotificationStatus::_internal_set_escalation_policy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_policy_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.escalation_policy)
  return _impl_.escalation_policy_.Release();
}
inline void NotificationStatus::set_allocated_escalation_policy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_policy_.IsDefault()) {
    _impl_.escalation_policy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.escalation_policy)
}

// string adaptive_response_action = 12;
inline void NotificationStatus::clear_adaptive_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_response_action_.ClearToEmpty();
}
inline const std::string& NotificationStatus::adaptive_response_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationStatus.adaptive_response_action)
  return _internal_adaptive_response_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationStatus::set_adaptive_response_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_response_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationStatus.adaptive_response_action)
}
inline std::string* NotificationStatus::mutable_adaptive_response_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_adaptive_response_action();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationStatus.adaptive_response_action)
  return _s;
}
inline const std::string& NotificationStatus::_internal_adaptive_response_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_response_action_.Get();
}
inline void NotificationStatus::_internal_set_adaptive_response_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_response_action_.Set(value, GetArena());
}
inline std::string* NotificationStatus::_internal_mutable_adaptive_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.adaptive_response_action_.Mutable( GetArena());
}
inline std::string* NotificationStatus::release_adaptive_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationStatus.adaptive_response_action)
  return _impl_.adaptive_response_action_.Release();
}
inline void NotificationStatus::set_allocated_adaptive_response_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_response_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.adaptive_response_action_.IsDefault()) {
    _impl_.adaptive_response_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationStatus.adaptive_response_action)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationHistory

// string recipient_id = 1;
inline void NotificationHistory::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& NotificationHistory::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationHistory.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationHistory::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationHistory.recipient_id)
}
inline std::string* NotificationHistory::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationHistory.recipient_id)
  return _s;
}
inline const std::string& NotificationHistory::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void NotificationHistory::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* NotificationHistory::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* NotificationHistory::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationHistory.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void NotificationHistory::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationHistory.recipient_id)
}

// repeated .seigr.notification.Notification notifications = 2;
inline int NotificationHistory::_internal_notifications_size() const {
  return _internal_notifications().size();
}
inline int NotificationHistory::notifications_size() const {
  return _internal_notifications_size();
}
inline void NotificationHistory::clear_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notifications_.Clear();
}
inline ::seigr::notification::Notification* NotificationHistory::mutable_notifications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationHistory.notifications)
  return _internal_mutable_notifications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* NotificationHistory::mutable_notifications()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.NotificationHistory.notifications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_notifications();
}
inline const ::seigr::notification::Notification& NotificationHistory::notifications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationHistory.notifications)
  return _internal_notifications().Get(index);
}
inline ::seigr::notification::Notification* NotificationHistory::add_notifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::notification::Notification* _add = _internal_mutable_notifications()->Add();
  // @@protoc_insertion_point(field_add:seigr.notification.NotificationHistory.notifications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& NotificationHistory::notifications() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.NotificationHistory.notifications)
  return _internal_notifications();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>&
NotificationHistory::_internal_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notifications_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>*
NotificationHistory::_internal_mutable_notifications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.notifications_;
}

// string start_date = 3;
inline void NotificationHistory::clear_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_.ClearToEmpty();
}
inline const std::string& NotificationHistory::start_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationHistory.start_date)
  return _internal_start_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationHistory::set_start_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationHistory.start_date)
}
inline std::string* NotificationHistory::mutable_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationHistory.start_date)
  return _s;
}
inline const std::string& NotificationHistory::_internal_start_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_date_.Get();
}
inline void NotificationHistory::_internal_set_start_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_.Set(value, GetArena());
}
inline std::string* NotificationHistory::_internal_mutable_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.start_date_.Mutable( GetArena());
}
inline std::string* NotificationHistory::release_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationHistory.start_date)
  return _impl_.start_date_.Release();
}
inline void NotificationHistory::set_allocated_start_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.start_date_.IsDefault()) {
    _impl_.start_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationHistory.start_date)
}

// string end_date = 4;
inline void NotificationHistory::clear_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.ClearToEmpty();
}
inline const std::string& NotificationHistory::end_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationHistory.end_date)
  return _internal_end_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationHistory::set_end_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationHistory.end_date)
}
inline std::string* NotificationHistory::mutable_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationHistory.end_date)
  return _s;
}
inline const std::string& NotificationHistory::_internal_end_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_date_.Get();
}
inline void NotificationHistory::_internal_set_end_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.Set(value, GetArena());
}
inline std::string* NotificationHistory::_internal_mutable_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.end_date_.Mutable( GetArena());
}
inline std::string* NotificationHistory::release_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationHistory.end_date)
  return _impl_.end_date_.Release();
}
inline void NotificationHistory::set_allocated_end_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.end_date_.IsDefault()) {
    _impl_.end_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationHistory.end_date)
}

// map<string, int32> notification_counts = 5;
inline int NotificationHistory::_internal_notification_counts_size() const {
  return _internal_notification_counts().size();
}
inline int NotificationHistory::notification_counts_size() const {
  return _internal_notification_counts_size();
}
inline void NotificationHistory::clear_notification_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::_internal_notification_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::notification_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationHistory.notification_counts)
  return _internal_notification_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::_internal_mutable_notification_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notification_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::mutable_notification_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationHistory.notification_counts)
  return _internal_mutable_notification_counts();
}

// int32 total_notifications = 6;
inline void NotificationHistory::clear_total_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_notifications_ = 0;
}
inline ::int32_t NotificationHistory::total_notifications() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationHistory.total_notifications)
  return _internal_total_notifications();
}
inline void NotificationHistory::set_total_notifications(::int32_t value) {
  _internal_set_total_notifications(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationHistory.total_notifications)
}
inline ::int32_t NotificationHistory::_internal_total_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_notifications_;
}
inline void NotificationHistory::_internal_set_total_notifications(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_notifications_ = value;
}

// map<string, int32> priority_counts = 7;
inline int NotificationHistory::_internal_priority_counts_size() const {
  return _internal_priority_counts().size();
}
inline int NotificationHistory::priority_counts_size() const {
  return _internal_priority_counts_size();
}
inline void NotificationHistory::clear_priority_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::_internal_priority_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::priority_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationHistory.priority_counts)
  return _internal_priority_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::_internal_mutable_priority_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.priority_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::mutable_priority_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationHistory.priority_counts)
  return _internal_mutable_priority_counts();
}

// map<string, int32> response_time_average = 8;
inline int NotificationHistory::_internal_response_time_average_size() const {
  return _internal_response_time_average().size();
}
inline int NotificationHistory::response_time_average_size() const {
  return _internal_response_time_average_size();
}
inline void NotificationHistory::clear_response_time_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_time_average_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::_internal_response_time_average() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_time_average_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NotificationHistory::response_time_average() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationHistory.response_time_average)
  return _internal_response_time_average();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::_internal_mutable_response_time_average() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_time_average_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NotificationHistory::mutable_response_time_average() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationHistory.response_time_average)
  return _internal_mutable_response_time_average();
}

// map<string, string> engagement_metrics = 9;
inline int NotificationHistory::_internal_engagement_metrics_size() const {
  return _internal_engagement_metrics().size();
}
inline int NotificationHistory::engagement_metrics_size() const {
  return _internal_engagement_metrics_size();
}
inline void NotificationHistory::clear_engagement_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engagement_metrics_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationHistory::_internal_engagement_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.engagement_metrics_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationHistory::engagement_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationHistory.engagement_metrics)
  return _internal_engagement_metrics();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationHistory::_internal_mutable_engagement_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.engagement_metrics_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationHistory::mutable_engagement_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationHistory.engagement_metrics)
  return _internal_mutable_engagement_metrics();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationPreferences

// string recipient_id = 1;
inline void NotificationPreferences::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& NotificationPreferences::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationPreferences::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.recipient_id)
}
inline std::string* NotificationPreferences::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationPreferences.recipient_id)
  return _s;
}
inline const std::string& NotificationPreferences::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void NotificationPreferences::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* NotificationPreferences::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* NotificationPreferences::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationPreferences.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void NotificationPreferences::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationPreferences.recipient_id)
}

// repeated .seigr.notification.DeliveryMethod preferred_methods = 2;
inline int NotificationPreferences::_internal_preferred_methods_size() const {
  return _internal_preferred_methods().size();
}
inline int NotificationPreferences::preferred_methods_size() const {
  return _internal_preferred_methods_size();
}
inline void NotificationPreferences::clear_preferred_methods() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_methods_.Clear();
}
inline ::seigr::notification::DeliveryMethod NotificationPreferences::preferred_methods(int index) const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.preferred_methods)
  return static_cast<::seigr::notification::DeliveryMethod>(_internal_preferred_methods().Get(index));
}
inline void NotificationPreferences::set_preferred_methods(int index, ::seigr::notification::DeliveryMethod value) {
  _internal_mutable_preferred_methods()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.preferred_methods)
}
inline void NotificationPreferences::add_preferred_methods(::seigr::notification::DeliveryMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_preferred_methods()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.notification.NotificationPreferences.preferred_methods)
}
inline const ::google::protobuf::RepeatedField<int>& NotificationPreferences::preferred_methods() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.NotificationPreferences.preferred_methods)
  return _internal_preferred_methods();
}
inline ::google::protobuf::RepeatedField<int>* NotificationPreferences::mutable_preferred_methods()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.NotificationPreferences.preferred_methods)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preferred_methods();
}
inline const ::google::protobuf::RepeatedField<int>& NotificationPreferences::_internal_preferred_methods()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferred_methods_;
}
inline ::google::protobuf::RepeatedField<int>* NotificationPreferences::_internal_mutable_preferred_methods() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preferred_methods_;
}

// bool mute_notifications = 3;
inline void NotificationPreferences::clear_mute_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mute_notifications_ = false;
}
inline bool NotificationPreferences::mute_notifications() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.mute_notifications)
  return _internal_mute_notifications();
}
inline void NotificationPreferences::set_mute_notifications(bool value) {
  _internal_set_mute_notifications(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.mute_notifications)
}
inline bool NotificationPreferences::_internal_mute_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mute_notifications_;
}
inline void NotificationPreferences::_internal_set_mute_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mute_notifications_ = value;
}

// map<string, bool> type_preferences = 4;
inline int NotificationPreferences::_internal_type_preferences_size() const {
  return _internal_type_preferences().size();
}
inline int NotificationPreferences::type_preferences_size() const {
  return _internal_type_preferences_size();
}
inline void NotificationPreferences::clear_type_preferences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_preferences_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& NotificationPreferences::_internal_type_preferences() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_preferences_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& NotificationPreferences::type_preferences() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationPreferences.type_preferences)
  return _internal_type_preferences();
}
inline ::google::protobuf::Map<std::string, bool>* NotificationPreferences::_internal_mutable_type_preferences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_preferences_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* NotificationPreferences::mutable_type_preferences() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationPreferences.type_preferences)
  return _internal_mutable_type_preferences();
}

// int32 max_daily_notifications = 5;
inline void NotificationPreferences::clear_max_daily_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_daily_notifications_ = 0;
}
inline ::int32_t NotificationPreferences::max_daily_notifications() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.max_daily_notifications)
  return _internal_max_daily_notifications();
}
inline void NotificationPreferences::set_max_daily_notifications(::int32_t value) {
  _internal_set_max_daily_notifications(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.max_daily_notifications)
}
inline ::int32_t NotificationPreferences::_internal_max_daily_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_daily_notifications_;
}
inline void NotificationPreferences::_internal_set_max_daily_notifications(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_daily_notifications_ = value;
}

// string do_not_disturb_start = 6;
inline void NotificationPreferences::clear_do_not_disturb_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_start_.ClearToEmpty();
}
inline const std::string& NotificationPreferences::do_not_disturb_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.do_not_disturb_start)
  return _internal_do_not_disturb_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationPreferences::set_do_not_disturb_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.do_not_disturb_start)
}
inline std::string* NotificationPreferences::mutable_do_not_disturb_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_do_not_disturb_start();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationPreferences.do_not_disturb_start)
  return _s;
}
inline const std::string& NotificationPreferences::_internal_do_not_disturb_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.do_not_disturb_start_.Get();
}
inline void NotificationPreferences::_internal_set_do_not_disturb_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_start_.Set(value, GetArena());
}
inline std::string* NotificationPreferences::_internal_mutable_do_not_disturb_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.do_not_disturb_start_.Mutable( GetArena());
}
inline std::string* NotificationPreferences::release_do_not_disturb_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationPreferences.do_not_disturb_start)
  return _impl_.do_not_disturb_start_.Release();
}
inline void NotificationPreferences::set_allocated_do_not_disturb_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.do_not_disturb_start_.IsDefault()) {
    _impl_.do_not_disturb_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationPreferences.do_not_disturb_start)
}

// string do_not_disturb_end = 7;
inline void NotificationPreferences::clear_do_not_disturb_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_end_.ClearToEmpty();
}
inline const std::string& NotificationPreferences::do_not_disturb_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.do_not_disturb_end)
  return _internal_do_not_disturb_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationPreferences::set_do_not_disturb_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.do_not_disturb_end)
}
inline std::string* NotificationPreferences::mutable_do_not_disturb_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_do_not_disturb_end();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationPreferences.do_not_disturb_end)
  return _s;
}
inline const std::string& NotificationPreferences::_internal_do_not_disturb_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.do_not_disturb_end_.Get();
}
inline void NotificationPreferences::_internal_set_do_not_disturb_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_end_.Set(value, GetArena());
}
inline std::string* NotificationPreferences::_internal_mutable_do_not_disturb_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.do_not_disturb_end_.Mutable( GetArena());
}
inline std::string* NotificationPreferences::release_do_not_disturb_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationPreferences.do_not_disturb_end)
  return _impl_.do_not_disturb_end_.Release();
}
inline void NotificationPreferences::set_allocated_do_not_disturb_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.do_not_disturb_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.do_not_disturb_end_.IsDefault()) {
    _impl_.do_not_disturb_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationPreferences.do_not_disturb_end)
}

// .seigr.common.PriorityLevel minimum_priority = 8;
inline void NotificationPreferences::clear_minimum_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_priority_ = 0;
}
inline ::seigr::common::PriorityLevel NotificationPreferences::minimum_priority() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.minimum_priority)
  return _internal_minimum_priority();
}
inline void NotificationPreferences::set_minimum_priority(::seigr::common::PriorityLevel value) {
  _internal_set_minimum_priority(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.minimum_priority)
}
inline ::seigr::common::PriorityLevel NotificationPreferences::_internal_minimum_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::PriorityLevel>(_impl_.minimum_priority_);
}
inline void NotificationPreferences::_internal_set_minimum_priority(::seigr::common::PriorityLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_priority_ = value;
}

// string custom_notification_interval = 9;
inline void NotificationPreferences::clear_custom_notification_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_notification_interval_.ClearToEmpty();
}
inline const std::string& NotificationPreferences::custom_notification_interval() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.custom_notification_interval)
  return _internal_custom_notification_interval();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationPreferences::set_custom_notification_interval(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_notification_interval_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.custom_notification_interval)
}
inline std::string* NotificationPreferences::mutable_custom_notification_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_custom_notification_interval();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationPreferences.custom_notification_interval)
  return _s;
}
inline const std::string& NotificationPreferences::_internal_custom_notification_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_notification_interval_.Get();
}
inline void NotificationPreferences::_internal_set_custom_notification_interval(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_notification_interval_.Set(value, GetArena());
}
inline std::string* NotificationPreferences::_internal_mutable_custom_notification_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.custom_notification_interval_.Mutable( GetArena());
}
inline std::string* NotificationPreferences::release_custom_notification_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationPreferences.custom_notification_interval)
  return _impl_.custom_notification_interval_.Release();
}
inline void NotificationPreferences::set_allocated_custom_notification_interval(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_notification_interval_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.custom_notification_interval_.IsDefault()) {
    _impl_.custom_notification_interval_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationPreferences.custom_notification_interval)
}

// map<string, bool> escalation_conditions = 10;
inline int NotificationPreferences::_internal_escalation_conditions_size() const {
  return _internal_escalation_conditions().size();
}
inline int NotificationPreferences::escalation_conditions_size() const {
  return _internal_escalation_conditions_size();
}
inline void NotificationPreferences::clear_escalation_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& NotificationPreferences::_internal_escalation_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& NotificationPreferences::escalation_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationPreferences.escalation_conditions)
  return _internal_escalation_conditions();
}
inline ::google::protobuf::Map<std::string, bool>* NotificationPreferences::_internal_mutable_escalation_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* NotificationPreferences::mutable_escalation_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationPreferences.escalation_conditions)
  return _internal_mutable_escalation_conditions();
}

// bool dynamic_thresholds = 11;
inline void NotificationPreferences::clear_dynamic_thresholds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dynamic_thresholds_ = false;
}
inline bool NotificationPreferences::dynamic_thresholds() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.dynamic_thresholds)
  return _internal_dynamic_thresholds();
}
inline void NotificationPreferences::set_dynamic_thresholds(bool value) {
  _internal_set_dynamic_thresholds(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.dynamic_thresholds)
}
inline bool NotificationPreferences::_internal_dynamic_thresholds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dynamic_thresholds_;
}
inline void NotificationPreferences::_internal_set_dynamic_thresholds(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dynamic_thresholds_ = value;
}

// int32 max_urgent_notifications = 12;
inline void NotificationPreferences::clear_max_urgent_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_urgent_notifications_ = 0;
}
inline ::int32_t NotificationPreferences::max_urgent_notifications() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationPreferences.max_urgent_notifications)
  return _internal_max_urgent_notifications();
}
inline void NotificationPreferences::set_max_urgent_notifications(::int32_t value) {
  _internal_set_max_urgent_notifications(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationPreferences.max_urgent_notifications)
}
inline ::int32_t NotificationPreferences::_internal_max_urgent_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_urgent_notifications_;
}
inline void NotificationPreferences::_internal_set_max_urgent_notifications(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_urgent_notifications_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationBatch

// string batch_id = 1;
inline void NotificationBatch::clear_batch_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& NotificationBatch::batch_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationBatch::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.batch_id)
}
inline std::string* NotificationBatch::mutable_batch_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationBatch.batch_id)
  return _s;
}
inline const std::string& NotificationBatch::_internal_batch_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.batch_id_.Get();
}
inline void NotificationBatch::_internal_set_batch_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_id_.Set(value, GetArena());
}
inline std::string* NotificationBatch::_internal_mutable_batch_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.batch_id_.Mutable( GetArena());
}
inline std::string* NotificationBatch::release_batch_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationBatch.batch_id)
  return _impl_.batch_id_.Release();
}
inline void NotificationBatch::set_allocated_batch_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.batch_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.batch_id_.IsDefault()) {
    _impl_.batch_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationBatch.batch_id)
}

// repeated .seigr.notification.Notification notifications = 2;
inline int NotificationBatch::_internal_notifications_size() const {
  return _internal_notifications().size();
}
inline int NotificationBatch::notifications_size() const {
  return _internal_notifications_size();
}
inline void NotificationBatch::clear_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notifications_.Clear();
}
inline ::seigr::notification::Notification* NotificationBatch::mutable_notifications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationBatch.notifications)
  return _internal_mutable_notifications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>* NotificationBatch::mutable_notifications()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.NotificationBatch.notifications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_notifications();
}
inline const ::seigr::notification::Notification& NotificationBatch::notifications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.notifications)
  return _internal_notifications().Get(index);
}
inline ::seigr::notification::Notification* NotificationBatch::add_notifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::notification::Notification* _add = _internal_mutable_notifications()->Add();
  // @@protoc_insertion_point(field_add:seigr.notification.NotificationBatch.notifications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>& NotificationBatch::notifications() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.NotificationBatch.notifications)
  return _internal_notifications();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>&
NotificationBatch::_internal_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notifications_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::notification::Notification>*
NotificationBatch::_internal_mutable_notifications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.notifications_;
}

// string timestamp = 3;
inline void NotificationBatch::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& NotificationBatch::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationBatch::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.timestamp)
}
inline std::string* NotificationBatch::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationBatch.timestamp)
  return _s;
}
inline const std::string& NotificationBatch::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void NotificationBatch::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* NotificationBatch::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* NotificationBatch::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationBatch.timestamp)
  return _impl_.timestamp_.Release();
}
inline void NotificationBatch::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationBatch.timestamp)
}

// .seigr.notification.DeliveryMethod delivery_method = 4;
inline void NotificationBatch::clear_delivery_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivery_method_ = 0;
}
inline ::seigr::notification::DeliveryMethod NotificationBatch::delivery_method() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.delivery_method)
  return _internal_delivery_method();
}
inline void NotificationBatch::set_delivery_method(::seigr::notification::DeliveryMethod value) {
  _internal_set_delivery_method(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.delivery_method)
}
inline ::seigr::notification::DeliveryMethod NotificationBatch::_internal_delivery_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::notification::DeliveryMethod>(_impl_.delivery_method_);
}
inline void NotificationBatch::_internal_set_delivery_method(::seigr::notification::DeliveryMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delivery_method_ = value;
}

// map<string, string> metadata = 5;
inline int NotificationBatch::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int NotificationBatch::metadata_size() const {
  return _internal_metadata_size();
}
inline void NotificationBatch::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationBatch::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationBatch::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationBatch.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationBatch::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationBatch::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationBatch.metadata)
  return _internal_mutable_metadata();
}

// bool requires_batch_acknowledgment = 6;
inline void NotificationBatch::clear_requires_batch_acknowledgment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_batch_acknowledgment_ = false;
}
inline bool NotificationBatch::requires_batch_acknowledgment() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.requires_batch_acknowledgment)
  return _internal_requires_batch_acknowledgment();
}
inline void NotificationBatch::set_requires_batch_acknowledgment(bool value) {
  _internal_set_requires_batch_acknowledgment(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.requires_batch_acknowledgment)
}
inline bool NotificationBatch::_internal_requires_batch_acknowledgment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_batch_acknowledgment_;
}
inline void NotificationBatch::_internal_set_requires_batch_acknowledgment(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_batch_acknowledgment_ = value;
}

// int32 total_retries = 7;
inline void NotificationBatch::clear_total_retries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_retries_ = 0;
}
inline ::int32_t NotificationBatch::total_retries() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.total_retries)
  return _internal_total_retries();
}
inline void NotificationBatch::set_total_retries(::int32_t value) {
  _internal_set_total_retries(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.total_retries)
}
inline ::int32_t NotificationBatch::_internal_total_retries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_retries_;
}
inline void NotificationBatch::_internal_set_total_retries(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_retries_ = value;
}

// bool adaptive_batch_scaling = 8;
inline void NotificationBatch::clear_adaptive_batch_scaling() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_batch_scaling_ = false;
}
inline bool NotificationBatch::adaptive_batch_scaling() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationBatch.adaptive_batch_scaling)
  return _internal_adaptive_batch_scaling();
}
inline void NotificationBatch::set_adaptive_batch_scaling(bool value) {
  _internal_set_adaptive_batch_scaling(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationBatch.adaptive_batch_scaling)
}
inline bool NotificationBatch::_internal_adaptive_batch_scaling() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_batch_scaling_;
}
inline void NotificationBatch::_internal_set_adaptive_batch_scaling(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_batch_scaling_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationSchedule

// string notification_id = 1;
inline void NotificationSchedule::clear_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.ClearToEmpty();
}
inline const std::string& NotificationSchedule::notification_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.notification_id)
  return _internal_notification_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationSchedule::set_notification_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.notification_id)
}
inline std::string* NotificationSchedule::mutable_notification_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notification_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationSchedule.notification_id)
  return _s;
}
inline const std::string& NotificationSchedule::_internal_notification_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_id_.Get();
}
inline void NotificationSchedule::_internal_set_notification_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.Set(value, GetArena());
}
inline std::string* NotificationSchedule::_internal_mutable_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notification_id_.Mutable( GetArena());
}
inline std::string* NotificationSchedule::release_notification_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationSchedule.notification_id)
  return _impl_.notification_id_.Release();
}
inline void NotificationSchedule::set_allocated_notification_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.notification_id_.IsDefault()) {
    _impl_.notification_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationSchedule.notification_id)
}

// string scheduled_time = 2;
inline void NotificationSchedule::clear_scheduled_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduled_time_.ClearToEmpty();
}
inline const std::string& NotificationSchedule::scheduled_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.scheduled_time)
  return _internal_scheduled_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationSchedule::set_scheduled_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduled_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.scheduled_time)
}
inline std::string* NotificationSchedule::mutable_scheduled_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scheduled_time();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationSchedule.scheduled_time)
  return _s;
}
inline const std::string& NotificationSchedule::_internal_scheduled_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scheduled_time_.Get();
}
inline void NotificationSchedule::_internal_set_scheduled_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduled_time_.Set(value, GetArena());
}
inline std::string* NotificationSchedule::_internal_mutable_scheduled_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.scheduled_time_.Mutable( GetArena());
}
inline std::string* NotificationSchedule::release_scheduled_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationSchedule.scheduled_time)
  return _impl_.scheduled_time_.Release();
}
inline void NotificationSchedule::set_allocated_scheduled_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduled_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.scheduled_time_.IsDefault()) {
    _impl_.scheduled_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationSchedule.scheduled_time)
}

// bool recurring = 3;
inline void NotificationSchedule::clear_recurring() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurring_ = false;
}
inline bool NotificationSchedule::recurring() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.recurring)
  return _internal_recurring();
}
inline void NotificationSchedule::set_recurring(bool value) {
  _internal_set_recurring(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.recurring)
}
inline bool NotificationSchedule::_internal_recurring() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recurring_;
}
inline void NotificationSchedule::_internal_set_recurring(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurring_ = value;
}

// string recurrence_pattern = 4;
inline void NotificationSchedule::clear_recurrence_pattern() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurrence_pattern_.ClearToEmpty();
}
inline const std::string& NotificationSchedule::recurrence_pattern() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.recurrence_pattern)
  return _internal_recurrence_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationSchedule::set_recurrence_pattern(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurrence_pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.recurrence_pattern)
}
inline std::string* NotificationSchedule::mutable_recurrence_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recurrence_pattern();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationSchedule.recurrence_pattern)
  return _s;
}
inline const std::string& NotificationSchedule::_internal_recurrence_pattern() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recurrence_pattern_.Get();
}
inline void NotificationSchedule::_internal_set_recurrence_pattern(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurrence_pattern_.Set(value, GetArena());
}
inline std::string* NotificationSchedule::_internal_mutable_recurrence_pattern() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recurrence_pattern_.Mutable( GetArena());
}
inline std::string* NotificationSchedule::release_recurrence_pattern() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationSchedule.recurrence_pattern)
  return _impl_.recurrence_pattern_.Release();
}
inline void NotificationSchedule::set_allocated_recurrence_pattern(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recurrence_pattern_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recurrence_pattern_.IsDefault()) {
    _impl_.recurrence_pattern_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationSchedule.recurrence_pattern)
}

// string end_date = 5;
inline void NotificationSchedule::clear_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.ClearToEmpty();
}
inline const std::string& NotificationSchedule::end_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.end_date)
  return _internal_end_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationSchedule::set_end_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.end_date)
}
inline std::string* NotificationSchedule::mutable_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationSchedule.end_date)
  return _s;
}
inline const std::string& NotificationSchedule::_internal_end_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_date_.Get();
}
inline void NotificationSchedule::_internal_set_end_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.Set(value, GetArena());
}
inline std::string* NotificationSchedule::_internal_mutable_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.end_date_.Mutable( GetArena());
}
inline std::string* NotificationSchedule::release_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationSchedule.end_date)
  return _impl_.end_date_.Release();
}
inline void NotificationSchedule::set_allocated_end_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.end_date_.IsDefault()) {
    _impl_.end_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationSchedule.end_date)
}

// map<string, string> scheduling_metadata = 6;
inline int NotificationSchedule::_internal_scheduling_metadata_size() const {
  return _internal_scheduling_metadata().size();
}
inline int NotificationSchedule::scheduling_metadata_size() const {
  return _internal_scheduling_metadata_size();
}
inline void NotificationSchedule::clear_scheduling_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scheduling_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationSchedule::_internal_scheduling_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scheduling_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationSchedule::scheduling_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationSchedule.scheduling_metadata)
  return _internal_scheduling_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationSchedule::_internal_mutable_scheduling_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.scheduling_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationSchedule::mutable_scheduling_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationSchedule.scheduling_metadata)
  return _internal_mutable_scheduling_metadata();
}

// int32 grace_period_minutes = 7;
inline void NotificationSchedule::clear_grace_period_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grace_period_minutes_ = 0;
}
inline ::int32_t NotificationSchedule::grace_period_minutes() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.grace_period_minutes)
  return _internal_grace_period_minutes();
}
inline void NotificationSchedule::set_grace_period_minutes(::int32_t value) {
  _internal_set_grace_period_minutes(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.grace_period_minutes)
}
inline ::int32_t NotificationSchedule::_internal_grace_period_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grace_period_minutes_;
}
inline void NotificationSchedule::_internal_set_grace_period_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grace_period_minutes_ = value;
}

// bool auto_retry_on_failure = 8;
inline void NotificationSchedule::clear_auto_retry_on_failure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_retry_on_failure_ = false;
}
inline bool NotificationSchedule::auto_retry_on_failure() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.auto_retry_on_failure)
  return _internal_auto_retry_on_failure();
}
inline void NotificationSchedule::set_auto_retry_on_failure(bool value) {
  _internal_set_auto_retry_on_failure(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.auto_retry_on_failure)
}
inline bool NotificationSchedule::_internal_auto_retry_on_failure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_retry_on_failure_;
}
inline void NotificationSchedule::_internal_set_auto_retry_on_failure(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_retry_on_failure_ = value;
}

// int32 adaptive_grace_period = 9;
inline void NotificationSchedule::clear_adaptive_grace_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_grace_period_ = 0;
}
inline ::int32_t NotificationSchedule::adaptive_grace_period() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.adaptive_grace_period)
  return _internal_adaptive_grace_period();
}
inline void NotificationSchedule::set_adaptive_grace_period(::int32_t value) {
  _internal_set_adaptive_grace_period(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.adaptive_grace_period)
}
inline ::int32_t NotificationSchedule::_internal_adaptive_grace_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_grace_period_;
}
inline void NotificationSchedule::_internal_set_adaptive_grace_period(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_grace_period_ = value;
}

// bool user_activity_dependent = 10;
inline void NotificationSchedule::clear_user_activity_dependent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_activity_dependent_ = false;
}
inline bool NotificationSchedule::user_activity_dependent() const {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationSchedule.user_activity_dependent)
  return _internal_user_activity_dependent();
}
inline void NotificationSchedule::set_user_activity_dependent(bool value) {
  _internal_set_user_activity_dependent(value);
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationSchedule.user_activity_dependent)
}
inline bool NotificationSchedule::_internal_user_activity_dependent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_activity_dependent_;
}
inline void NotificationSchedule::_internal_set_user_activity_dependent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_activity_dependent_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationEvent

// string event_id = 1;
inline void NotificationEvent::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& NotificationEvent::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationEvent.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationEvent::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationEvent.event_id)
}
inline std::string* NotificationEvent::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationEvent.event_id)
  return _s;
}
inline const std::string& NotificationEvent::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void NotificationEvent::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* NotificationEvent::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* NotificationEvent::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationEvent.event_id)
  return _impl_.event_id_.Release();
}
inline void NotificationEvent::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationEvent.event_id)
}

// string severity = 2;
inline void NotificationEvent::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.ClearToEmpty();
}
inline const std::string& NotificationEvent::severity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationEvent.severity)
  return _internal_severity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationEvent::set_severity(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationEvent.severity)
}
inline std::string* NotificationEvent::mutable_severity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_severity();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationEvent.severity)
  return _s;
}
inline const std::string& NotificationEvent::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.severity_.Get();
}
inline void NotificationEvent::_internal_set_severity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.Set(value, GetArena());
}
inline std::string* NotificationEvent::_internal_mutable_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.severity_.Mutable( GetArena());
}
inline std::string* NotificationEvent::release_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationEvent.severity)
  return _impl_.severity_.Release();
}
inline void NotificationEvent::set_allocated_severity(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.severity_.IsDefault()) {
    _impl_.severity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationEvent.severity)
}

// string message = 3;
inline void NotificationEvent::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& NotificationEvent::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationEvent.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationEvent::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationEvent.message)
}
inline std::string* NotificationEvent::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationEvent.message)
  return _s;
}
inline const std::string& NotificationEvent::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void NotificationEvent::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* NotificationEvent::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* NotificationEvent::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationEvent.message)
  return _impl_.message_.Release();
}
inline void NotificationEvent::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationEvent.message)
}

// repeated string target_users = 4;
inline int NotificationEvent::_internal_target_users_size() const {
  return _internal_target_users().size();
}
inline int NotificationEvent::target_users_size() const {
  return _internal_target_users_size();
}
inline void NotificationEvent::clear_target_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_users_.Clear();
}
inline std::string* NotificationEvent::add_target_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_target_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.notification.NotificationEvent.target_users)
  return _s;
}
inline const std::string& NotificationEvent::target_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationEvent.target_users)
  return _internal_target_users().Get(index);
}
inline std::string* NotificationEvent::mutable_target_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationEvent.target_users)
  return _internal_mutable_target_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NotificationEvent::set_target_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_target_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationEvent.target_users)
}
template <typename Arg_, typename... Args_>
inline void NotificationEvent::add_target_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_target_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.notification.NotificationEvent.target_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NotificationEvent::target_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.NotificationEvent.target_users)
  return _internal_target_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NotificationEvent::mutable_target_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.NotificationEvent.target_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_target_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NotificationEvent::_internal_target_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NotificationEvent::_internal_mutable_target_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.target_users_;
}

// string timestamp = 5;
inline void NotificationEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& NotificationEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.NotificationEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.NotificationEvent.timestamp)
}
inline std::string* NotificationEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.notification.NotificationEvent.timestamp)
  return _s;
}
inline const std::string& NotificationEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void NotificationEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* NotificationEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* NotificationEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.NotificationEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void NotificationEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.NotificationEvent.timestamp)
}

// map<string, string> metadata = 6;
inline int NotificationEvent::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int NotificationEvent::metadata_size() const {
  return _internal_metadata_size();
}
inline void NotificationEvent::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationEvent::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NotificationEvent::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.NotificationEvent.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationEvent::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NotificationEvent::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.NotificationEvent.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserNotificationSettings

// string user_id = 1;
inline void UserNotificationSettings::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserNotificationSettings::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.UserNotificationSettings.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserNotificationSettings::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.UserNotificationSettings.user_id)
}
inline std::string* UserNotificationSettings::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.UserNotificationSettings.user_id)
  return _s;
}
inline const std::string& UserNotificationSettings::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserNotificationSettings::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserNotificationSettings::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserNotificationSettings::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.UserNotificationSettings.user_id)
  return _impl_.user_id_.Release();
}
inline void UserNotificationSettings::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.UserNotificationSettings.user_id)
}

// repeated string preferred_channels = 2;
inline int UserNotificationSettings::_internal_preferred_channels_size() const {
  return _internal_preferred_channels().size();
}
inline int UserNotificationSettings::preferred_channels_size() const {
  return _internal_preferred_channels_size();
}
inline void UserNotificationSettings::clear_preferred_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_channels_.Clear();
}
inline std::string* UserNotificationSettings::add_preferred_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_preferred_channels()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.notification.UserNotificationSettings.preferred_channels)
  return _s;
}
inline const std::string& UserNotificationSettings::preferred_channels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.UserNotificationSettings.preferred_channels)
  return _internal_preferred_channels().Get(index);
}
inline std::string* UserNotificationSettings::mutable_preferred_channels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.notification.UserNotificationSettings.preferred_channels)
  return _internal_mutable_preferred_channels()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserNotificationSettings::set_preferred_channels(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_preferred_channels()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.notification.UserNotificationSettings.preferred_channels)
}
template <typename Arg_, typename... Args_>
inline void UserNotificationSettings::add_preferred_channels(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_preferred_channels(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.notification.UserNotificationSettings.preferred_channels)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserNotificationSettings::preferred_channels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.notification.UserNotificationSettings.preferred_channels)
  return _internal_preferred_channels();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserNotificationSettings::mutable_preferred_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.notification.UserNotificationSettings.preferred_channels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_preferred_channels();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserNotificationSettings::_internal_preferred_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferred_channels_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserNotificationSettings::_internal_mutable_preferred_channels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.preferred_channels_;
}

// string notification_frequency = 3;
inline void UserNotificationSettings::clear_notification_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_frequency_.ClearToEmpty();
}
inline const std::string& UserNotificationSettings::notification_frequency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.UserNotificationSettings.notification_frequency)
  return _internal_notification_frequency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserNotificationSettings::set_notification_frequency(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_frequency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.UserNotificationSettings.notification_frequency)
}
inline std::string* UserNotificationSettings::mutable_notification_frequency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notification_frequency();
  // @@protoc_insertion_point(field_mutable:seigr.notification.UserNotificationSettings.notification_frequency)
  return _s;
}
inline const std::string& UserNotificationSettings::_internal_notification_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_frequency_.Get();
}
inline void UserNotificationSettings::_internal_set_notification_frequency(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_frequency_.Set(value, GetArena());
}
inline std::string* UserNotificationSettings::_internal_mutable_notification_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.notification_frequency_.Mutable( GetArena());
}
inline std::string* UserNotificationSettings::release_notification_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.UserNotificationSettings.notification_frequency)
  return _impl_.notification_frequency_.Release();
}
inline void UserNotificationSettings::set_allocated_notification_frequency(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_frequency_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.notification_frequency_.IsDefault()) {
    _impl_.notification_frequency_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.UserNotificationSettings.notification_frequency)
}

// map<string, string> preferences_metadata = 4;
inline int UserNotificationSettings::_internal_preferences_metadata_size() const {
  return _internal_preferences_metadata().size();
}
inline int UserNotificationSettings::preferences_metadata_size() const {
  return _internal_preferences_metadata_size();
}
inline void UserNotificationSettings::clear_preferences_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferences_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserNotificationSettings::_internal_preferences_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preferences_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserNotificationSettings::preferences_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.UserNotificationSettings.preferences_metadata)
  return _internal_preferences_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UserNotificationSettings::_internal_mutable_preferences_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.preferences_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserNotificationSettings::mutable_preferences_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.UserNotificationSettings.preferences_metadata)
  return _internal_mutable_preferences_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemAlert

// string alert_id = 1;
inline void SystemAlert::clear_alert_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_id_.ClearToEmpty();
}
inline const std::string& SystemAlert::alert_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.SystemAlert.alert_id)
  return _internal_alert_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemAlert::set_alert_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.SystemAlert.alert_id)
}
inline std::string* SystemAlert::mutable_alert_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alert_id();
  // @@protoc_insertion_point(field_mutable:seigr.notification.SystemAlert.alert_id)
  return _s;
}
inline const std::string& SystemAlert::_internal_alert_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_id_.Get();
}
inline void SystemAlert::_internal_set_alert_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_id_.Set(value, GetArena());
}
inline std::string* SystemAlert::_internal_mutable_alert_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alert_id_.Mutable( GetArena());
}
inline std::string* SystemAlert::release_alert_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.SystemAlert.alert_id)
  return _impl_.alert_id_.Release();
}
inline void SystemAlert::set_allocated_alert_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alert_id_.IsDefault()) {
    _impl_.alert_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.SystemAlert.alert_id)
}

// string alert_type = 2;
inline void SystemAlert::clear_alert_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_type_.ClearToEmpty();
}
inline const std::string& SystemAlert::alert_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.SystemAlert.alert_type)
  return _internal_alert_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemAlert::set_alert_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.SystemAlert.alert_type)
}
inline std::string* SystemAlert::mutable_alert_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alert_type();
  // @@protoc_insertion_point(field_mutable:seigr.notification.SystemAlert.alert_type)
  return _s;
}
inline const std::string& SystemAlert::_internal_alert_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_type_.Get();
}
inline void SystemAlert::_internal_set_alert_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_type_.Set(value, GetArena());
}
inline std::string* SystemAlert::_internal_mutable_alert_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alert_type_.Mutable( GetArena());
}
inline std::string* SystemAlert::release_alert_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.SystemAlert.alert_type)
  return _impl_.alert_type_.Release();
}
inline void SystemAlert::set_allocated_alert_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alert_type_.IsDefault()) {
    _impl_.alert_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.SystemAlert.alert_type)
}

// string severity = 3;
inline void SystemAlert::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.ClearToEmpty();
}
inline const std::string& SystemAlert::severity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.SystemAlert.severity)
  return _internal_severity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemAlert::set_severity(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.SystemAlert.severity)
}
inline std::string* SystemAlert::mutable_severity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_severity();
  // @@protoc_insertion_point(field_mutable:seigr.notification.SystemAlert.severity)
  return _s;
}
inline const std::string& SystemAlert::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.severity_.Get();
}
inline void SystemAlert::_internal_set_severity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.Set(value, GetArena());
}
inline std::string* SystemAlert::_internal_mutable_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.severity_.Mutable( GetArena());
}
inline std::string* SystemAlert::release_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.SystemAlert.severity)
  return _impl_.severity_.Release();
}
inline void SystemAlert::set_allocated_severity(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.severity_.IsDefault()) {
    _impl_.severity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.SystemAlert.severity)
}

// string message = 4;
inline void SystemAlert::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SystemAlert::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.SystemAlert.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemAlert::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.SystemAlert.message)
}
inline std::string* SystemAlert::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.notification.SystemAlert.message)
  return _s;
}
inline const std::string& SystemAlert::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SystemAlert::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SystemAlert::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SystemAlert::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.SystemAlert.message)
  return _impl_.message_.Release();
}
inline void SystemAlert::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.SystemAlert.message)
}

// string triggered_at = 5;
inline void SystemAlert::clear_triggered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_at_.ClearToEmpty();
}
inline const std::string& SystemAlert::triggered_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.notification.SystemAlert.triggered_at)
  return _internal_triggered_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemAlert::set_triggered_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.notification.SystemAlert.triggered_at)
}
inline std::string* SystemAlert::mutable_triggered_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_triggered_at();
  // @@protoc_insertion_point(field_mutable:seigr.notification.SystemAlert.triggered_at)
  return _s;
}
inline const std::string& SystemAlert::_internal_triggered_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.triggered_at_.Get();
}
inline void SystemAlert::_internal_set_triggered_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_at_.Set(value, GetArena());
}
inline std::string* SystemAlert::_internal_mutable_triggered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.triggered_at_.Mutable( GetArena());
}
inline std::string* SystemAlert::release_triggered_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.notification.SystemAlert.triggered_at)
  return _impl_.triggered_at_.Release();
}
inline void SystemAlert::set_allocated_triggered_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.triggered_at_.IsDefault()) {
    _impl_.triggered_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.notification.SystemAlert.triggered_at)
}

// map<string, string> alert_metadata = 6;
inline int SystemAlert::_internal_alert_metadata_size() const {
  return _internal_alert_metadata().size();
}
inline int SystemAlert::alert_metadata_size() const {
  return _internal_alert_metadata_size();
}
inline void SystemAlert::clear_alert_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemAlert::_internal_alert_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemAlert::alert_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.notification.SystemAlert.alert_metadata)
  return _internal_alert_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemAlert::_internal_mutable_alert_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alert_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemAlert::mutable_alert_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.notification.SystemAlert.alert_metadata)
  return _internal_mutable_alert_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace notification
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::notification::NotificationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::notification::NotificationType>() {
  return ::seigr::notification::NotificationType_descriptor();
}
template <>
struct is_proto_enum<::seigr::notification::DeliveryMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::notification::DeliveryMethod>() {
  return ::seigr::notification::DeliveryMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // notification_2eproto_2epb_2eh
