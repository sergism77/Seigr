// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: interpretation.proto
// Protobuf C++ Version: 5.29.2

#ifndef interpretation_2eproto_2epb_2eh
#define interpretation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "access_control.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_interpretation_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_interpretation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_interpretation_2eproto;
namespace seigr {
namespace interpretation {
class AccessLog;
struct AccessLogDefaultTypeInternal;
extern AccessLogDefaultTypeInternal _AccessLog_default_instance_;
class AccessLog_AccessConditionsEntry_DoNotUse;
struct AccessLog_AccessConditionsEntry_DoNotUseDefaultTypeInternal;
extern AccessLog_AccessConditionsEntry_DoNotUseDefaultTypeInternal _AccessLog_AccessConditionsEntry_DoNotUse_default_instance_;
class AccessLog_EnvironmentalFactorsEntry_DoNotUse;
struct AccessLog_EnvironmentalFactorsEntry_DoNotUseDefaultTypeInternal;
extern AccessLog_EnvironmentalFactorsEntry_DoNotUseDefaultTypeInternal _AccessLog_EnvironmentalFactorsEntry_DoNotUse_default_instance_;
class AccessLog_MetadataEntry_DoNotUse;
struct AccessLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AccessLog_MetadataEntry_DoNotUseDefaultTypeInternal _AccessLog_MetadataEntry_DoNotUse_default_instance_;
class CapabilityExpansion;
struct CapabilityExpansionDefaultTypeInternal;
extern CapabilityExpansionDefaultTypeInternal _CapabilityExpansion_default_instance_;
class CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse;
struct CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUseDefaultTypeInternal;
extern CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUseDefaultTypeInternal _CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse_default_instance_;
class CapabilityExpansion_ExpansionContextEntry_DoNotUse;
struct CapabilityExpansion_ExpansionContextEntry_DoNotUseDefaultTypeInternal;
extern CapabilityExpansion_ExpansionContextEntry_DoNotUseDefaultTypeInternal _CapabilityExpansion_ExpansionContextEntry_DoNotUse_default_instance_;
class CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse;
struct CapabilityExpansion_FutureCapabilitiesEntry_DoNotUseDefaultTypeInternal;
extern CapabilityExpansion_FutureCapabilitiesEntry_DoNotUseDefaultTypeInternal _CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse_default_instance_;
class CompatibilityCheck;
struct CompatibilityCheckDefaultTypeInternal;
extern CompatibilityCheckDefaultTypeInternal _CompatibilityCheck_default_instance_;
class CompatibilityCheck_CompatibilityNotesEntry_DoNotUse;
struct CompatibilityCheck_CompatibilityNotesEntry_DoNotUseDefaultTypeInternal;
extern CompatibilityCheck_CompatibilityNotesEntry_DoNotUseDefaultTypeInternal _CompatibilityCheck_CompatibilityNotesEntry_DoNotUse_default_instance_;
class InterpretationResult;
struct InterpretationResultDefaultTypeInternal;
extern InterpretationResultDefaultTypeInternal _InterpretationResult_default_instance_;
class InterpretationResult_AdditionalInfoEntry_DoNotUse;
struct InterpretationResult_AdditionalInfoEntry_DoNotUseDefaultTypeInternal;
extern InterpretationResult_AdditionalInfoEntry_DoNotUseDefaultTypeInternal _InterpretationResult_AdditionalInfoEntry_DoNotUse_default_instance_;
class InterpretationResult_ContextualConditionsEntry_DoNotUse;
struct InterpretationResult_ContextualConditionsEntry_DoNotUseDefaultTypeInternal;
extern InterpretationResult_ContextualConditionsEntry_DoNotUseDefaultTypeInternal _InterpretationResult_ContextualConditionsEntry_DoNotUse_default_instance_;
class InterpretationResult_LinkedFilesEntry_DoNotUse;
struct InterpretationResult_LinkedFilesEntry_DoNotUseDefaultTypeInternal;
extern InterpretationResult_LinkedFilesEntry_DoNotUseDefaultTypeInternal _InterpretationResult_LinkedFilesEntry_DoNotUse_default_instance_;
class MetadataAnalysisContext;
struct MetadataAnalysisContextDefaultTypeInternal;
extern MetadataAnalysisContextDefaultTypeInternal _MetadataAnalysisContext_default_instance_;
class MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse;
struct MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUseDefaultTypeInternal;
extern MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUseDefaultTypeInternal _MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse_default_instance_;
class MetadataAnalysisContext_ContextParametersEntry_DoNotUse;
struct MetadataAnalysisContext_ContextParametersEntry_DoNotUseDefaultTypeInternal;
extern MetadataAnalysisContext_ContextParametersEntry_DoNotUseDefaultTypeInternal _MetadataAnalysisContext_ContextParametersEntry_DoNotUse_default_instance_;
class MetadataValidationLog;
struct MetadataValidationLogDefaultTypeInternal;
extern MetadataValidationLogDefaultTypeInternal _MetadataValidationLog_default_instance_;
class MetadataValidationLog_ValidationMetadataEntry_DoNotUse;
struct MetadataValidationLog_ValidationMetadataEntry_DoNotUseDefaultTypeInternal;
extern MetadataValidationLog_ValidationMetadataEntry_DoNotUseDefaultTypeInternal _MetadataValidationLog_ValidationMetadataEntry_DoNotUse_default_instance_;
}  // namespace interpretation
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace interpretation {
enum InterpretationStatus : int {
  INTERPRETATION_STATUS_UNDEFINED = 0,
  INTERPRETATION_SUCCESS = 1,
  INTERPRETATION_WARNING = 2,
  INTERPRETATION_ERROR = 3,
  INCOMPATIBLE_VERSION = 4,
  PARTIAL_SUCCESS = 5,
  InterpretationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InterpretationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InterpretationStatus_IsValid(int value);
extern const uint32_t InterpretationStatus_internal_data_[];
constexpr InterpretationStatus InterpretationStatus_MIN = static_cast<InterpretationStatus>(0);
constexpr InterpretationStatus InterpretationStatus_MAX = static_cast<InterpretationStatus>(5);
constexpr int InterpretationStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
InterpretationStatus_descriptor();
template <typename T>
const std::string& InterpretationStatus_Name(T value) {
  static_assert(std::is_same<T, InterpretationStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InterpretationStatus_Name().");
  return InterpretationStatus_Name(static_cast<InterpretationStatus>(value));
}
template <>
inline const std::string& InterpretationStatus_Name(InterpretationStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InterpretationStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool InterpretationStatus_Parse(absl::string_view name, InterpretationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InterpretationStatus>(
      InterpretationStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MetadataValidationLog_ValidationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MetadataValidationLog_ValidationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetadataValidationLog_ValidationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MetadataValidationLog_ValidationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MetadataValidationLog_ValidationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MetadataValidationLog_ValidationMetadataEntry_DoNotUse*>(
        &_MetadataValidationLog_ValidationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      83, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MetadataAnalysisContext_ContextParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MetadataAnalysisContext_ContextParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetadataAnalysisContext_ContextParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MetadataAnalysisContext_ContextParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MetadataAnalysisContext_ContextParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MetadataAnalysisContext_ContextParametersEntry_DoNotUse*>(
        &_MetadataAnalysisContext_ContextParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse*>(
        &_MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      83, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InterpretationResult_LinkedFilesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InterpretationResult_LinkedFilesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InterpretationResult_LinkedFilesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InterpretationResult_LinkedFilesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InterpretationResult_LinkedFilesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InterpretationResult_LinkedFilesEntry_DoNotUse*>(
        &_InterpretationResult_LinkedFilesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InterpretationResult_ContextualConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InterpretationResult_ContextualConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InterpretationResult_ContextualConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InterpretationResult_ContextualConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InterpretationResult_ContextualConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InterpretationResult_ContextualConditionsEntry_DoNotUse*>(
        &_InterpretationResult_ContextualConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InterpretationResult_AdditionalInfoEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InterpretationResult_AdditionalInfoEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InterpretationResult_AdditionalInfoEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InterpretationResult_AdditionalInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InterpretationResult_AdditionalInfoEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InterpretationResult_AdditionalInfoEntry_DoNotUse*>(
        &_InterpretationResult_AdditionalInfoEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CompatibilityCheck_CompatibilityNotesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CompatibilityCheck_CompatibilityNotesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompatibilityCheck_CompatibilityNotesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CompatibilityCheck_CompatibilityNotesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CompatibilityCheck_CompatibilityNotesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CompatibilityCheck_CompatibilityNotesEntry_DoNotUse*>(
        &_CompatibilityCheck_CompatibilityNotesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse*>(
        &_CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      81, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CapabilityExpansion_ExpansionContextEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CapabilityExpansion_ExpansionContextEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilityExpansion_ExpansionContextEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CapabilityExpansion_ExpansionContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CapabilityExpansion_ExpansionContextEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CapabilityExpansion_ExpansionContextEntry_DoNotUse*>(
        &_CapabilityExpansion_ExpansionContextEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      79, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse*>(
        &_CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      85, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessLog_MetadataEntry_DoNotUse*>(
        &_AccessLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessLog_EnvironmentalFactorsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessLog_EnvironmentalFactorsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLog_EnvironmentalFactorsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessLog_EnvironmentalFactorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessLog_EnvironmentalFactorsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessLog_EnvironmentalFactorsEntry_DoNotUse*>(
        &_AccessLog_EnvironmentalFactorsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      73, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AccessLog_AccessConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AccessLog_AccessConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLog_AccessConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AccessLog_AccessConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AccessLog_AccessConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AccessLog_AccessConditionsEntry_DoNotUse*>(
        &_AccessLog_AccessConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_interpretation_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MetadataValidationLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.MetadataValidationLog) */ {
 public:
  inline MetadataValidationLog() : MetadataValidationLog(nullptr) {}
  ~MetadataValidationLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetadataValidationLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetadataValidationLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetadataValidationLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetadataValidationLog(const MetadataValidationLog& from) : MetadataValidationLog(nullptr, from) {}
  inline MetadataValidationLog(MetadataValidationLog&& from) noexcept
      : MetadataValidationLog(nullptr, std::move(from)) {}
  inline MetadataValidationLog& operator=(const MetadataValidationLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataValidationLog& operator=(MetadataValidationLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataValidationLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataValidationLog* internal_default_instance() {
    return reinterpret_cast<const MetadataValidationLog*>(
        &_MetadataValidationLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(MetadataValidationLog& a, MetadataValidationLog& b) { a.Swap(&b); }
  inline void Swap(MetadataValidationLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataValidationLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataValidationLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MetadataValidationLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetadataValidationLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetadataValidationLog& from) { MetadataValidationLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetadataValidationLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.MetadataValidationLog"; }

 protected:
  explicit MetadataValidationLog(::google::protobuf::Arena* arena);
  MetadataValidationLog(::google::protobuf::Arena* arena, const MetadataValidationLog& from);
  MetadataValidationLog(::google::protobuf::Arena* arena, MetadataValidationLog&& from) noexcept
      : MetadataValidationLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationMetadataFieldNumber = 8,
    kDependencyChecksFieldNumber = 10,
    kWarningsFieldNumber = 11,
    kValidationIdFieldNumber = 1,
    kTargetMetadataVersionFieldNumber = 2,
    kProtocolVersionFieldNumber = 3,
    kValidatorIdFieldNumber = 4,
    kValidationTimestampFieldNumber = 5,
    kErrorMessageFieldNumber = 7,
    kRecommendedActionFieldNumber = 9,
    kValidationSuccessfulFieldNumber = 6,
  };
  // map<string, string> validation_metadata = 8;
  int validation_metadata_size() const;
  private:
  int _internal_validation_metadata_size() const;

  public:
  void clear_validation_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_validation_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_validation_metadata();

  public:
  // repeated string dependency_checks = 10;
  int dependency_checks_size() const;
  private:
  int _internal_dependency_checks_size() const;

  public:
  void clear_dependency_checks() ;
  const std::string& dependency_checks(int index) const;
  std::string* mutable_dependency_checks(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependency_checks(int index, Arg_&& value, Args_... args);
  std::string* add_dependency_checks();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dependency_checks(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dependency_checks() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dependency_checks();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dependency_checks() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dependency_checks();

  public:
  // repeated string warnings = 11;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;

  public:
  void clear_warnings() ;
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_warnings(int index, Arg_&& value, Args_... args);
  std::string* add_warnings();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_warnings(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& warnings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_warnings();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_warnings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_warnings();

  public:
  // string validation_id = 1;
  void clear_validation_id() ;
  const std::string& validation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_id(Arg_&& arg, Args_... args);
  std::string* mutable_validation_id();
  PROTOBUF_NODISCARD std::string* release_validation_id();
  void set_allocated_validation_id(std::string* value);

  private:
  const std::string& _internal_validation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_id(
      const std::string& value);
  std::string* _internal_mutable_validation_id();

  public:
  // string target_metadata_version = 2;
  void clear_target_metadata_version() ;
  const std::string& target_metadata_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_metadata_version(Arg_&& arg, Args_... args);
  std::string* mutable_target_metadata_version();
  PROTOBUF_NODISCARD std::string* release_target_metadata_version();
  void set_allocated_target_metadata_version(std::string* value);

  private:
  const std::string& _internal_target_metadata_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_metadata_version(
      const std::string& value);
  std::string* _internal_mutable_target_metadata_version();

  public:
  // string protocol_version = 3;
  void clear_protocol_version() ;
  const std::string& protocol_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol_version(Arg_&& arg, Args_... args);
  std::string* mutable_protocol_version();
  PROTOBUF_NODISCARD std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* value);

  private:
  const std::string& _internal_protocol_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_version(
      const std::string& value);
  std::string* _internal_mutable_protocol_version();

  public:
  // string validator_id = 4;
  void clear_validator_id() ;
  const std::string& validator_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_id(Arg_&& arg, Args_... args);
  std::string* mutable_validator_id();
  PROTOBUF_NODISCARD std::string* release_validator_id();
  void set_allocated_validator_id(std::string* value);

  private:
  const std::string& _internal_validator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_id(
      const std::string& value);
  std::string* _internal_mutable_validator_id();

  public:
  // string validation_timestamp = 5;
  void clear_validation_timestamp() ;
  const std::string& validation_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_validation_timestamp();
  PROTOBUF_NODISCARD std::string* release_validation_timestamp();
  void set_allocated_validation_timestamp(std::string* value);

  private:
  const std::string& _internal_validation_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_timestamp(
      const std::string& value);
  std::string* _internal_mutable_validation_timestamp();

  public:
  // string error_message = 7;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string recommended_action = 9;
  void clear_recommended_action() ;
  const std::string& recommended_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recommended_action(Arg_&& arg, Args_... args);
  std::string* mutable_recommended_action();
  PROTOBUF_NODISCARD std::string* release_recommended_action();
  void set_allocated_recommended_action(std::string* value);

  private:
  const std::string& _internal_recommended_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommended_action(
      const std::string& value);
  std::string* _internal_mutable_recommended_action();

  public:
  // bool validation_successful = 6;
  void clear_validation_successful() ;
  bool validation_successful() const;
  void set_validation_successful(bool value);

  private:
  bool _internal_validation_successful() const;
  void _internal_set_validation_successful(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.MetadataValidationLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      218, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MetadataValidationLog& from_msg);
    ::google::protobuf::internal::MapField<MetadataValidationLog_ValidationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        validation_metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> dependency_checks_;
    ::google::protobuf::RepeatedPtrField<std::string> warnings_;
    ::google::protobuf::internal::ArenaStringPtr validation_id_;
    ::google::protobuf::internal::ArenaStringPtr target_metadata_version_;
    ::google::protobuf::internal::ArenaStringPtr protocol_version_;
    ::google::protobuf::internal::ArenaStringPtr validator_id_;
    ::google::protobuf::internal::ArenaStringPtr validation_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr recommended_action_;
    bool validation_successful_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};
// -------------------------------------------------------------------

class MetadataAnalysisContext final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.MetadataAnalysisContext) */ {
 public:
  inline MetadataAnalysisContext() : MetadataAnalysisContext(nullptr) {}
  ~MetadataAnalysisContext() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MetadataAnalysisContext* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MetadataAnalysisContext));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetadataAnalysisContext(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetadataAnalysisContext(const MetadataAnalysisContext& from) : MetadataAnalysisContext(nullptr, from) {}
  inline MetadataAnalysisContext(MetadataAnalysisContext&& from) noexcept
      : MetadataAnalysisContext(nullptr, std::move(from)) {}
  inline MetadataAnalysisContext& operator=(const MetadataAnalysisContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataAnalysisContext& operator=(MetadataAnalysisContext&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataAnalysisContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataAnalysisContext* internal_default_instance() {
    return reinterpret_cast<const MetadataAnalysisContext*>(
        &_MetadataAnalysisContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(MetadataAnalysisContext& a, MetadataAnalysisContext& b) { a.Swap(&b); }
  inline void Swap(MetadataAnalysisContext* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataAnalysisContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataAnalysisContext* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MetadataAnalysisContext>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetadataAnalysisContext& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetadataAnalysisContext& from) { MetadataAnalysisContext::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MetadataAnalysisContext* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.MetadataAnalysisContext"; }

 protected:
  explicit MetadataAnalysisContext(::google::protobuf::Arena* arena);
  MetadataAnalysisContext(::google::protobuf::Arena* arena, const MetadataAnalysisContext& from);
  MetadataAnalysisContext(::google::protobuf::Arena* arena, MetadataAnalysisContext&& from) noexcept
      : MetadataAnalysisContext(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContextParametersFieldNumber = 4,
    kWarningMessagesFieldNumber = 5,
    kAnalysisMetadataFieldNumber = 6,
    kAnalysisIdFieldNumber = 1,
    kOriginDataIdFieldNumber = 2,
    kAnalysisTimestampFieldNumber = 3,
    kPerformedByFieldNumber = 7,
    kReportReferenceFieldNumber = 9,
    kIsExperimentalFieldNumber = 8,
  };
  // map<string, string> context_parameters = 4;
  int context_parameters_size() const;
  private:
  int _internal_context_parameters_size() const;

  public:
  void clear_context_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& context_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_context_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_context_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_context_parameters();

  public:
  // repeated string warning_messages = 5;
  int warning_messages_size() const;
  private:
  int _internal_warning_messages_size() const;

  public:
  void clear_warning_messages() ;
  const std::string& warning_messages(int index) const;
  std::string* mutable_warning_messages(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_warning_messages(int index, Arg_&& value, Args_... args);
  std::string* add_warning_messages();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_warning_messages(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& warning_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_warning_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_warning_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_warning_messages();

  public:
  // map<string, string> analysis_metadata = 6;
  int analysis_metadata_size() const;
  private:
  int _internal_analysis_metadata_size() const;

  public:
  void clear_analysis_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& analysis_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_analysis_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_analysis_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_analysis_metadata();

  public:
  // string analysis_id = 1;
  void clear_analysis_id() ;
  const std::string& analysis_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_analysis_id(Arg_&& arg, Args_... args);
  std::string* mutable_analysis_id();
  PROTOBUF_NODISCARD std::string* release_analysis_id();
  void set_allocated_analysis_id(std::string* value);

  private:
  const std::string& _internal_analysis_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analysis_id(
      const std::string& value);
  std::string* _internal_mutable_analysis_id();

  public:
  // string origin_data_id = 2;
  void clear_origin_data_id() ;
  const std::string& origin_data_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_data_id(Arg_&& arg, Args_... args);
  std::string* mutable_origin_data_id();
  PROTOBUF_NODISCARD std::string* release_origin_data_id();
  void set_allocated_origin_data_id(std::string* value);

  private:
  const std::string& _internal_origin_data_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_data_id(
      const std::string& value);
  std::string* _internal_mutable_origin_data_id();

  public:
  // string analysis_timestamp = 3;
  void clear_analysis_timestamp() ;
  const std::string& analysis_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_analysis_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_analysis_timestamp();
  PROTOBUF_NODISCARD std::string* release_analysis_timestamp();
  void set_allocated_analysis_timestamp(std::string* value);

  private:
  const std::string& _internal_analysis_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analysis_timestamp(
      const std::string& value);
  std::string* _internal_mutable_analysis_timestamp();

  public:
  // string performed_by = 7;
  void clear_performed_by() ;
  const std::string& performed_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_performed_by(Arg_&& arg, Args_... args);
  std::string* mutable_performed_by();
  PROTOBUF_NODISCARD std::string* release_performed_by();
  void set_allocated_performed_by(std::string* value);

  private:
  const std::string& _internal_performed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_performed_by(
      const std::string& value);
  std::string* _internal_mutable_performed_by();

  public:
  // string report_reference = 9;
  void clear_report_reference() ;
  const std::string& report_reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_report_reference(Arg_&& arg, Args_... args);
  std::string* mutable_report_reference();
  PROTOBUF_NODISCARD std::string* release_report_reference();
  void set_allocated_report_reference(std::string* value);

  private:
  const std::string& _internal_report_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_reference(
      const std::string& value);
  std::string* _internal_mutable_report_reference();

  public:
  // bool is_experimental = 8;
  void clear_is_experimental() ;
  bool is_experimental() const;
  void set_is_experimental(bool value);

  private:
  bool _internal_is_experimental() const;
  void _internal_set_is_experimental(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.MetadataAnalysisContext)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      183, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MetadataAnalysisContext& from_msg);
    ::google::protobuf::internal::MapField<MetadataAnalysisContext_ContextParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        context_parameters_;
    ::google::protobuf::RepeatedPtrField<std::string> warning_messages_;
    ::google::protobuf::internal::MapField<MetadataAnalysisContext_AnalysisMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        analysis_metadata_;
    ::google::protobuf::internal::ArenaStringPtr analysis_id_;
    ::google::protobuf::internal::ArenaStringPtr origin_data_id_;
    ::google::protobuf::internal::ArenaStringPtr analysis_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr performed_by_;
    ::google::protobuf::internal::ArenaStringPtr report_reference_;
    bool is_experimental_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};
// -------------------------------------------------------------------

class InterpretationResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.InterpretationResult) */ {
 public:
  inline InterpretationResult() : InterpretationResult(nullptr) {}
  ~InterpretationResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InterpretationResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InterpretationResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InterpretationResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline InterpretationResult(const InterpretationResult& from) : InterpretationResult(nullptr, from) {}
  inline InterpretationResult(InterpretationResult&& from) noexcept
      : InterpretationResult(nullptr, std::move(from)) {}
  inline InterpretationResult& operator=(const InterpretationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterpretationResult& operator=(InterpretationResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterpretationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterpretationResult* internal_default_instance() {
    return reinterpret_cast<const InterpretationResult*>(
        &_InterpretationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(InterpretationResult& a, InterpretationResult& b) { a.Swap(&b); }
  inline void Swap(InterpretationResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterpretationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterpretationResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InterpretationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InterpretationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InterpretationResult& from) { InterpretationResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InterpretationResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.InterpretationResult"; }

 protected:
  explicit InterpretationResult(::google::protobuf::Arena* arena);
  InterpretationResult(::google::protobuf::Arena* arena, const InterpretationResult& from);
  InterpretationResult(::google::protobuf::Arena* arena, InterpretationResult&& from) noexcept
      : InterpretationResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdditionalInfoFieldNumber = 5,
    kLinkedFilesFieldNumber = 8,
    kContextualConditionsFieldNumber = 11,
    kErrorCodesFieldNumber = 12,
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kInterpretedVersionFieldNumber = 4,
    kInterpreterIdFieldNumber = 6,
    kSourceDataIdFieldNumber = 9,
    kStatusFieldNumber = 1,
    kRequiresAttentionFieldNumber = 7,
    kPriorityLevelFieldNumber = 10,
  };
  // map<string, string> additional_info = 5;
  int additional_info_size() const;
  private:
  int _internal_additional_info_size() const;

  public:
  void clear_additional_info() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_info() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_info();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_info() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_info();

  public:
  // map<string, string> linked_files = 8;
  int linked_files_size() const;
  private:
  int _internal_linked_files_size() const;

  public:
  void clear_linked_files() ;
  const ::google::protobuf::Map<std::string, std::string>& linked_files() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_linked_files();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_linked_files() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_linked_files();

  public:
  // map<string, string> contextual_conditions = 11;
  int contextual_conditions_size() const;
  private:
  int _internal_contextual_conditions_size() const;

  public:
  void clear_contextual_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& contextual_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_contextual_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_contextual_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_contextual_conditions();

  public:
  // repeated string error_codes = 12;
  int error_codes_size() const;
  private:
  int _internal_error_codes_size() const;

  public:
  void clear_error_codes() ;
  const std::string& error_codes(int index) const;
  std::string* mutable_error_codes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_codes(int index, Arg_&& value, Args_... args);
  std::string* add_error_codes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_error_codes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& error_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_error_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_error_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_error_codes();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string interpreted_version = 4;
  void clear_interpreted_version() ;
  const std::string& interpreted_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interpreted_version(Arg_&& arg, Args_... args);
  std::string* mutable_interpreted_version();
  PROTOBUF_NODISCARD std::string* release_interpreted_version();
  void set_allocated_interpreted_version(std::string* value);

  private:
  const std::string& _internal_interpreted_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interpreted_version(
      const std::string& value);
  std::string* _internal_mutable_interpreted_version();

  public:
  // string interpreter_id = 6;
  void clear_interpreter_id() ;
  const std::string& interpreter_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interpreter_id(Arg_&& arg, Args_... args);
  std::string* mutable_interpreter_id();
  PROTOBUF_NODISCARD std::string* release_interpreter_id();
  void set_allocated_interpreter_id(std::string* value);

  private:
  const std::string& _internal_interpreter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interpreter_id(
      const std::string& value);
  std::string* _internal_mutable_interpreter_id();

  public:
  // string source_data_id = 9;
  void clear_source_data_id() ;
  const std::string& source_data_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_data_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_data_id();
  PROTOBUF_NODISCARD std::string* release_source_data_id();
  void set_allocated_source_data_id(std::string* value);

  private:
  const std::string& _internal_source_data_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_data_id(
      const std::string& value);
  std::string* _internal_mutable_source_data_id();

  public:
  // .seigr.interpretation.InterpretationStatus status = 1;
  void clear_status() ;
  ::seigr::interpretation::InterpretationStatus status() const;
  void set_status(::seigr::interpretation::InterpretationStatus value);

  private:
  ::seigr::interpretation::InterpretationStatus _internal_status() const;
  void _internal_set_status(::seigr::interpretation::InterpretationStatus value);

  public:
  // bool requires_attention = 7;
  void clear_requires_attention() ;
  bool requires_attention() const;
  void set_requires_attention(bool value);

  private:
  bool _internal_requires_attention() const;
  void _internal_set_requires_attention(bool value);

  public:
  // int32 priority_level = 10;
  void clear_priority_level() ;
  ::int32_t priority_level() const;
  void set_priority_level(::int32_t value);

  private:
  ::int32_t _internal_priority_level() const;
  void _internal_set_priority_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.InterpretationResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      180, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InterpretationResult& from_msg);
    ::google::protobuf::internal::MapField<InterpretationResult_AdditionalInfoEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_info_;
    ::google::protobuf::internal::MapField<InterpretationResult_LinkedFilesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        linked_files_;
    ::google::protobuf::internal::MapField<InterpretationResult_ContextualConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        contextual_conditions_;
    ::google::protobuf::RepeatedPtrField<std::string> error_codes_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr interpreted_version_;
    ::google::protobuf::internal::ArenaStringPtr interpreter_id_;
    ::google::protobuf::internal::ArenaStringPtr source_data_id_;
    int status_;
    bool requires_attention_;
    ::int32_t priority_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};
// -------------------------------------------------------------------

class CompatibilityCheck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.CompatibilityCheck) */ {
 public:
  inline CompatibilityCheck() : CompatibilityCheck(nullptr) {}
  ~CompatibilityCheck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompatibilityCheck* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompatibilityCheck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompatibilityCheck(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompatibilityCheck(const CompatibilityCheck& from) : CompatibilityCheck(nullptr, from) {}
  inline CompatibilityCheck(CompatibilityCheck&& from) noexcept
      : CompatibilityCheck(nullptr, std::move(from)) {}
  inline CompatibilityCheck& operator=(const CompatibilityCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompatibilityCheck& operator=(CompatibilityCheck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompatibilityCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompatibilityCheck* internal_default_instance() {
    return reinterpret_cast<const CompatibilityCheck*>(
        &_CompatibilityCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CompatibilityCheck& a, CompatibilityCheck& b) { a.Swap(&b); }
  inline void Swap(CompatibilityCheck* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompatibilityCheck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompatibilityCheck* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompatibilityCheck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompatibilityCheck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompatibilityCheck& from) { CompatibilityCheck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompatibilityCheck* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.CompatibilityCheck"; }

 protected:
  explicit CompatibilityCheck(::google::protobuf::Arena* arena);
  CompatibilityCheck(::google::protobuf::Arena* arena, const CompatibilityCheck& from);
  CompatibilityCheck(::google::protobuf::Arena* arena, CompatibilityCheck&& from) noexcept
      : CompatibilityCheck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCompatibleVersionsFieldNumber = 3,
    kCompatibilityNotesFieldNumber = 9,
    kDependencyRequirementsFieldNumber = 10,
    kFallbackOptionsFieldNumber = 11,
    kMetadataVersionFieldNumber = 1,
    kProtocolVersionFieldNumber = 2,
    kMessageFieldNumber = 5,
    kRecommendedActionFieldNumber = 6,
    kLastVerifiedFieldNumber = 7,
    kFallbackVersionFieldNumber = 8,
    kIsCompatibleFieldNumber = 4,
    kRequiresUpdateFieldNumber = 12,
  };
  // repeated string compatible_versions = 3;
  int compatible_versions_size() const;
  private:
  int _internal_compatible_versions_size() const;

  public:
  void clear_compatible_versions() ;
  const std::string& compatible_versions(int index) const;
  std::string* mutable_compatible_versions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compatible_versions(int index, Arg_&& value, Args_... args);
  std::string* add_compatible_versions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_compatible_versions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& compatible_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_compatible_versions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_compatible_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_compatible_versions();

  public:
  // map<string, string> compatibility_notes = 9;
  int compatibility_notes_size() const;
  private:
  int _internal_compatibility_notes_size() const;

  public:
  void clear_compatibility_notes() ;
  const ::google::protobuf::Map<std::string, std::string>& compatibility_notes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_compatibility_notes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_compatibility_notes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_compatibility_notes();

  public:
  // repeated string dependency_requirements = 10;
  int dependency_requirements_size() const;
  private:
  int _internal_dependency_requirements_size() const;

  public:
  void clear_dependency_requirements() ;
  const std::string& dependency_requirements(int index) const;
  std::string* mutable_dependency_requirements(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependency_requirements(int index, Arg_&& value, Args_... args);
  std::string* add_dependency_requirements();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dependency_requirements(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dependency_requirements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dependency_requirements();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dependency_requirements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dependency_requirements();

  public:
  // repeated string fallback_options = 11;
  int fallback_options_size() const;
  private:
  int _internal_fallback_options_size() const;

  public:
  void clear_fallback_options() ;
  const std::string& fallback_options(int index) const;
  std::string* mutable_fallback_options(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fallback_options(int index, Arg_&& value, Args_... args);
  std::string* add_fallback_options();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_fallback_options(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& fallback_options() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_fallback_options();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_fallback_options() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_fallback_options();

  public:
  // string metadata_version = 1;
  void clear_metadata_version() ;
  const std::string& metadata_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_version(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_version();
  PROTOBUF_NODISCARD std::string* release_metadata_version();
  void set_allocated_metadata_version(std::string* value);

  private:
  const std::string& _internal_metadata_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_version(
      const std::string& value);
  std::string* _internal_mutable_metadata_version();

  public:
  // string protocol_version = 2;
  void clear_protocol_version() ;
  const std::string& protocol_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol_version(Arg_&& arg, Args_... args);
  std::string* mutable_protocol_version();
  PROTOBUF_NODISCARD std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* value);

  private:
  const std::string& _internal_protocol_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_version(
      const std::string& value);
  std::string* _internal_mutable_protocol_version();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string recommended_action = 6;
  void clear_recommended_action() ;
  const std::string& recommended_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recommended_action(Arg_&& arg, Args_... args);
  std::string* mutable_recommended_action();
  PROTOBUF_NODISCARD std::string* release_recommended_action();
  void set_allocated_recommended_action(std::string* value);

  private:
  const std::string& _internal_recommended_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommended_action(
      const std::string& value);
  std::string* _internal_mutable_recommended_action();

  public:
  // string last_verified = 7;
  void clear_last_verified() ;
  const std::string& last_verified() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_verified(Arg_&& arg, Args_... args);
  std::string* mutable_last_verified();
  PROTOBUF_NODISCARD std::string* release_last_verified();
  void set_allocated_last_verified(std::string* value);

  private:
  const std::string& _internal_last_verified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_verified(
      const std::string& value);
  std::string* _internal_mutable_last_verified();

  public:
  // string fallback_version = 8;
  void clear_fallback_version() ;
  const std::string& fallback_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fallback_version(Arg_&& arg, Args_... args);
  std::string* mutable_fallback_version();
  PROTOBUF_NODISCARD std::string* release_fallback_version();
  void set_allocated_fallback_version(std::string* value);

  private:
  const std::string& _internal_fallback_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fallback_version(
      const std::string& value);
  std::string* _internal_mutable_fallback_version();

  public:
  // bool is_compatible = 4;
  void clear_is_compatible() ;
  bool is_compatible() const;
  void set_is_compatible(bool value);

  private:
  bool _internal_is_compatible() const;
  void _internal_set_is_compatible(bool value);

  public:
  // bool requires_update = 12;
  void clear_requires_update() ;
  bool requires_update() const;
  void set_requires_update(bool value);

  private:
  bool _internal_requires_update() const;
  void _internal_set_requires_update(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.CompatibilityCheck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 1,
      219, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompatibilityCheck& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> compatible_versions_;
    ::google::protobuf::internal::MapField<CompatibilityCheck_CompatibilityNotesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        compatibility_notes_;
    ::google::protobuf::RepeatedPtrField<std::string> dependency_requirements_;
    ::google::protobuf::RepeatedPtrField<std::string> fallback_options_;
    ::google::protobuf::internal::ArenaStringPtr metadata_version_;
    ::google::protobuf::internal::ArenaStringPtr protocol_version_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr recommended_action_;
    ::google::protobuf::internal::ArenaStringPtr last_verified_;
    ::google::protobuf::internal::ArenaStringPtr fallback_version_;
    bool is_compatible_;
    bool requires_update_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};
// -------------------------------------------------------------------

class CapabilityExpansion final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.CapabilityExpansion) */ {
 public:
  inline CapabilityExpansion() : CapabilityExpansion(nullptr) {}
  ~CapabilityExpansion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CapabilityExpansion* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CapabilityExpansion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilityExpansion(
      ::google::protobuf::internal::ConstantInitialized);

  inline CapabilityExpansion(const CapabilityExpansion& from) : CapabilityExpansion(nullptr, from) {}
  inline CapabilityExpansion(CapabilityExpansion&& from) noexcept
      : CapabilityExpansion(nullptr, std::move(from)) {}
  inline CapabilityExpansion& operator=(const CapabilityExpansion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilityExpansion& operator=(CapabilityExpansion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilityExpansion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilityExpansion* internal_default_instance() {
    return reinterpret_cast<const CapabilityExpansion*>(
        &_CapabilityExpansion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(CapabilityExpansion& a, CapabilityExpansion& b) { a.Swap(&b); }
  inline void Swap(CapabilityExpansion* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilityExpansion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilityExpansion* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CapabilityExpansion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapabilityExpansion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CapabilityExpansion& from) { CapabilityExpansion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CapabilityExpansion* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.CapabilityExpansion"; }

 protected:
  explicit CapabilityExpansion(::google::protobuf::Arena* arena);
  CapabilityExpansion(::google::protobuf::Arena* arena, const CapabilityExpansion& from);
  CapabilityExpansion(::google::protobuf::Arena* arena, CapabilityExpansion&& from) noexcept
      : CapabilityExpansion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdditionalCapabilitiesFieldNumber = 4,
    kDependenciesFieldNumber = 6,
    kExpansionContextFieldNumber = 8,
    kFutureCapabilitiesFieldNumber = 11,
    kTargetVersionFieldNumber = 1,
    kExpansionTimestampFieldNumber = 5,
    kExpandedByFieldNumber = 7,
    kDeprecationNoticeFieldNumber = 10,
    kAdvancedMetadataEnabledFieldNumber = 2,
    kEnhancedEncodingEnabledFieldNumber = 3,
    kIsExperimentalFieldNumber = 9,
  };
  // map<string, string> additional_capabilities = 4;
  int additional_capabilities_size() const;
  private:
  int _internal_additional_capabilities_size() const;

  public:
  void clear_additional_capabilities() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_capabilities() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_capabilities();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_capabilities() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_capabilities();

  public:
  // repeated string dependencies = 6;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;

  public:
  void clear_dependencies() ;
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependencies(int index, Arg_&& value, Args_... args);
  std::string* add_dependencies();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dependencies(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dependencies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dependencies();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dependencies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dependencies();

  public:
  // map<string, string> expansion_context = 8;
  int expansion_context_size() const;
  private:
  int _internal_expansion_context_size() const;

  public:
  void clear_expansion_context() ;
  const ::google::protobuf::Map<std::string, std::string>& expansion_context() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_expansion_context();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_expansion_context() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_expansion_context();

  public:
  // map<string, string> future_capabilities = 11;
  int future_capabilities_size() const;
  private:
  int _internal_future_capabilities_size() const;

  public:
  void clear_future_capabilities() ;
  const ::google::protobuf::Map<std::string, std::string>& future_capabilities() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_future_capabilities();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_future_capabilities() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_future_capabilities();

  public:
  // string target_version = 1;
  void clear_target_version() ;
  const std::string& target_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_version(Arg_&& arg, Args_... args);
  std::string* mutable_target_version();
  PROTOBUF_NODISCARD std::string* release_target_version();
  void set_allocated_target_version(std::string* value);

  private:
  const std::string& _internal_target_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_version(
      const std::string& value);
  std::string* _internal_mutable_target_version();

  public:
  // string expansion_timestamp = 5;
  void clear_expansion_timestamp() ;
  const std::string& expansion_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expansion_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_expansion_timestamp();
  PROTOBUF_NODISCARD std::string* release_expansion_timestamp();
  void set_allocated_expansion_timestamp(std::string* value);

  private:
  const std::string& _internal_expansion_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expansion_timestamp(
      const std::string& value);
  std::string* _internal_mutable_expansion_timestamp();

  public:
  // string expanded_by = 7;
  void clear_expanded_by() ;
  const std::string& expanded_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expanded_by(Arg_&& arg, Args_... args);
  std::string* mutable_expanded_by();
  PROTOBUF_NODISCARD std::string* release_expanded_by();
  void set_allocated_expanded_by(std::string* value);

  private:
  const std::string& _internal_expanded_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expanded_by(
      const std::string& value);
  std::string* _internal_mutable_expanded_by();

  public:
  // string deprecation_notice = 10;
  void clear_deprecation_notice() ;
  const std::string& deprecation_notice() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deprecation_notice(Arg_&& arg, Args_... args);
  std::string* mutable_deprecation_notice();
  PROTOBUF_NODISCARD std::string* release_deprecation_notice();
  void set_allocated_deprecation_notice(std::string* value);

  private:
  const std::string& _internal_deprecation_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecation_notice(
      const std::string& value);
  std::string* _internal_mutable_deprecation_notice();

  public:
  // bool advanced_metadata_enabled = 2;
  void clear_advanced_metadata_enabled() ;
  bool advanced_metadata_enabled() const;
  void set_advanced_metadata_enabled(bool value);

  private:
  bool _internal_advanced_metadata_enabled() const;
  void _internal_set_advanced_metadata_enabled(bool value);

  public:
  // bool enhanced_encoding_enabled = 3;
  void clear_enhanced_encoding_enabled() ;
  bool enhanced_encoding_enabled() const;
  void set_enhanced_encoding_enabled(bool value);

  private:
  bool _internal_enhanced_encoding_enabled() const;
  void _internal_set_enhanced_encoding_enabled(bool value);

  public:
  // bool is_experimental = 9;
  void clear_is_experimental() ;
  bool is_experimental() const;
  void set_is_experimental(bool value);

  private:
  bool _internal_is_experimental() const;
  void _internal_set_is_experimental(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.CapabilityExpansion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 3,
      190, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CapabilityExpansion& from_msg);
    ::google::protobuf::internal::MapField<CapabilityExpansion_AdditionalCapabilitiesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_capabilities_;
    ::google::protobuf::RepeatedPtrField<std::string> dependencies_;
    ::google::protobuf::internal::MapField<CapabilityExpansion_ExpansionContextEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        expansion_context_;
    ::google::protobuf::internal::MapField<CapabilityExpansion_FutureCapabilitiesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        future_capabilities_;
    ::google::protobuf::internal::ArenaStringPtr target_version_;
    ::google::protobuf::internal::ArenaStringPtr expansion_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr expanded_by_;
    ::google::protobuf::internal::ArenaStringPtr deprecation_notice_;
    bool advanced_metadata_enabled_;
    bool enhanced_encoding_enabled_;
    bool is_experimental_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};
// -------------------------------------------------------------------

class AccessLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.interpretation.AccessLog) */ {
 public:
  inline AccessLog() : AccessLog(nullptr) {}
  ~AccessLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccessLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccessLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccessLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccessLog(const AccessLog& from) : AccessLog(nullptr, from) {}
  inline AccessLog(AccessLog&& from) noexcept
      : AccessLog(nullptr, std::move(from)) {}
  inline AccessLog& operator=(const AccessLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessLog& operator=(AccessLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessLog* internal_default_instance() {
    return reinterpret_cast<const AccessLog*>(
        &_AccessLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AccessLog& a, AccessLog& b) { a.Swap(&b); }
  inline void Swap(AccessLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccessLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccessLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccessLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccessLog& from) { AccessLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccessLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.interpretation.AccessLog"; }

 protected:
  explicit AccessLog(::google::protobuf::Arena* arena);
  AccessLog(::google::protobuf::Arena* arena, const AccessLog& from);
  AccessLog(::google::protobuf::Arena* arena, AccessLog&& from) noexcept
      : AccessLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kAccessConditionsFieldNumber = 10,
    kEnvironmentalFactorsFieldNumber = 12,
    kHyphenIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kMetadataVersionFieldNumber = 4,
    kDetailsFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kAccessLocationFieldNumber = 9,
    kAccessTypeFieldNumber = 2,
    kSuccessFieldNumber = 5,
    kResultCodeFieldNumber = 11,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // map<string, string> access_conditions = 10;
  int access_conditions_size() const;
  private:
  int _internal_access_conditions_size() const;

  public:
  void clear_access_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& access_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_access_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_access_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_access_conditions();

  public:
  // map<string, string> environmental_factors = 12;
  int environmental_factors_size() const;
  private:
  int _internal_environmental_factors_size() const;

  public:
  void clear_environmental_factors() ;
  const ::google::protobuf::Map<std::string, std::string>& environmental_factors() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_environmental_factors();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_environmental_factors() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_environmental_factors();

  public:
  // string hyphen_id = 1;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string metadata_version = 4;
  void clear_metadata_version() ;
  const std::string& metadata_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata_version(Arg_&& arg, Args_... args);
  std::string* mutable_metadata_version();
  PROTOBUF_NODISCARD std::string* release_metadata_version();
  void set_allocated_metadata_version(std::string* value);

  private:
  const std::string& _internal_metadata_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_version(
      const std::string& value);
  std::string* _internal_mutable_metadata_version();

  public:
  // string details = 6;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string user_id = 7;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string access_location = 9;
  void clear_access_location() ;
  const std::string& access_location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_location(Arg_&& arg, Args_... args);
  std::string* mutable_access_location();
  PROTOBUF_NODISCARD std::string* release_access_location();
  void set_allocated_access_location(std::string* value);

  private:
  const std::string& _internal_access_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_location(
      const std::string& value);
  std::string* _internal_mutable_access_location();

  public:
  // .seigr.access_control.AccessType access_type = 2;
  void clear_access_type() ;
  ::seigr::access_control::AccessType access_type() const;
  void set_access_type(::seigr::access_control::AccessType value);

  private:
  ::seigr::access_control::AccessType _internal_access_type() const;
  void _internal_set_access_type(::seigr::access_control::AccessType value);

  public:
  // bool success = 5;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 result_code = 11;
  void clear_result_code() ;
  ::int32_t result_code() const;
  void set_result_code(::int32_t value);

  private:
  ::int32_t _internal_result_code() const;
  void _internal_set_result_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.interpretation.AccessLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      156, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccessLog& from_msg);
    ::google::protobuf::internal::MapField<AccessLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::MapField<AccessLog_AccessConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        access_conditions_;
    ::google::protobuf::internal::MapField<AccessLog_EnvironmentalFactorsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        environmental_factors_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr metadata_version_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr access_location_;
    int access_type_;
    bool success_;
    ::int32_t result_code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_interpretation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InterpretationResult

// .seigr.interpretation.InterpretationStatus status = 1;
inline void InterpretationResult::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::interpretation::InterpretationStatus InterpretationResult::status() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.status)
  return _internal_status();
}
inline void InterpretationResult::set_status(::seigr::interpretation::InterpretationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.status)
}
inline ::seigr::interpretation::InterpretationStatus InterpretationResult::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::interpretation::InterpretationStatus>(_impl_.status_);
}
inline void InterpretationResult::_internal_set_status(::seigr::interpretation::InterpretationStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string message = 2;
inline void InterpretationResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& InterpretationResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterpretationResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.message)
}
inline std::string* InterpretationResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.message)
  return _s;
}
inline const std::string& InterpretationResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void InterpretationResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* InterpretationResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* InterpretationResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.InterpretationResult.message)
  return _impl_.message_.Release();
}
inline void InterpretationResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.InterpretationResult.message)
}

// string timestamp = 3;
inline void InterpretationResult::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& InterpretationResult::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterpretationResult::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.timestamp)
}
inline std::string* InterpretationResult::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.timestamp)
  return _s;
}
inline const std::string& InterpretationResult::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void InterpretationResult::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* InterpretationResult::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* InterpretationResult::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.InterpretationResult.timestamp)
  return _impl_.timestamp_.Release();
}
inline void InterpretationResult::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.InterpretationResult.timestamp)
}

// string interpreted_version = 4;
inline void InterpretationResult::clear_interpreted_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreted_version_.ClearToEmpty();
}
inline const std::string& InterpretationResult::interpreted_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.interpreted_version)
  return _internal_interpreted_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterpretationResult::set_interpreted_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreted_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.interpreted_version)
}
inline std::string* InterpretationResult::mutable_interpreted_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interpreted_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.interpreted_version)
  return _s;
}
inline const std::string& InterpretationResult::_internal_interpreted_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interpreted_version_.Get();
}
inline void InterpretationResult::_internal_set_interpreted_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreted_version_.Set(value, GetArena());
}
inline std::string* InterpretationResult::_internal_mutable_interpreted_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interpreted_version_.Mutable( GetArena());
}
inline std::string* InterpretationResult::release_interpreted_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.InterpretationResult.interpreted_version)
  return _impl_.interpreted_version_.Release();
}
inline void InterpretationResult::set_allocated_interpreted_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreted_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.interpreted_version_.IsDefault()) {
    _impl_.interpreted_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.InterpretationResult.interpreted_version)
}

// map<string, string> additional_info = 5;
inline int InterpretationResult::_internal_additional_info_size() const {
  return _internal_additional_info().size();
}
inline int InterpretationResult::additional_info_size() const {
  return _internal_additional_info_size();
}
inline void InterpretationResult::clear_additional_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_info_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::_internal_additional_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_info_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::additional_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.InterpretationResult.additional_info)
  return _internal_additional_info();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::_internal_mutable_additional_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_info_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::mutable_additional_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.InterpretationResult.additional_info)
  return _internal_mutable_additional_info();
}

// string interpreter_id = 6;
inline void InterpretationResult::clear_interpreter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreter_id_.ClearToEmpty();
}
inline const std::string& InterpretationResult::interpreter_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.interpreter_id)
  return _internal_interpreter_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterpretationResult::set_interpreter_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreter_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.interpreter_id)
}
inline std::string* InterpretationResult::mutable_interpreter_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interpreter_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.interpreter_id)
  return _s;
}
inline const std::string& InterpretationResult::_internal_interpreter_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interpreter_id_.Get();
}
inline void InterpretationResult::_internal_set_interpreter_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreter_id_.Set(value, GetArena());
}
inline std::string* InterpretationResult::_internal_mutable_interpreter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interpreter_id_.Mutable( GetArena());
}
inline std::string* InterpretationResult::release_interpreter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.InterpretationResult.interpreter_id)
  return _impl_.interpreter_id_.Release();
}
inline void InterpretationResult::set_allocated_interpreter_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpreter_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.interpreter_id_.IsDefault()) {
    _impl_.interpreter_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.InterpretationResult.interpreter_id)
}

// bool requires_attention = 7;
inline void InterpretationResult::clear_requires_attention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_attention_ = false;
}
inline bool InterpretationResult::requires_attention() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.requires_attention)
  return _internal_requires_attention();
}
inline void InterpretationResult::set_requires_attention(bool value) {
  _internal_set_requires_attention(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.requires_attention)
}
inline bool InterpretationResult::_internal_requires_attention() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_attention_;
}
inline void InterpretationResult::_internal_set_requires_attention(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_attention_ = value;
}

// map<string, string> linked_files = 8;
inline int InterpretationResult::_internal_linked_files_size() const {
  return _internal_linked_files().size();
}
inline int InterpretationResult::linked_files_size() const {
  return _internal_linked_files_size();
}
inline void InterpretationResult::clear_linked_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linked_files_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::_internal_linked_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linked_files_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::linked_files() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.InterpretationResult.linked_files)
  return _internal_linked_files();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::_internal_mutable_linked_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.linked_files_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::mutable_linked_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.InterpretationResult.linked_files)
  return _internal_mutable_linked_files();
}

// string source_data_id = 9;
inline void InterpretationResult::clear_source_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_data_id_.ClearToEmpty();
}
inline const std::string& InterpretationResult::source_data_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.source_data_id)
  return _internal_source_data_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterpretationResult::set_source_data_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_data_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.source_data_id)
}
inline std::string* InterpretationResult::mutable_source_data_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_data_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.source_data_id)
  return _s;
}
inline const std::string& InterpretationResult::_internal_source_data_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_data_id_.Get();
}
inline void InterpretationResult::_internal_set_source_data_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_data_id_.Set(value, GetArena());
}
inline std::string* InterpretationResult::_internal_mutable_source_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_data_id_.Mutable( GetArena());
}
inline std::string* InterpretationResult::release_source_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.InterpretationResult.source_data_id)
  return _impl_.source_data_id_.Release();
}
inline void InterpretationResult::set_allocated_source_data_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_data_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_data_id_.IsDefault()) {
    _impl_.source_data_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.InterpretationResult.source_data_id)
}

// int32 priority_level = 10;
inline void InterpretationResult::clear_priority_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_level_ = 0;
}
inline ::int32_t InterpretationResult::priority_level() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.priority_level)
  return _internal_priority_level();
}
inline void InterpretationResult::set_priority_level(::int32_t value) {
  _internal_set_priority_level(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.priority_level)
}
inline ::int32_t InterpretationResult::_internal_priority_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_level_;
}
inline void InterpretationResult::_internal_set_priority_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_level_ = value;
}

// map<string, string> contextual_conditions = 11;
inline int InterpretationResult::_internal_contextual_conditions_size() const {
  return _internal_contextual_conditions().size();
}
inline int InterpretationResult::contextual_conditions_size() const {
  return _internal_contextual_conditions_size();
}
inline void InterpretationResult::clear_contextual_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contextual_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::_internal_contextual_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contextual_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InterpretationResult::contextual_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.InterpretationResult.contextual_conditions)
  return _internal_contextual_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::_internal_mutable_contextual_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contextual_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InterpretationResult::mutable_contextual_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.InterpretationResult.contextual_conditions)
  return _internal_mutable_contextual_conditions();
}

// repeated string error_codes = 12;
inline int InterpretationResult::_internal_error_codes_size() const {
  return _internal_error_codes().size();
}
inline int InterpretationResult::error_codes_size() const {
  return _internal_error_codes_size();
}
inline void InterpretationResult::clear_error_codes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_codes_.Clear();
}
inline std::string* InterpretationResult::add_error_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_error_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.InterpretationResult.error_codes)
  return _s;
}
inline const std::string& InterpretationResult::error_codes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.InterpretationResult.error_codes)
  return _internal_error_codes().Get(index);
}
inline std::string* InterpretationResult::mutable_error_codes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.InterpretationResult.error_codes)
  return _internal_mutable_error_codes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void InterpretationResult::set_error_codes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_error_codes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.InterpretationResult.error_codes)
}
template <typename Arg_, typename... Args_>
inline void InterpretationResult::add_error_codes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_error_codes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.InterpretationResult.error_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
InterpretationResult::error_codes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.InterpretationResult.error_codes)
  return _internal_error_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
InterpretationResult::mutable_error_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.InterpretationResult.error_codes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_error_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
InterpretationResult::_internal_error_codes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
InterpretationResult::_internal_mutable_error_codes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.error_codes_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccessLog

// string hyphen_id = 1;
inline void AccessLog::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& AccessLog::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.hyphen_id)
}
inline std::string* AccessLog::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.hyphen_id)
  return _s;
}
inline const std::string& AccessLog::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void AccessLog::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* AccessLog::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void AccessLog::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.hyphen_id)
}

// .seigr.access_control.AccessType access_type = 2;
inline void AccessLog::clear_access_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_type_ = 0;
}
inline ::seigr::access_control::AccessType AccessLog::access_type() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.access_type)
  return _internal_access_type();
}
inline void AccessLog::set_access_type(::seigr::access_control::AccessType value) {
  _internal_set_access_type(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.access_type)
}
inline ::seigr::access_control::AccessType AccessLog::_internal_access_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::access_control::AccessType>(_impl_.access_type_);
}
inline void AccessLog::_internal_set_access_type(::seigr::access_control::AccessType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_type_ = value;
}

// string timestamp = 3;
inline void AccessLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& AccessLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.timestamp)
}
inline std::string* AccessLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.timestamp)
  return _s;
}
inline const std::string& AccessLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void AccessLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* AccessLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void AccessLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.timestamp)
}

// string metadata_version = 4;
inline void AccessLog::clear_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.ClearToEmpty();
}
inline const std::string& AccessLog::metadata_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.metadata_version)
  return _internal_metadata_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_metadata_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.metadata_version)
}
inline std::string* AccessLog::mutable_metadata_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.metadata_version)
  return _s;
}
inline const std::string& AccessLog::_internal_metadata_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_version_.Get();
}
inline void AccessLog::_internal_set_metadata_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_version_.Mutable( GetArena());
}
inline std::string* AccessLog::release_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.metadata_version)
  return _impl_.metadata_version_.Release();
}
inline void AccessLog::set_allocated_metadata_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_version_.IsDefault()) {
    _impl_.metadata_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.metadata_version)
}

// bool success = 5;
inline void AccessLog::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AccessLog::success() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.success)
  return _internal_success();
}
inline void AccessLog::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.success)
}
inline bool AccessLog::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AccessLog::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string details = 6;
inline void AccessLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& AccessLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.details)
}
inline std::string* AccessLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.details)
  return _s;
}
inline const std::string& AccessLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void AccessLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* AccessLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.details)
  return _impl_.details_.Release();
}
inline void AccessLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.details)
}

// string user_id = 7;
inline void AccessLog::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& AccessLog::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.user_id)
}
inline std::string* AccessLog::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.user_id)
  return _s;
}
inline const std::string& AccessLog::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void AccessLog::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* AccessLog::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.user_id)
  return _impl_.user_id_.Release();
}
inline void AccessLog::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.user_id)
}

// map<string, string> metadata = 8;
inline int AccessLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AccessLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void AccessLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.AccessLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.AccessLog.metadata)
  return _internal_mutable_metadata();
}

// string access_location = 9;
inline void AccessLog::clear_access_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_location_.ClearToEmpty();
}
inline const std::string& AccessLog::access_location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.access_location)
  return _internal_access_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccessLog::set_access_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.access_location)
}
inline std::string* AccessLog::mutable_access_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_location();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.AccessLog.access_location)
  return _s;
}
inline const std::string& AccessLog::_internal_access_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_location_.Get();
}
inline void AccessLog::_internal_set_access_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_location_.Set(value, GetArena());
}
inline std::string* AccessLog::_internal_mutable_access_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_location_.Mutable( GetArena());
}
inline std::string* AccessLog::release_access_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.AccessLog.access_location)
  return _impl_.access_location_.Release();
}
inline void AccessLog::set_allocated_access_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_location_.IsDefault()) {
    _impl_.access_location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.AccessLog.access_location)
}

// map<string, string> access_conditions = 10;
inline int AccessLog::_internal_access_conditions_size() const {
  return _internal_access_conditions().size();
}
inline int AccessLog::access_conditions_size() const {
  return _internal_access_conditions_size();
}
inline void AccessLog::clear_access_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::_internal_access_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::access_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.AccessLog.access_conditions)
  return _internal_access_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::_internal_mutable_access_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.access_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::mutable_access_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.AccessLog.access_conditions)
  return _internal_mutable_access_conditions();
}

// int32 result_code = 11;
inline void AccessLog::clear_result_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = 0;
}
inline ::int32_t AccessLog::result_code() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.AccessLog.result_code)
  return _internal_result_code();
}
inline void AccessLog::set_result_code(::int32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.AccessLog.result_code)
}
inline ::int32_t AccessLog::_internal_result_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_code_;
}
inline void AccessLog::_internal_set_result_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = value;
}

// map<string, string> environmental_factors = 12;
inline int AccessLog::_internal_environmental_factors_size() const {
  return _internal_environmental_factors().size();
}
inline int AccessLog::environmental_factors_size() const {
  return _internal_environmental_factors_size();
}
inline void AccessLog::clear_environmental_factors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environmental_factors_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::_internal_environmental_factors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.environmental_factors_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AccessLog::environmental_factors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.AccessLog.environmental_factors)
  return _internal_environmental_factors();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::_internal_mutable_environmental_factors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.environmental_factors_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AccessLog::mutable_environmental_factors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.AccessLog.environmental_factors)
  return _internal_mutable_environmental_factors();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompatibilityCheck

// string metadata_version = 1;
inline void CompatibilityCheck::clear_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::metadata_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.metadata_version)
  return _internal_metadata_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_metadata_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.metadata_version)
}
inline std::string* CompatibilityCheck::mutable_metadata_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.metadata_version)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_metadata_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_version_.Get();
}
inline void CompatibilityCheck::_internal_set_metadata_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_version_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.metadata_version)
  return _impl_.metadata_version_.Release();
}
inline void CompatibilityCheck::set_allocated_metadata_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_version_.IsDefault()) {
    _impl_.metadata_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.metadata_version)
}

// string protocol_version = 2;
inline void CompatibilityCheck::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::protocol_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.protocol_version)
  return _internal_protocol_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_protocol_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.protocol_version)
}
inline std::string* CompatibilityCheck::mutable_protocol_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.protocol_version)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_version_.Get();
}
inline void CompatibilityCheck::_internal_set_protocol_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_version_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.protocol_version)
  return _impl_.protocol_version_.Release();
}
inline void CompatibilityCheck::set_allocated_protocol_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.protocol_version_.IsDefault()) {
    _impl_.protocol_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.protocol_version)
}

// repeated string compatible_versions = 3;
inline int CompatibilityCheck::_internal_compatible_versions_size() const {
  return _internal_compatible_versions().size();
}
inline int CompatibilityCheck::compatible_versions_size() const {
  return _internal_compatible_versions_size();
}
inline void CompatibilityCheck::clear_compatible_versions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compatible_versions_.Clear();
}
inline std::string* CompatibilityCheck::add_compatible_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_compatible_versions()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.CompatibilityCheck.compatible_versions)
  return _s;
}
inline const std::string& CompatibilityCheck::compatible_versions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.compatible_versions)
  return _internal_compatible_versions().Get(index);
}
inline std::string* CompatibilityCheck::mutable_compatible_versions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.compatible_versions)
  return _internal_mutable_compatible_versions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::set_compatible_versions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_compatible_versions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.compatible_versions)
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::add_compatible_versions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_compatible_versions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.CompatibilityCheck.compatible_versions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::compatible_versions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.CompatibilityCheck.compatible_versions)
  return _internal_compatible_versions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::mutable_compatible_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.CompatibilityCheck.compatible_versions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_compatible_versions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::_internal_compatible_versions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compatible_versions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::_internal_mutable_compatible_versions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.compatible_versions_;
}

// bool is_compatible = 4;
inline void CompatibilityCheck::clear_is_compatible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compatible_ = false;
}
inline bool CompatibilityCheck::is_compatible() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.is_compatible)
  return _internal_is_compatible();
}
inline void CompatibilityCheck::set_is_compatible(bool value) {
  _internal_set_is_compatible(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.is_compatible)
}
inline bool CompatibilityCheck::_internal_is_compatible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_compatible_;
}
inline void CompatibilityCheck::_internal_set_is_compatible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compatible_ = value;
}

// string message = 5;
inline void CompatibilityCheck::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.message)
}
inline std::string* CompatibilityCheck::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.message)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CompatibilityCheck::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.message)
  return _impl_.message_.Release();
}
inline void CompatibilityCheck::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.message)
}

// string recommended_action = 6;
inline void CompatibilityCheck::clear_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::recommended_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.recommended_action)
  return _internal_recommended_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_recommended_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.recommended_action)
}
inline std::string* CompatibilityCheck::mutable_recommended_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recommended_action();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.recommended_action)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_recommended_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recommended_action_.Get();
}
inline void CompatibilityCheck::_internal_set_recommended_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recommended_action_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.recommended_action)
  return _impl_.recommended_action_.Release();
}
inline void CompatibilityCheck::set_allocated_recommended_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recommended_action_.IsDefault()) {
    _impl_.recommended_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.recommended_action)
}

// string last_verified = 7;
inline void CompatibilityCheck::clear_last_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_verified_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::last_verified() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.last_verified)
  return _internal_last_verified();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_last_verified(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_verified_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.last_verified)
}
inline std::string* CompatibilityCheck::mutable_last_verified() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_verified();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.last_verified)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_last_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_verified_.Get();
}
inline void CompatibilityCheck::_internal_set_last_verified(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_verified_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_last_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_verified_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_last_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.last_verified)
  return _impl_.last_verified_.Release();
}
inline void CompatibilityCheck::set_allocated_last_verified(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_verified_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_verified_.IsDefault()) {
    _impl_.last_verified_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.last_verified)
}

// string fallback_version = 8;
inline void CompatibilityCheck::clear_fallback_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_version_.ClearToEmpty();
}
inline const std::string& CompatibilityCheck::fallback_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.fallback_version)
  return _internal_fallback_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompatibilityCheck::set_fallback_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.fallback_version)
}
inline std::string* CompatibilityCheck::mutable_fallback_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fallback_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.fallback_version)
  return _s;
}
inline const std::string& CompatibilityCheck::_internal_fallback_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fallback_version_.Get();
}
inline void CompatibilityCheck::_internal_set_fallback_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_version_.Set(value, GetArena());
}
inline std::string* CompatibilityCheck::_internal_mutable_fallback_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fallback_version_.Mutable( GetArena());
}
inline std::string* CompatibilityCheck::release_fallback_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CompatibilityCheck.fallback_version)
  return _impl_.fallback_version_.Release();
}
inline void CompatibilityCheck::set_allocated_fallback_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fallback_version_.IsDefault()) {
    _impl_.fallback_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CompatibilityCheck.fallback_version)
}

// map<string, string> compatibility_notes = 9;
inline int CompatibilityCheck::_internal_compatibility_notes_size() const {
  return _internal_compatibility_notes().size();
}
inline int CompatibilityCheck::compatibility_notes_size() const {
  return _internal_compatibility_notes_size();
}
inline void CompatibilityCheck::clear_compatibility_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compatibility_notes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CompatibilityCheck::_internal_compatibility_notes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compatibility_notes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CompatibilityCheck::compatibility_notes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.CompatibilityCheck.compatibility_notes)
  return _internal_compatibility_notes();
}
inline ::google::protobuf::Map<std::string, std::string>* CompatibilityCheck::_internal_mutable_compatibility_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compatibility_notes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CompatibilityCheck::mutable_compatibility_notes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.CompatibilityCheck.compatibility_notes)
  return _internal_mutable_compatibility_notes();
}

// repeated string dependency_requirements = 10;
inline int CompatibilityCheck::_internal_dependency_requirements_size() const {
  return _internal_dependency_requirements().size();
}
inline int CompatibilityCheck::dependency_requirements_size() const {
  return _internal_dependency_requirements_size();
}
inline void CompatibilityCheck::clear_dependency_requirements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependency_requirements_.Clear();
}
inline std::string* CompatibilityCheck::add_dependency_requirements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dependency_requirements()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.CompatibilityCheck.dependency_requirements)
  return _s;
}
inline const std::string& CompatibilityCheck::dependency_requirements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.dependency_requirements)
  return _internal_dependency_requirements().Get(index);
}
inline std::string* CompatibilityCheck::mutable_dependency_requirements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.dependency_requirements)
  return _internal_mutable_dependency_requirements()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::set_dependency_requirements(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dependency_requirements()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.dependency_requirements)
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::add_dependency_requirements(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dependency_requirements(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.CompatibilityCheck.dependency_requirements)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::dependency_requirements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.CompatibilityCheck.dependency_requirements)
  return _internal_dependency_requirements();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::mutable_dependency_requirements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.CompatibilityCheck.dependency_requirements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dependency_requirements();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::_internal_dependency_requirements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependency_requirements_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::_internal_mutable_dependency_requirements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dependency_requirements_;
}

// repeated string fallback_options = 11;
inline int CompatibilityCheck::_internal_fallback_options_size() const {
  return _internal_fallback_options().size();
}
inline int CompatibilityCheck::fallback_options_size() const {
  return _internal_fallback_options_size();
}
inline void CompatibilityCheck::clear_fallback_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_options_.Clear();
}
inline std::string* CompatibilityCheck::add_fallback_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_fallback_options()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.CompatibilityCheck.fallback_options)
  return _s;
}
inline const std::string& CompatibilityCheck::fallback_options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.fallback_options)
  return _internal_fallback_options().Get(index);
}
inline std::string* CompatibilityCheck::mutable_fallback_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CompatibilityCheck.fallback_options)
  return _internal_mutable_fallback_options()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::set_fallback_options(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_fallback_options()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.fallback_options)
}
template <typename Arg_, typename... Args_>
inline void CompatibilityCheck::add_fallback_options(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_fallback_options(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.CompatibilityCheck.fallback_options)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::fallback_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.CompatibilityCheck.fallback_options)
  return _internal_fallback_options();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::mutable_fallback_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.CompatibilityCheck.fallback_options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fallback_options();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CompatibilityCheck::_internal_fallback_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fallback_options_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CompatibilityCheck::_internal_mutable_fallback_options() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fallback_options_;
}

// bool requires_update = 12;
inline void CompatibilityCheck::clear_requires_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_update_ = false;
}
inline bool CompatibilityCheck::requires_update() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CompatibilityCheck.requires_update)
  return _internal_requires_update();
}
inline void CompatibilityCheck::set_requires_update(bool value) {
  _internal_set_requires_update(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.CompatibilityCheck.requires_update)
}
inline bool CompatibilityCheck::_internal_requires_update() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_update_;
}
inline void CompatibilityCheck::_internal_set_requires_update(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_update_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CapabilityExpansion

// string target_version = 1;
inline void CapabilityExpansion::clear_target_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_version_.ClearToEmpty();
}
inline const std::string& CapabilityExpansion::target_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.target_version)
  return _internal_target_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapabilityExpansion::set_target_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.target_version)
}
inline std::string* CapabilityExpansion::mutable_target_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CapabilityExpansion.target_version)
  return _s;
}
inline const std::string& CapabilityExpansion::_internal_target_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_version_.Get();
}
inline void CapabilityExpansion::_internal_set_target_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_version_.Set(value, GetArena());
}
inline std::string* CapabilityExpansion::_internal_mutable_target_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_version_.Mutable( GetArena());
}
inline std::string* CapabilityExpansion::release_target_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CapabilityExpansion.target_version)
  return _impl_.target_version_.Release();
}
inline void CapabilityExpansion::set_allocated_target_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_version_.IsDefault()) {
    _impl_.target_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CapabilityExpansion.target_version)
}

// bool advanced_metadata_enabled = 2;
inline void CapabilityExpansion::clear_advanced_metadata_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.advanced_metadata_enabled_ = false;
}
inline bool CapabilityExpansion::advanced_metadata_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.advanced_metadata_enabled)
  return _internal_advanced_metadata_enabled();
}
inline void CapabilityExpansion::set_advanced_metadata_enabled(bool value) {
  _internal_set_advanced_metadata_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.advanced_metadata_enabled)
}
inline bool CapabilityExpansion::_internal_advanced_metadata_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.advanced_metadata_enabled_;
}
inline void CapabilityExpansion::_internal_set_advanced_metadata_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.advanced_metadata_enabled_ = value;
}

// bool enhanced_encoding_enabled = 3;
inline void CapabilityExpansion::clear_enhanced_encoding_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enhanced_encoding_enabled_ = false;
}
inline bool CapabilityExpansion::enhanced_encoding_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.enhanced_encoding_enabled)
  return _internal_enhanced_encoding_enabled();
}
inline void CapabilityExpansion::set_enhanced_encoding_enabled(bool value) {
  _internal_set_enhanced_encoding_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.enhanced_encoding_enabled)
}
inline bool CapabilityExpansion::_internal_enhanced_encoding_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enhanced_encoding_enabled_;
}
inline void CapabilityExpansion::_internal_set_enhanced_encoding_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enhanced_encoding_enabled_ = value;
}

// map<string, string> additional_capabilities = 4;
inline int CapabilityExpansion::_internal_additional_capabilities_size() const {
  return _internal_additional_capabilities().size();
}
inline int CapabilityExpansion::additional_capabilities_size() const {
  return _internal_additional_capabilities_size();
}
inline void CapabilityExpansion::clear_additional_capabilities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_capabilities_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::_internal_additional_capabilities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_capabilities_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::additional_capabilities() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.CapabilityExpansion.additional_capabilities)
  return _internal_additional_capabilities();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::_internal_mutable_additional_capabilities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_capabilities_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::mutable_additional_capabilities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.CapabilityExpansion.additional_capabilities)
  return _internal_mutable_additional_capabilities();
}

// string expansion_timestamp = 5;
inline void CapabilityExpansion::clear_expansion_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expansion_timestamp_.ClearToEmpty();
}
inline const std::string& CapabilityExpansion::expansion_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.expansion_timestamp)
  return _internal_expansion_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapabilityExpansion::set_expansion_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expansion_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.expansion_timestamp)
}
inline std::string* CapabilityExpansion::mutable_expansion_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expansion_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CapabilityExpansion.expansion_timestamp)
  return _s;
}
inline const std::string& CapabilityExpansion::_internal_expansion_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expansion_timestamp_.Get();
}
inline void CapabilityExpansion::_internal_set_expansion_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expansion_timestamp_.Set(value, GetArena());
}
inline std::string* CapabilityExpansion::_internal_mutable_expansion_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expansion_timestamp_.Mutable( GetArena());
}
inline std::string* CapabilityExpansion::release_expansion_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CapabilityExpansion.expansion_timestamp)
  return _impl_.expansion_timestamp_.Release();
}
inline void CapabilityExpansion::set_allocated_expansion_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expansion_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expansion_timestamp_.IsDefault()) {
    _impl_.expansion_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CapabilityExpansion.expansion_timestamp)
}

// repeated string dependencies = 6;
inline int CapabilityExpansion::_internal_dependencies_size() const {
  return _internal_dependencies().size();
}
inline int CapabilityExpansion::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void CapabilityExpansion::clear_dependencies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependencies_.Clear();
}
inline std::string* CapabilityExpansion::add_dependencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dependencies()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.CapabilityExpansion.dependencies)
  return _s;
}
inline const std::string& CapabilityExpansion::dependencies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.dependencies)
  return _internal_dependencies().Get(index);
}
inline std::string* CapabilityExpansion::mutable_dependencies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CapabilityExpansion.dependencies)
  return _internal_mutable_dependencies()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CapabilityExpansion::set_dependencies(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dependencies()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.dependencies)
}
template <typename Arg_, typename... Args_>
inline void CapabilityExpansion::add_dependencies(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dependencies(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.CapabilityExpansion.dependencies)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CapabilityExpansion::dependencies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.CapabilityExpansion.dependencies)
  return _internal_dependencies();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CapabilityExpansion::mutable_dependencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.CapabilityExpansion.dependencies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dependencies();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CapabilityExpansion::_internal_dependencies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependencies_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CapabilityExpansion::_internal_mutable_dependencies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dependencies_;
}

// string expanded_by = 7;
inline void CapabilityExpansion::clear_expanded_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expanded_by_.ClearToEmpty();
}
inline const std::string& CapabilityExpansion::expanded_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.expanded_by)
  return _internal_expanded_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapabilityExpansion::set_expanded_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expanded_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.expanded_by)
}
inline std::string* CapabilityExpansion::mutable_expanded_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expanded_by();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CapabilityExpansion.expanded_by)
  return _s;
}
inline const std::string& CapabilityExpansion::_internal_expanded_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expanded_by_.Get();
}
inline void CapabilityExpansion::_internal_set_expanded_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expanded_by_.Set(value, GetArena());
}
inline std::string* CapabilityExpansion::_internal_mutable_expanded_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expanded_by_.Mutable( GetArena());
}
inline std::string* CapabilityExpansion::release_expanded_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CapabilityExpansion.expanded_by)
  return _impl_.expanded_by_.Release();
}
inline void CapabilityExpansion::set_allocated_expanded_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expanded_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expanded_by_.IsDefault()) {
    _impl_.expanded_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CapabilityExpansion.expanded_by)
}

// map<string, string> expansion_context = 8;
inline int CapabilityExpansion::_internal_expansion_context_size() const {
  return _internal_expansion_context().size();
}
inline int CapabilityExpansion::expansion_context_size() const {
  return _internal_expansion_context_size();
}
inline void CapabilityExpansion::clear_expansion_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expansion_context_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::_internal_expansion_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expansion_context_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::expansion_context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.CapabilityExpansion.expansion_context)
  return _internal_expansion_context();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::_internal_mutable_expansion_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expansion_context_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::mutable_expansion_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.CapabilityExpansion.expansion_context)
  return _internal_mutable_expansion_context();
}

// bool is_experimental = 9;
inline void CapabilityExpansion::clear_is_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_experimental_ = false;
}
inline bool CapabilityExpansion::is_experimental() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.is_experimental)
  return _internal_is_experimental();
}
inline void CapabilityExpansion::set_is_experimental(bool value) {
  _internal_set_is_experimental(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.is_experimental)
}
inline bool CapabilityExpansion::_internal_is_experimental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_experimental_;
}
inline void CapabilityExpansion::_internal_set_is_experimental(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_experimental_ = value;
}

// string deprecation_notice = 10;
inline void CapabilityExpansion::clear_deprecation_notice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecation_notice_.ClearToEmpty();
}
inline const std::string& CapabilityExpansion::deprecation_notice() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.CapabilityExpansion.deprecation_notice)
  return _internal_deprecation_notice();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapabilityExpansion::set_deprecation_notice(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecation_notice_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.CapabilityExpansion.deprecation_notice)
}
inline std::string* CapabilityExpansion::mutable_deprecation_notice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deprecation_notice();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.CapabilityExpansion.deprecation_notice)
  return _s;
}
inline const std::string& CapabilityExpansion::_internal_deprecation_notice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deprecation_notice_.Get();
}
inline void CapabilityExpansion::_internal_set_deprecation_notice(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecation_notice_.Set(value, GetArena());
}
inline std::string* CapabilityExpansion::_internal_mutable_deprecation_notice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deprecation_notice_.Mutable( GetArena());
}
inline std::string* CapabilityExpansion::release_deprecation_notice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.CapabilityExpansion.deprecation_notice)
  return _impl_.deprecation_notice_.Release();
}
inline void CapabilityExpansion::set_allocated_deprecation_notice(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecation_notice_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deprecation_notice_.IsDefault()) {
    _impl_.deprecation_notice_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.CapabilityExpansion.deprecation_notice)
}

// map<string, string> future_capabilities = 11;
inline int CapabilityExpansion::_internal_future_capabilities_size() const {
  return _internal_future_capabilities().size();
}
inline int CapabilityExpansion::future_capabilities_size() const {
  return _internal_future_capabilities_size();
}
inline void CapabilityExpansion::clear_future_capabilities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.future_capabilities_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::_internal_future_capabilities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.future_capabilities_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CapabilityExpansion::future_capabilities() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.CapabilityExpansion.future_capabilities)
  return _internal_future_capabilities();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::_internal_mutable_future_capabilities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.future_capabilities_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CapabilityExpansion::mutable_future_capabilities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.CapabilityExpansion.future_capabilities)
  return _internal_mutable_future_capabilities();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetadataValidationLog

// string validation_id = 1;
inline void MetadataValidationLog::clear_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::validation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.validation_id)
  return _internal_validation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_validation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.validation_id)
}
inline std::string* MetadataValidationLog::mutable_validation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.validation_id)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_validation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_id_.Get();
}
inline void MetadataValidationLog::_internal_set_validation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_id_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.validation_id)
  return _impl_.validation_id_.Release();
}
inline void MetadataValidationLog::set_allocated_validation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_id_.IsDefault()) {
    _impl_.validation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.validation_id)
}

// string target_metadata_version = 2;
inline void MetadataValidationLog::clear_target_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_metadata_version_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::target_metadata_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.target_metadata_version)
  return _internal_target_metadata_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_target_metadata_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_metadata_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.target_metadata_version)
}
inline std::string* MetadataValidationLog::mutable_target_metadata_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_metadata_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.target_metadata_version)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_target_metadata_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_metadata_version_.Get();
}
inline void MetadataValidationLog::_internal_set_target_metadata_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_metadata_version_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_target_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_metadata_version_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_target_metadata_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.target_metadata_version)
  return _impl_.target_metadata_version_.Release();
}
inline void MetadataValidationLog::set_allocated_target_metadata_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_metadata_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_metadata_version_.IsDefault()) {
    _impl_.target_metadata_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.target_metadata_version)
}

// string protocol_version = 3;
inline void MetadataValidationLog::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::protocol_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.protocol_version)
  return _internal_protocol_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_protocol_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.protocol_version)
}
inline std::string* MetadataValidationLog::mutable_protocol_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.protocol_version)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_version_.Get();
}
inline void MetadataValidationLog::_internal_set_protocol_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_version_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.protocol_version)
  return _impl_.protocol_version_.Release();
}
inline void MetadataValidationLog::set_allocated_protocol_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.protocol_version_.IsDefault()) {
    _impl_.protocol_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.protocol_version)
}

// string validator_id = 4;
inline void MetadataValidationLog::clear_validator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_id_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::validator_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.validator_id)
  return _internal_validator_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_validator_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.validator_id)
}
inline std::string* MetadataValidationLog::mutable_validator_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validator_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.validator_id)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_validator_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_id_.Get();
}
inline void MetadataValidationLog::_internal_set_validator_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_id_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_validator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validator_id_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_validator_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.validator_id)
  return _impl_.validator_id_.Release();
}
inline void MetadataValidationLog::set_allocated_validator_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validator_id_.IsDefault()) {
    _impl_.validator_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.validator_id)
}

// string validation_timestamp = 5;
inline void MetadataValidationLog::clear_validation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_timestamp_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::validation_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.validation_timestamp)
  return _internal_validation_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_validation_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.validation_timestamp)
}
inline std::string* MetadataValidationLog::mutable_validation_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.validation_timestamp)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_validation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_timestamp_.Get();
}
inline void MetadataValidationLog::_internal_set_validation_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_timestamp_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_validation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_timestamp_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_validation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.validation_timestamp)
  return _impl_.validation_timestamp_.Release();
}
inline void MetadataValidationLog::set_allocated_validation_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_timestamp_.IsDefault()) {
    _impl_.validation_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.validation_timestamp)
}

// bool validation_successful = 6;
inline void MetadataValidationLog::clear_validation_successful() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_successful_ = false;
}
inline bool MetadataValidationLog::validation_successful() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.validation_successful)
  return _internal_validation_successful();
}
inline void MetadataValidationLog::set_validation_successful(bool value) {
  _internal_set_validation_successful(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.validation_successful)
}
inline bool MetadataValidationLog::_internal_validation_successful() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_successful_;
}
inline void MetadataValidationLog::_internal_set_validation_successful(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_successful_ = value;
}

// string error_message = 7;
inline void MetadataValidationLog::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.error_message)
}
inline std::string* MetadataValidationLog::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.error_message)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void MetadataValidationLog::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.error_message)
  return _impl_.error_message_.Release();
}
inline void MetadataValidationLog::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.error_message)
}

// map<string, string> validation_metadata = 8;
inline int MetadataValidationLog::_internal_validation_metadata_size() const {
  return _internal_validation_metadata().size();
}
inline int MetadataValidationLog::validation_metadata_size() const {
  return _internal_validation_metadata_size();
}
inline void MetadataValidationLog::clear_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataValidationLog::_internal_validation_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataValidationLog::validation_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.MetadataValidationLog.validation_metadata)
  return _internal_validation_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataValidationLog::_internal_mutable_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataValidationLog::mutable_validation_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.MetadataValidationLog.validation_metadata)
  return _internal_mutable_validation_metadata();
}

// string recommended_action = 9;
inline void MetadataValidationLog::clear_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.ClearToEmpty();
}
inline const std::string& MetadataValidationLog::recommended_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.recommended_action)
  return _internal_recommended_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataValidationLog::set_recommended_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.recommended_action)
}
inline std::string* MetadataValidationLog::mutable_recommended_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recommended_action();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.recommended_action)
  return _s;
}
inline const std::string& MetadataValidationLog::_internal_recommended_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recommended_action_.Get();
}
inline void MetadataValidationLog::_internal_set_recommended_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(value, GetArena());
}
inline std::string* MetadataValidationLog::_internal_mutable_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recommended_action_.Mutable( GetArena());
}
inline std::string* MetadataValidationLog::release_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataValidationLog.recommended_action)
  return _impl_.recommended_action_.Release();
}
inline void MetadataValidationLog::set_allocated_recommended_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recommended_action_.IsDefault()) {
    _impl_.recommended_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataValidationLog.recommended_action)
}

// repeated string dependency_checks = 10;
inline int MetadataValidationLog::_internal_dependency_checks_size() const {
  return _internal_dependency_checks().size();
}
inline int MetadataValidationLog::dependency_checks_size() const {
  return _internal_dependency_checks_size();
}
inline void MetadataValidationLog::clear_dependency_checks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependency_checks_.Clear();
}
inline std::string* MetadataValidationLog::add_dependency_checks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dependency_checks()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.MetadataValidationLog.dependency_checks)
  return _s;
}
inline const std::string& MetadataValidationLog::dependency_checks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.dependency_checks)
  return _internal_dependency_checks().Get(index);
}
inline std::string* MetadataValidationLog::mutable_dependency_checks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.dependency_checks)
  return _internal_mutable_dependency_checks()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MetadataValidationLog::set_dependency_checks(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dependency_checks()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.dependency_checks)
}
template <typename Arg_, typename... Args_>
inline void MetadataValidationLog::add_dependency_checks(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dependency_checks(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.MetadataValidationLog.dependency_checks)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataValidationLog::dependency_checks() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.MetadataValidationLog.dependency_checks)
  return _internal_dependency_checks();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataValidationLog::mutable_dependency_checks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.MetadataValidationLog.dependency_checks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dependency_checks();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataValidationLog::_internal_dependency_checks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependency_checks_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataValidationLog::_internal_mutable_dependency_checks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dependency_checks_;
}

// repeated string warnings = 11;
inline int MetadataValidationLog::_internal_warnings_size() const {
  return _internal_warnings().size();
}
inline int MetadataValidationLog::warnings_size() const {
  return _internal_warnings_size();
}
inline void MetadataValidationLog::clear_warnings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warnings_.Clear();
}
inline std::string* MetadataValidationLog::add_warnings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_warnings()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.MetadataValidationLog.warnings)
  return _s;
}
inline const std::string& MetadataValidationLog::warnings(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataValidationLog.warnings)
  return _internal_warnings().Get(index);
}
inline std::string* MetadataValidationLog::mutable_warnings(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataValidationLog.warnings)
  return _internal_mutable_warnings()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MetadataValidationLog::set_warnings(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_warnings()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataValidationLog.warnings)
}
template <typename Arg_, typename... Args_>
inline void MetadataValidationLog::add_warnings(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_warnings(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.MetadataValidationLog.warnings)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataValidationLog::warnings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.MetadataValidationLog.warnings)
  return _internal_warnings();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataValidationLog::mutable_warnings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.MetadataValidationLog.warnings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_warnings();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataValidationLog::_internal_warnings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warnings_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataValidationLog::_internal_mutable_warnings() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.warnings_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetadataAnalysisContext

// string analysis_id = 1;
inline void MetadataAnalysisContext::clear_analysis_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_id_.ClearToEmpty();
}
inline const std::string& MetadataAnalysisContext::analysis_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.analysis_id)
  return _internal_analysis_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataAnalysisContext::set_analysis_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.analysis_id)
}
inline std::string* MetadataAnalysisContext::mutable_analysis_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_analysis_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.analysis_id)
  return _s;
}
inline const std::string& MetadataAnalysisContext::_internal_analysis_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analysis_id_.Get();
}
inline void MetadataAnalysisContext::_internal_set_analysis_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_id_.Set(value, GetArena());
}
inline std::string* MetadataAnalysisContext::_internal_mutable_analysis_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.analysis_id_.Mutable( GetArena());
}
inline std::string* MetadataAnalysisContext::release_analysis_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataAnalysisContext.analysis_id)
  return _impl_.analysis_id_.Release();
}
inline void MetadataAnalysisContext::set_allocated_analysis_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.analysis_id_.IsDefault()) {
    _impl_.analysis_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataAnalysisContext.analysis_id)
}

// string origin_data_id = 2;
inline void MetadataAnalysisContext::clear_origin_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_id_.ClearToEmpty();
}
inline const std::string& MetadataAnalysisContext::origin_data_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.origin_data_id)
  return _internal_origin_data_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataAnalysisContext::set_origin_data_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.origin_data_id)
}
inline std::string* MetadataAnalysisContext::mutable_origin_data_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_origin_data_id();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.origin_data_id)
  return _s;
}
inline const std::string& MetadataAnalysisContext::_internal_origin_data_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_data_id_.Get();
}
inline void MetadataAnalysisContext::_internal_set_origin_data_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_id_.Set(value, GetArena());
}
inline std::string* MetadataAnalysisContext::_internal_mutable_origin_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.origin_data_id_.Mutable( GetArena());
}
inline std::string* MetadataAnalysisContext::release_origin_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataAnalysisContext.origin_data_id)
  return _impl_.origin_data_id_.Release();
}
inline void MetadataAnalysisContext::set_allocated_origin_data_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_data_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.origin_data_id_.IsDefault()) {
    _impl_.origin_data_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataAnalysisContext.origin_data_id)
}

// string analysis_timestamp = 3;
inline void MetadataAnalysisContext::clear_analysis_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_timestamp_.ClearToEmpty();
}
inline const std::string& MetadataAnalysisContext::analysis_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.analysis_timestamp)
  return _internal_analysis_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataAnalysisContext::set_analysis_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.analysis_timestamp)
}
inline std::string* MetadataAnalysisContext::mutable_analysis_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_analysis_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.analysis_timestamp)
  return _s;
}
inline const std::string& MetadataAnalysisContext::_internal_analysis_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analysis_timestamp_.Get();
}
inline void MetadataAnalysisContext::_internal_set_analysis_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_timestamp_.Set(value, GetArena());
}
inline std::string* MetadataAnalysisContext::_internal_mutable_analysis_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.analysis_timestamp_.Mutable( GetArena());
}
inline std::string* MetadataAnalysisContext::release_analysis_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataAnalysisContext.analysis_timestamp)
  return _impl_.analysis_timestamp_.Release();
}
inline void MetadataAnalysisContext::set_allocated_analysis_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.analysis_timestamp_.IsDefault()) {
    _impl_.analysis_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataAnalysisContext.analysis_timestamp)
}

// map<string, string> context_parameters = 4;
inline int MetadataAnalysisContext::_internal_context_parameters_size() const {
  return _internal_context_parameters().size();
}
inline int MetadataAnalysisContext::context_parameters_size() const {
  return _internal_context_parameters_size();
}
inline void MetadataAnalysisContext::clear_context_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataAnalysisContext::_internal_context_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataAnalysisContext::context_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.MetadataAnalysisContext.context_parameters)
  return _internal_context_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataAnalysisContext::_internal_mutable_context_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataAnalysisContext::mutable_context_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.MetadataAnalysisContext.context_parameters)
  return _internal_mutable_context_parameters();
}

// repeated string warning_messages = 5;
inline int MetadataAnalysisContext::_internal_warning_messages_size() const {
  return _internal_warning_messages().size();
}
inline int MetadataAnalysisContext::warning_messages_size() const {
  return _internal_warning_messages_size();
}
inline void MetadataAnalysisContext::clear_warning_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_messages_.Clear();
}
inline std::string* MetadataAnalysisContext::add_warning_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_warning_messages()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.interpretation.MetadataAnalysisContext.warning_messages)
  return _s;
}
inline const std::string& MetadataAnalysisContext::warning_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.warning_messages)
  return _internal_warning_messages().Get(index);
}
inline std::string* MetadataAnalysisContext::mutable_warning_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.warning_messages)
  return _internal_mutable_warning_messages()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MetadataAnalysisContext::set_warning_messages(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_warning_messages()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.warning_messages)
}
template <typename Arg_, typename... Args_>
inline void MetadataAnalysisContext::add_warning_messages(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_warning_messages(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.interpretation.MetadataAnalysisContext.warning_messages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataAnalysisContext::warning_messages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.interpretation.MetadataAnalysisContext.warning_messages)
  return _internal_warning_messages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataAnalysisContext::mutable_warning_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.interpretation.MetadataAnalysisContext.warning_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_warning_messages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MetadataAnalysisContext::_internal_warning_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warning_messages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MetadataAnalysisContext::_internal_mutable_warning_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.warning_messages_;
}

// map<string, string> analysis_metadata = 6;
inline int MetadataAnalysisContext::_internal_analysis_metadata_size() const {
  return _internal_analysis_metadata().size();
}
inline int MetadataAnalysisContext::analysis_metadata_size() const {
  return _internal_analysis_metadata_size();
}
inline void MetadataAnalysisContext::clear_analysis_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataAnalysisContext::_internal_analysis_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analysis_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MetadataAnalysisContext::analysis_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.interpretation.MetadataAnalysisContext.analysis_metadata)
  return _internal_analysis_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataAnalysisContext::_internal_mutable_analysis_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.analysis_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MetadataAnalysisContext::mutable_analysis_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.interpretation.MetadataAnalysisContext.analysis_metadata)
  return _internal_mutable_analysis_metadata();
}

// string performed_by = 7;
inline void MetadataAnalysisContext::clear_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.ClearToEmpty();
}
inline const std::string& MetadataAnalysisContext::performed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.performed_by)
  return _internal_performed_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataAnalysisContext::set_performed_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.performed_by)
}
inline std::string* MetadataAnalysisContext::mutable_performed_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_performed_by();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.performed_by)
  return _s;
}
inline const std::string& MetadataAnalysisContext::_internal_performed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.performed_by_.Get();
}
inline void MetadataAnalysisContext::_internal_set_performed_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(value, GetArena());
}
inline std::string* MetadataAnalysisContext::_internal_mutable_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.performed_by_.Mutable( GetArena());
}
inline std::string* MetadataAnalysisContext::release_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataAnalysisContext.performed_by)
  return _impl_.performed_by_.Release();
}
inline void MetadataAnalysisContext::set_allocated_performed_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.performed_by_.IsDefault()) {
    _impl_.performed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataAnalysisContext.performed_by)
}

// bool is_experimental = 8;
inline void MetadataAnalysisContext::clear_is_experimental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_experimental_ = false;
}
inline bool MetadataAnalysisContext::is_experimental() const {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.is_experimental)
  return _internal_is_experimental();
}
inline void MetadataAnalysisContext::set_is_experimental(bool value) {
  _internal_set_is_experimental(value);
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.is_experimental)
}
inline bool MetadataAnalysisContext::_internal_is_experimental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_experimental_;
}
inline void MetadataAnalysisContext::_internal_set_is_experimental(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_experimental_ = value;
}

// string report_reference = 9;
inline void MetadataAnalysisContext::clear_report_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_reference_.ClearToEmpty();
}
inline const std::string& MetadataAnalysisContext::report_reference() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.interpretation.MetadataAnalysisContext.report_reference)
  return _internal_report_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetadataAnalysisContext::set_report_reference(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.interpretation.MetadataAnalysisContext.report_reference)
}
inline std::string* MetadataAnalysisContext::mutable_report_reference() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_report_reference();
  // @@protoc_insertion_point(field_mutable:seigr.interpretation.MetadataAnalysisContext.report_reference)
  return _s;
}
inline const std::string& MetadataAnalysisContext::_internal_report_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.report_reference_.Get();
}
inline void MetadataAnalysisContext::_internal_set_report_reference(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_reference_.Set(value, GetArena());
}
inline std::string* MetadataAnalysisContext::_internal_mutable_report_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.report_reference_.Mutable( GetArena());
}
inline std::string* MetadataAnalysisContext::release_report_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.interpretation.MetadataAnalysisContext.report_reference)
  return _impl_.report_reference_.Release();
}
inline void MetadataAnalysisContext::set_allocated_report_reference(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_reference_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.report_reference_.IsDefault()) {
    _impl_.report_reference_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.interpretation.MetadataAnalysisContext.report_reference)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace interpretation
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::interpretation::InterpretationStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::interpretation::InterpretationStatus>() {
  return ::seigr::interpretation::InterpretationStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // interpretation_2eproto_2epb_2eh
