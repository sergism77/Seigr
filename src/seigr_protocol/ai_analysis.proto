syntax = "proto3";

package seigr.ai_analysis;

/**
 * AI Analysis Protocol for managing AI model lifecycle, execution, training, monitoring, 
 * and auditing within the Seigr ecosystem.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Defines various AI model types, categorizing them based on their primary functionality.
 */
enum ModelType {
    MODEL_TYPE_UNDEFINED = 0;       // Undefined model type.
    MODEL_ANOMALY_DETECTION = 1;    // Identifies anomalies in datasets.
    MODEL_DEMAND_PREDICTION = 2;    // Predicts resource demands.
    MODEL_USAGE_FORECASTING = 3;    // Forecasts resource usage trends.
    MODEL_RISK_ASSESSMENT = 4;      // Evaluates system or user risks.
    MODEL_REPLICATION_SCALING = 5;  // Dynamically scales resources based on demand.
    MODEL_CUSTOM = 6;               // User-defined or custom model.
    MODEL_OPTIMIZATION = 7;         // Optimizes processes or workflows.
}

/**
 * Represents the lifecycle status of AI models.
 */
enum ModelStatus {
    MODEL_STATUS_UNDEFINED = 0;     // Undefined status.
    MODEL_STATUS_TRAINING = 1;      // Model is undergoing training.
    MODEL_STATUS_TRAINED = 2;       // Model training completed successfully.
    MODEL_STATUS_DEPLOYED = 3;      // Model is actively deployed.
    MODEL_STATUS_INACTIVE = 4;      // Model is inactive or archived.
    MODEL_STATUS_FAILED = 5;        // Training or deployment failed.
    MODEL_STATUS_DECOMMISSIONED = 6; // Model has been retired.
}

/**
 * Specifies the outcomes of AI model predictions.
 */
enum PredictionOutcome {
    OUTCOME_UNDEFINED = 0;          // Undefined outcome.
    OUTCOME_ANOMALY_DETECTED = 1;   // An anomaly was detected.
    OUTCOME_NORMAL = 2;             // Prediction returned normal results.
    OUTCOME_HIGH_DEMAND = 3;        // Prediction indicates high demand.
    OUTCOME_LOW_DEMAND = 4;         // Prediction indicates low demand.
    OUTCOME_RISK_IDENTIFIED = 5;    // A risk was detected.
    OUTCOME_SCALING_RECOMMENDED = 6; // Scaling recommended based on analysis.
    OUTCOME_OPTIMIZATION_SUGGESTED = 7; // Suggested optimization action.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Configuration parameters for initializing or managing an AI model.
 */
message ModelConfig {
    string model_id = 1;                    // Unique identifier for the AI model.
    ModelType model_type = 2;               // Type/category of the AI model.
    string model_name = 3;                  // Human-readable name for the model.
    int32 version = 4;                      // Version of the model.
    map<string, double> parameters = 5;     // Hyperparameters for model tuning.
    bool enable_real_time_inference = 6;    // Enable real-time predictions.
    int32 retrain_interval_days = 7;        // Retraining interval in days.
    string created_by = 8;                  // User/system that created the model.
    string created_at = 9;                  // Creation timestamp.
    map<string, string> config_metadata = 10; // Additional metadata.
}

/**
 * Represents a request to execute or run an AI model.
 */
message ModelExecution {
    string execution_id = 1;                // Unique ID for this execution instance.
    string model_id = 2;                    // ID of the model being executed.
    ModelType model_type = 3;               // Type of the model.
    string initiated_by = 4;                // User/system initiating execution.
    repeated string data_sources = 5;       // List of data sources.
    bool async_execution = 6;               // Asynchronous execution flag.
    string execution_timestamp = 7;         // Timestamp when execution began.
    map<string, string> execution_metadata = 8; // Metadata for execution context.
    PredictionOutcome expected_outcome = 9; // Expected prediction outcome.
    string priority = 10;                   // Priority level (e.g., "HIGH", "LOW").
}

/**
 * Contains the result of a model execution or inference.
 */
message ModelExecutionResult {
    string execution_id = 1;                // ID matching the execution request.
    string model_id = 2;                    // Model ID.
    bool success = 3;                       // Whether the execution succeeded.
    PredictionOutcome outcome = 4;          // Prediction result.
    string result_message = 5;              // Descriptive outcome message.
    string timestamp = 6;                   // Result generation timestamp.
    map<string, string> result_metadata = 7; // Metadata for the result.
    double confidence_score = 8;            // Confidence score (0.0 - 1.0).
    string processed_by = 9;                // Identifies the processing node.
}

/**
 * Represents training data details used to retrain AI models.
 */
message TrainingData {
    string data_id = 1;                     // Unique identifier for training data.
    repeated string data_sources = 2;       // List of source URIs/IDs.
    map<string, string> data_metadata = 3;  // Metadata for dataset details.
    string collected_from = 4;              // Source description.
    string training_started_at = 5;         // Training start timestamp.
    string training_completed_at = 6;       // Training end timestamp.
    double dataset_size_mb = 7;             // Dataset size in megabytes.
    bool anonymized = 8;                    // Whether data is anonymized.
}

/**
 * Monitors real-time AI model performance and status.
 */
message ModelMonitoring {
    string model_id = 1;                    // ID of the monitored model.
    ModelStatus status = 2;                 // Current status.
    double accuracy_score = 3;              // Accuracy percentage.
    double average_latency_ms = 4;          // Prediction latency in ms.
    double resource_usage_cpu = 5;          // CPU usage percentage.
    double resource_usage_memory_mb = 6;    // Memory usage in MB.
    int32 predictions_per_minute = 7;       // Rate of predictions.
    string last_updated = 8;                // Last update timestamp.
    map<string, string> monitoring_metadata = 9; // Additional metadata.
}

/**
 * Represents an AI model audit event.
 */
message ModelAuditLog {
    string log_id = 1;                      // Audit log ID.
    string model_id = 2;                    // Model ID.
    string action = 3;                      // Action performed.
    string performed_by = 4;                // User/system performing the action.
    string timestamp = 5;                   // Action timestamp.
    map<string, string> log_metadata = 6;   // Metadata for the log.
    bool compliance_issue_flag = 7;         // Compliance violation detected.
    string corrective_action = 8;           // Corrective measures taken.
}

// ===========================
// SERVICE
// ===========================

/**
 * Service for managing AI models: lifecycle, execution, training, monitoring, and auditing.
 */
service AIAnalysisService {
    rpc CreateModel (ModelConfig) returns (ModelResponse);
    rpc ExecuteModel (ModelExecution) returns (ModelExecutionResult);
    rpc RetrainModel (TrainingData) returns (ModelResponse);
    rpc MonitorModel (ModelMonitoringRequest) returns (ModelMonitoring);
    rpc GetModelAuditLogs (ModelAuditRequest) returns (ModelAuditResponse);
}

/**
 * General model operation response.
 */
message ModelResponse {
    bool success = 1;
    string model_id = 2;
    string message = 3;
    map<string, string> response_metadata = 4;
}

message ModelMonitoringRequest {
    string model_id = 1;
}

message ModelAuditRequest {
    string model_id = 1;
    string time_range_start = 2;
    string time_range_end = 3;
    map<string, string> filters = 4;
}

message ModelAuditResponse {
    repeated ModelAuditLog logs = 1;
    string status = 2;
    string message = 3;
}
