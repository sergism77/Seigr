// Updated seed_dot_seigr.proto

syntax = "proto3";

package seigr.seed_dot_seigr;

// ===========================
// IMPORTS
// ===========================
import "segment_metadata.proto"; // seigr.segment_metadata.SegmentMetadata
import "lineage.proto";           // seigr.lineage.LineageEntry, seigr.lineage.TemporalLayer
import "pipeline.proto";          // seigr.pipeline.PipelineStage, seigr.pipeline.OperationLog
import "access_control.proto";    // seigr.access_control.AccessControlList
import "replication.proto";       // seigr.replication.ReplicationStatus
import "hashing.proto";           // seigr.hashing.HashData, seigr.hashing.VerificationStatus
import "google/protobuf/timestamp.proto";
import "seigr/machine_learning.proto";
import "cell_metadata.proto";      // For centralized CellMetadata

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the current state of a seed cluster.
 */
enum SeedClusterState {
    SEED_STATE_UNDEFINED = 0;   // Undefined state.
    SEED_ACTIVE = 1;            // Seed is active and operational.
    SEED_INACTIVE = 2;          // Seed is inactive or paused.
    SEED_ROLLBACK = 3;          // Seed is in rollback mode.
    SEED_DEPRECATED = 4;        // Seed is marked for deprecation.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents the primary structure for managing seed clusters in the Seigr network.
 */
message SeedDotSeigr {
    // Identification and Metadata
    string root_hash = 1;                                  // Unique root hash identifying the seed.
    string seed_hash = 2;                                  // Unique hash for this specific seed cluster.
    string creation_timestamp = 3;                         // ISO 8601 timestamp for seed creation.
    string version = 4;                                    // Seed version identifier.
    string description = 5;                                // Descriptive overview of the seed's purpose.

    // Core Segments and Connectivity
    repeated seigr.segment_metadata.SegmentMetadata segments = 6; // Metadata for segments within this seed.
    repeated string connected_clusters = 7;                // Linked clusters for network reference.

    // Lineage and Temporal Tracking
    repeated seigr.lineage.LineageEntry lineage_entries = 8; // History and modifications.
    repeated seigr.lineage.TemporalLayer temporal_layers = 9; // Historical states for rollback/recovery.

    // Access and Permissions
    seigr.access_control.AccessControlList acl = 10;       // Access control definitions.
    repeated string access_permissions = 11;              // Fine-grained permission rules.

    // Integrity and Verification
    seigr.hashing.HashData integrity_checksum_data = 12;   // Hash data for integrity validation.
    seigr.hashing.VerificationStatus integrity_status = 13; // Current verification status.
    string last_verified = 14;                             // Timestamp of the last integrity verification.
    repeated IntegrityVerification integrity_history = 15; // Historical integrity checks.

    // State and Status
    SeedClusterState state = 16;                           // Current state of the seed cluster.
    string state_updated_at = 17;                          // Timestamp when the state was last updated.

    // Processing Pipeline
    repeated seigr.pipeline.PipelineStage pipeline_stages = 18; // Stages of the processing pipeline.
    repeated seigr.pipeline.OperationLog operation_logs = 19;   // Logs of pipeline operations.

    // Replication
    seigr.replication.ReplicationStatus replication_status = 20; // Current replication status.

    // Compatibility and Migration
    repeated Compatibility compatibility_history = 21;     // Compatibility updates and migrations.

    // Custom Data and Metadata
    map<string, bytes> custom_data = 22;                  // Flexible storage for custom data.
    repeated seigr.cell_metadata.CellMetadata metadata = 23; // Comprehensive metadata for the seed.

    // Monitoring Metrics
    int64 last_ping = 24;                                 // Timestamp of the last network ping.
    map<string, string> monitoring_metrics = 25;          // Real-time monitoring metrics.
}

/**
 * Tracks integrity verification checks for seed segments.
 */
message IntegrityVerification {
    seigr.hashing.VerificationStatus status = 1;          // Status of the integrity check.
    string timestamp = 2;                                 // ISO 8601 timestamp of verification.
    string verifier_id = 3;                               // Identifier of the verifying system/entity.
    map<string, string> details = 4;                      // Additional verification details.
    string integrity_level = 5;                           // Verification level (e.g., "FULL", "QUICK").
    string error_message = 6;                             // Error details if verification failed.
    string integrity_context = 7;                         // Context or focus area for verification.
}

/**
 * Tracks compatibility checks and migration strategies for seed upgrades.
 */
message Compatibility {
    string target_version = 1;                           // Target version for compatibility.
    string migration_status = 2;                         // Status of migration (e.g., "COMPLETED").
    map<string, string> compatibility_notes = 3;         // Notes related to compatibility findings.
    string last_tested = 4;                              // Timestamp of the last compatibility check.
    repeated string affected_components = 5;             // Components impacted by compatibility issues.
    map<string, string> migration_metadata = 6;          // Context for migration.
    string migration_strategy = 7;                       // Strategy applied for compatibility resolution.
    bool adaptive_migration_enabled = 8;                 // Enable/disable adaptive migration adjustments.
}

/**
 * SeedState represents the foundational state of a .seigr seed.
 */
message SeedState {
    string seed_id = 1; // Unique identifier for the seed.
    GenesisState genesis_state = 2; // Initial adaptive state for the seed.
    repeated seigr.cell_metadata.CellMetadata metadata = 3; // Comprehensive metadata about the seed.
    google.protobuf.Timestamp created_at = 4; // Timestamp of seed creation.
    google.protobuf.Timestamp last_modified = 5; // Timestamp of last modification.
}

/**
 * SeedMetadata provides contextual information about a seed.
 */
message SeedMetadata {
    string key = 1; // Metadata key.
    string value = 2; // Metadata value.
    string description = 3; // Description of the metadata.
}

/**
 * SeedRouting defines routing-related metadata for a .seigr seed.
 */
message SeedRouting {
    string source_id = 1; // Source seed ID.
    string destination_id = 2; // Destination seed ID.
    string route_type = 3; // Type of route (e.g., direct, relay).
    map<string, string> attributes = 4; // Additional attributes of the route.
    repeated RouteUpdate dynamic_routes = 5; // Dynamic updates for routing.
}

/**
 * SeedSnapshot captures the state of a seed at a specific time.
 */
message SeedSnapshot {
    string snapshot_id = 1; // Unique identifier for the snapshot.
    SeedState state = 2; // The state of the seed.
    google.protobuf.Timestamp snapshot_time = 3; // Timestamp of the snapshot.
    string created_by = 4; // Identifier of the entity creating the snapshot.
}

/**
 * SeedFeedback handles feedback specific to seed-level operations.
 */
message SeedFeedback {
    string feedback_id = 1; // Unique identifier for feedback.
    string seed_id = 2; // Associated seed ID.
    Feedback feedback_details = 3; // Feedback details from the machine_learning.proto.
    string context = 4; // Context or scope of feedback (e.g., performance, alignment).
    google.protobuf.Timestamp timestamp = 5; // Timestamp of feedback creation.
}

// ===========================
// SERVICE DEFINITIONS
// ===========================

/**
 * Service defining lifecycle management operations for seed clusters.
 */
service SeedClusterService {
    rpc InitializeSeed (SeedInitializationRequest) returns (SeedInitializationResponse);
    rpc VerifySeedIntegrity (VerifySeedRequest) returns (VerifySeedResponse);
    rpc UpdateSeedMetadata (UpdateSeedMetadataRequest) returns (UpdateSeedMetadataResponse);
    rpc TriggerRollback (TriggerRollbackRequest) returns (TriggerRollbackResponse);
    rpc MonitorSeed (MonitorSeedRequest) returns (MonitorSeedResponse);
}

/**
 * Request to initialize a new seed.
 */
message SeedInitializationRequest {
    string root_hash = 1;                                // Root hash for the new seed.
    string creator_id = 2;                               // ID of the creator.
    map<string, string> initial_metadata = 3;            // Initial metadata for the seed.
}

/**
 * Response to seed initialization.
 */
message SeedInitializationResponse {
    bool success = 1;                                    // Success flag.
    string seed_hash = 2;                                // Generated seed hash.
    string message = 3;                                  // Details on the initialization process.
}

/**
 * Request to verify seed integrity.
 */
message VerifySeedRequest {
    string seed_hash = 1;                                // Hash of the seed cluster.
    bool perform_full_verification = 2;                 // Enable full verification.
}

/**
 * Response to seed integrity verification.
 */
message VerifySeedResponse {
    bool success = 1;                                    // Verification success flag.
    seigr.hashing.VerificationStatus status = 2;        // Resulting verification status.
    string message = 3;                                  // Verification summary message.
}

/**
 * Request to update seed metadata.
 */
message UpdateSeedMetadataRequest {
    string seed_hash = 1;
    map<string, string> updated_metadata = 2;
}

/**
 * Response to updating seed metadata.
 */
message UpdateSeedMetadataResponse {
    bool success = 1;
    string message = 2;
}

/**
 * Request to trigger a rollback for a seed.
 */
message TriggerRollbackRequest {
    string seed_hash = 1;
    string target_timestamp = 2;
}

/**
 * Response to triggering a rollback.
 */
message TriggerRollbackResponse {
    bool success = 1;
    string message = 2;
}

/**
 * Request to monitor a seed.
 */
message MonitorSeedRequest {
    string seed_hash = 1;
    map<string, string> monitoring_parameters = 2;
}

/**
 * Response containing monitoring details for a seed.
 */
message MonitorSeedResponse {
    bool success = 1;
    map<string, string> metrics = 2;
    string message = 3;
}
