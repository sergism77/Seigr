syntax = "proto3";

package seigr.network;

import "common.proto";               // For ThreatLevel, OperationalStatus, and shared enums.
import "network.proto";              // For protocol-specific enums and shared messages.

// ===========================
// ENUMS
// ===========================

/**
 * Enum defining dynamic roles within the Seigr network.
 */
enum HyphenRole {
    ROLE_UNDEFINED = 0;      // Undefined role.
    ROLE_USER_HYPHEN = 1;    // Standard user hyphen with protocol access.
    ROLE_NON_USER_HYPHEN = 2; // Background or utility hyphen.
    ROLE_MASTER = 3;         // Coordinating hyphen for sub-networks.
    ROLE_WORKER = 4;         // Active data processing hyphen.
    ROLE_GATEWAY = 5;        // Gateway hyphen for external interfacing.
    ROLE_ADAPTIVE = 6;       // Adaptive role based on network demand.
}

/**
 * Enum defining synchronization types.
 */
enum SyncType {
    SYNC_TYPE_UNDEFINED = 0;   // Undefined sync type.
    SYNC_TYPE_FULL = 1;        // Full data synchronization.
    SYNC_TYPE_INCREMENTAL = 2; // Incremental synchronization.
    SYNC_TYPE_REAL_TIME = 3;   // Real-time data streaming.
}

// ===========================
// CORE NETWORK MESSAGES
// ===========================

/**
 * Message representing a hyphen's operational details, status, and resource availability.
 */
message HyphenInfo {
    string hyphen_id = 1;                      // Unique identifier for the hyphen.
    HyphenRole role = 2;                       // Role of the hyphen in the network.
    NetworkProtocol primary_protocol = 3;      // Default protocol used by the hyphen.
    HyphenStatus status = 4;                   // Current operational status.
    string last_seen = 5;                      // Timestamp of last connectivity check.
    map<string, string> metadata = 6;          // Metadata for region, data center, etc.
    repeated NetworkProtocol supported_protocols = 7; // List of supported protocols.
    int64 current_load = 8;                    // Current load as a percentage.
    string last_updated = 9;                   // Last status update timestamp.
    int32 available_cpu_percent = 10;          // Available CPU capacity percentage.
    int32 available_memory_mb = 11;            // Available memory in MB.
    int32 available_bandwidth_mbps = 12;       // Available bandwidth in Mbps.
    bool supports_self_healing = 13;           // Flag for self-healing capabilities.
    string self_healing_status = 14;           // Status of self-healing attempts.
}

/**
 * Message for monitoring connectivity between hyphens, including adaptive re-routing.
 */
message ConnectivityStatus {
    string source_hyphen_id = 1;               // Source hyphen ID.
    string target_hyphen_id = 2;               // Target hyphen ID.
    NetworkProtocol protocol = 3;              // Protocol used for the connection.
    HyphenStatus connection_status = 4;        // Status of the connection.
    string protocol_specific_id = 5;           // Protocol-specific identifier.
    int32 latency_ms = 6;                      // Latency in milliseconds.
    string timestamp = 7;                      // Timestamp of connectivity check.
    string error_message = 8;                  // Error message if connectivity fails.
    map<string, string> connection_metadata = 9; // Detailed connection info.
    float packet_loss_rate = 10;               // Packet loss percentage.
    bool auto_re_routed = 11;                  // Indicates if re-routing was applied.
    string re_route_path = 12;                 // Alternate path if re-routing succeeded.
    string alternative_protocol = 13;          // Alternate protocol used if primary failed.
}

/**
 * Message for adaptive data synchronization across hyphens.
 */
message DataSyncEvent {
    string sync_id = 1;                        // Unique identifier for the sync event.
    string source_hyphen_id = 2;               // Source hyphen ID.
    string target_hyphen_id = 3;               // Target hyphen ID.
    NetworkProtocol protocol = 4;              // Protocol used for sync.
    string data_hash = 5;                      // Integrity hash for data verification.
    SyncType sync_type = 6;                    // Synchronization type.
    bool success = 7;                          // Success flag.
    string timestamp = 8;                      // Sync completion timestamp.
    map<string, string> metadata = 9;          // Sync-specific metadata.
    int64 data_size_bytes = 10;                // Size of synced data in bytes.
    int32 retries = 11;                        // Number of retry attempts.
    string adaptive_bandwidth_used = 12;       // Bandwidth dynamically allocated.
    string redundancy_applied = 13;            // Redundancy measures applied.
    float network_load_factor = 14;            // Network load factor considered during sync.
}

/**
 * Log entry for tracking protocol compatibility and version alignment.
 */
message ProtocolCompatibilityLog {
    string hyphen_id = 1;                      // Hyphen ID.
    string protocol_version = 2;               // Protocol version.
    repeated string compatible_versions = 3;   // List of compatible protocol versions.
    bool is_compatible = 4;                    // Compatibility status.
    string compatibility_check_timestamp = 5;  // Timestamp of compatibility check.
    string suggested_protocol_update = 6;      // Suggested update if incompatibility detected.
    map<string, string> compatibility_notes = 7; // Notes on compatibility status.
}

/**
 * Message for alerting network anomalies, including threat levels.
 */
message NetworkAnomalyAlert {
    string alert_id = 1;                       // Unique identifier for the alert.
    string detected_by = 2;                    // Hyphen/system ID that detected the anomaly.
    ThreatLevel threat_level = 3;              // Threat level classification.
    string description = 4;                    // Description of detected anomaly.
    string timestamp = 5;                      // Time of anomaly detection.
    string action_taken = 6;                   // Immediate action taken.
    string suggested_follow_up = 7;            // Recommended follow-up actions.
    map<string, string> metadata = 8;          // Additional alert context.
    string resolution_status = 9;              // Status of resolution.
    string resolution_timestamp = 10;          // Timestamp of resolution.
}

// ===========================
// WRAPPERS FOR SHARED MESSAGES
// ===========================

message NetworkOperationLogWrapper {
    NetworkOperationLog operation_log = 1; // Shared network operation log.
}

message NetworkStatusRequestWrapper {
    NetworkStatusRequest status_request = 1; // Shared status request.
}

message NetworkStatusResponseWrapper {
    NetworkStatusResponse status_response = 1; // Shared status response.
}

message NetworkHealthSummaryWrapper {
    NetworkHealthSummary health_summary = 1; // Shared network health summary.
}

message NetworkPerformanceSummaryWrapper {
    NetworkPerformanceSummary performance_summary = 1; // Shared performance summary.
}

// ===========================
// SERVICE DEFINITIONS
// ===========================

/**
 * Service for managing network operations, connectivity, and adaptive adjustments.
 */
service NetworkManagementService {
    rpc MonitorConnectivity (NetworkStatusRequest) returns (NetworkStatusResponse);
    rpc PerformDataSync (DataSyncEvent) returns (NetworkOperationLog);
    rpc ReportAnomaly (NetworkAnomalyAlert) returns (NetworkOperationLog);
    rpc CheckProtocolCompatibility (ProtocolCompatibilityLog) returns (ProtocolCompatibilityLog);
    rpc RetrieveNetworkPerformance (NetworkStatusRequest) returns (NetworkPerformanceSummary);
}
