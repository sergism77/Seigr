syntax = "proto3";

package seigr.common;

/**
 * Common Protocol Definitions
 * 
 * This file contains shared enumerations and messages that are reused across 
 * multiple Seigr modules. These definitions ensure consistency, clarity, and 
 * reusability in system-wide operations, monitoring, and communication.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing different threat levels detected in operations or resources.
 */
enum ThreatLevel {
    THREAT_LEVEL_UNDEFINED = 0;  // Undefined threat level.
    THREAT_LEVEL_LOW = 1;        // Low-level threat, minimal risk.
    THREAT_LEVEL_MODERATE = 2;   // Moderate threat, requires attention.
    THREAT_LEVEL_HIGH = 3;       // High-level threat, immediate response required.
    THREAT_LEVEL_CRITICAL = 4;   // Critical threat, escalation mandatory.
}

/**
 * Enum representing the operational status of a system, module, or resource.
 */
enum OperationalStatus {
    OPERATIONAL_STATUS_UNDEFINED = 0;       // Undefined operational status.
    OPERATIONAL_STATUS_OK = 1;              // Normal operation.
    OPERATIONAL_STATUS_WARNING = 2;         // Warning state, potential issue detected.
    OPERATIONAL_STATUS_ERROR = 3;           // Error state, functionality impacted.
    OPERATIONAL_STATUS_MAINTENANCE = 4;     // System under maintenance.
    OPERATIONAL_STATUS_DEGRADED = 5;        // Performance is degraded but operational.
    OPERATIONAL_STATUS_DISASTER_RECOVERY = 6; // State of disaster recovery mode.
}

/**
 * Enum representing priority levels for tasks, requests, or alerts.
 */
enum PriorityLevel {
    PRIORITY_LEVEL_UNDEFINED = 0; // Undefined priority.
    PRIORITY_LEVEL_LOW = 1;       // Low priority.
    PRIORITY_LEVEL_MEDIUM = 2;    // Medium priority.
    PRIORITY_LEVEL_HIGH = 3;      // High priority.
    PRIORITY_LEVEL_URGENT = 4;    // Urgent priority.
    PRIORITY_LEVEL_IMMEDIATE = 5; // Immediate action required.
}

/**
 * Enum representing the Quality of Service (QoS) levels in various workflows.
 */
enum QoSLevel {
    QOS_LEVEL_UNDEFINED = 0;  // Undefined QoS level.
    QOS_LEVEL_LOW = 1;        // Best effort, minimal guarantees.
    QOS_LEVEL_MEDIUM = 2;     // Limited guarantee, some packet loss allowed.
    QOS_LEVEL_HIGH = 3;       // High reliability and low latency.
    QOS_LEVEL_CRITICAL = 4;   // Real-time, maximum reliability and lowest latency.
}

/**
 * Enum representing standard data types across various modules.
 */
enum DataType {
    DATA_TYPE_UNDEFINED = 0; // Undefined data type.
    DATA_TYPE_TEXT = 1;      // Textual data.
    DATA_TYPE_IMAGE = 2;     // Image data.
    DATA_TYPE_VIDEO = 3;     // Video data.
    DATA_TYPE_AUDIO = 4;     // Audio data.
    DATA_TYPE_DOCUMENT = 5;  // Document files.
    DATA_TYPE_METADATA = 6;  // Metadata or contextual information.
    DATA_TYPE_BINARY = 7;    // Binary data streams.
    DATA_TYPE_STRUCTURED = 8; // Structured data like JSON or XML.
    DATA_TYPE_STREAM = 9;    // Live data streams.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Standardized metadata for extensible context sharing.
 */
message BasicMetadata {
    string key = 1;            // Metadata key identifier.
    string value = 2;          // Corresponding value.
    string type = 3;           // Type/category of metadata (e.g., "confidential").
    string security_tag = 4;   // Security classification (e.g., "public").
}

/**
 * Represents a standardized timestamp set for tracking lifecycle events.
 */
message Timestamp {
    string created_at = 1;     // Creation timestamp (ISO 8601 format).
    string updated_at = 2;     // Last updated timestamp.
    string accessed_at = 3;    // Last accessed timestamp.
    string deleted_at = 4;     // Deletion timestamp, if applicable.
    string timezone = 5;       // Timezone (e.g., "UTC").
    int32 precision_ms = 6;    // Precision in milliseconds.
}

/**
 * Standardized structure for operation responses across services.
 */
message StandardResponse {
    OperationalStatus status = 1;  // Operation status.
    string message = 2;            // Descriptive feedback or error message.
    map<string, string> metadata = 3; // Additional contextual metadata.
    string request_id = 4;         // Unique request identifier.
    ThreatLevel threat_level = 5;  // Threat level associated with the response.
}

/**
 * Log entry for detecting and recording threats across operations.
 */
message ThreatDetectionLog {
    ThreatLevel threat_level = 1;       // Severity level of the threat.
    string origin = 2;                  // Origin component (e.g., "security_module").
    string description = 3;             // Description of the detected threat.
    Timestamp detection_time = 4;       // Timestamp when threat was detected.
    map<string, string> metadata = 5;   // Additional threat context.
    string response_action = 6;         // Response taken (e.g., "quarantine").
    bool mitigated = 7;                 // Flag if threat was mitigated.
    Timestamp mitigation_time = 8;      // Timestamp of mitigation.
    string impact_scope = 9;            // Scope of the threat's impact.
}

/**
 * Request for checking the status of network hyphens.
 */
message NetworkStatusRequest {
    string requester_id = 1;
    repeated string hyphen_ids = 2;
    bool include_latency = 3;
    repeated string protocols = 4;
    map<string, string> options = 5;
}

/**
 * Response for network status checks.
 */
message NetworkStatusResponse {
    string requester_id = 1;
    repeated string hyphens = 2;
    repeated string connectivity = 3;
    map<string, string> response_metadata = 4;
}

/**
 * Summary of network health.
 */
message NetworkHealthSummary {
    int32 total_hyphens = 1;
    int32 active_hyphens = 2;
    float average_latency_ms = 3;
}

/**
 * Performance summary across network sessions.
 */
message NetworkPerformanceSummary {
    float average_latency = 1;
    int64 total_data_transferred = 2;
}
