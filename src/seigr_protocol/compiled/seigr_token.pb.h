// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: seigr_token.proto
// Protobuf C++ Version: 5.29.2

#ifndef seigr_5ftoken_2eproto_2epb_2eh
#define seigr_5ftoken_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cross_chain_operations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_seigr_5ftoken_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_seigr_5ftoken_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_seigr_5ftoken_2eproto;
namespace seigr {
namespace seigr_token {
class AdjustTokenCapRequest;
struct AdjustTokenCapRequestDefaultTypeInternal;
extern AdjustTokenCapRequestDefaultTypeInternal _AdjustTokenCapRequest_default_instance_;
class AdjustTokenCapResponse;
struct AdjustTokenCapResponseDefaultTypeInternal;
extern AdjustTokenCapResponseDefaultTypeInternal _AdjustTokenCapResponse_default_instance_;
class BurnTokenRequest;
struct BurnTokenRequestDefaultTypeInternal;
extern BurnTokenRequestDefaultTypeInternal _BurnTokenRequest_default_instance_;
class BurnTokenResponse;
struct BurnTokenResponseDefaultTypeInternal;
extern BurnTokenResponseDefaultTypeInternal _BurnTokenResponse_default_instance_;
class CheckTokenStatusRequest;
struct CheckTokenStatusRequestDefaultTypeInternal;
extern CheckTokenStatusRequestDefaultTypeInternal _CheckTokenStatusRequest_default_instance_;
class CheckTokenStatusResponse;
struct CheckTokenStatusResponseDefaultTypeInternal;
extern CheckTokenStatusResponseDefaultTypeInternal _CheckTokenStatusResponse_default_instance_;
class DistributeSurplusRequest;
struct DistributeSurplusRequestDefaultTypeInternal;
extern DistributeSurplusRequestDefaultTypeInternal _DistributeSurplusRequest_default_instance_;
class DistributeSurplusResponse;
struct DistributeSurplusResponseDefaultTypeInternal;
extern DistributeSurplusResponseDefaultTypeInternal _DistributeSurplusResponse_default_instance_;
class GetTransactionHistoryRequest;
struct GetTransactionHistoryRequestDefaultTypeInternal;
extern GetTransactionHistoryRequestDefaultTypeInternal _GetTransactionHistoryRequest_default_instance_;
class GetTransactionHistoryResponse;
struct GetTransactionHistoryResponseDefaultTypeInternal;
extern GetTransactionHistoryResponseDefaultTypeInternal _GetTransactionHistoryResponse_default_instance_;
class MintTokenRequest;
struct MintTokenRequestDefaultTypeInternal;
extern MintTokenRequestDefaultTypeInternal _MintTokenRequest_default_instance_;
class MintTokenResponse;
struct MintTokenResponseDefaultTypeInternal;
extern MintTokenResponseDefaultTypeInternal _MintTokenResponse_default_instance_;
class SeigrToken;
struct SeigrTokenDefaultTypeInternal;
extern SeigrTokenDefaultTypeInternal _SeigrToken_default_instance_;
class SeigrToken_MetadataEntry_DoNotUse;
struct SeigrToken_MetadataEntry_DoNotUseDefaultTypeInternal;
extern SeigrToken_MetadataEntry_DoNotUseDefaultTypeInternal _SeigrToken_MetadataEntry_DoNotUse_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransferTokenRequest;
struct TransferTokenRequestDefaultTypeInternal;
extern TransferTokenRequestDefaultTypeInternal _TransferTokenRequest_default_instance_;
class TransferTokenResponse;
struct TransferTokenResponseDefaultTypeInternal;
extern TransferTokenResponseDefaultTypeInternal _TransferTokenResponse_default_instance_;
}  // namespace seigr_token
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace seigr_token {
enum TokenStatus : int {
  TOKEN_STATUS_UNDEFINED = 0,
  TOKEN_STATUS_ACTIVE = 1,
  TOKEN_STATUS_CAPPED = 2,
  TOKEN_STATUS_LOCKED = 3,
  TOKEN_STATUS_BURNED = 4,
  TokenStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TokenStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TokenStatus_IsValid(int value);
extern const uint32_t TokenStatus_internal_data_[];
constexpr TokenStatus TokenStatus_MIN = static_cast<TokenStatus>(0);
constexpr TokenStatus TokenStatus_MAX = static_cast<TokenStatus>(4);
constexpr int TokenStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TokenStatus_descriptor();
template <typename T>
const std::string& TokenStatus_Name(T value) {
  static_assert(std::is_same<T, TokenStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TokenStatus_Name().");
  return TokenStatus_Name(static_cast<TokenStatus>(value));
}
template <>
inline const std::string& TokenStatus_Name(TokenStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TokenStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TokenStatus_Parse(absl::string_view name, TokenStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TokenStatus>(
      TokenStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TransferTokenResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.TransferTokenResponse) */ {
 public:
  inline TransferTokenResponse() : TransferTokenResponse(nullptr) {}
  ~TransferTokenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransferTokenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransferTokenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferTokenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferTokenResponse(const TransferTokenResponse& from) : TransferTokenResponse(nullptr, from) {}
  inline TransferTokenResponse(TransferTokenResponse&& from) noexcept
      : TransferTokenResponse(nullptr, std::move(from)) {}
  inline TransferTokenResponse& operator=(const TransferTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferTokenResponse& operator=(TransferTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferTokenResponse* internal_default_instance() {
    return reinterpret_cast<const TransferTokenResponse*>(
        &_TransferTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TransferTokenResponse& a, TransferTokenResponse& b) { a.Swap(&b); }
  inline void Swap(TransferTokenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferTokenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransferTokenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferTokenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferTokenResponse& from) { TransferTokenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransferTokenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.TransferTokenResponse"; }

 protected:
  explicit TransferTokenResponse(::google::protobuf::Arena* arena);
  TransferTokenResponse(::google::protobuf::Arena* arena, const TransferTokenResponse& from);
  TransferTokenResponse(::google::protobuf::Arena* arena, TransferTokenResponse&& from) noexcept
      : TransferTokenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.TransferTokenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferTokenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class TransferTokenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.TransferTokenRequest) */ {
 public:
  inline TransferTokenRequest() : TransferTokenRequest(nullptr) {}
  ~TransferTokenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransferTokenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransferTokenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferTokenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferTokenRequest(const TransferTokenRequest& from) : TransferTokenRequest(nullptr, from) {}
  inline TransferTokenRequest(TransferTokenRequest&& from) noexcept
      : TransferTokenRequest(nullptr, std::move(from)) {}
  inline TransferTokenRequest& operator=(const TransferTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferTokenRequest& operator=(TransferTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferTokenRequest* internal_default_instance() {
    return reinterpret_cast<const TransferTokenRequest*>(
        &_TransferTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TransferTokenRequest& a, TransferTokenRequest& b) { a.Swap(&b); }
  inline void Swap(TransferTokenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransferTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferTokenRequest& from) { TransferTokenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransferTokenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.TransferTokenRequest"; }

 protected:
  explicit TransferTokenRequest(::google::protobuf::Arena* arena);
  TransferTokenRequest(::google::protobuf::Arena* arena, const TransferTokenRequest& from);
  TransferTokenRequest(::google::protobuf::Arena* arena, TransferTokenRequest&& from) noexcept
      : TransferTokenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kReferenceIdFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string from_id = 1;
  void clear_from_id() ;
  const std::string& from_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_id(Arg_&& arg, Args_... args);
  std::string* mutable_from_id();
  PROTOBUF_NODISCARD std::string* release_from_id();
  void set_allocated_from_id(std::string* value);

  private:
  const std::string& _internal_from_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_id(
      const std::string& value);
  std::string* _internal_mutable_from_id();

  public:
  // string to_id = 2;
  void clear_to_id() ;
  const std::string& to_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_id(Arg_&& arg, Args_... args);
  std::string* mutable_to_id();
  PROTOBUF_NODISCARD std::string* release_to_id();
  void set_allocated_to_id(std::string* value);

  private:
  const std::string& _internal_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_id(
      const std::string& value);
  std::string* _internal_mutable_to_id();

  public:
  // string reference_id = 4;
  void clear_reference_id() ;
  const std::string& reference_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reference_id(Arg_&& arg, Args_... args);
  std::string* mutable_reference_id();
  PROTOBUF_NODISCARD std::string* release_reference_id();
  void set_allocated_reference_id(std::string* value);

  private:
  const std::string& _internal_reference_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_id(
      const std::string& value);
  std::string* _internal_mutable_reference_id();

  public:
  // uint64 amount = 3;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.TransferTokenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferTokenRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr from_id_;
    ::google::protobuf::internal::ArenaStringPtr to_id_;
    ::google::protobuf::internal::ArenaStringPtr reference_id_;
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class Transaction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transaction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transaction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transaction(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transaction(const Transaction& from) : Transaction(nullptr, from) {}
  inline Transaction(Transaction&& from) noexcept
      : Transaction(nullptr, std::move(from)) {}
  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
        &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Transaction& a, Transaction& b) { a.Swap(&b); }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transaction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transaction& from) { Transaction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transaction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.Transaction"; }

 protected:
  explicit Transaction(::google::protobuf::Arena* arena);
  Transaction(::google::protobuf::Arena* arena, const Transaction& from);
  Transaction(::google::protobuf::Arena* arena, Transaction&& from) noexcept
      : Transaction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromIdFieldNumber = 2,
    kToIdFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kTransactionIdFieldNumber = 1,
    kAmountFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // string from_id = 2;
  void clear_from_id() ;
  const std::string& from_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_id(Arg_&& arg, Args_... args);
  std::string* mutable_from_id();
  PROTOBUF_NODISCARD std::string* release_from_id();
  void set_allocated_from_id(std::string* value);

  private:
  const std::string& _internal_from_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_id(
      const std::string& value);
  std::string* _internal_mutable_from_id();

  public:
  // string to_id = 3;
  void clear_to_id() ;
  const std::string& to_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_id(Arg_&& arg, Args_... args);
  std::string* mutable_to_id();
  PROTOBUF_NODISCARD std::string* release_to_id();
  void set_allocated_to_id(std::string* value);

  private:
  const std::string& _internal_to_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_id(
      const std::string& value);
  std::string* _internal_mutable_to_id();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // uint64 transaction_id = 1;
  void clear_transaction_id() ;
  ::uint64_t transaction_id() const;
  void set_transaction_id(::uint64_t value);

  private:
  ::uint64_t _internal_transaction_id() const;
  void _internal_set_transaction_id(::uint64_t value);

  public:
  // uint64 amount = 4;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // .seigr.crosschain.TransactionType type = 6;
  void clear_type() ;
  ::seigr::crosschain::TransactionType type() const;
  void set_type(::seigr::crosschain::TransactionType value);

  private:
  ::seigr::crosschain::TransactionType _internal_type() const;
  void _internal_set_type(::seigr::crosschain::TransactionType value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.Transaction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transaction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr from_id_;
    ::google::protobuf::internal::ArenaStringPtr to_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::uint64_t transaction_id_;
    ::uint64_t amount_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class SeigrToken_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SeigrToken_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrToken_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SeigrToken_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SeigrToken_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SeigrToken_MetadataEntry_DoNotUse*>(
        &_SeigrToken_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_seigr_5ftoken_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MintTokenResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.MintTokenResponse) */ {
 public:
  inline MintTokenResponse() : MintTokenResponse(nullptr) {}
  ~MintTokenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MintTokenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MintTokenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MintTokenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MintTokenResponse(const MintTokenResponse& from) : MintTokenResponse(nullptr, from) {}
  inline MintTokenResponse(MintTokenResponse&& from) noexcept
      : MintTokenResponse(nullptr, std::move(from)) {}
  inline MintTokenResponse& operator=(const MintTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MintTokenResponse& operator=(MintTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MintTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MintTokenResponse* internal_default_instance() {
    return reinterpret_cast<const MintTokenResponse*>(
        &_MintTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MintTokenResponse& a, MintTokenResponse& b) { a.Swap(&b); }
  inline void Swap(MintTokenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MintTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MintTokenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MintTokenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MintTokenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MintTokenResponse& from) { MintTokenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MintTokenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.MintTokenResponse"; }

 protected:
  explicit MintTokenResponse(::google::protobuf::Arena* arena);
  MintTokenResponse(::google::protobuf::Arena* arena, const MintTokenResponse& from);
  MintTokenResponse(::google::protobuf::Arena* arena, MintTokenResponse&& from) noexcept
      : MintTokenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string token_id = 3;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.MintTokenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MintTokenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class MintTokenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.MintTokenRequest) */ {
 public:
  inline MintTokenRequest() : MintTokenRequest(nullptr) {}
  ~MintTokenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MintTokenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MintTokenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MintTokenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MintTokenRequest(const MintTokenRequest& from) : MintTokenRequest(nullptr, from) {}
  inline MintTokenRequest(MintTokenRequest&& from) noexcept
      : MintTokenRequest(nullptr, std::move(from)) {}
  inline MintTokenRequest& operator=(const MintTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MintTokenRequest& operator=(MintTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MintTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MintTokenRequest* internal_default_instance() {
    return reinterpret_cast<const MintTokenRequest*>(
        &_MintTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MintTokenRequest& a, MintTokenRequest& b) { a.Swap(&b); }
  inline void Swap(MintTokenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MintTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MintTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MintTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MintTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MintTokenRequest& from) { MintTokenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MintTokenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.MintTokenRequest"; }

 protected:
  explicit MintTokenRequest(::google::protobuf::Arena* arena);
  MintTokenRequest(::google::protobuf::Arena* arena, const MintTokenRequest& from);
  MintTokenRequest(::google::protobuf::Arena* arena, MintTokenRequest&& from) noexcept
      : MintTokenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOwnerIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string owner_id = 1;
  void clear_owner_id() ;
  const std::string& owner_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* value);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // uint64 amount = 2;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.MintTokenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MintTokenRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr owner_id_;
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.GetTransactionHistoryRequest) */ {
 public:
  inline GetTransactionHistoryRequest() : GetTransactionHistoryRequest(nullptr) {}
  ~GetTransactionHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTransactionHistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTransactionHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTransactionHistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTransactionHistoryRequest(const GetTransactionHistoryRequest& from) : GetTransactionHistoryRequest(nullptr, from) {}
  inline GetTransactionHistoryRequest(GetTransactionHistoryRequest&& from) noexcept
      : GetTransactionHistoryRequest(nullptr, std::move(from)) {}
  inline GetTransactionHistoryRequest& operator=(const GetTransactionHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionHistoryRequest& operator=(GetTransactionHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransactionHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransactionHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionHistoryRequest*>(
        &_GetTransactionHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(GetTransactionHistoryRequest& a, GetTransactionHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(GetTransactionHistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransactionHistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTransactionHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTransactionHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTransactionHistoryRequest& from) { GetTransactionHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTransactionHistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.GetTransactionHistoryRequest"; }

 protected:
  explicit GetTransactionHistoryRequest(::google::protobuf::Arena* arena);
  GetTransactionHistoryRequest(::google::protobuf::Arena* arena, const GetTransactionHistoryRequest& from);
  GetTransactionHistoryRequest(::google::protobuf::Arena* arena, GetTransactionHistoryRequest&& from) noexcept
      : GetTransactionHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenIdFieldNumber = 1,
    kLimitFieldNumber = 2,
    kIncludeLockedTransactionsFieldNumber = 3,
  };
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // uint32 limit = 2;
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // bool include_locked_transactions = 3;
  void clear_include_locked_transactions() ;
  bool include_locked_transactions() const;
  void set_include_locked_transactions(bool value);

  private:
  bool _internal_include_locked_transactions() const;
  void _internal_set_include_locked_transactions(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.GetTransactionHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTransactionHistoryRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::uint32_t limit_;
    bool include_locked_transactions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class DistributeSurplusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.DistributeSurplusResponse) */ {
 public:
  inline DistributeSurplusResponse() : DistributeSurplusResponse(nullptr) {}
  ~DistributeSurplusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DistributeSurplusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DistributeSurplusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributeSurplusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributeSurplusResponse(const DistributeSurplusResponse& from) : DistributeSurplusResponse(nullptr, from) {}
  inline DistributeSurplusResponse(DistributeSurplusResponse&& from) noexcept
      : DistributeSurplusResponse(nullptr, std::move(from)) {}
  inline DistributeSurplusResponse& operator=(const DistributeSurplusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributeSurplusResponse& operator=(DistributeSurplusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributeSurplusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributeSurplusResponse* internal_default_instance() {
    return reinterpret_cast<const DistributeSurplusResponse*>(
        &_DistributeSurplusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(DistributeSurplusResponse& a, DistributeSurplusResponse& b) { a.Swap(&b); }
  inline void Swap(DistributeSurplusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributeSurplusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributeSurplusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DistributeSurplusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributeSurplusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributeSurplusResponse& from) { DistributeSurplusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DistributeSurplusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.DistributeSurplusResponse"; }

 protected:
  explicit DistributeSurplusResponse(::google::protobuf::Arena* arena);
  DistributeSurplusResponse(::google::protobuf::Arena* arena, const DistributeSurplusResponse& from);
  DistributeSurplusResponse(::google::protobuf::Arena* arena, DistributeSurplusResponse&& from) noexcept
      : DistributeSurplusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 3,
    kDistributedAmountFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint64 distributed_amount = 2;
  void clear_distributed_amount() ;
  ::uint64_t distributed_amount() const;
  void set_distributed_amount(::uint64_t value);

  private:
  ::uint64_t _internal_distributed_amount() const;
  void _internal_set_distributed_amount(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.DistributeSurplusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributeSurplusResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint64_t distributed_amount_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class DistributeSurplusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.DistributeSurplusRequest) */ {
 public:
  inline DistributeSurplusRequest() : DistributeSurplusRequest(nullptr) {}
  ~DistributeSurplusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DistributeSurplusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DistributeSurplusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributeSurplusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributeSurplusRequest(const DistributeSurplusRequest& from) : DistributeSurplusRequest(nullptr, from) {}
  inline DistributeSurplusRequest(DistributeSurplusRequest&& from) noexcept
      : DistributeSurplusRequest(nullptr, std::move(from)) {}
  inline DistributeSurplusRequest& operator=(const DistributeSurplusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributeSurplusRequest& operator=(DistributeSurplusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributeSurplusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributeSurplusRequest* internal_default_instance() {
    return reinterpret_cast<const DistributeSurplusRequest*>(
        &_DistributeSurplusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(DistributeSurplusRequest& a, DistributeSurplusRequest& b) { a.Swap(&b); }
  inline void Swap(DistributeSurplusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributeSurplusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributeSurplusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DistributeSurplusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributeSurplusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributeSurplusRequest& from) { DistributeSurplusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DistributeSurplusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.DistributeSurplusRequest"; }

 protected:
  explicit DistributeSurplusRequest(::google::protobuf::Arena* arena);
  DistributeSurplusRequest(::google::protobuf::Arena* arena, const DistributeSurplusRequest& from);
  DistributeSurplusRequest(::google::protobuf::Arena* arena, DistributeSurplusRequest&& from) noexcept
      : DistributeSurplusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenIdFieldNumber = 1,
    kDistributeAmountFieldNumber = 2,
  };
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // uint64 distribute_amount = 2;
  void clear_distribute_amount() ;
  ::uint64_t distribute_amount() const;
  void set_distribute_amount(::uint64_t value);

  private:
  ::uint64_t _internal_distribute_amount() const;
  void _internal_set_distribute_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.DistributeSurplusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributeSurplusRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::uint64_t distribute_amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class CheckTokenStatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.CheckTokenStatusResponse) */ {
 public:
  inline CheckTokenStatusResponse() : CheckTokenStatusResponse(nullptr) {}
  ~CheckTokenStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CheckTokenStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CheckTokenStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckTokenStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckTokenStatusResponse(const CheckTokenStatusResponse& from) : CheckTokenStatusResponse(nullptr, from) {}
  inline CheckTokenStatusResponse(CheckTokenStatusResponse&& from) noexcept
      : CheckTokenStatusResponse(nullptr, std::move(from)) {}
  inline CheckTokenStatusResponse& operator=(const CheckTokenStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTokenStatusResponse& operator=(CheckTokenStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckTokenStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckTokenStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CheckTokenStatusResponse*>(
        &_CheckTokenStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CheckTokenStatusResponse& a, CheckTokenStatusResponse& b) { a.Swap(&b); }
  inline void Swap(CheckTokenStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTokenStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckTokenStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CheckTokenStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckTokenStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckTokenStatusResponse& from) { CheckTokenStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CheckTokenStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.CheckTokenStatusResponse"; }

 protected:
  explicit CheckTokenStatusResponse(::google::protobuf::Arena* arena);
  CheckTokenStatusResponse(::google::protobuf::Arena* arena, const CheckTokenStatusResponse& from);
  CheckTokenStatusResponse(::google::protobuf::Arena* arena, CheckTokenStatusResponse&& from) noexcept
      : CheckTokenStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBalanceFieldNumber = 2,
    kStatusFieldNumber = 1,
    kIsCappedFieldNumber = 4,
    kMaxCapFieldNumber = 3,
    kSurplusAmountFieldNumber = 5,
  };
  // uint64 balance = 2;
  void clear_balance() ;
  ::uint64_t balance() const;
  void set_balance(::uint64_t value);

  private:
  ::uint64_t _internal_balance() const;
  void _internal_set_balance(::uint64_t value);

  public:
  // .seigr.seigr_token.TokenStatus status = 1;
  void clear_status() ;
  ::seigr::seigr_token::TokenStatus status() const;
  void set_status(::seigr::seigr_token::TokenStatus value);

  private:
  ::seigr::seigr_token::TokenStatus _internal_status() const;
  void _internal_set_status(::seigr::seigr_token::TokenStatus value);

  public:
  // bool is_capped = 4;
  void clear_is_capped() ;
  bool is_capped() const;
  void set_is_capped(bool value);

  private:
  bool _internal_is_capped() const;
  void _internal_set_is_capped(bool value);

  public:
  // uint64 max_cap = 3;
  void clear_max_cap() ;
  ::uint64_t max_cap() const;
  void set_max_cap(::uint64_t value);

  private:
  ::uint64_t _internal_max_cap() const;
  void _internal_set_max_cap(::uint64_t value);

  public:
  // uint64 surplus_amount = 5;
  void clear_surplus_amount() ;
  ::uint64_t surplus_amount() const;
  void set_surplus_amount(::uint64_t value);

  private:
  ::uint64_t _internal_surplus_amount() const;
  void _internal_set_surplus_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.CheckTokenStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CheckTokenStatusResponse& from_msg);
    ::uint64_t balance_;
    int status_;
    bool is_capped_;
    ::uint64_t max_cap_;
    ::uint64_t surplus_amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class CheckTokenStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.CheckTokenStatusRequest) */ {
 public:
  inline CheckTokenStatusRequest() : CheckTokenStatusRequest(nullptr) {}
  ~CheckTokenStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CheckTokenStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CheckTokenStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckTokenStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckTokenStatusRequest(const CheckTokenStatusRequest& from) : CheckTokenStatusRequest(nullptr, from) {}
  inline CheckTokenStatusRequest(CheckTokenStatusRequest&& from) noexcept
      : CheckTokenStatusRequest(nullptr, std::move(from)) {}
  inline CheckTokenStatusRequest& operator=(const CheckTokenStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTokenStatusRequest& operator=(CheckTokenStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckTokenStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckTokenStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CheckTokenStatusRequest*>(
        &_CheckTokenStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CheckTokenStatusRequest& a, CheckTokenStatusRequest& b) { a.Swap(&b); }
  inline void Swap(CheckTokenStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTokenStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckTokenStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CheckTokenStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckTokenStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckTokenStatusRequest& from) { CheckTokenStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CheckTokenStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.CheckTokenStatusRequest"; }

 protected:
  explicit CheckTokenStatusRequest(::google::protobuf::Arena* arena);
  CheckTokenStatusRequest(::google::protobuf::Arena* arena, const CheckTokenStatusRequest& from);
  CheckTokenStatusRequest(::google::protobuf::Arena* arena, CheckTokenStatusRequest&& from) noexcept
      : CheckTokenStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.CheckTokenStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CheckTokenStatusRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class BurnTokenResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.BurnTokenResponse) */ {
 public:
  inline BurnTokenResponse() : BurnTokenResponse(nullptr) {}
  ~BurnTokenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BurnTokenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BurnTokenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BurnTokenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BurnTokenResponse(const BurnTokenResponse& from) : BurnTokenResponse(nullptr, from) {}
  inline BurnTokenResponse(BurnTokenResponse&& from) noexcept
      : BurnTokenResponse(nullptr, std::move(from)) {}
  inline BurnTokenResponse& operator=(const BurnTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurnTokenResponse& operator=(BurnTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BurnTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurnTokenResponse* internal_default_instance() {
    return reinterpret_cast<const BurnTokenResponse*>(
        &_BurnTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(BurnTokenResponse& a, BurnTokenResponse& b) { a.Swap(&b); }
  inline void Swap(BurnTokenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurnTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BurnTokenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BurnTokenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BurnTokenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BurnTokenResponse& from) { BurnTokenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BurnTokenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.BurnTokenResponse"; }

 protected:
  explicit BurnTokenResponse(::google::protobuf::Arena* arena);
  BurnTokenResponse(::google::protobuf::Arena* arena, const BurnTokenResponse& from);
  BurnTokenResponse(::google::protobuf::Arena* arena, BurnTokenResponse&& from) noexcept
      : BurnTokenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.BurnTokenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BurnTokenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class BurnTokenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.BurnTokenRequest) */ {
 public:
  inline BurnTokenRequest() : BurnTokenRequest(nullptr) {}
  ~BurnTokenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BurnTokenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BurnTokenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BurnTokenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BurnTokenRequest(const BurnTokenRequest& from) : BurnTokenRequest(nullptr, from) {}
  inline BurnTokenRequest(BurnTokenRequest&& from) noexcept
      : BurnTokenRequest(nullptr, std::move(from)) {}
  inline BurnTokenRequest& operator=(const BurnTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurnTokenRequest& operator=(BurnTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BurnTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurnTokenRequest* internal_default_instance() {
    return reinterpret_cast<const BurnTokenRequest*>(
        &_BurnTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(BurnTokenRequest& a, BurnTokenRequest& b) { a.Swap(&b); }
  inline void Swap(BurnTokenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurnTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BurnTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BurnTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BurnTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BurnTokenRequest& from) { BurnTokenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BurnTokenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.BurnTokenRequest"; }

 protected:
  explicit BurnTokenRequest(::google::protobuf::Arena* arena);
  BurnTokenRequest(::google::protobuf::Arena* arena, const BurnTokenRequest& from);
  BurnTokenRequest(::google::protobuf::Arena* arena, BurnTokenRequest&& from) noexcept
      : BurnTokenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.BurnTokenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BurnTokenRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class AdjustTokenCapResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.AdjustTokenCapResponse) */ {
 public:
  inline AdjustTokenCapResponse() : AdjustTokenCapResponse(nullptr) {}
  ~AdjustTokenCapResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AdjustTokenCapResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AdjustTokenCapResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AdjustTokenCapResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AdjustTokenCapResponse(const AdjustTokenCapResponse& from) : AdjustTokenCapResponse(nullptr, from) {}
  inline AdjustTokenCapResponse(AdjustTokenCapResponse&& from) noexcept
      : AdjustTokenCapResponse(nullptr, std::move(from)) {}
  inline AdjustTokenCapResponse& operator=(const AdjustTokenCapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdjustTokenCapResponse& operator=(AdjustTokenCapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdjustTokenCapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdjustTokenCapResponse* internal_default_instance() {
    return reinterpret_cast<const AdjustTokenCapResponse*>(
        &_AdjustTokenCapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(AdjustTokenCapResponse& a, AdjustTokenCapResponse& b) { a.Swap(&b); }
  inline void Swap(AdjustTokenCapResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdjustTokenCapResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdjustTokenCapResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AdjustTokenCapResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AdjustTokenCapResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AdjustTokenCapResponse& from) { AdjustTokenCapResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AdjustTokenCapResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.AdjustTokenCapResponse"; }

 protected:
  explicit AdjustTokenCapResponse(::google::protobuf::Arena* arena);
  AdjustTokenCapResponse(::google::protobuf::Arena* arena, const AdjustTokenCapResponse& from);
  AdjustTokenCapResponse(::google::protobuf::Arena* arena, AdjustTokenCapResponse&& from) noexcept
      : AdjustTokenCapResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kAdjustedCapFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint64 adjusted_cap = 3;
  void clear_adjusted_cap() ;
  ::uint64_t adjusted_cap() const;
  void set_adjusted_cap(::uint64_t value);

  private:
  ::uint64_t _internal_adjusted_cap() const;
  void _internal_set_adjusted_cap(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.AdjustTokenCapResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AdjustTokenCapResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint64_t adjusted_cap_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class AdjustTokenCapRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.AdjustTokenCapRequest) */ {
 public:
  inline AdjustTokenCapRequest() : AdjustTokenCapRequest(nullptr) {}
  ~AdjustTokenCapRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AdjustTokenCapRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AdjustTokenCapRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AdjustTokenCapRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AdjustTokenCapRequest(const AdjustTokenCapRequest& from) : AdjustTokenCapRequest(nullptr, from) {}
  inline AdjustTokenCapRequest(AdjustTokenCapRequest&& from) noexcept
      : AdjustTokenCapRequest(nullptr, std::move(from)) {}
  inline AdjustTokenCapRequest& operator=(const AdjustTokenCapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdjustTokenCapRequest& operator=(AdjustTokenCapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdjustTokenCapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdjustTokenCapRequest* internal_default_instance() {
    return reinterpret_cast<const AdjustTokenCapRequest*>(
        &_AdjustTokenCapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AdjustTokenCapRequest& a, AdjustTokenCapRequest& b) { a.Swap(&b); }
  inline void Swap(AdjustTokenCapRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdjustTokenCapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdjustTokenCapRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AdjustTokenCapRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AdjustTokenCapRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AdjustTokenCapRequest& from) { AdjustTokenCapRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AdjustTokenCapRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.AdjustTokenCapRequest"; }

 protected:
  explicit AdjustTokenCapRequest(::google::protobuf::Arena* arena);
  AdjustTokenCapRequest(::google::protobuf::Arena* arena, const AdjustTokenCapRequest& from);
  AdjustTokenCapRequest(::google::protobuf::Arena* arena, AdjustTokenCapRequest&& from) noexcept
      : AdjustTokenCapRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenIdFieldNumber = 1,
    kNewCapFieldNumber = 2,
  };
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // uint64 new_cap = 2;
  void clear_new_cap() ;
  ::uint64_t new_cap() const;
  void set_new_cap(::uint64_t value);

  private:
  ::uint64_t _internal_new_cap() const;
  void _internal_set_new_cap(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.AdjustTokenCapRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AdjustTokenCapRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::uint64_t new_cap_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class SeigrToken final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.SeigrToken) */ {
 public:
  inline SeigrToken() : SeigrToken(nullptr) {}
  ~SeigrToken() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SeigrToken* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SeigrToken));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrToken(
      ::google::protobuf::internal::ConstantInitialized);

  inline SeigrToken(const SeigrToken& from) : SeigrToken(nullptr, from) {}
  inline SeigrToken(SeigrToken&& from) noexcept
      : SeigrToken(nullptr, std::move(from)) {}
  inline SeigrToken& operator=(const SeigrToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeigrToken& operator=(SeigrToken&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeigrToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeigrToken* internal_default_instance() {
    return reinterpret_cast<const SeigrToken*>(
        &_SeigrToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SeigrToken& a, SeigrToken& b) { a.Swap(&b); }
  inline void Swap(SeigrToken* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeigrToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeigrToken* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SeigrToken>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeigrToken& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SeigrToken& from) { SeigrToken::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SeigrToken* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.SeigrToken"; }

 protected:
  explicit SeigrToken(::google::protobuf::Arena* arena);
  SeigrToken(::google::protobuf::Arena* arena, const SeigrToken& from);
  SeigrToken(::google::protobuf::Arena* arena, SeigrToken&& from) noexcept
      : SeigrToken(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kAuthorizedPoliciesFieldNumber = 11,
    kTokenIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kCreationDateFieldNumber = 7,
    kBalanceFieldNumber = 3,
    kMaxCapFieldNumber = 5,
    kCapThresholdFieldNumber = 6,
    kStatusFieldNumber = 4,
    kEcoFriendlyFlagFieldNumber = 9,
    kRewardAccumulationFieldNumber = 10,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string authorized_policies = 11;
  int authorized_policies_size() const;
  private:
  int _internal_authorized_policies_size() const;

  public:
  void clear_authorized_policies() ;
  const std::string& authorized_policies(int index) const;
  std::string* mutable_authorized_policies(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_policies(int index, Arg_&& value, Args_... args);
  std::string* add_authorized_policies();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_authorized_policies(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& authorized_policies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_authorized_policies();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_authorized_policies() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_authorized_policies();

  public:
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // string owner_id = 2;
  void clear_owner_id() ;
  const std::string& owner_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* value);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // string creation_date = 7;
  void clear_creation_date() ;
  const std::string& creation_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creation_date(Arg_&& arg, Args_... args);
  std::string* mutable_creation_date();
  PROTOBUF_NODISCARD std::string* release_creation_date();
  void set_allocated_creation_date(std::string* value);

  private:
  const std::string& _internal_creation_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_date(
      const std::string& value);
  std::string* _internal_mutable_creation_date();

  public:
  // uint64 balance = 3;
  void clear_balance() ;
  ::uint64_t balance() const;
  void set_balance(::uint64_t value);

  private:
  ::uint64_t _internal_balance() const;
  void _internal_set_balance(::uint64_t value);

  public:
  // uint64 max_cap = 5;
  void clear_max_cap() ;
  ::uint64_t max_cap() const;
  void set_max_cap(::uint64_t value);

  private:
  ::uint64_t _internal_max_cap() const;
  void _internal_set_max_cap(::uint64_t value);

  public:
  // uint64 cap_threshold = 6;
  void clear_cap_threshold() ;
  ::uint64_t cap_threshold() const;
  void set_cap_threshold(::uint64_t value);

  private:
  ::uint64_t _internal_cap_threshold() const;
  void _internal_set_cap_threshold(::uint64_t value);

  public:
  // .seigr.seigr_token.TokenStatus status = 4;
  void clear_status() ;
  ::seigr::seigr_token::TokenStatus status() const;
  void set_status(::seigr::seigr_token::TokenStatus value);

  private:
  ::seigr::seigr_token::TokenStatus _internal_status() const;
  void _internal_set_status(::seigr::seigr_token::TokenStatus value);

  public:
  // bool eco_friendly_flag = 9;
  void clear_eco_friendly_flag() ;
  bool eco_friendly_flag() const;
  void set_eco_friendly_flag(bool value);

  private:
  bool _internal_eco_friendly_flag() const;
  void _internal_set_eco_friendly_flag(bool value);

  public:
  // uint64 reward_accumulation = 10;
  void clear_reward_accumulation() ;
  ::uint64_t reward_accumulation() const;
  void set_reward_accumulation(::uint64_t value);

  private:
  ::uint64_t _internal_reward_accumulation() const;
  void _internal_set_reward_accumulation(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.SeigrToken)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SeigrToken& from_msg);
    ::google::protobuf::internal::MapField<SeigrToken_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> authorized_policies_;
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::google::protobuf::internal::ArenaStringPtr owner_id_;
    ::google::protobuf::internal::ArenaStringPtr creation_date_;
    ::uint64_t balance_;
    ::uint64_t max_cap_;
    ::uint64_t cap_threshold_;
    int status_;
    bool eco_friendly_flag_;
    ::uint64_t reward_accumulation_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.seigr_token.GetTransactionHistoryResponse) */ {
 public:
  inline GetTransactionHistoryResponse() : GetTransactionHistoryResponse(nullptr) {}
  ~GetTransactionHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTransactionHistoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTransactionHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTransactionHistoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTransactionHistoryResponse(const GetTransactionHistoryResponse& from) : GetTransactionHistoryResponse(nullptr, from) {}
  inline GetTransactionHistoryResponse(GetTransactionHistoryResponse&& from) noexcept
      : GetTransactionHistoryResponse(nullptr, std::move(from)) {}
  inline GetTransactionHistoryResponse& operator=(const GetTransactionHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionHistoryResponse& operator=(GetTransactionHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransactionHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransactionHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransactionHistoryResponse*>(
        &_GetTransactionHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(GetTransactionHistoryResponse& a, GetTransactionHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(GetTransactionHistoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransactionHistoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTransactionHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTransactionHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTransactionHistoryResponse& from) { GetTransactionHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTransactionHistoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.seigr_token.GetTransactionHistoryResponse"; }

 protected:
  explicit GetTransactionHistoryResponse(::google::protobuf::Arena* arena);
  GetTransactionHistoryResponse(::google::protobuf::Arena* arena, const GetTransactionHistoryResponse& from);
  GetTransactionHistoryResponse(::google::protobuf::Arena* arena, GetTransactionHistoryResponse&& from) noexcept
      : GetTransactionHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransactionsFieldNumber = 2,
    kTokenIdFieldNumber = 1,
  };
  // repeated .seigr.seigr_token.Transaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;

  public:
  void clear_transactions() ;
  ::seigr::seigr_token::Transaction* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>* mutable_transactions();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>& _internal_transactions() const;
  ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>* _internal_mutable_transactions();
  public:
  const ::seigr::seigr_token::Transaction& transactions(int index) const;
  ::seigr::seigr_token::Transaction* add_transactions();
  const ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>& transactions() const;
  // string token_id = 1;
  void clear_token_id() ;
  const std::string& token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_token_id();
  PROTOBUF_NODISCARD std::string* release_token_id();
  void set_allocated_token_id(std::string* value);

  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(
      const std::string& value);
  std::string* _internal_mutable_token_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.seigr_token.GetTransactionHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTransactionHistoryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::seigr_token::Transaction > transactions_;
    ::google::protobuf::internal::ArenaStringPtr token_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_seigr_5ftoken_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeigrToken

// string token_id = 1;
inline void SeigrToken::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& SeigrToken::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrToken::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.token_id)
}
inline std::string* SeigrToken::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.SeigrToken.token_id)
  return _s;
}
inline const std::string& SeigrToken::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void SeigrToken::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* SeigrToken::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* SeigrToken::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.SeigrToken.token_id)
  return _impl_.token_id_.Release();
}
inline void SeigrToken::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.SeigrToken.token_id)
}

// string owner_id = 2;
inline void SeigrToken::clear_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& SeigrToken::owner_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrToken::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.owner_id)
}
inline std::string* SeigrToken::mutable_owner_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.SeigrToken.owner_id)
  return _s;
}
inline const std::string& SeigrToken::_internal_owner_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_id_.Get();
}
inline void SeigrToken::_internal_set_owner_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(value, GetArena());
}
inline std::string* SeigrToken::_internal_mutable_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_id_.Mutable( GetArena());
}
inline std::string* SeigrToken::release_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.SeigrToken.owner_id)
  return _impl_.owner_id_.Release();
}
inline void SeigrToken::set_allocated_owner_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.SeigrToken.owner_id)
}

// uint64 balance = 3;
inline void SeigrToken::clear_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = ::uint64_t{0u};
}
inline ::uint64_t SeigrToken::balance() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.balance)
  return _internal_balance();
}
inline void SeigrToken::set_balance(::uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.balance)
}
inline ::uint64_t SeigrToken::_internal_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.balance_;
}
inline void SeigrToken::_internal_set_balance(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = value;
}

// .seigr.seigr_token.TokenStatus status = 4;
inline void SeigrToken::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::seigr_token::TokenStatus SeigrToken::status() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.status)
  return _internal_status();
}
inline void SeigrToken::set_status(::seigr::seigr_token::TokenStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.status)
}
inline ::seigr::seigr_token::TokenStatus SeigrToken::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::seigr_token::TokenStatus>(_impl_.status_);
}
inline void SeigrToken::_internal_set_status(::seigr::seigr_token::TokenStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// uint64 max_cap = 5;
inline void SeigrToken::clear_max_cap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_cap_ = ::uint64_t{0u};
}
inline ::uint64_t SeigrToken::max_cap() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.max_cap)
  return _internal_max_cap();
}
inline void SeigrToken::set_max_cap(::uint64_t value) {
  _internal_set_max_cap(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.max_cap)
}
inline ::uint64_t SeigrToken::_internal_max_cap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_cap_;
}
inline void SeigrToken::_internal_set_max_cap(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_cap_ = value;
}

// uint64 cap_threshold = 6;
inline void SeigrToken::clear_cap_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cap_threshold_ = ::uint64_t{0u};
}
inline ::uint64_t SeigrToken::cap_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.cap_threshold)
  return _internal_cap_threshold();
}
inline void SeigrToken::set_cap_threshold(::uint64_t value) {
  _internal_set_cap_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.cap_threshold)
}
inline ::uint64_t SeigrToken::_internal_cap_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cap_threshold_;
}
inline void SeigrToken::_internal_set_cap_threshold(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cap_threshold_ = value;
}

// string creation_date = 7;
inline void SeigrToken::clear_creation_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_date_.ClearToEmpty();
}
inline const std::string& SeigrToken::creation_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.creation_date)
  return _internal_creation_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrToken::set_creation_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.creation_date)
}
inline std::string* SeigrToken::mutable_creation_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creation_date();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.SeigrToken.creation_date)
  return _s;
}
inline const std::string& SeigrToken::_internal_creation_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_date_.Get();
}
inline void SeigrToken::_internal_set_creation_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_date_.Set(value, GetArena());
}
inline std::string* SeigrToken::_internal_mutable_creation_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creation_date_.Mutable( GetArena());
}
inline std::string* SeigrToken::release_creation_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.SeigrToken.creation_date)
  return _impl_.creation_date_.Release();
}
inline void SeigrToken::set_allocated_creation_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creation_date_.IsDefault()) {
    _impl_.creation_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.SeigrToken.creation_date)
}

// map<string, string> metadata = 8;
inline int SeigrToken::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int SeigrToken::metadata_size() const {
  return _internal_metadata_size();
}
inline void SeigrToken::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrToken::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrToken::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.seigr_token.SeigrToken.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrToken::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrToken::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.seigr_token.SeigrToken.metadata)
  return _internal_mutable_metadata();
}

// bool eco_friendly_flag = 9;
inline void SeigrToken::clear_eco_friendly_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_flag_ = false;
}
inline bool SeigrToken::eco_friendly_flag() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.eco_friendly_flag)
  return _internal_eco_friendly_flag();
}
inline void SeigrToken::set_eco_friendly_flag(bool value) {
  _internal_set_eco_friendly_flag(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.eco_friendly_flag)
}
inline bool SeigrToken::_internal_eco_friendly_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_friendly_flag_;
}
inline void SeigrToken::_internal_set_eco_friendly_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_flag_ = value;
}

// uint64 reward_accumulation = 10;
inline void SeigrToken::clear_reward_accumulation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_accumulation_ = ::uint64_t{0u};
}
inline ::uint64_t SeigrToken::reward_accumulation() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.reward_accumulation)
  return _internal_reward_accumulation();
}
inline void SeigrToken::set_reward_accumulation(::uint64_t value) {
  _internal_set_reward_accumulation(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.reward_accumulation)
}
inline ::uint64_t SeigrToken::_internal_reward_accumulation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_accumulation_;
}
inline void SeigrToken::_internal_set_reward_accumulation(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_accumulation_ = value;
}

// repeated string authorized_policies = 11;
inline int SeigrToken::_internal_authorized_policies_size() const {
  return _internal_authorized_policies().size();
}
inline int SeigrToken::authorized_policies_size() const {
  return _internal_authorized_policies_size();
}
inline void SeigrToken::clear_authorized_policies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorized_policies_.Clear();
}
inline std::string* SeigrToken::add_authorized_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_authorized_policies()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.seigr_token.SeigrToken.authorized_policies)
  return _s;
}
inline const std::string& SeigrToken::authorized_policies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.SeigrToken.authorized_policies)
  return _internal_authorized_policies().Get(index);
}
inline std::string* SeigrToken::mutable_authorized_policies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.SeigrToken.authorized_policies)
  return _internal_mutable_authorized_policies()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SeigrToken::set_authorized_policies(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_authorized_policies()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.seigr_token.SeigrToken.authorized_policies)
}
template <typename Arg_, typename... Args_>
inline void SeigrToken::add_authorized_policies(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_authorized_policies(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.seigr_token.SeigrToken.authorized_policies)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SeigrToken::authorized_policies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_token.SeigrToken.authorized_policies)
  return _internal_authorized_policies();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SeigrToken::mutable_authorized_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_token.SeigrToken.authorized_policies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_authorized_policies();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SeigrToken::_internal_authorized_policies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authorized_policies_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SeigrToken::_internal_mutable_authorized_policies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.authorized_policies_;
}

// -------------------------------------------------------------------

// MintTokenRequest

// string owner_id = 1;
inline void MintTokenRequest::clear_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& MintTokenRequest::owner_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.MintTokenRequest.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintTokenRequest::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.MintTokenRequest.owner_id)
}
inline std::string* MintTokenRequest::mutable_owner_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.MintTokenRequest.owner_id)
  return _s;
}
inline const std::string& MintTokenRequest::_internal_owner_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_id_.Get();
}
inline void MintTokenRequest::_internal_set_owner_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.Set(value, GetArena());
}
inline std::string* MintTokenRequest::_internal_mutable_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_id_.Mutable( GetArena());
}
inline std::string* MintTokenRequest::release_owner_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.MintTokenRequest.owner_id)
  return _impl_.owner_id_.Release();
}
inline void MintTokenRequest::set_allocated_owner_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.MintTokenRequest.owner_id)
}

// uint64 amount = 2;
inline void MintTokenRequest::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t MintTokenRequest::amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.MintTokenRequest.amount)
  return _internal_amount();
}
inline void MintTokenRequest::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.MintTokenRequest.amount)
}
inline ::uint64_t MintTokenRequest::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void MintTokenRequest::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// MintTokenResponse

// bool success = 1;
inline void MintTokenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool MintTokenResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.MintTokenResponse.success)
  return _internal_success();
}
inline void MintTokenResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.MintTokenResponse.success)
}
inline bool MintTokenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void MintTokenResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void MintTokenResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MintTokenResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.MintTokenResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintTokenResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.MintTokenResponse.message)
}
inline std::string* MintTokenResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.MintTokenResponse.message)
  return _s;
}
inline const std::string& MintTokenResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void MintTokenResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MintTokenResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MintTokenResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.MintTokenResponse.message)
  return _impl_.message_.Release();
}
inline void MintTokenResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.MintTokenResponse.message)
}

// string token_id = 3;
inline void MintTokenResponse::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& MintTokenResponse::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.MintTokenResponse.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintTokenResponse::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.MintTokenResponse.token_id)
}
inline std::string* MintTokenResponse::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.MintTokenResponse.token_id)
  return _s;
}
inline const std::string& MintTokenResponse::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void MintTokenResponse::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* MintTokenResponse::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* MintTokenResponse::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.MintTokenResponse.token_id)
  return _impl_.token_id_.Release();
}
inline void MintTokenResponse::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.MintTokenResponse.token_id)
}

// -------------------------------------------------------------------

// TransferTokenRequest

// string from_id = 1;
inline void TransferTokenRequest::clear_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.ClearToEmpty();
}
inline const std::string& TransferTokenRequest::from_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenRequest.from_id)
  return _internal_from_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferTokenRequest::set_from_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenRequest.from_id)
}
inline std::string* TransferTokenRequest::mutable_from_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.TransferTokenRequest.from_id)
  return _s;
}
inline const std::string& TransferTokenRequest::_internal_from_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_id_.Get();
}
inline void TransferTokenRequest::_internal_set_from_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.Set(value, GetArena());
}
inline std::string* TransferTokenRequest::_internal_mutable_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_id_.Mutable( GetArena());
}
inline std::string* TransferTokenRequest::release_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.TransferTokenRequest.from_id)
  return _impl_.from_id_.Release();
}
inline void TransferTokenRequest::set_allocated_from_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_id_.IsDefault()) {
    _impl_.from_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.TransferTokenRequest.from_id)
}

// string to_id = 2;
inline void TransferTokenRequest::clear_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.ClearToEmpty();
}
inline const std::string& TransferTokenRequest::to_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenRequest.to_id)
  return _internal_to_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferTokenRequest::set_to_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenRequest.to_id)
}
inline std::string* TransferTokenRequest::mutable_to_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.TransferTokenRequest.to_id)
  return _s;
}
inline const std::string& TransferTokenRequest::_internal_to_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_id_.Get();
}
inline void TransferTokenRequest::_internal_set_to_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.Set(value, GetArena());
}
inline std::string* TransferTokenRequest::_internal_mutable_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_id_.Mutable( GetArena());
}
inline std::string* TransferTokenRequest::release_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.TransferTokenRequest.to_id)
  return _impl_.to_id_.Release();
}
inline void TransferTokenRequest::set_allocated_to_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_id_.IsDefault()) {
    _impl_.to_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.TransferTokenRequest.to_id)
}

// uint64 amount = 3;
inline void TransferTokenRequest::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t TransferTokenRequest::amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenRequest.amount)
  return _internal_amount();
}
inline void TransferTokenRequest::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenRequest.amount)
}
inline ::uint64_t TransferTokenRequest::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void TransferTokenRequest::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string reference_id = 4;
inline void TransferTokenRequest::clear_reference_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_id_.ClearToEmpty();
}
inline const std::string& TransferTokenRequest::reference_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenRequest.reference_id)
  return _internal_reference_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferTokenRequest::set_reference_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenRequest.reference_id)
}
inline std::string* TransferTokenRequest::mutable_reference_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reference_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.TransferTokenRequest.reference_id)
  return _s;
}
inline const std::string& TransferTokenRequest::_internal_reference_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_id_.Get();
}
inline void TransferTokenRequest::_internal_set_reference_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_id_.Set(value, GetArena());
}
inline std::string* TransferTokenRequest::_internal_mutable_reference_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reference_id_.Mutable( GetArena());
}
inline std::string* TransferTokenRequest::release_reference_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.TransferTokenRequest.reference_id)
  return _impl_.reference_id_.Release();
}
inline void TransferTokenRequest::set_allocated_reference_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reference_id_.IsDefault()) {
    _impl_.reference_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.TransferTokenRequest.reference_id)
}

// -------------------------------------------------------------------

// TransferTokenResponse

// bool success = 1;
inline void TransferTokenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool TransferTokenResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenResponse.success)
  return _internal_success();
}
inline void TransferTokenResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenResponse.success)
}
inline bool TransferTokenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void TransferTokenResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void TransferTokenResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TransferTokenResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.TransferTokenResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferTokenResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.TransferTokenResponse.message)
}
inline std::string* TransferTokenResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.TransferTokenResponse.message)
  return _s;
}
inline const std::string& TransferTokenResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void TransferTokenResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* TransferTokenResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* TransferTokenResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.TransferTokenResponse.message)
  return _impl_.message_.Release();
}
inline void TransferTokenResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.TransferTokenResponse.message)
}

// -------------------------------------------------------------------

// CheckTokenStatusRequest

// string token_id = 1;
inline void CheckTokenStatusRequest::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& CheckTokenStatusRequest::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusRequest.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CheckTokenStatusRequest::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusRequest.token_id)
}
inline std::string* CheckTokenStatusRequest::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.CheckTokenStatusRequest.token_id)
  return _s;
}
inline const std::string& CheckTokenStatusRequest::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void CheckTokenStatusRequest::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* CheckTokenStatusRequest::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* CheckTokenStatusRequest::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.CheckTokenStatusRequest.token_id)
  return _impl_.token_id_.Release();
}
inline void CheckTokenStatusRequest::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.CheckTokenStatusRequest.token_id)
}

// -------------------------------------------------------------------

// CheckTokenStatusResponse

// .seigr.seigr_token.TokenStatus status = 1;
inline void CheckTokenStatusResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::seigr_token::TokenStatus CheckTokenStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusResponse.status)
  return _internal_status();
}
inline void CheckTokenStatusResponse::set_status(::seigr::seigr_token::TokenStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusResponse.status)
}
inline ::seigr::seigr_token::TokenStatus CheckTokenStatusResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::seigr_token::TokenStatus>(_impl_.status_);
}
inline void CheckTokenStatusResponse::_internal_set_status(::seigr::seigr_token::TokenStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// uint64 balance = 2;
inline void CheckTokenStatusResponse::clear_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = ::uint64_t{0u};
}
inline ::uint64_t CheckTokenStatusResponse::balance() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusResponse.balance)
  return _internal_balance();
}
inline void CheckTokenStatusResponse::set_balance(::uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusResponse.balance)
}
inline ::uint64_t CheckTokenStatusResponse::_internal_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.balance_;
}
inline void CheckTokenStatusResponse::_internal_set_balance(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = value;
}

// uint64 max_cap = 3;
inline void CheckTokenStatusResponse::clear_max_cap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_cap_ = ::uint64_t{0u};
}
inline ::uint64_t CheckTokenStatusResponse::max_cap() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusResponse.max_cap)
  return _internal_max_cap();
}
inline void CheckTokenStatusResponse::set_max_cap(::uint64_t value) {
  _internal_set_max_cap(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusResponse.max_cap)
}
inline ::uint64_t CheckTokenStatusResponse::_internal_max_cap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_cap_;
}
inline void CheckTokenStatusResponse::_internal_set_max_cap(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_cap_ = value;
}

// bool is_capped = 4;
inline void CheckTokenStatusResponse::clear_is_capped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_capped_ = false;
}
inline bool CheckTokenStatusResponse::is_capped() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusResponse.is_capped)
  return _internal_is_capped();
}
inline void CheckTokenStatusResponse::set_is_capped(bool value) {
  _internal_set_is_capped(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusResponse.is_capped)
}
inline bool CheckTokenStatusResponse::_internal_is_capped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_capped_;
}
inline void CheckTokenStatusResponse::_internal_set_is_capped(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_capped_ = value;
}

// uint64 surplus_amount = 5;
inline void CheckTokenStatusResponse::clear_surplus_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.surplus_amount_ = ::uint64_t{0u};
}
inline ::uint64_t CheckTokenStatusResponse::surplus_amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.CheckTokenStatusResponse.surplus_amount)
  return _internal_surplus_amount();
}
inline void CheckTokenStatusResponse::set_surplus_amount(::uint64_t value) {
  _internal_set_surplus_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.CheckTokenStatusResponse.surplus_amount)
}
inline ::uint64_t CheckTokenStatusResponse::_internal_surplus_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.surplus_amount_;
}
inline void CheckTokenStatusResponse::_internal_set_surplus_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.surplus_amount_ = value;
}

// -------------------------------------------------------------------

// AdjustTokenCapRequest

// string token_id = 1;
inline void AdjustTokenCapRequest::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& AdjustTokenCapRequest::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.AdjustTokenCapRequest.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdjustTokenCapRequest::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.AdjustTokenCapRequest.token_id)
}
inline std::string* AdjustTokenCapRequest::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.AdjustTokenCapRequest.token_id)
  return _s;
}
inline const std::string& AdjustTokenCapRequest::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void AdjustTokenCapRequest::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* AdjustTokenCapRequest::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* AdjustTokenCapRequest::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.AdjustTokenCapRequest.token_id)
  return _impl_.token_id_.Release();
}
inline void AdjustTokenCapRequest::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.AdjustTokenCapRequest.token_id)
}

// uint64 new_cap = 2;
inline void AdjustTokenCapRequest::clear_new_cap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_cap_ = ::uint64_t{0u};
}
inline ::uint64_t AdjustTokenCapRequest::new_cap() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.AdjustTokenCapRequest.new_cap)
  return _internal_new_cap();
}
inline void AdjustTokenCapRequest::set_new_cap(::uint64_t value) {
  _internal_set_new_cap(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.AdjustTokenCapRequest.new_cap)
}
inline ::uint64_t AdjustTokenCapRequest::_internal_new_cap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_cap_;
}
inline void AdjustTokenCapRequest::_internal_set_new_cap(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_cap_ = value;
}

// -------------------------------------------------------------------

// AdjustTokenCapResponse

// bool success = 1;
inline void AdjustTokenCapResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AdjustTokenCapResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.AdjustTokenCapResponse.success)
  return _internal_success();
}
inline void AdjustTokenCapResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.AdjustTokenCapResponse.success)
}
inline bool AdjustTokenCapResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AdjustTokenCapResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void AdjustTokenCapResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AdjustTokenCapResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.AdjustTokenCapResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdjustTokenCapResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.AdjustTokenCapResponse.message)
}
inline std::string* AdjustTokenCapResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.AdjustTokenCapResponse.message)
  return _s;
}
inline const std::string& AdjustTokenCapResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AdjustTokenCapResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AdjustTokenCapResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AdjustTokenCapResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.AdjustTokenCapResponse.message)
  return _impl_.message_.Release();
}
inline void AdjustTokenCapResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.AdjustTokenCapResponse.message)
}

// uint64 adjusted_cap = 3;
inline void AdjustTokenCapResponse::clear_adjusted_cap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adjusted_cap_ = ::uint64_t{0u};
}
inline ::uint64_t AdjustTokenCapResponse::adjusted_cap() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.AdjustTokenCapResponse.adjusted_cap)
  return _internal_adjusted_cap();
}
inline void AdjustTokenCapResponse::set_adjusted_cap(::uint64_t value) {
  _internal_set_adjusted_cap(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.AdjustTokenCapResponse.adjusted_cap)
}
inline ::uint64_t AdjustTokenCapResponse::_internal_adjusted_cap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adjusted_cap_;
}
inline void AdjustTokenCapResponse::_internal_set_adjusted_cap(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adjusted_cap_ = value;
}

// -------------------------------------------------------------------

// DistributeSurplusRequest

// string token_id = 1;
inline void DistributeSurplusRequest::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& DistributeSurplusRequest::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.DistributeSurplusRequest.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributeSurplusRequest::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.DistributeSurplusRequest.token_id)
}
inline std::string* DistributeSurplusRequest::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.DistributeSurplusRequest.token_id)
  return _s;
}
inline const std::string& DistributeSurplusRequest::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void DistributeSurplusRequest::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* DistributeSurplusRequest::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* DistributeSurplusRequest::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.DistributeSurplusRequest.token_id)
  return _impl_.token_id_.Release();
}
inline void DistributeSurplusRequest::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.DistributeSurplusRequest.token_id)
}

// uint64 distribute_amount = 2;
inline void DistributeSurplusRequest::clear_distribute_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribute_amount_ = ::uint64_t{0u};
}
inline ::uint64_t DistributeSurplusRequest::distribute_amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.DistributeSurplusRequest.distribute_amount)
  return _internal_distribute_amount();
}
inline void DistributeSurplusRequest::set_distribute_amount(::uint64_t value) {
  _internal_set_distribute_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.DistributeSurplusRequest.distribute_amount)
}
inline ::uint64_t DistributeSurplusRequest::_internal_distribute_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribute_amount_;
}
inline void DistributeSurplusRequest::_internal_set_distribute_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribute_amount_ = value;
}

// -------------------------------------------------------------------

// DistributeSurplusResponse

// bool success = 1;
inline void DistributeSurplusResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool DistributeSurplusResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.DistributeSurplusResponse.success)
  return _internal_success();
}
inline void DistributeSurplusResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.DistributeSurplusResponse.success)
}
inline bool DistributeSurplusResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void DistributeSurplusResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// uint64 distributed_amount = 2;
inline void DistributeSurplusResponse::clear_distributed_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distributed_amount_ = ::uint64_t{0u};
}
inline ::uint64_t DistributeSurplusResponse::distributed_amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.DistributeSurplusResponse.distributed_amount)
  return _internal_distributed_amount();
}
inline void DistributeSurplusResponse::set_distributed_amount(::uint64_t value) {
  _internal_set_distributed_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.DistributeSurplusResponse.distributed_amount)
}
inline ::uint64_t DistributeSurplusResponse::_internal_distributed_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distributed_amount_;
}
inline void DistributeSurplusResponse::_internal_set_distributed_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distributed_amount_ = value;
}

// string message = 3;
inline void DistributeSurplusResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DistributeSurplusResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.DistributeSurplusResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributeSurplusResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.DistributeSurplusResponse.message)
}
inline std::string* DistributeSurplusResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.DistributeSurplusResponse.message)
  return _s;
}
inline const std::string& DistributeSurplusResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void DistributeSurplusResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* DistributeSurplusResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* DistributeSurplusResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.DistributeSurplusResponse.message)
  return _impl_.message_.Release();
}
inline void DistributeSurplusResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.DistributeSurplusResponse.message)
}

// -------------------------------------------------------------------

// BurnTokenRequest

// string token_id = 1;
inline void BurnTokenRequest::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& BurnTokenRequest::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.BurnTokenRequest.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BurnTokenRequest::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.BurnTokenRequest.token_id)
}
inline std::string* BurnTokenRequest::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.BurnTokenRequest.token_id)
  return _s;
}
inline const std::string& BurnTokenRequest::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void BurnTokenRequest::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* BurnTokenRequest::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* BurnTokenRequest::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.BurnTokenRequest.token_id)
  return _impl_.token_id_.Release();
}
inline void BurnTokenRequest::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.BurnTokenRequest.token_id)
}

// -------------------------------------------------------------------

// BurnTokenResponse

// bool success = 1;
inline void BurnTokenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool BurnTokenResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.BurnTokenResponse.success)
  return _internal_success();
}
inline void BurnTokenResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.BurnTokenResponse.success)
}
inline bool BurnTokenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void BurnTokenResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void BurnTokenResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& BurnTokenResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.BurnTokenResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BurnTokenResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.BurnTokenResponse.message)
}
inline std::string* BurnTokenResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.BurnTokenResponse.message)
  return _s;
}
inline const std::string& BurnTokenResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void BurnTokenResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* BurnTokenResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* BurnTokenResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.BurnTokenResponse.message)
  return _impl_.message_.Release();
}
inline void BurnTokenResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.BurnTokenResponse.message)
}

// -------------------------------------------------------------------

// GetTransactionHistoryRequest

// string token_id = 1;
inline void GetTransactionHistoryRequest::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& GetTransactionHistoryRequest::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.GetTransactionHistoryRequest.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTransactionHistoryRequest::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.GetTransactionHistoryRequest.token_id)
}
inline std::string* GetTransactionHistoryRequest::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.GetTransactionHistoryRequest.token_id)
  return _s;
}
inline const std::string& GetTransactionHistoryRequest::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void GetTransactionHistoryRequest::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* GetTransactionHistoryRequest::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* GetTransactionHistoryRequest::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.GetTransactionHistoryRequest.token_id)
  return _impl_.token_id_.Release();
}
inline void GetTransactionHistoryRequest::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.GetTransactionHistoryRequest.token_id)
}

// uint32 limit = 2;
inline void GetTransactionHistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0u;
}
inline ::uint32_t GetTransactionHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.GetTransactionHistoryRequest.limit)
  return _internal_limit();
}
inline void GetTransactionHistoryRequest::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.GetTransactionHistoryRequest.limit)
}
inline ::uint32_t GetTransactionHistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetTransactionHistoryRequest::_internal_set_limit(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// bool include_locked_transactions = 3;
inline void GetTransactionHistoryRequest::clear_include_locked_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_locked_transactions_ = false;
}
inline bool GetTransactionHistoryRequest::include_locked_transactions() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.GetTransactionHistoryRequest.include_locked_transactions)
  return _internal_include_locked_transactions();
}
inline void GetTransactionHistoryRequest::set_include_locked_transactions(bool value) {
  _internal_set_include_locked_transactions(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.GetTransactionHistoryRequest.include_locked_transactions)
}
inline bool GetTransactionHistoryRequest::_internal_include_locked_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_locked_transactions_;
}
inline void GetTransactionHistoryRequest::_internal_set_include_locked_transactions(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_locked_transactions_ = value;
}

// -------------------------------------------------------------------

// GetTransactionHistoryResponse

// string token_id = 1;
inline void GetTransactionHistoryResponse::clear_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.ClearToEmpty();
}
inline const std::string& GetTransactionHistoryResponse::token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.GetTransactionHistoryResponse.token_id)
  return _internal_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTransactionHistoryResponse::set_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.GetTransactionHistoryResponse.token_id)
}
inline std::string* GetTransactionHistoryResponse::mutable_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.GetTransactionHistoryResponse.token_id)
  return _s;
}
inline const std::string& GetTransactionHistoryResponse::_internal_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_id_.Get();
}
inline void GetTransactionHistoryResponse::_internal_set_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.Set(value, GetArena());
}
inline std::string* GetTransactionHistoryResponse::_internal_mutable_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_id_.Mutable( GetArena());
}
inline std::string* GetTransactionHistoryResponse::release_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.GetTransactionHistoryResponse.token_id)
  return _impl_.token_id_.Release();
}
inline void GetTransactionHistoryResponse::set_allocated_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_id_.IsDefault()) {
    _impl_.token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.GetTransactionHistoryResponse.token_id)
}

// repeated .seigr.seigr_token.Transaction transactions = 2;
inline int GetTransactionHistoryResponse::_internal_transactions_size() const {
  return _internal_transactions().size();
}
inline int GetTransactionHistoryResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void GetTransactionHistoryResponse::clear_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactions_.Clear();
}
inline ::seigr::seigr_token::Transaction* GetTransactionHistoryResponse::mutable_transactions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.GetTransactionHistoryResponse.transactions)
  return _internal_mutable_transactions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>* GetTransactionHistoryResponse::mutable_transactions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.seigr_token.GetTransactionHistoryResponse.transactions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_transactions();
}
inline const ::seigr::seigr_token::Transaction& GetTransactionHistoryResponse::transactions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.GetTransactionHistoryResponse.transactions)
  return _internal_transactions().Get(index);
}
inline ::seigr::seigr_token::Transaction* GetTransactionHistoryResponse::add_transactions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::seigr_token::Transaction* _add = _internal_mutable_transactions()->Add();
  // @@protoc_insertion_point(field_add:seigr.seigr_token.GetTransactionHistoryResponse.transactions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>& GetTransactionHistoryResponse::transactions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.seigr_token.GetTransactionHistoryResponse.transactions)
  return _internal_transactions();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>&
GetTransactionHistoryResponse::_internal_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transactions_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::seigr_token::Transaction>*
GetTransactionHistoryResponse::_internal_mutable_transactions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.transactions_;
}

// -------------------------------------------------------------------

// Transaction

// uint64 transaction_id = 1;
inline void Transaction::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_ = ::uint64_t{0u};
}
inline ::uint64_t Transaction::transaction_id() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.transaction_id)
  return _internal_transaction_id();
}
inline void Transaction::set_transaction_id(::uint64_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.transaction_id)
}
inline ::uint64_t Transaction::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_;
}
inline void Transaction::_internal_set_transaction_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_ = value;
}

// string from_id = 2;
inline void Transaction::clear_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.ClearToEmpty();
}
inline const std::string& Transaction::from_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.from_id)
  return _internal_from_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transaction::set_from_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.from_id)
}
inline std::string* Transaction::mutable_from_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.Transaction.from_id)
  return _s;
}
inline const std::string& Transaction::_internal_from_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_id_.Get();
}
inline void Transaction::_internal_set_from_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.Set(value, GetArena());
}
inline std::string* Transaction::_internal_mutable_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_id_.Mutable( GetArena());
}
inline std::string* Transaction::release_from_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.Transaction.from_id)
  return _impl_.from_id_.Release();
}
inline void Transaction::set_allocated_from_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_id_.IsDefault()) {
    _impl_.from_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.Transaction.from_id)
}

// string to_id = 3;
inline void Transaction::clear_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.ClearToEmpty();
}
inline const std::string& Transaction::to_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.to_id)
  return _internal_to_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transaction::set_to_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.to_id)
}
inline std::string* Transaction::mutable_to_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_id();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.Transaction.to_id)
  return _s;
}
inline const std::string& Transaction::_internal_to_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_id_.Get();
}
inline void Transaction::_internal_set_to_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.Set(value, GetArena());
}
inline std::string* Transaction::_internal_mutable_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_id_.Mutable( GetArena());
}
inline std::string* Transaction::release_to_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.Transaction.to_id)
  return _impl_.to_id_.Release();
}
inline void Transaction::set_allocated_to_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_id_.IsDefault()) {
    _impl_.to_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.Transaction.to_id)
}

// uint64 amount = 4;
inline void Transaction::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t Transaction::amount() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.amount)
}
inline ::uint64_t Transaction::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void Transaction::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string timestamp = 5;
inline void Transaction::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Transaction::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Transaction::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.timestamp)
}
inline std::string* Transaction::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.seigr_token.Transaction.timestamp)
  return _s;
}
inline const std::string& Transaction::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Transaction::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Transaction::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Transaction::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.seigr_token.Transaction.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Transaction::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.seigr_token.Transaction.timestamp)
}

// .seigr.crosschain.TransactionType type = 6;
inline void Transaction::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::crosschain::TransactionType Transaction::type() const {
  // @@protoc_insertion_point(field_get:seigr.seigr_token.Transaction.type)
  return _internal_type();
}
inline void Transaction::set_type(::seigr::crosschain::TransactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.seigr_token.Transaction.type)
}
inline ::seigr::crosschain::TransactionType Transaction::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::TransactionType>(_impl_.type_);
}
inline void Transaction::_internal_set_type(::seigr::crosschain::TransactionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace seigr_token
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::seigr_token::TokenStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::seigr_token::TokenStatus>() {
  return ::seigr::seigr_token::TokenStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // seigr_5ftoken_2eproto_2epb_2eh
