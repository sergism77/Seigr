syntax = "proto3";

package seigr.interpretation;

import "access_control.proto"; // AccessType
import "common.proto";         // Timestamp
import "error_handling.proto"; // ErrorResolutionStrategy

/**
 * Interpretation Protocol
 * 
 * Enhances metadata interpretation, validation, compatibility checks, 
 * and capability expansion, supporting extensibility and predictive insights.
 */

// ===========================
// ENUMS
// ===========================

enum InterpretationStatus {
    INTERPRETATION_STATUS_UNDEFINED = 0;
    INTERPRETATION_SUCCESS = 1;
    INTERPRETATION_WARNING = 2;
    INTERPRETATION_ERROR = 3;
    INCOMPATIBLE_VERSION = 4;
    PARTIAL_SUCCESS = 5;
    PREDICTED_FAILURE = 6; // Newly added for predictive insights.
}

// ===========================
// MESSAGES
// ===========================

message InterpretationResult {
    InterpretationStatus status = 1;
    string message = 2;
    seigr.common.Timestamp timestamp = 3;    // Standardized timestamp.
    string interpreted_version = 4;
    map<string, string> additional_info = 5;
    string interpreter_id = 6;
    bool requires_attention = 7;
    map<string, string> linked_files = 8;
    string source_data_id = 9;
    int32 priority_level = 10;
    map<string, string> contextual_conditions = 11;
    repeated string error_codes = 12;
    seigr.error_handling.ErrorResolutionStrategy resolution_strategy = 13; // Added for resolution guidance.
}

message BatchInterpretationRequest {
    repeated string metadata_ids = 1; // List of metadata IDs for batch processing.
    string batch_id = 2;             // Unique identifier for the batch request.
    map<string, string> parameters = 3;
    bool validate_compatibility = 4; // Whether to run compatibility checks.
}

message BatchInterpretationResult {
    string batch_id = 1;
    repeated InterpretationResult results = 2; // Individual results for each metadata.
    seigr.common.Timestamp completed_at = 3;
    int32 total_count = 4;
    int32 success_count = 5;
    int32 failure_count = 6;
    map<string, string> batch_summary = 7; // High-level summary of the batch process.
}

message MetadataTemplate {
    string template_id = 1;
    string description = 2;
    map<string, string> fields = 3;          // Template-defined metadata fields.
    repeated string required_versions = 4;   // Compatible versions for the template.
    seigr.common.Timestamp created_at = 5;
    map<string, string> metadata = 6;
}

message CompatibilityCheck {
    string metadata_version = 1;
    string protocol_version = 2;
    repeated string compatible_versions = 3;
    bool is_compatible = 4;
    string message = 5;
    string recommended_action = 6;
    seigr.common.Timestamp last_verified = 7;
    string fallback_version = 8;
    map<string, string> compatibility_notes = 9;
    repeated string dependency_requirements = 10;
    repeated string fallback_options = 11;
    bool requires_update = 12;
}

message CapabilityExpansion {
    string target_version = 1;
    bool advanced_metadata_enabled = 2;
    bool enhanced_encoding_enabled = 3;
    map<string, string> additional_capabilities = 4;
    seigr.common.Timestamp expansion_timestamp = 5;
    repeated string dependencies = 6;
    string expanded_by = 7;
    map<string, string> expansion_context = 8;
    bool is_experimental = 9;
    string deprecation_notice = 10;
    map<string, string> future_capabilities = 11;
    bool predictive_adjustments_enabled = 12; // Enables predictive adjustments.
}

message MetadataValidationLog {
    string validation_id = 1;
    string target_metadata_version = 2;
    string protocol_version = 3;
    string validator_id = 4;
    seigr.common.Timestamp validation_timestamp = 5;
    bool validation_successful = 6;
    string error_message = 7;
    map<string, string> validation_metadata = 8;
    string recommended_action = 9;
    repeated string dependency_checks = 10;
    repeated string warnings = 11;
}

message MetadataAnalysisContext {
    string analysis_id = 1;
    string origin_data_id = 2;
    seigr.common.Timestamp analysis_timestamp = 3;
    map<string, string> context_parameters = 4;
    repeated string warning_messages = 5;
    map<string, string> analysis_metadata = 6;
    string performed_by = 7;
    bool is_experimental = 8;
    string report_reference = 9;
}
