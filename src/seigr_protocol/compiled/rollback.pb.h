// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rollback.proto
// Protobuf C++ Version: 5.29.2

#ifndef rollback_2eproto_2epb_2eh
#define rollback_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rollback_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rollback_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rollback_2eproto;
namespace seigr {
namespace rollback {
class RollbackConflictResolution;
struct RollbackConflictResolutionDefaultTypeInternal;
extern RollbackConflictResolutionDefaultTypeInternal _RollbackConflictResolution_default_instance_;
class RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse;
struct RollbackConflictResolution_ResolutionMetadataEntry_DoNotUseDefaultTypeInternal;
extern RollbackConflictResolution_ResolutionMetadataEntry_DoNotUseDefaultTypeInternal _RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse_default_instance_;
class RollbackHistory;
struct RollbackHistoryDefaultTypeInternal;
extern RollbackHistoryDefaultTypeInternal _RollbackHistory_default_instance_;
class RollbackHistory_MetadataEntry_DoNotUse;
struct RollbackHistory_MetadataEntry_DoNotUseDefaultTypeInternal;
extern RollbackHistory_MetadataEntry_DoNotUseDefaultTypeInternal _RollbackHistory_MetadataEntry_DoNotUse_default_instance_;
class RollbackLog;
struct RollbackLogDefaultTypeInternal;
extern RollbackLogDefaultTypeInternal _RollbackLog_default_instance_;
class RollbackLog_MetadataEntry_DoNotUse;
struct RollbackLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern RollbackLog_MetadataEntry_DoNotUseDefaultTypeInternal _RollbackLog_MetadataEntry_DoNotUse_default_instance_;
class RollbackProgress;
struct RollbackProgressDefaultTypeInternal;
extern RollbackProgressDefaultTypeInternal _RollbackProgress_default_instance_;
class RollbackProgress_ProgressMetadataEntry_DoNotUse;
struct RollbackProgress_ProgressMetadataEntry_DoNotUseDefaultTypeInternal;
extern RollbackProgress_ProgressMetadataEntry_DoNotUseDefaultTypeInternal _RollbackProgress_ProgressMetadataEntry_DoNotUse_default_instance_;
class RollbackRequest;
struct RollbackRequestDefaultTypeInternal;
extern RollbackRequestDefaultTypeInternal _RollbackRequest_default_instance_;
class RollbackRequest_ParametersEntry_DoNotUse;
struct RollbackRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern RollbackRequest_ParametersEntry_DoNotUseDefaultTypeInternal _RollbackRequest_ParametersEntry_DoNotUse_default_instance_;
class RollbackValidationResult;
struct RollbackValidationResultDefaultTypeInternal;
extern RollbackValidationResultDefaultTypeInternal _RollbackValidationResult_default_instance_;
class RollbackValidationResult_ValidationMetadataEntry_DoNotUse;
struct RollbackValidationResult_ValidationMetadataEntry_DoNotUseDefaultTypeInternal;
extern RollbackValidationResult_ValidationMetadataEntry_DoNotUseDefaultTypeInternal _RollbackValidationResult_ValidationMetadataEntry_DoNotUse_default_instance_;
}  // namespace rollback
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace rollback {
enum RollbackStatus : int {
  ROLLBACK_STATUS_UNDEFINED = 0,
  ROLLBACK_STATUS_SUCCESS = 1,
  ROLLBACK_STATUS_FAILURE = 2,
  ROLLBACK_STATUS_PENDING = 3,
  ROLLBACK_STATUS_IN_PROGRESS = 4,
  ROLLBACK_STATUS_PARTIAL_SUCCESS = 5,
  ROLLBACK_STATUS_ABORTED = 6,
  ROLLBACK_STATUS_CONFLICT_DETECTED = 7,
  RollbackStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RollbackStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RollbackStatus_IsValid(int value);
extern const uint32_t RollbackStatus_internal_data_[];
constexpr RollbackStatus RollbackStatus_MIN = static_cast<RollbackStatus>(0);
constexpr RollbackStatus RollbackStatus_MAX = static_cast<RollbackStatus>(7);
constexpr int RollbackStatus_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
RollbackStatus_descriptor();
template <typename T>
const std::string& RollbackStatus_Name(T value) {
  static_assert(std::is_same<T, RollbackStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RollbackStatus_Name().");
  return RollbackStatus_Name(static_cast<RollbackStatus>(value));
}
template <>
inline const std::string& RollbackStatus_Name(RollbackStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RollbackStatus_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool RollbackStatus_Parse(absl::string_view name, RollbackStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RollbackStatus>(
      RollbackStatus_descriptor(), name, value);
}
enum RollbackTrigger : int {
  ROLLBACK_TRIGGER_UNDEFINED = 0,
  ROLLBACK_TRIGGER_MANUAL = 1,
  ROLLBACK_TRIGGER_INTEGRITY_FAILURE = 2,
  ROLLBACK_TRIGGER_SYSTEM_RESTORE = 3,
  ROLLBACK_TRIGGER_DATA_CONFLICT = 4,
  ROLLBACK_TRIGGER_SCHEDULED = 5,
  ROLLBACK_TRIGGER_POLICY_VIOLATION = 6,
  ROLLBACK_TRIGGER_RESOURCE_OPTIMIZATION = 7,
  RollbackTrigger_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RollbackTrigger_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RollbackTrigger_IsValid(int value);
extern const uint32_t RollbackTrigger_internal_data_[];
constexpr RollbackTrigger RollbackTrigger_MIN = static_cast<RollbackTrigger>(0);
constexpr RollbackTrigger RollbackTrigger_MAX = static_cast<RollbackTrigger>(7);
constexpr int RollbackTrigger_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
RollbackTrigger_descriptor();
template <typename T>
const std::string& RollbackTrigger_Name(T value) {
  static_assert(std::is_same<T, RollbackTrigger>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RollbackTrigger_Name().");
  return RollbackTrigger_Name(static_cast<RollbackTrigger>(value));
}
template <>
inline const std::string& RollbackTrigger_Name(RollbackTrigger value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RollbackTrigger_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool RollbackTrigger_Parse(absl::string_view name, RollbackTrigger* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RollbackTrigger>(
      RollbackTrigger_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RollbackValidationResult_ValidationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackValidationResult_ValidationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackValidationResult_ValidationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackValidationResult_ValidationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackValidationResult_ValidationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackValidationResult_ValidationMetadataEntry_DoNotUse*>(
        &_RollbackValidationResult_ValidationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackRequest_ParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackRequest_ParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackRequest_ParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackRequest_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackRequest_ParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackRequest_ParametersEntry_DoNotUse*>(
        &_RollbackRequest_ParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackProgress_ProgressMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackProgress_ProgressMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackProgress_ProgressMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackProgress_ProgressMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackProgress_ProgressMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackProgress_ProgressMetadataEntry_DoNotUse*>(
        &_RollbackProgress_ProgressMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackLog_MetadataEntry_DoNotUse*>(
        &_RollbackLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackHistory_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackHistory_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackHistory_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackHistory_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackHistory_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackHistory_MetadataEntry_DoNotUse*>(
        &_RollbackHistory_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse*>(
        &_RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_rollback_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      82, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RollbackValidationResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackValidationResult) */ {
 public:
  inline RollbackValidationResult() : RollbackValidationResult(nullptr) {}
  ~RollbackValidationResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackValidationResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackValidationResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackValidationResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackValidationResult(const RollbackValidationResult& from) : RollbackValidationResult(nullptr, from) {}
  inline RollbackValidationResult(RollbackValidationResult&& from) noexcept
      : RollbackValidationResult(nullptr, std::move(from)) {}
  inline RollbackValidationResult& operator=(const RollbackValidationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackValidationResult& operator=(RollbackValidationResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackValidationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackValidationResult* internal_default_instance() {
    return reinterpret_cast<const RollbackValidationResult*>(
        &_RollbackValidationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RollbackValidationResult& a, RollbackValidationResult& b) { a.Swap(&b); }
  inline void Swap(RollbackValidationResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackValidationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackValidationResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackValidationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackValidationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackValidationResult& from) { RollbackValidationResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackValidationResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackValidationResult"; }

 protected:
  explicit RollbackValidationResult(::google::protobuf::Arena* arena);
  RollbackValidationResult(::google::protobuf::Arena* arena, const RollbackValidationResult& from);
  RollbackValidationResult(::google::protobuf::Arena* arena, RollbackValidationResult&& from) noexcept
      : RollbackValidationResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationMetadataFieldNumber = 6,
    kInvalidReasonsFieldNumber = 7,
    kDependenciesCheckedFieldNumber = 9,
    kValidationIdFieldNumber = 1,
    kSegmentHashFieldNumber = 2,
    kValidationMessageFieldNumber = 4,
    kValidatedAtFieldNumber = 5,
    kRecommendedActionFieldNumber = 8,
    kIsValidFieldNumber = 3,
  };
  // map<string, string> validation_metadata = 6;
  int validation_metadata_size() const;
  private:
  int _internal_validation_metadata_size() const;

  public:
  void clear_validation_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_validation_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_validation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_validation_metadata();

  public:
  // repeated string invalid_reasons = 7;
  int invalid_reasons_size() const;
  private:
  int _internal_invalid_reasons_size() const;

  public:
  void clear_invalid_reasons() ;
  const std::string& invalid_reasons(int index) const;
  std::string* mutable_invalid_reasons(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_invalid_reasons(int index, Arg_&& value, Args_... args);
  std::string* add_invalid_reasons();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_invalid_reasons(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& invalid_reasons() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_invalid_reasons();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_invalid_reasons() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_invalid_reasons();

  public:
  // repeated string dependencies_checked = 9;
  int dependencies_checked_size() const;
  private:
  int _internal_dependencies_checked_size() const;

  public:
  void clear_dependencies_checked() ;
  const std::string& dependencies_checked(int index) const;
  std::string* mutable_dependencies_checked(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependencies_checked(int index, Arg_&& value, Args_... args);
  std::string* add_dependencies_checked();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_dependencies_checked(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& dependencies_checked() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_dependencies_checked();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_dependencies_checked() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_dependencies_checked();

  public:
  // string validation_id = 1;
  void clear_validation_id() ;
  const std::string& validation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_id(Arg_&& arg, Args_... args);
  std::string* mutable_validation_id();
  PROTOBUF_NODISCARD std::string* release_validation_id();
  void set_allocated_validation_id(std::string* value);

  private:
  const std::string& _internal_validation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_id(
      const std::string& value);
  std::string* _internal_mutable_validation_id();

  public:
  // string segment_hash = 2;
  void clear_segment_hash() ;
  const std::string& segment_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_hash(Arg_&& arg, Args_... args);
  std::string* mutable_segment_hash();
  PROTOBUF_NODISCARD std::string* release_segment_hash();
  void set_allocated_segment_hash(std::string* value);

  private:
  const std::string& _internal_segment_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_hash(
      const std::string& value);
  std::string* _internal_mutable_segment_hash();

  public:
  // string validation_message = 4;
  void clear_validation_message() ;
  const std::string& validation_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_message(Arg_&& arg, Args_... args);
  std::string* mutable_validation_message();
  PROTOBUF_NODISCARD std::string* release_validation_message();
  void set_allocated_validation_message(std::string* value);

  private:
  const std::string& _internal_validation_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_message(
      const std::string& value);
  std::string* _internal_mutable_validation_message();

  public:
  // string validated_at = 5;
  void clear_validated_at() ;
  const std::string& validated_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validated_at(Arg_&& arg, Args_... args);
  std::string* mutable_validated_at();
  PROTOBUF_NODISCARD std::string* release_validated_at();
  void set_allocated_validated_at(std::string* value);

  private:
  const std::string& _internal_validated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validated_at(
      const std::string& value);
  std::string* _internal_mutable_validated_at();

  public:
  // string recommended_action = 8;
  void clear_recommended_action() ;
  const std::string& recommended_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recommended_action(Arg_&& arg, Args_... args);
  std::string* mutable_recommended_action();
  PROTOBUF_NODISCARD std::string* release_recommended_action();
  void set_allocated_recommended_action(std::string* value);

  private:
  const std::string& _internal_recommended_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommended_action(
      const std::string& value);
  std::string* _internal_mutable_recommended_action();

  public:
  // bool is_valid = 3;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackValidationResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      183, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackValidationResult& from_msg);
    ::google::protobuf::internal::MapField<RollbackValidationResult_ValidationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        validation_metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> invalid_reasons_;
    ::google::protobuf::RepeatedPtrField<std::string> dependencies_checked_;
    ::google::protobuf::internal::ArenaStringPtr validation_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_hash_;
    ::google::protobuf::internal::ArenaStringPtr validation_message_;
    ::google::protobuf::internal::ArenaStringPtr validated_at_;
    ::google::protobuf::internal::ArenaStringPtr recommended_action_;
    bool is_valid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};
// -------------------------------------------------------------------

class RollbackRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackRequest) */ {
 public:
  inline RollbackRequest() : RollbackRequest(nullptr) {}
  ~RollbackRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackRequest(const RollbackRequest& from) : RollbackRequest(nullptr, from) {}
  inline RollbackRequest(RollbackRequest&& from) noexcept
      : RollbackRequest(nullptr, std::move(from)) {}
  inline RollbackRequest& operator=(const RollbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackRequest& operator=(RollbackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackRequest*>(
        &_RollbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RollbackRequest& a, RollbackRequest& b) { a.Swap(&b); }
  inline void Swap(RollbackRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackRequest& from) { RollbackRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackRequest"; }

 protected:
  explicit RollbackRequest(::google::protobuf::Arena* arena);
  RollbackRequest(::google::protobuf::Arena* arena, const RollbackRequest& from);
  RollbackRequest(::google::protobuf::Arena* arena, RollbackRequest&& from) noexcept
      : RollbackRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParametersFieldNumber = 7,
    kRequestIdFieldNumber = 1,
    kSegmentHashFieldNumber = 2,
    kTargetTimestampFieldNumber = 3,
    kRequestedByFieldNumber = 5,
    kRequestedAtFieldNumber = 6,
    kDependentSegmentIdFieldNumber = 11,
    kTriggerFieldNumber = 4,
    kMaxRetryAttemptsFieldNumber = 9,
    kValidateBeforeExecutionFieldNumber = 8,
    kRequiresApprovalFieldNumber = 10,
    kEcoFriendlyModeFieldNumber = 12,
  };
  // map<string, string> parameters = 7;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_parameters();

  public:
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string segment_hash = 2;
  void clear_segment_hash() ;
  const std::string& segment_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_hash(Arg_&& arg, Args_... args);
  std::string* mutable_segment_hash();
  PROTOBUF_NODISCARD std::string* release_segment_hash();
  void set_allocated_segment_hash(std::string* value);

  private:
  const std::string& _internal_segment_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_hash(
      const std::string& value);
  std::string* _internal_mutable_segment_hash();

  public:
  // string target_timestamp = 3;
  void clear_target_timestamp() ;
  const std::string& target_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_target_timestamp();
  PROTOBUF_NODISCARD std::string* release_target_timestamp();
  void set_allocated_target_timestamp(std::string* value);

  private:
  const std::string& _internal_target_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_timestamp(
      const std::string& value);
  std::string* _internal_mutable_target_timestamp();

  public:
  // string requested_by = 5;
  void clear_requested_by() ;
  const std::string& requested_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requested_by(Arg_&& arg, Args_... args);
  std::string* mutable_requested_by();
  PROTOBUF_NODISCARD std::string* release_requested_by();
  void set_allocated_requested_by(std::string* value);

  private:
  const std::string& _internal_requested_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requested_by(
      const std::string& value);
  std::string* _internal_mutable_requested_by();

  public:
  // string requested_at = 6;
  void clear_requested_at() ;
  const std::string& requested_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requested_at(Arg_&& arg, Args_... args);
  std::string* mutable_requested_at();
  PROTOBUF_NODISCARD std::string* release_requested_at();
  void set_allocated_requested_at(std::string* value);

  private:
  const std::string& _internal_requested_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requested_at(
      const std::string& value);
  std::string* _internal_mutable_requested_at();

  public:
  // string dependent_segment_id = 11;
  void clear_dependent_segment_id() ;
  const std::string& dependent_segment_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependent_segment_id(Arg_&& arg, Args_... args);
  std::string* mutable_dependent_segment_id();
  PROTOBUF_NODISCARD std::string* release_dependent_segment_id();
  void set_allocated_dependent_segment_id(std::string* value);

  private:
  const std::string& _internal_dependent_segment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dependent_segment_id(
      const std::string& value);
  std::string* _internal_mutable_dependent_segment_id();

  public:
  // .seigr.rollback.RollbackTrigger trigger = 4;
  void clear_trigger() ;
  ::seigr::rollback::RollbackTrigger trigger() const;
  void set_trigger(::seigr::rollback::RollbackTrigger value);

  private:
  ::seigr::rollback::RollbackTrigger _internal_trigger() const;
  void _internal_set_trigger(::seigr::rollback::RollbackTrigger value);

  public:
  // int32 max_retry_attempts = 9;
  void clear_max_retry_attempts() ;
  ::int32_t max_retry_attempts() const;
  void set_max_retry_attempts(::int32_t value);

  private:
  ::int32_t _internal_max_retry_attempts() const;
  void _internal_set_max_retry_attempts(::int32_t value);

  public:
  // bool validate_before_execution = 8;
  void clear_validate_before_execution() ;
  bool validate_before_execution() const;
  void set_validate_before_execution(bool value);

  private:
  bool _internal_validate_before_execution() const;
  void _internal_set_validate_before_execution(bool value);

  public:
  // bool requires_approval = 10;
  void clear_requires_approval() ;
  bool requires_approval() const;
  void set_requires_approval(bool value);

  private:
  bool _internal_requires_approval() const;
  void _internal_set_requires_approval(bool value);

  public:
  // bool eco_friendly_mode = 12;
  void clear_eco_friendly_mode() ;
  bool eco_friendly_mode() const;
  void set_eco_friendly_mode(bool value);

  private:
  bool _internal_eco_friendly_mode() const;
  void _internal_set_eco_friendly_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 1,
      139, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackRequest& from_msg);
    ::google::protobuf::internal::MapField<RollbackRequest_ParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        parameters_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_hash_;
    ::google::protobuf::internal::ArenaStringPtr target_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr requested_by_;
    ::google::protobuf::internal::ArenaStringPtr requested_at_;
    ::google::protobuf::internal::ArenaStringPtr dependent_segment_id_;
    int trigger_;
    ::int32_t max_retry_attempts_;
    bool validate_before_execution_;
    bool requires_approval_;
    bool eco_friendly_mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};
// -------------------------------------------------------------------

class RollbackProgress final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackProgress) */ {
 public:
  inline RollbackProgress() : RollbackProgress(nullptr) {}
  ~RollbackProgress() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackProgress* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackProgress));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackProgress(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackProgress(const RollbackProgress& from) : RollbackProgress(nullptr, from) {}
  inline RollbackProgress(RollbackProgress&& from) noexcept
      : RollbackProgress(nullptr, std::move(from)) {}
  inline RollbackProgress& operator=(const RollbackProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackProgress& operator=(RollbackProgress&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackProgress* internal_default_instance() {
    return reinterpret_cast<const RollbackProgress*>(
        &_RollbackProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RollbackProgress& a, RollbackProgress& b) { a.Swap(&b); }
  inline void Swap(RollbackProgress* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackProgress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackProgress* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackProgress>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackProgress& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackProgress& from) { RollbackProgress::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackProgress* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackProgress"; }

 protected:
  explicit RollbackProgress(::google::protobuf::Arena* arena);
  RollbackProgress(::google::protobuf::Arena* arena, const RollbackProgress& from);
  RollbackProgress(::google::protobuf::Arena* arena, RollbackProgress&& from) noexcept
      : RollbackProgress(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProgressMetadataFieldNumber = 8,
    kRollbackIdFieldNumber = 1,
    kSegmentIdFieldNumber = 4,
    kLastUpdateTimestampFieldNumber = 5,
    kResponsibleHyphenFieldNumber = 6,
    kCurrentStatusFieldNumber = 2,
    kProgressPercentageFieldNumber = 3,
    kRemainingEstimatedTimeFieldNumber = 7,
  };
  // map<string, string> progress_metadata = 8;
  int progress_metadata_size() const;
  private:
  int _internal_progress_metadata_size() const;

  public:
  void clear_progress_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& progress_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_progress_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_progress_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_progress_metadata();

  public:
  // string rollback_id = 1;
  void clear_rollback_id() ;
  const std::string& rollback_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rollback_id(Arg_&& arg, Args_... args);
  std::string* mutable_rollback_id();
  PROTOBUF_NODISCARD std::string* release_rollback_id();
  void set_allocated_rollback_id(std::string* value);

  private:
  const std::string& _internal_rollback_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rollback_id(
      const std::string& value);
  std::string* _internal_mutable_rollback_id();

  public:
  // string segment_id = 4;
  void clear_segment_id() ;
  const std::string& segment_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_id(Arg_&& arg, Args_... args);
  std::string* mutable_segment_id();
  PROTOBUF_NODISCARD std::string* release_segment_id();
  void set_allocated_segment_id(std::string* value);

  private:
  const std::string& _internal_segment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_id(
      const std::string& value);
  std::string* _internal_mutable_segment_id();

  public:
  // string last_update_timestamp = 5;
  void clear_last_update_timestamp() ;
  const std::string& last_update_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_update_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_update_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_update_timestamp();
  void set_allocated_last_update_timestamp(std::string* value);

  private:
  const std::string& _internal_last_update_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_update_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_update_timestamp();

  public:
  // string responsible_hyphen = 6;
  void clear_responsible_hyphen() ;
  const std::string& responsible_hyphen() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_responsible_hyphen(Arg_&& arg, Args_... args);
  std::string* mutable_responsible_hyphen();
  PROTOBUF_NODISCARD std::string* release_responsible_hyphen();
  void set_allocated_responsible_hyphen(std::string* value);

  private:
  const std::string& _internal_responsible_hyphen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responsible_hyphen(
      const std::string& value);
  std::string* _internal_mutable_responsible_hyphen();

  public:
  // .seigr.rollback.RollbackStatus current_status = 2;
  void clear_current_status() ;
  ::seigr::rollback::RollbackStatus current_status() const;
  void set_current_status(::seigr::rollback::RollbackStatus value);

  private:
  ::seigr::rollback::RollbackStatus _internal_current_status() const;
  void _internal_set_current_status(::seigr::rollback::RollbackStatus value);

  public:
  // float progress_percentage = 3;
  void clear_progress_percentage() ;
  float progress_percentage() const;
  void set_progress_percentage(float value);

  private:
  float _internal_progress_percentage() const;
  void _internal_set_progress_percentage(float value);

  public:
  // int32 remaining_estimated_time = 7;
  void clear_remaining_estimated_time() ;
  ::int32_t remaining_estimated_time() const;
  void set_remaining_estimated_time(::int32_t value);

  private:
  ::int32_t _internal_remaining_estimated_time() const;
  void _internal_set_remaining_estimated_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackProgress)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      125, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackProgress& from_msg);
    ::google::protobuf::internal::MapField<RollbackProgress_ProgressMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        progress_metadata_;
    ::google::protobuf::internal::ArenaStringPtr rollback_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_id_;
    ::google::protobuf::internal::ArenaStringPtr last_update_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr responsible_hyphen_;
    int current_status_;
    float progress_percentage_;
    ::int32_t remaining_estimated_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};
// -------------------------------------------------------------------

class RollbackLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackLog) */ {
 public:
  inline RollbackLog() : RollbackLog(nullptr) {}
  ~RollbackLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackLog(const RollbackLog& from) : RollbackLog(nullptr, from) {}
  inline RollbackLog(RollbackLog&& from) noexcept
      : RollbackLog(nullptr, std::move(from)) {}
  inline RollbackLog& operator=(const RollbackLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackLog& operator=(RollbackLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackLog* internal_default_instance() {
    return reinterpret_cast<const RollbackLog*>(
        &_RollbackLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RollbackLog& a, RollbackLog& b) { a.Swap(&b); }
  inline void Swap(RollbackLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackLog& from) { RollbackLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackLog"; }

 protected:
  explicit RollbackLog(::google::protobuf::Arena* arena);
  RollbackLog(::google::protobuf::Arena* arena, const RollbackLog& from);
  RollbackLog(::google::protobuf::Arena* arena, RollbackLog&& from) noexcept
      : RollbackLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 11,
    kLogIdFieldNumber = 1,
    kSegmentHashFieldNumber = 2,
    kRollbackTimestampFieldNumber = 3,
    kAttemptedAtFieldNumber = 4,
    kExecutedAtFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kDetailsFieldNumber = 9,
    kConflictResolutionStatusFieldNumber = 12,
    kEventTriggerFieldNumber = 7,
    kStatusFieldNumber = 8,
    kRetryAttemptFieldNumber = 10,
    kEcoFriendlyExecutionFieldNumber = 13,
  };
  // map<string, string> metadata = 11;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string segment_hash = 2;
  void clear_segment_hash() ;
  const std::string& segment_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_hash(Arg_&& arg, Args_... args);
  std::string* mutable_segment_hash();
  PROTOBUF_NODISCARD std::string* release_segment_hash();
  void set_allocated_segment_hash(std::string* value);

  private:
  const std::string& _internal_segment_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_hash(
      const std::string& value);
  std::string* _internal_mutable_segment_hash();

  public:
  // string rollback_timestamp = 3;
  void clear_rollback_timestamp() ;
  const std::string& rollback_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rollback_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_rollback_timestamp();
  PROTOBUF_NODISCARD std::string* release_rollback_timestamp();
  void set_allocated_rollback_timestamp(std::string* value);

  private:
  const std::string& _internal_rollback_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rollback_timestamp(
      const std::string& value);
  std::string* _internal_mutable_rollback_timestamp();

  public:
  // string attempted_at = 4;
  void clear_attempted_at() ;
  const std::string& attempted_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attempted_at(Arg_&& arg, Args_... args);
  std::string* mutable_attempted_at();
  PROTOBUF_NODISCARD std::string* release_attempted_at();
  void set_allocated_attempted_at(std::string* value);

  private:
  const std::string& _internal_attempted_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attempted_at(
      const std::string& value);
  std::string* _internal_mutable_attempted_at();

  public:
  // string executed_at = 5;
  void clear_executed_at() ;
  const std::string& executed_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executed_at(Arg_&& arg, Args_... args);
  std::string* mutable_executed_at();
  PROTOBUF_NODISCARD std::string* release_executed_at();
  void set_allocated_executed_at(std::string* value);

  private:
  const std::string& _internal_executed_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executed_at(
      const std::string& value);
  std::string* _internal_mutable_executed_at();

  public:
  // string user_id = 6;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string details = 9;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string conflict_resolution_status = 12;
  void clear_conflict_resolution_status() ;
  const std::string& conflict_resolution_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflict_resolution_status(Arg_&& arg, Args_... args);
  std::string* mutable_conflict_resolution_status();
  PROTOBUF_NODISCARD std::string* release_conflict_resolution_status();
  void set_allocated_conflict_resolution_status(std::string* value);

  private:
  const std::string& _internal_conflict_resolution_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conflict_resolution_status(
      const std::string& value);
  std::string* _internal_mutable_conflict_resolution_status();

  public:
  // .seigr.rollback.RollbackTrigger event_trigger = 7;
  void clear_event_trigger() ;
  ::seigr::rollback::RollbackTrigger event_trigger() const;
  void set_event_trigger(::seigr::rollback::RollbackTrigger value);

  private:
  ::seigr::rollback::RollbackTrigger _internal_event_trigger() const;
  void _internal_set_event_trigger(::seigr::rollback::RollbackTrigger value);

  public:
  // .seigr.rollback.RollbackStatus status = 8;
  void clear_status() ;
  ::seigr::rollback::RollbackStatus status() const;
  void set_status(::seigr::rollback::RollbackStatus value);

  private:
  ::seigr::rollback::RollbackStatus _internal_status() const;
  void _internal_set_status(::seigr::rollback::RollbackStatus value);

  public:
  // int32 retry_attempt = 10;
  void clear_retry_attempt() ;
  ::int32_t retry_attempt() const;
  void set_retry_attempt(::int32_t value);

  private:
  ::int32_t _internal_retry_attempt() const;
  void _internal_set_retry_attempt(::int32_t value);

  public:
  // bool eco_friendly_execution = 13;
  void clear_eco_friendly_execution() ;
  bool eco_friendly_execution() const;
  void set_eco_friendly_execution(bool value);

  private:
  bool _internal_eco_friendly_execution() const;
  void _internal_set_eco_friendly_execution(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      150, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackLog& from_msg);
    ::google::protobuf::internal::MapField<RollbackLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_hash_;
    ::google::protobuf::internal::ArenaStringPtr rollback_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr attempted_at_;
    ::google::protobuf::internal::ArenaStringPtr executed_at_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr conflict_resolution_status_;
    int event_trigger_;
    int status_;
    ::int32_t retry_attempt_;
    bool eco_friendly_execution_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};
// -------------------------------------------------------------------

class RollbackConflictResolution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackConflictResolution) */ {
 public:
  inline RollbackConflictResolution() : RollbackConflictResolution(nullptr) {}
  ~RollbackConflictResolution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackConflictResolution* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackConflictResolution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackConflictResolution(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackConflictResolution(const RollbackConflictResolution& from) : RollbackConflictResolution(nullptr, from) {}
  inline RollbackConflictResolution(RollbackConflictResolution&& from) noexcept
      : RollbackConflictResolution(nullptr, std::move(from)) {}
  inline RollbackConflictResolution& operator=(const RollbackConflictResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackConflictResolution& operator=(RollbackConflictResolution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackConflictResolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackConflictResolution* internal_default_instance() {
    return reinterpret_cast<const RollbackConflictResolution*>(
        &_RollbackConflictResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RollbackConflictResolution& a, RollbackConflictResolution& b) { a.Swap(&b); }
  inline void Swap(RollbackConflictResolution* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackConflictResolution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackConflictResolution* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackConflictResolution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackConflictResolution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackConflictResolution& from) { RollbackConflictResolution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackConflictResolution* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackConflictResolution"; }

 protected:
  explicit RollbackConflictResolution(::google::protobuf::Arena* arena);
  RollbackConflictResolution(::google::protobuf::Arena* arena, const RollbackConflictResolution& from);
  RollbackConflictResolution(::google::protobuf::Arena* arena, RollbackConflictResolution&& from) noexcept
      : RollbackConflictResolution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConflictingChangesFieldNumber = 3,
    kResolutionMetadataFieldNumber = 7,
    kConflictIdFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kResolutionStatusFieldNumber = 4,
    kResolvedByFieldNumber = 5,
    kResolutionTimestampFieldNumber = 6,
  };
  // repeated string conflicting_changes = 3;
  int conflicting_changes_size() const;
  private:
  int _internal_conflicting_changes_size() const;

  public:
  void clear_conflicting_changes() ;
  const std::string& conflicting_changes(int index) const;
  std::string* mutable_conflicting_changes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflicting_changes(int index, Arg_&& value, Args_... args);
  std::string* add_conflicting_changes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_conflicting_changes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& conflicting_changes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_conflicting_changes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_conflicting_changes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_conflicting_changes();

  public:
  // map<string, string> resolution_metadata = 7;
  int resolution_metadata_size() const;
  private:
  int _internal_resolution_metadata_size() const;

  public:
  void clear_resolution_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& resolution_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_resolution_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_resolution_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_resolution_metadata();

  public:
  // string conflict_id = 1;
  void clear_conflict_id() ;
  const std::string& conflict_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflict_id(Arg_&& arg, Args_... args);
  std::string* mutable_conflict_id();
  PROTOBUF_NODISCARD std::string* release_conflict_id();
  void set_allocated_conflict_id(std::string* value);

  private:
  const std::string& _internal_conflict_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conflict_id(
      const std::string& value);
  std::string* _internal_mutable_conflict_id();

  public:
  // string segment_id = 2;
  void clear_segment_id() ;
  const std::string& segment_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_id(Arg_&& arg, Args_... args);
  std::string* mutable_segment_id();
  PROTOBUF_NODISCARD std::string* release_segment_id();
  void set_allocated_segment_id(std::string* value);

  private:
  const std::string& _internal_segment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_id(
      const std::string& value);
  std::string* _internal_mutable_segment_id();

  public:
  // string resolution_status = 4;
  void clear_resolution_status() ;
  const std::string& resolution_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolution_status(Arg_&& arg, Args_... args);
  std::string* mutable_resolution_status();
  PROTOBUF_NODISCARD std::string* release_resolution_status();
  void set_allocated_resolution_status(std::string* value);

  private:
  const std::string& _internal_resolution_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution_status(
      const std::string& value);
  std::string* _internal_mutable_resolution_status();

  public:
  // string resolved_by = 5;
  void clear_resolved_by() ;
  const std::string& resolved_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolved_by(Arg_&& arg, Args_... args);
  std::string* mutable_resolved_by();
  PROTOBUF_NODISCARD std::string* release_resolved_by();
  void set_allocated_resolved_by(std::string* value);

  private:
  const std::string& _internal_resolved_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolved_by(
      const std::string& value);
  std::string* _internal_mutable_resolved_by();

  public:
  // string resolution_timestamp = 6;
  void clear_resolution_timestamp() ;
  const std::string& resolution_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolution_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_resolution_timestamp();
  PROTOBUF_NODISCARD std::string* release_resolution_timestamp();
  void set_allocated_resolution_timestamp(std::string* value);

  private:
  const std::string& _internal_resolution_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution_timestamp(
      const std::string& value);
  std::string* _internal_mutable_resolution_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackConflictResolution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      157, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackConflictResolution& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> conflicting_changes_;
    ::google::protobuf::internal::MapField<RollbackConflictResolution_ResolutionMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        resolution_metadata_;
    ::google::protobuf::internal::ArenaStringPtr conflict_id_;
    ::google::protobuf::internal::ArenaStringPtr segment_id_;
    ::google::protobuf::internal::ArenaStringPtr resolution_status_;
    ::google::protobuf::internal::ArenaStringPtr resolved_by_;
    ::google::protobuf::internal::ArenaStringPtr resolution_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};
// -------------------------------------------------------------------

class RollbackHistory final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.rollback.RollbackHistory) */ {
 public:
  inline RollbackHistory() : RollbackHistory(nullptr) {}
  ~RollbackHistory() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RollbackHistory* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RollbackHistory));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollbackHistory(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollbackHistory(const RollbackHistory& from) : RollbackHistory(nullptr, from) {}
  inline RollbackHistory(RollbackHistory&& from) noexcept
      : RollbackHistory(nullptr, std::move(from)) {}
  inline RollbackHistory& operator=(const RollbackHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackHistory& operator=(RollbackHistory&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackHistory* internal_default_instance() {
    return reinterpret_cast<const RollbackHistory*>(
        &_RollbackHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RollbackHistory& a, RollbackHistory& b) { a.Swap(&b); }
  inline void Swap(RollbackHistory* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackHistory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackHistory* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RollbackHistory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollbackHistory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollbackHistory& from) { RollbackHistory::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RollbackHistory* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.rollback.RollbackHistory"; }

 protected:
  explicit RollbackHistory(::google::protobuf::Arena* arena);
  RollbackHistory(::google::protobuf::Arena* arena, const RollbackHistory& from);
  RollbackHistory(::google::protobuf::Arena* arena, RollbackHistory&& from) noexcept
      : RollbackHistory(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollbackLogsFieldNumber = 2,
    kMetadataFieldNumber = 7,
    kSegmentIdFieldNumber = 1,
    kLastRollbackAtFieldNumber = 3,
    kRecoveryPlanReferenceFieldNumber = 8,
    kTotalRollbacksFieldNumber = 4,
    kSuccessfulRollbacksFieldNumber = 5,
    kFailedRollbacksFieldNumber = 6,
    kHasUnresolvedConflictsFieldNumber = 9,
    kEcoFriendlyRollbacksFieldNumber = 10,
  };
  // repeated .seigr.rollback.RollbackLog rollback_logs = 2;
  int rollback_logs_size() const;
  private:
  int _internal_rollback_logs_size() const;

  public:
  void clear_rollback_logs() ;
  ::seigr::rollback::RollbackLog* mutable_rollback_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>* mutable_rollback_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>& _internal_rollback_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>* _internal_mutable_rollback_logs();
  public:
  const ::seigr::rollback::RollbackLog& rollback_logs(int index) const;
  ::seigr::rollback::RollbackLog* add_rollback_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>& rollback_logs() const;
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string segment_id = 1;
  void clear_segment_id() ;
  const std::string& segment_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_segment_id(Arg_&& arg, Args_... args);
  std::string* mutable_segment_id();
  PROTOBUF_NODISCARD std::string* release_segment_id();
  void set_allocated_segment_id(std::string* value);

  private:
  const std::string& _internal_segment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_segment_id(
      const std::string& value);
  std::string* _internal_mutable_segment_id();

  public:
  // string last_rollback_at = 3;
  void clear_last_rollback_at() ;
  const std::string& last_rollback_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_rollback_at(Arg_&& arg, Args_... args);
  std::string* mutable_last_rollback_at();
  PROTOBUF_NODISCARD std::string* release_last_rollback_at();
  void set_allocated_last_rollback_at(std::string* value);

  private:
  const std::string& _internal_last_rollback_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_rollback_at(
      const std::string& value);
  std::string* _internal_mutable_last_rollback_at();

  public:
  // string recovery_plan_reference = 8;
  void clear_recovery_plan_reference() ;
  const std::string& recovery_plan_reference() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recovery_plan_reference(Arg_&& arg, Args_... args);
  std::string* mutable_recovery_plan_reference();
  PROTOBUF_NODISCARD std::string* release_recovery_plan_reference();
  void set_allocated_recovery_plan_reference(std::string* value);

  private:
  const std::string& _internal_recovery_plan_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recovery_plan_reference(
      const std::string& value);
  std::string* _internal_mutable_recovery_plan_reference();

  public:
  // int32 total_rollbacks = 4;
  void clear_total_rollbacks() ;
  ::int32_t total_rollbacks() const;
  void set_total_rollbacks(::int32_t value);

  private:
  ::int32_t _internal_total_rollbacks() const;
  void _internal_set_total_rollbacks(::int32_t value);

  public:
  // int32 successful_rollbacks = 5;
  void clear_successful_rollbacks() ;
  ::int32_t successful_rollbacks() const;
  void set_successful_rollbacks(::int32_t value);

  private:
  ::int32_t _internal_successful_rollbacks() const;
  void _internal_set_successful_rollbacks(::int32_t value);

  public:
  // int32 failed_rollbacks = 6;
  void clear_failed_rollbacks() ;
  ::int32_t failed_rollbacks() const;
  void set_failed_rollbacks(::int32_t value);

  private:
  ::int32_t _internal_failed_rollbacks() const;
  void _internal_set_failed_rollbacks(::int32_t value);

  public:
  // bool has_unresolved_conflicts = 9;
  void clear_has_unresolved_conflicts() ;
  bool has_unresolved_conflicts() const;
  void set_has_unresolved_conflicts(bool value);

  private:
  bool _internal_has_unresolved_conflicts() const;
  void _internal_set_has_unresolved_conflicts(bool value);

  public:
  // int32 eco_friendly_rollbacks = 10;
  void clear_eco_friendly_rollbacks() ;
  ::int32_t eco_friendly_rollbacks() const;
  void set_eco_friendly_rollbacks(::int32_t value);

  private:
  ::int32_t _internal_eco_friendly_rollbacks() const;
  void _internal_set_eco_friendly_rollbacks(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.rollback.RollbackHistory)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      104, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollbackHistory& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::rollback::RollbackLog > rollback_logs_;
    ::google::protobuf::internal::MapField<RollbackHistory_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr segment_id_;
    ::google::protobuf::internal::ArenaStringPtr last_rollback_at_;
    ::google::protobuf::internal::ArenaStringPtr recovery_plan_reference_;
    ::int32_t total_rollbacks_;
    ::int32_t successful_rollbacks_;
    ::int32_t failed_rollbacks_;
    bool has_unresolved_conflicts_;
    ::int32_t eco_friendly_rollbacks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rollback_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackLog

// string log_id = 1;
inline void RollbackLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& RollbackLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.log_id)
}
inline std::string* RollbackLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.log_id)
  return _s;
}
inline const std::string& RollbackLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void RollbackLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.log_id)
  return _impl_.log_id_.Release();
}
inline void RollbackLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.log_id)
}

// string segment_hash = 2;
inline void RollbackLog::clear_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.ClearToEmpty();
}
inline const std::string& RollbackLog::segment_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.segment_hash)
  return _internal_segment_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_segment_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.segment_hash)
}
inline std::string* RollbackLog::mutable_segment_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_hash();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.segment_hash)
  return _s;
}
inline const std::string& RollbackLog::_internal_segment_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_hash_.Get();
}
inline void RollbackLog::_internal_set_segment_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_hash_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.segment_hash)
  return _impl_.segment_hash_.Release();
}
inline void RollbackLog::set_allocated_segment_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_hash_.IsDefault()) {
    _impl_.segment_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.segment_hash)
}

// string rollback_timestamp = 3;
inline void RollbackLog::clear_rollback_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_timestamp_.ClearToEmpty();
}
inline const std::string& RollbackLog::rollback_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.rollback_timestamp)
  return _internal_rollback_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_rollback_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.rollback_timestamp)
}
inline std::string* RollbackLog::mutable_rollback_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rollback_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.rollback_timestamp)
  return _s;
}
inline const std::string& RollbackLog::_internal_rollback_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rollback_timestamp_.Get();
}
inline void RollbackLog::_internal_set_rollback_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_timestamp_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_rollback_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rollback_timestamp_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_rollback_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.rollback_timestamp)
  return _impl_.rollback_timestamp_.Release();
}
inline void RollbackLog::set_allocated_rollback_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rollback_timestamp_.IsDefault()) {
    _impl_.rollback_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.rollback_timestamp)
}

// string attempted_at = 4;
inline void RollbackLog::clear_attempted_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attempted_at_.ClearToEmpty();
}
inline const std::string& RollbackLog::attempted_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.attempted_at)
  return _internal_attempted_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_attempted_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attempted_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.attempted_at)
}
inline std::string* RollbackLog::mutable_attempted_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_attempted_at();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.attempted_at)
  return _s;
}
inline const std::string& RollbackLog::_internal_attempted_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attempted_at_.Get();
}
inline void RollbackLog::_internal_set_attempted_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attempted_at_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_attempted_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attempted_at_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_attempted_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.attempted_at)
  return _impl_.attempted_at_.Release();
}
inline void RollbackLog::set_allocated_attempted_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attempted_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.attempted_at_.IsDefault()) {
    _impl_.attempted_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.attempted_at)
}

// string executed_at = 5;
inline void RollbackLog::clear_executed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_at_.ClearToEmpty();
}
inline const std::string& RollbackLog::executed_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.executed_at)
  return _internal_executed_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_executed_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.executed_at)
}
inline std::string* RollbackLog::mutable_executed_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executed_at();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.executed_at)
  return _s;
}
inline const std::string& RollbackLog::_internal_executed_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executed_at_.Get();
}
inline void RollbackLog::_internal_set_executed_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_at_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_executed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executed_at_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_executed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.executed_at)
  return _impl_.executed_at_.Release();
}
inline void RollbackLog::set_allocated_executed_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executed_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.executed_at_.IsDefault()) {
    _impl_.executed_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.executed_at)
}

// string user_id = 6;
inline void RollbackLog::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& RollbackLog::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.user_id)
}
inline std::string* RollbackLog::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.user_id)
  return _s;
}
inline const std::string& RollbackLog::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void RollbackLog::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.user_id)
  return _impl_.user_id_.Release();
}
inline void RollbackLog::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.user_id)
}

// .seigr.rollback.RollbackTrigger event_trigger = 7;
inline void RollbackLog::clear_event_trigger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_trigger_ = 0;
}
inline ::seigr::rollback::RollbackTrigger RollbackLog::event_trigger() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.event_trigger)
  return _internal_event_trigger();
}
inline void RollbackLog::set_event_trigger(::seigr::rollback::RollbackTrigger value) {
  _internal_set_event_trigger(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.event_trigger)
}
inline ::seigr::rollback::RollbackTrigger RollbackLog::_internal_event_trigger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::rollback::RollbackTrigger>(_impl_.event_trigger_);
}
inline void RollbackLog::_internal_set_event_trigger(::seigr::rollback::RollbackTrigger value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_trigger_ = value;
}

// .seigr.rollback.RollbackStatus status = 8;
inline void RollbackLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::rollback::RollbackStatus RollbackLog::status() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.status)
  return _internal_status();
}
inline void RollbackLog::set_status(::seigr::rollback::RollbackStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.status)
}
inline ::seigr::rollback::RollbackStatus RollbackLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::rollback::RollbackStatus>(_impl_.status_);
}
inline void RollbackLog::_internal_set_status(::seigr::rollback::RollbackStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string details = 9;
inline void RollbackLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& RollbackLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.details)
}
inline std::string* RollbackLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.details)
  return _s;
}
inline const std::string& RollbackLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void RollbackLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.details)
  return _impl_.details_.Release();
}
inline void RollbackLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.details)
}

// int32 retry_attempt = 10;
inline void RollbackLog::clear_retry_attempt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempt_ = 0;
}
inline ::int32_t RollbackLog::retry_attempt() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.retry_attempt)
  return _internal_retry_attempt();
}
inline void RollbackLog::set_retry_attempt(::int32_t value) {
  _internal_set_retry_attempt(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.retry_attempt)
}
inline ::int32_t RollbackLog::_internal_retry_attempt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_attempt_;
}
inline void RollbackLog::_internal_set_retry_attempt(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempt_ = value;
}

// map<string, string> metadata = 11;
inline int RollbackLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int RollbackLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void RollbackLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackLog.metadata)
  return _internal_mutable_metadata();
}

// string conflict_resolution_status = 12;
inline void RollbackLog::clear_conflict_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_resolution_status_.ClearToEmpty();
}
inline const std::string& RollbackLog::conflict_resolution_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.conflict_resolution_status)
  return _internal_conflict_resolution_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackLog::set_conflict_resolution_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_resolution_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.conflict_resolution_status)
}
inline std::string* RollbackLog::mutable_conflict_resolution_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conflict_resolution_status();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackLog.conflict_resolution_status)
  return _s;
}
inline const std::string& RollbackLog::_internal_conflict_resolution_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_resolution_status_.Get();
}
inline void RollbackLog::_internal_set_conflict_resolution_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_resolution_status_.Set(value, GetArena());
}
inline std::string* RollbackLog::_internal_mutable_conflict_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conflict_resolution_status_.Mutable( GetArena());
}
inline std::string* RollbackLog::release_conflict_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackLog.conflict_resolution_status)
  return _impl_.conflict_resolution_status_.Release();
}
inline void RollbackLog::set_allocated_conflict_resolution_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_resolution_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conflict_resolution_status_.IsDefault()) {
    _impl_.conflict_resolution_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackLog.conflict_resolution_status)
}

// bool eco_friendly_execution = 13;
inline void RollbackLog::clear_eco_friendly_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_execution_ = false;
}
inline bool RollbackLog::eco_friendly_execution() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackLog.eco_friendly_execution)
  return _internal_eco_friendly_execution();
}
inline void RollbackLog::set_eco_friendly_execution(bool value) {
  _internal_set_eco_friendly_execution(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackLog.eco_friendly_execution)
}
inline bool RollbackLog::_internal_eco_friendly_execution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_friendly_execution_;
}
inline void RollbackLog::_internal_set_eco_friendly_execution(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_execution_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackRequest

// string request_id = 1;
inline void RollbackRequest::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& RollbackRequest::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.request_id)
}
inline std::string* RollbackRequest::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.request_id)
  return _s;
}
inline const std::string& RollbackRequest::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void RollbackRequest::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void RollbackRequest::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.request_id)
}

// string segment_hash = 2;
inline void RollbackRequest::clear_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.ClearToEmpty();
}
inline const std::string& RollbackRequest::segment_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.segment_hash)
  return _internal_segment_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_segment_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.segment_hash)
}
inline std::string* RollbackRequest::mutable_segment_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_hash();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.segment_hash)
  return _s;
}
inline const std::string& RollbackRequest::_internal_segment_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_hash_.Get();
}
inline void RollbackRequest::_internal_set_segment_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_hash_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.segment_hash)
  return _impl_.segment_hash_.Release();
}
inline void RollbackRequest::set_allocated_segment_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_hash_.IsDefault()) {
    _impl_.segment_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.segment_hash)
}

// string target_timestamp = 3;
inline void RollbackRequest::clear_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.ClearToEmpty();
}
inline const std::string& RollbackRequest::target_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.target_timestamp)
  return _internal_target_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_target_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.target_timestamp)
}
inline std::string* RollbackRequest::mutable_target_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.target_timestamp)
  return _s;
}
inline const std::string& RollbackRequest::_internal_target_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_timestamp_.Get();
}
inline void RollbackRequest::_internal_set_target_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_timestamp_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_target_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.target_timestamp)
  return _impl_.target_timestamp_.Release();
}
inline void RollbackRequest::set_allocated_target_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_timestamp_.IsDefault()) {
    _impl_.target_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.target_timestamp)
}

// .seigr.rollback.RollbackTrigger trigger = 4;
inline void RollbackRequest::clear_trigger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trigger_ = 0;
}
inline ::seigr::rollback::RollbackTrigger RollbackRequest::trigger() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.trigger)
  return _internal_trigger();
}
inline void RollbackRequest::set_trigger(::seigr::rollback::RollbackTrigger value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.trigger)
}
inline ::seigr::rollback::RollbackTrigger RollbackRequest::_internal_trigger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::rollback::RollbackTrigger>(_impl_.trigger_);
}
inline void RollbackRequest::_internal_set_trigger(::seigr::rollback::RollbackTrigger value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trigger_ = value;
}

// string requested_by = 5;
inline void RollbackRequest::clear_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.ClearToEmpty();
}
inline const std::string& RollbackRequest::requested_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.requested_by)
  return _internal_requested_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_requested_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.requested_by)
}
inline std::string* RollbackRequest::mutable_requested_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requested_by();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.requested_by)
  return _s;
}
inline const std::string& RollbackRequest::_internal_requested_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_by_.Get();
}
inline void RollbackRequest::_internal_set_requested_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requested_by_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_requested_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.requested_by)
  return _impl_.requested_by_.Release();
}
inline void RollbackRequest::set_allocated_requested_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requested_by_.IsDefault()) {
    _impl_.requested_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.requested_by)
}

// string requested_at = 6;
inline void RollbackRequest::clear_requested_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_at_.ClearToEmpty();
}
inline const std::string& RollbackRequest::requested_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.requested_at)
  return _internal_requested_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_requested_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.requested_at)
}
inline std::string* RollbackRequest::mutable_requested_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requested_at();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.requested_at)
  return _s;
}
inline const std::string& RollbackRequest::_internal_requested_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_at_.Get();
}
inline void RollbackRequest::_internal_set_requested_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_at_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_requested_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.requested_at_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_requested_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.requested_at)
  return _impl_.requested_at_.Release();
}
inline void RollbackRequest::set_allocated_requested_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.requested_at_.IsDefault()) {
    _impl_.requested_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.requested_at)
}

// map<string, string> parameters = 7;
inline int RollbackRequest::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int RollbackRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void RollbackRequest::clear_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackRequest::_internal_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackRequest::parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackRequest.parameters)
  return _internal_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackRequest::_internal_mutable_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackRequest::mutable_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackRequest.parameters)
  return _internal_mutable_parameters();
}

// bool validate_before_execution = 8;
inline void RollbackRequest::clear_validate_before_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validate_before_execution_ = false;
}
inline bool RollbackRequest::validate_before_execution() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.validate_before_execution)
  return _internal_validate_before_execution();
}
inline void RollbackRequest::set_validate_before_execution(bool value) {
  _internal_set_validate_before_execution(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.validate_before_execution)
}
inline bool RollbackRequest::_internal_validate_before_execution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validate_before_execution_;
}
inline void RollbackRequest::_internal_set_validate_before_execution(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validate_before_execution_ = value;
}

// int32 max_retry_attempts = 9;
inline void RollbackRequest::clear_max_retry_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_retry_attempts_ = 0;
}
inline ::int32_t RollbackRequest::max_retry_attempts() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.max_retry_attempts)
  return _internal_max_retry_attempts();
}
inline void RollbackRequest::set_max_retry_attempts(::int32_t value) {
  _internal_set_max_retry_attempts(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.max_retry_attempts)
}
inline ::int32_t RollbackRequest::_internal_max_retry_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_retry_attempts_;
}
inline void RollbackRequest::_internal_set_max_retry_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_retry_attempts_ = value;
}

// bool requires_approval = 10;
inline void RollbackRequest::clear_requires_approval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_approval_ = false;
}
inline bool RollbackRequest::requires_approval() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.requires_approval)
  return _internal_requires_approval();
}
inline void RollbackRequest::set_requires_approval(bool value) {
  _internal_set_requires_approval(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.requires_approval)
}
inline bool RollbackRequest::_internal_requires_approval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_approval_;
}
inline void RollbackRequest::_internal_set_requires_approval(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_approval_ = value;
}

// string dependent_segment_id = 11;
inline void RollbackRequest::clear_dependent_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependent_segment_id_.ClearToEmpty();
}
inline const std::string& RollbackRequest::dependent_segment_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.dependent_segment_id)
  return _internal_dependent_segment_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackRequest::set_dependent_segment_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependent_segment_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.dependent_segment_id)
}
inline std::string* RollbackRequest::mutable_dependent_segment_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dependent_segment_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackRequest.dependent_segment_id)
  return _s;
}
inline const std::string& RollbackRequest::_internal_dependent_segment_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependent_segment_id_.Get();
}
inline void RollbackRequest::_internal_set_dependent_segment_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependent_segment_id_.Set(value, GetArena());
}
inline std::string* RollbackRequest::_internal_mutable_dependent_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dependent_segment_id_.Mutable( GetArena());
}
inline std::string* RollbackRequest::release_dependent_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackRequest.dependent_segment_id)
  return _impl_.dependent_segment_id_.Release();
}
inline void RollbackRequest::set_allocated_dependent_segment_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependent_segment_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dependent_segment_id_.IsDefault()) {
    _impl_.dependent_segment_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackRequest.dependent_segment_id)
}

// bool eco_friendly_mode = 12;
inline void RollbackRequest::clear_eco_friendly_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_mode_ = false;
}
inline bool RollbackRequest::eco_friendly_mode() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackRequest.eco_friendly_mode)
  return _internal_eco_friendly_mode();
}
inline void RollbackRequest::set_eco_friendly_mode(bool value) {
  _internal_set_eco_friendly_mode(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackRequest.eco_friendly_mode)
}
inline bool RollbackRequest::_internal_eco_friendly_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_friendly_mode_;
}
inline void RollbackRequest::_internal_set_eco_friendly_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_mode_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackValidationResult

// string validation_id = 1;
inline void RollbackValidationResult::clear_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.ClearToEmpty();
}
inline const std::string& RollbackValidationResult::validation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.validation_id)
  return _internal_validation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackValidationResult::set_validation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.validation_id)
}
inline std::string* RollbackValidationResult::mutable_validation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.validation_id)
  return _s;
}
inline const std::string& RollbackValidationResult::_internal_validation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_id_.Get();
}
inline void RollbackValidationResult::_internal_set_validation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.Set(value, GetArena());
}
inline std::string* RollbackValidationResult::_internal_mutable_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_id_.Mutable( GetArena());
}
inline std::string* RollbackValidationResult::release_validation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackValidationResult.validation_id)
  return _impl_.validation_id_.Release();
}
inline void RollbackValidationResult::set_allocated_validation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_id_.IsDefault()) {
    _impl_.validation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackValidationResult.validation_id)
}

// string segment_hash = 2;
inline void RollbackValidationResult::clear_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.ClearToEmpty();
}
inline const std::string& RollbackValidationResult::segment_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.segment_hash)
  return _internal_segment_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackValidationResult::set_segment_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.segment_hash)
}
inline std::string* RollbackValidationResult::mutable_segment_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_hash();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.segment_hash)
  return _s;
}
inline const std::string& RollbackValidationResult::_internal_segment_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_hash_.Get();
}
inline void RollbackValidationResult::_internal_set_segment_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.Set(value, GetArena());
}
inline std::string* RollbackValidationResult::_internal_mutable_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_hash_.Mutable( GetArena());
}
inline std::string* RollbackValidationResult::release_segment_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackValidationResult.segment_hash)
  return _impl_.segment_hash_.Release();
}
inline void RollbackValidationResult::set_allocated_segment_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_hash_.IsDefault()) {
    _impl_.segment_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackValidationResult.segment_hash)
}

// bool is_valid = 3;
inline void RollbackValidationResult::clear_is_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = false;
}
inline bool RollbackValidationResult::is_valid() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.is_valid)
  return _internal_is_valid();
}
inline void RollbackValidationResult::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.is_valid)
}
inline bool RollbackValidationResult::_internal_is_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_valid_;
}
inline void RollbackValidationResult::_internal_set_is_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = value;
}

// string validation_message = 4;
inline void RollbackValidationResult::clear_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.ClearToEmpty();
}
inline const std::string& RollbackValidationResult::validation_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.validation_message)
  return _internal_validation_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackValidationResult::set_validation_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.validation_message)
}
inline std::string* RollbackValidationResult::mutable_validation_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_message();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.validation_message)
  return _s;
}
inline const std::string& RollbackValidationResult::_internal_validation_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_message_.Get();
}
inline void RollbackValidationResult::_internal_set_validation_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.Set(value, GetArena());
}
inline std::string* RollbackValidationResult::_internal_mutable_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_message_.Mutable( GetArena());
}
inline std::string* RollbackValidationResult::release_validation_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackValidationResult.validation_message)
  return _impl_.validation_message_.Release();
}
inline void RollbackValidationResult::set_allocated_validation_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_message_.IsDefault()) {
    _impl_.validation_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackValidationResult.validation_message)
}

// string validated_at = 5;
inline void RollbackValidationResult::clear_validated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validated_at_.ClearToEmpty();
}
inline const std::string& RollbackValidationResult::validated_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.validated_at)
  return _internal_validated_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackValidationResult::set_validated_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validated_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.validated_at)
}
inline std::string* RollbackValidationResult::mutable_validated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validated_at();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.validated_at)
  return _s;
}
inline const std::string& RollbackValidationResult::_internal_validated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validated_at_.Get();
}
inline void RollbackValidationResult::_internal_set_validated_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validated_at_.Set(value, GetArena());
}
inline std::string* RollbackValidationResult::_internal_mutable_validated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validated_at_.Mutable( GetArena());
}
inline std::string* RollbackValidationResult::release_validated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackValidationResult.validated_at)
  return _impl_.validated_at_.Release();
}
inline void RollbackValidationResult::set_allocated_validated_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validated_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validated_at_.IsDefault()) {
    _impl_.validated_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackValidationResult.validated_at)
}

// map<string, string> validation_metadata = 6;
inline int RollbackValidationResult::_internal_validation_metadata_size() const {
  return _internal_validation_metadata().size();
}
inline int RollbackValidationResult::validation_metadata_size() const {
  return _internal_validation_metadata_size();
}
inline void RollbackValidationResult::clear_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackValidationResult::_internal_validation_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackValidationResult::validation_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackValidationResult.validation_metadata)
  return _internal_validation_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackValidationResult::_internal_mutable_validation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackValidationResult::mutable_validation_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackValidationResult.validation_metadata)
  return _internal_mutable_validation_metadata();
}

// repeated string invalid_reasons = 7;
inline int RollbackValidationResult::_internal_invalid_reasons_size() const {
  return _internal_invalid_reasons().size();
}
inline int RollbackValidationResult::invalid_reasons_size() const {
  return _internal_invalid_reasons_size();
}
inline void RollbackValidationResult::clear_invalid_reasons() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_reasons_.Clear();
}
inline std::string* RollbackValidationResult::add_invalid_reasons() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_invalid_reasons()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.rollback.RollbackValidationResult.invalid_reasons)
  return _s;
}
inline const std::string& RollbackValidationResult::invalid_reasons(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.invalid_reasons)
  return _internal_invalid_reasons().Get(index);
}
inline std::string* RollbackValidationResult::mutable_invalid_reasons(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.invalid_reasons)
  return _internal_mutable_invalid_reasons()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RollbackValidationResult::set_invalid_reasons(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_invalid_reasons()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.invalid_reasons)
}
template <typename Arg_, typename... Args_>
inline void RollbackValidationResult::add_invalid_reasons(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_invalid_reasons(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.rollback.RollbackValidationResult.invalid_reasons)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackValidationResult::invalid_reasons() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.rollback.RollbackValidationResult.invalid_reasons)
  return _internal_invalid_reasons();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackValidationResult::mutable_invalid_reasons() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.rollback.RollbackValidationResult.invalid_reasons)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_invalid_reasons();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackValidationResult::_internal_invalid_reasons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.invalid_reasons_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackValidationResult::_internal_mutable_invalid_reasons() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.invalid_reasons_;
}

// string recommended_action = 8;
inline void RollbackValidationResult::clear_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.ClearToEmpty();
}
inline const std::string& RollbackValidationResult::recommended_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.recommended_action)
  return _internal_recommended_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackValidationResult::set_recommended_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.recommended_action)
}
inline std::string* RollbackValidationResult::mutable_recommended_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recommended_action();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.recommended_action)
  return _s;
}
inline const std::string& RollbackValidationResult::_internal_recommended_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recommended_action_.Get();
}
inline void RollbackValidationResult::_internal_set_recommended_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.Set(value, GetArena());
}
inline std::string* RollbackValidationResult::_internal_mutable_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recommended_action_.Mutable( GetArena());
}
inline std::string* RollbackValidationResult::release_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackValidationResult.recommended_action)
  return _impl_.recommended_action_.Release();
}
inline void RollbackValidationResult::set_allocated_recommended_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recommended_action_.IsDefault()) {
    _impl_.recommended_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackValidationResult.recommended_action)
}

// repeated string dependencies_checked = 9;
inline int RollbackValidationResult::_internal_dependencies_checked_size() const {
  return _internal_dependencies_checked().size();
}
inline int RollbackValidationResult::dependencies_checked_size() const {
  return _internal_dependencies_checked_size();
}
inline void RollbackValidationResult::clear_dependencies_checked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependencies_checked_.Clear();
}
inline std::string* RollbackValidationResult::add_dependencies_checked() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_dependencies_checked()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.rollback.RollbackValidationResult.dependencies_checked)
  return _s;
}
inline const std::string& RollbackValidationResult::dependencies_checked(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackValidationResult.dependencies_checked)
  return _internal_dependencies_checked().Get(index);
}
inline std::string* RollbackValidationResult::mutable_dependencies_checked(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackValidationResult.dependencies_checked)
  return _internal_mutable_dependencies_checked()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RollbackValidationResult::set_dependencies_checked(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_dependencies_checked()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackValidationResult.dependencies_checked)
}
template <typename Arg_, typename... Args_>
inline void RollbackValidationResult::add_dependencies_checked(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_dependencies_checked(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.rollback.RollbackValidationResult.dependencies_checked)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackValidationResult::dependencies_checked() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.rollback.RollbackValidationResult.dependencies_checked)
  return _internal_dependencies_checked();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackValidationResult::mutable_dependencies_checked() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.rollback.RollbackValidationResult.dependencies_checked)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_dependencies_checked();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackValidationResult::_internal_dependencies_checked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependencies_checked_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackValidationResult::_internal_mutable_dependencies_checked() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.dependencies_checked_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackHistory

// string segment_id = 1;
inline void RollbackHistory::clear_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.ClearToEmpty();
}
inline const std::string& RollbackHistory::segment_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.segment_id)
  return _internal_segment_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackHistory::set_segment_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.segment_id)
}
inline std::string* RollbackHistory::mutable_segment_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackHistory.segment_id)
  return _s;
}
inline const std::string& RollbackHistory::_internal_segment_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_id_.Get();
}
inline void RollbackHistory::_internal_set_segment_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(value, GetArena());
}
inline std::string* RollbackHistory::_internal_mutable_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_id_.Mutable( GetArena());
}
inline std::string* RollbackHistory::release_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackHistory.segment_id)
  return _impl_.segment_id_.Release();
}
inline void RollbackHistory::set_allocated_segment_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_id_.IsDefault()) {
    _impl_.segment_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackHistory.segment_id)
}

// repeated .seigr.rollback.RollbackLog rollback_logs = 2;
inline int RollbackHistory::_internal_rollback_logs_size() const {
  return _internal_rollback_logs().size();
}
inline int RollbackHistory::rollback_logs_size() const {
  return _internal_rollback_logs_size();
}
inline void RollbackHistory::clear_rollback_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_logs_.Clear();
}
inline ::seigr::rollback::RollbackLog* RollbackHistory::mutable_rollback_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackHistory.rollback_logs)
  return _internal_mutable_rollback_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>* RollbackHistory::mutable_rollback_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.rollback.RollbackHistory.rollback_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rollback_logs();
}
inline const ::seigr::rollback::RollbackLog& RollbackHistory::rollback_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.rollback_logs)
  return _internal_rollback_logs().Get(index);
}
inline ::seigr::rollback::RollbackLog* RollbackHistory::add_rollback_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::rollback::RollbackLog* _add = _internal_mutable_rollback_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.rollback.RollbackHistory.rollback_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>& RollbackHistory::rollback_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.rollback.RollbackHistory.rollback_logs)
  return _internal_rollback_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>&
RollbackHistory::_internal_rollback_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rollback_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::rollback::RollbackLog>*
RollbackHistory::_internal_mutable_rollback_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rollback_logs_;
}

// string last_rollback_at = 3;
inline void RollbackHistory::clear_last_rollback_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_rollback_at_.ClearToEmpty();
}
inline const std::string& RollbackHistory::last_rollback_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.last_rollback_at)
  return _internal_last_rollback_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackHistory::set_last_rollback_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_rollback_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.last_rollback_at)
}
inline std::string* RollbackHistory::mutable_last_rollback_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_rollback_at();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackHistory.last_rollback_at)
  return _s;
}
inline const std::string& RollbackHistory::_internal_last_rollback_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_rollback_at_.Get();
}
inline void RollbackHistory::_internal_set_last_rollback_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_rollback_at_.Set(value, GetArena());
}
inline std::string* RollbackHistory::_internal_mutable_last_rollback_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_rollback_at_.Mutable( GetArena());
}
inline std::string* RollbackHistory::release_last_rollback_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackHistory.last_rollback_at)
  return _impl_.last_rollback_at_.Release();
}
inline void RollbackHistory::set_allocated_last_rollback_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_rollback_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_rollback_at_.IsDefault()) {
    _impl_.last_rollback_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackHistory.last_rollback_at)
}

// int32 total_rollbacks = 4;
inline void RollbackHistory::clear_total_rollbacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rollbacks_ = 0;
}
inline ::int32_t RollbackHistory::total_rollbacks() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.total_rollbacks)
  return _internal_total_rollbacks();
}
inline void RollbackHistory::set_total_rollbacks(::int32_t value) {
  _internal_set_total_rollbacks(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.total_rollbacks)
}
inline ::int32_t RollbackHistory::_internal_total_rollbacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_rollbacks_;
}
inline void RollbackHistory::_internal_set_total_rollbacks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rollbacks_ = value;
}

// int32 successful_rollbacks = 5;
inline void RollbackHistory::clear_successful_rollbacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_rollbacks_ = 0;
}
inline ::int32_t RollbackHistory::successful_rollbacks() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.successful_rollbacks)
  return _internal_successful_rollbacks();
}
inline void RollbackHistory::set_successful_rollbacks(::int32_t value) {
  _internal_set_successful_rollbacks(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.successful_rollbacks)
}
inline ::int32_t RollbackHistory::_internal_successful_rollbacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.successful_rollbacks_;
}
inline void RollbackHistory::_internal_set_successful_rollbacks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_rollbacks_ = value;
}

// int32 failed_rollbacks = 6;
inline void RollbackHistory::clear_failed_rollbacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_rollbacks_ = 0;
}
inline ::int32_t RollbackHistory::failed_rollbacks() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.failed_rollbacks)
  return _internal_failed_rollbacks();
}
inline void RollbackHistory::set_failed_rollbacks(::int32_t value) {
  _internal_set_failed_rollbacks(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.failed_rollbacks)
}
inline ::int32_t RollbackHistory::_internal_failed_rollbacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failed_rollbacks_;
}
inline void RollbackHistory::_internal_set_failed_rollbacks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failed_rollbacks_ = value;
}

// map<string, string> metadata = 7;
inline int RollbackHistory::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int RollbackHistory::metadata_size() const {
  return _internal_metadata_size();
}
inline void RollbackHistory::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackHistory::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackHistory::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackHistory.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackHistory::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackHistory::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackHistory.metadata)
  return _internal_mutable_metadata();
}

// string recovery_plan_reference = 8;
inline void RollbackHistory::clear_recovery_plan_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_plan_reference_.ClearToEmpty();
}
inline const std::string& RollbackHistory::recovery_plan_reference() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.recovery_plan_reference)
  return _internal_recovery_plan_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackHistory::set_recovery_plan_reference(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_plan_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.recovery_plan_reference)
}
inline std::string* RollbackHistory::mutable_recovery_plan_reference() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recovery_plan_reference();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackHistory.recovery_plan_reference)
  return _s;
}
inline const std::string& RollbackHistory::_internal_recovery_plan_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recovery_plan_reference_.Get();
}
inline void RollbackHistory::_internal_set_recovery_plan_reference(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_plan_reference_.Set(value, GetArena());
}
inline std::string* RollbackHistory::_internal_mutable_recovery_plan_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recovery_plan_reference_.Mutable( GetArena());
}
inline std::string* RollbackHistory::release_recovery_plan_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackHistory.recovery_plan_reference)
  return _impl_.recovery_plan_reference_.Release();
}
inline void RollbackHistory::set_allocated_recovery_plan_reference(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_plan_reference_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recovery_plan_reference_.IsDefault()) {
    _impl_.recovery_plan_reference_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackHistory.recovery_plan_reference)
}

// bool has_unresolved_conflicts = 9;
inline void RollbackHistory::clear_has_unresolved_conflicts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_unresolved_conflicts_ = false;
}
inline bool RollbackHistory::has_unresolved_conflicts() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.has_unresolved_conflicts)
  return _internal_has_unresolved_conflicts();
}
inline void RollbackHistory::set_has_unresolved_conflicts(bool value) {
  _internal_set_has_unresolved_conflicts(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.has_unresolved_conflicts)
}
inline bool RollbackHistory::_internal_has_unresolved_conflicts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_unresolved_conflicts_;
}
inline void RollbackHistory::_internal_set_has_unresolved_conflicts(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_unresolved_conflicts_ = value;
}

// int32 eco_friendly_rollbacks = 10;
inline void RollbackHistory::clear_eco_friendly_rollbacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_rollbacks_ = 0;
}
inline ::int32_t RollbackHistory::eco_friendly_rollbacks() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackHistory.eco_friendly_rollbacks)
  return _internal_eco_friendly_rollbacks();
}
inline void RollbackHistory::set_eco_friendly_rollbacks(::int32_t value) {
  _internal_set_eco_friendly_rollbacks(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackHistory.eco_friendly_rollbacks)
}
inline ::int32_t RollbackHistory::_internal_eco_friendly_rollbacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_friendly_rollbacks_;
}
inline void RollbackHistory::_internal_set_eco_friendly_rollbacks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_rollbacks_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackProgress

// string rollback_id = 1;
inline void RollbackProgress::clear_rollback_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_id_.ClearToEmpty();
}
inline const std::string& RollbackProgress::rollback_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.rollback_id)
  return _internal_rollback_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackProgress::set_rollback_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.rollback_id)
}
inline std::string* RollbackProgress::mutable_rollback_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rollback_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackProgress.rollback_id)
  return _s;
}
inline const std::string& RollbackProgress::_internal_rollback_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rollback_id_.Get();
}
inline void RollbackProgress::_internal_set_rollback_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_id_.Set(value, GetArena());
}
inline std::string* RollbackProgress::_internal_mutable_rollback_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rollback_id_.Mutable( GetArena());
}
inline std::string* RollbackProgress::release_rollback_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackProgress.rollback_id)
  return _impl_.rollback_id_.Release();
}
inline void RollbackProgress::set_allocated_rollback_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rollback_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rollback_id_.IsDefault()) {
    _impl_.rollback_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackProgress.rollback_id)
}

// .seigr.rollback.RollbackStatus current_status = 2;
inline void RollbackProgress::clear_current_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = 0;
}
inline ::seigr::rollback::RollbackStatus RollbackProgress::current_status() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.current_status)
  return _internal_current_status();
}
inline void RollbackProgress::set_current_status(::seigr::rollback::RollbackStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.current_status)
}
inline ::seigr::rollback::RollbackStatus RollbackProgress::_internal_current_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::rollback::RollbackStatus>(_impl_.current_status_);
}
inline void RollbackProgress::_internal_set_current_status(::seigr::rollback::RollbackStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_status_ = value;
}

// float progress_percentage = 3;
inline void RollbackProgress::clear_progress_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_percentage_ = 0;
}
inline float RollbackProgress::progress_percentage() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.progress_percentage)
  return _internal_progress_percentage();
}
inline void RollbackProgress::set_progress_percentage(float value) {
  _internal_set_progress_percentage(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.progress_percentage)
}
inline float RollbackProgress::_internal_progress_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.progress_percentage_;
}
inline void RollbackProgress::_internal_set_progress_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_percentage_ = value;
}

// string segment_id = 4;
inline void RollbackProgress::clear_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.ClearToEmpty();
}
inline const std::string& RollbackProgress::segment_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.segment_id)
  return _internal_segment_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackProgress::set_segment_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.segment_id)
}
inline std::string* RollbackProgress::mutable_segment_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackProgress.segment_id)
  return _s;
}
inline const std::string& RollbackProgress::_internal_segment_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_id_.Get();
}
inline void RollbackProgress::_internal_set_segment_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(value, GetArena());
}
inline std::string* RollbackProgress::_internal_mutable_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_id_.Mutable( GetArena());
}
inline std::string* RollbackProgress::release_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackProgress.segment_id)
  return _impl_.segment_id_.Release();
}
inline void RollbackProgress::set_allocated_segment_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_id_.IsDefault()) {
    _impl_.segment_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackProgress.segment_id)
}

// string last_update_timestamp = 5;
inline void RollbackProgress::clear_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.ClearToEmpty();
}
inline const std::string& RollbackProgress::last_update_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.last_update_timestamp)
  return _internal_last_update_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackProgress::set_last_update_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.last_update_timestamp)
}
inline std::string* RollbackProgress::mutable_last_update_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_update_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackProgress.last_update_timestamp)
  return _s;
}
inline const std::string& RollbackProgress::_internal_last_update_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_update_timestamp_.Get();
}
inline void RollbackProgress::_internal_set_last_update_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.Set(value, GetArena());
}
inline std::string* RollbackProgress::_internal_mutable_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_update_timestamp_.Mutable( GetArena());
}
inline std::string* RollbackProgress::release_last_update_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackProgress.last_update_timestamp)
  return _impl_.last_update_timestamp_.Release();
}
inline void RollbackProgress::set_allocated_last_update_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_update_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_update_timestamp_.IsDefault()) {
    _impl_.last_update_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackProgress.last_update_timestamp)
}

// string responsible_hyphen = 6;
inline void RollbackProgress::clear_responsible_hyphen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responsible_hyphen_.ClearToEmpty();
}
inline const std::string& RollbackProgress::responsible_hyphen() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.responsible_hyphen)
  return _internal_responsible_hyphen();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackProgress::set_responsible_hyphen(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responsible_hyphen_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.responsible_hyphen)
}
inline std::string* RollbackProgress::mutable_responsible_hyphen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_responsible_hyphen();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackProgress.responsible_hyphen)
  return _s;
}
inline const std::string& RollbackProgress::_internal_responsible_hyphen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.responsible_hyphen_.Get();
}
inline void RollbackProgress::_internal_set_responsible_hyphen(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responsible_hyphen_.Set(value, GetArena());
}
inline std::string* RollbackProgress::_internal_mutable_responsible_hyphen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.responsible_hyphen_.Mutable( GetArena());
}
inline std::string* RollbackProgress::release_responsible_hyphen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackProgress.responsible_hyphen)
  return _impl_.responsible_hyphen_.Release();
}
inline void RollbackProgress::set_allocated_responsible_hyphen(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responsible_hyphen_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.responsible_hyphen_.IsDefault()) {
    _impl_.responsible_hyphen_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackProgress.responsible_hyphen)
}

// int32 remaining_estimated_time = 7;
inline void RollbackProgress::clear_remaining_estimated_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_estimated_time_ = 0;
}
inline ::int32_t RollbackProgress::remaining_estimated_time() const {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackProgress.remaining_estimated_time)
  return _internal_remaining_estimated_time();
}
inline void RollbackProgress::set_remaining_estimated_time(::int32_t value) {
  _internal_set_remaining_estimated_time(value);
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackProgress.remaining_estimated_time)
}
inline ::int32_t RollbackProgress::_internal_remaining_estimated_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_estimated_time_;
}
inline void RollbackProgress::_internal_set_remaining_estimated_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_estimated_time_ = value;
}

// map<string, string> progress_metadata = 8;
inline int RollbackProgress::_internal_progress_metadata_size() const {
  return _internal_progress_metadata().size();
}
inline int RollbackProgress::progress_metadata_size() const {
  return _internal_progress_metadata_size();
}
inline void RollbackProgress::clear_progress_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackProgress::_internal_progress_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.progress_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackProgress::progress_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackProgress.progress_metadata)
  return _internal_progress_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackProgress::_internal_mutable_progress_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.progress_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackProgress::mutable_progress_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackProgress.progress_metadata)
  return _internal_mutable_progress_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RollbackConflictResolution

// string conflict_id = 1;
inline void RollbackConflictResolution::clear_conflict_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_id_.ClearToEmpty();
}
inline const std::string& RollbackConflictResolution::conflict_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.conflict_id)
  return _internal_conflict_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackConflictResolution::set_conflict_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.conflict_id)
}
inline std::string* RollbackConflictResolution::mutable_conflict_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conflict_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.conflict_id)
  return _s;
}
inline const std::string& RollbackConflictResolution::_internal_conflict_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_id_.Get();
}
inline void RollbackConflictResolution::_internal_set_conflict_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_id_.Set(value, GetArena());
}
inline std::string* RollbackConflictResolution::_internal_mutable_conflict_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conflict_id_.Mutable( GetArena());
}
inline std::string* RollbackConflictResolution::release_conflict_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackConflictResolution.conflict_id)
  return _impl_.conflict_id_.Release();
}
inline void RollbackConflictResolution::set_allocated_conflict_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conflict_id_.IsDefault()) {
    _impl_.conflict_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackConflictResolution.conflict_id)
}

// string segment_id = 2;
inline void RollbackConflictResolution::clear_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.ClearToEmpty();
}
inline const std::string& RollbackConflictResolution::segment_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.segment_id)
  return _internal_segment_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackConflictResolution::set_segment_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.segment_id)
}
inline std::string* RollbackConflictResolution::mutable_segment_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_segment_id();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.segment_id)
  return _s;
}
inline const std::string& RollbackConflictResolution::_internal_segment_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_id_.Get();
}
inline void RollbackConflictResolution::_internal_set_segment_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.Set(value, GetArena());
}
inline std::string* RollbackConflictResolution::_internal_mutable_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.segment_id_.Mutable( GetArena());
}
inline std::string* RollbackConflictResolution::release_segment_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackConflictResolution.segment_id)
  return _impl_.segment_id_.Release();
}
inline void RollbackConflictResolution::set_allocated_segment_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.segment_id_.IsDefault()) {
    _impl_.segment_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackConflictResolution.segment_id)
}

// repeated string conflicting_changes = 3;
inline int RollbackConflictResolution::_internal_conflicting_changes_size() const {
  return _internal_conflicting_changes().size();
}
inline int RollbackConflictResolution::conflicting_changes_size() const {
  return _internal_conflicting_changes_size();
}
inline void RollbackConflictResolution::clear_conflicting_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflicting_changes_.Clear();
}
inline std::string* RollbackConflictResolution::add_conflicting_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_conflicting_changes()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.rollback.RollbackConflictResolution.conflicting_changes)
  return _s;
}
inline const std::string& RollbackConflictResolution::conflicting_changes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.conflicting_changes)
  return _internal_conflicting_changes().Get(index);
}
inline std::string* RollbackConflictResolution::mutable_conflicting_changes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.conflicting_changes)
  return _internal_mutable_conflicting_changes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RollbackConflictResolution::set_conflicting_changes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_conflicting_changes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.conflicting_changes)
}
template <typename Arg_, typename... Args_>
inline void RollbackConflictResolution::add_conflicting_changes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_conflicting_changes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.rollback.RollbackConflictResolution.conflicting_changes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackConflictResolution::conflicting_changes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.rollback.RollbackConflictResolution.conflicting_changes)
  return _internal_conflicting_changes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackConflictResolution::mutable_conflicting_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.rollback.RollbackConflictResolution.conflicting_changes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conflicting_changes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollbackConflictResolution::_internal_conflicting_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflicting_changes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollbackConflictResolution::_internal_mutable_conflicting_changes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conflicting_changes_;
}

// string resolution_status = 4;
inline void RollbackConflictResolution::clear_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.ClearToEmpty();
}
inline const std::string& RollbackConflictResolution::resolution_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.resolution_status)
  return _internal_resolution_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackConflictResolution::set_resolution_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.resolution_status)
}
inline std::string* RollbackConflictResolution::mutable_resolution_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolution_status();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.resolution_status)
  return _s;
}
inline const std::string& RollbackConflictResolution::_internal_resolution_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolution_status_.Get();
}
inline void RollbackConflictResolution::_internal_set_resolution_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.Set(value, GetArena());
}
inline std::string* RollbackConflictResolution::_internal_mutable_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolution_status_.Mutable( GetArena());
}
inline std::string* RollbackConflictResolution::release_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackConflictResolution.resolution_status)
  return _impl_.resolution_status_.Release();
}
inline void RollbackConflictResolution::set_allocated_resolution_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolution_status_.IsDefault()) {
    _impl_.resolution_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackConflictResolution.resolution_status)
}

// string resolved_by = 5;
inline void RollbackConflictResolution::clear_resolved_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_by_.ClearToEmpty();
}
inline const std::string& RollbackConflictResolution::resolved_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.resolved_by)
  return _internal_resolved_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackConflictResolution::set_resolved_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.resolved_by)
}
inline std::string* RollbackConflictResolution::mutable_resolved_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolved_by();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.resolved_by)
  return _s;
}
inline const std::string& RollbackConflictResolution::_internal_resolved_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolved_by_.Get();
}
inline void RollbackConflictResolution::_internal_set_resolved_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_by_.Set(value, GetArena());
}
inline std::string* RollbackConflictResolution::_internal_mutable_resolved_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolved_by_.Mutable( GetArena());
}
inline std::string* RollbackConflictResolution::release_resolved_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackConflictResolution.resolved_by)
  return _impl_.resolved_by_.Release();
}
inline void RollbackConflictResolution::set_allocated_resolved_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolved_by_.IsDefault()) {
    _impl_.resolved_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackConflictResolution.resolved_by)
}

// string resolution_timestamp = 6;
inline void RollbackConflictResolution::clear_resolution_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_timestamp_.ClearToEmpty();
}
inline const std::string& RollbackConflictResolution::resolution_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.rollback.RollbackConflictResolution.resolution_timestamp)
  return _internal_resolution_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RollbackConflictResolution::set_resolution_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.rollback.RollbackConflictResolution.resolution_timestamp)
}
inline std::string* RollbackConflictResolution::mutable_resolution_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolution_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.rollback.RollbackConflictResolution.resolution_timestamp)
  return _s;
}
inline const std::string& RollbackConflictResolution::_internal_resolution_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolution_timestamp_.Get();
}
inline void RollbackConflictResolution::_internal_set_resolution_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_timestamp_.Set(value, GetArena());
}
inline std::string* RollbackConflictResolution::_internal_mutable_resolution_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolution_timestamp_.Mutable( GetArena());
}
inline std::string* RollbackConflictResolution::release_resolution_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.rollback.RollbackConflictResolution.resolution_timestamp)
  return _impl_.resolution_timestamp_.Release();
}
inline void RollbackConflictResolution::set_allocated_resolution_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolution_timestamp_.IsDefault()) {
    _impl_.resolution_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.rollback.RollbackConflictResolution.resolution_timestamp)
}

// map<string, string> resolution_metadata = 7;
inline int RollbackConflictResolution::_internal_resolution_metadata_size() const {
  return _internal_resolution_metadata().size();
}
inline int RollbackConflictResolution::resolution_metadata_size() const {
  return _internal_resolution_metadata_size();
}
inline void RollbackConflictResolution::clear_resolution_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackConflictResolution::_internal_resolution_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolution_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RollbackConflictResolution::resolution_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.rollback.RollbackConflictResolution.resolution_metadata)
  return _internal_resolution_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackConflictResolution::_internal_mutable_resolution_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolution_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RollbackConflictResolution::mutable_resolution_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.rollback.RollbackConflictResolution.resolution_metadata)
  return _internal_mutable_resolution_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rollback
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::rollback::RollbackStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::rollback::RollbackStatus>() {
  return ::seigr::rollback::RollbackStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::rollback::RollbackTrigger> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::rollback::RollbackTrigger>() {
  return ::seigr::rollback::RollbackTrigger_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // rollback_2eproto_2epb_2eh
