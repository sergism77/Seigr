// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: resource_management.proto
// Protobuf C++ Version: 5.29.2

#include "resource_management.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seigr {
namespace resource_management {

inline constexpr ResourceUsageSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hyphen_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        summary_period_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        average_usage_{0},
        peak_usage_{0},
        type_{static_cast< ::seigr::resource_management::ResourceType >(0)},
        threshold_exceed_count_{0},
        minimum_usage_{0},
        usage_standard_deviation_{0},
        cost_estimate_{0},
        efficiency_score_avg_{0},
        time_above_threshold_{0},
        sustainability_compliant_{false},
        power_consumption_avg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceUsageSummary::ResourceUsageSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceUsageSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceUsageSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceUsageSummaryDefaultTypeInternal() {}
  union {
    ResourceUsageSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceUsageSummaryDefaultTypeInternal _ResourceUsageSummary_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ResourceUsage_UsageMetadataEntry_DoNotUse::ResourceUsage_UsageMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ResourceUsage_UsageMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ResourceUsage_UsageMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceUsage_UsageMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal _ResourceUsage_UsageMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal _ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal _ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse_default_instance_;

inline constexpr ResourceLimits::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_contact_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auto_scale_action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        warning_threshold_{0},
        critical_threshold_{0},
        type_{static_cast< ::seigr::resource_management::ResourceType >(0)},
        enforce_limits_{false},
        absolute_max_{0},
        usage_decay_rate_{0},
        sustainable_limit_{0},
        max_continuous_overload_seconds_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceLimits::ResourceLimits(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceLimitsDefaultTypeInternal() {}
  union {
    ResourceLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceLimitsDefaultTypeInternal _ResourceLimits_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ResourceDistribution_DistributionMetadataEntry_DoNotUse::ResourceDistribution_DistributionMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ResourceDistribution_DistributionMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ResourceDistribution_DistributionMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceDistribution_DistributionMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal _ResourceDistribution_DistributionMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceDemandForecast_ForecastMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal _ResourceDemandForecast_ForecastMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal _ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal _ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse_default_instance_;

inline constexpr ResourceUsage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : usage_metadata_{},
        unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hyphen_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        application_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        usage_percentage_{0},
        absolute_usage_{0},
        type_{static_cast< ::seigr::resource_management::ResourceType >(0)},
        state_{static_cast< ::seigr::resource_management::ResourceState >(0)},
        temperature_{0},
        resource_efficiency_score_{0},
        power_consumption_{0},
        sustainable_use_flag_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceUsage::ResourceUsage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceUsageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceUsageDefaultTypeInternal() {}
  union {
    ResourceUsage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceUsageDefaultTypeInternal _ResourceUsage_default_instance_;

inline constexpr ResourceMonitorConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : resource_limits_{},
        config_metadata_{},
        alert_severity_levels_{},
        alert_protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        check_interval_seconds_{0},
        enable_alerting_{false},
        grace_period_seconds_{0},
        auto_scale_threshold_{0},
        load_balancing_threshold_{0},
        alert_frequency_limit_{0},
        resource_efficiency_adjustment_interval_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceMonitorConfig::ResourceMonitorConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceMonitorConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceMonitorConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceMonitorConfigDefaultTypeInternal() {}
  union {
    ResourceMonitorConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceMonitorConfigDefaultTypeInternal _ResourceMonitorConfig_default_instance_;

inline constexpr ResourceDistribution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_cluster_ids_{},
        distribution_metadata_{},
        distribution_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_cluster_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        distribution_strategy_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_latency_allowed_{0},
        type_{static_cast< ::seigr::resource_management::ResourceType >(0)},
        enable_encryption_{false},
        min_efficiency_threshold_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceDistribution::ResourceDistribution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceDistributionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDistributionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDistributionDefaultTypeInternal() {}
  union {
    ResourceDistribution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDistributionDefaultTypeInternal _ResourceDistribution_default_instance_;

inline constexpr ResourceDemandForecast::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forecast_metadata_{},
        cluster_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        forecast_period_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        forecast_created_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        projected_peak_usage_{0},
        projected_average_usage_{0},
        confidence_level_{0},
        type_{static_cast< ::seigr::resource_management::ResourceType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceDemandForecast::ResourceDemandForecast(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceDemandForecastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDemandForecastDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDemandForecastDefaultTypeInternal() {}
  union {
    ResourceDemandForecast _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDemandForecastDefaultTypeInternal _ResourceDemandForecast_default_instance_;

inline constexpr ClusterResourceStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hyphen_summaries_{},
        cluster_average_usage_{},
        cluster_peak_usage_{},
        cluster_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_updated_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recovery_action_plan_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cluster_utilization_score_{0},
        overloaded_hyphens_count_{0},
        adaptive_scaling_events_{0},
        load_distribution_score_{0},
        sustainability_compliance_rate_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClusterResourceStatus::ClusterResourceStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClusterResourceStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterResourceStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterResourceStatusDefaultTypeInternal() {}
  union {
    ClusterResourceStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterResourceStatusDefaultTypeInternal _ClusterResourceStatus_default_instance_;
}  // namespace resource_management
}  // namespace seigr
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_resource_5fmanagement_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_resource_5fmanagement_2eproto = nullptr;
const ::uint32_t
    TableStruct_resource_5fmanagement_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.usage_percentage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.absolute_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.unit_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.hyphen_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.usage_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.application_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.resource_efficiency_score_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.power_consumption_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsage, _impl_.sustainable_use_flag_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.warning_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.critical_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.absolute_max_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.unit_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.enforce_limits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.escalation_contact_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.max_continuous_overload_seconds_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.auto_scale_action_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.usage_decay_rate_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceLimits, _impl_.sustainable_limit_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.check_interval_seconds_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.resource_limits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.enable_alerting_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.config_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.alert_protocol_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.grace_period_seconds_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.auto_scale_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.alert_severity_levels_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.alert_frequency_limit_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.load_balancing_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceMonitorConfig, _impl_.resource_efficiency_adjustment_interval_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.hyphen_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.average_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.peak_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.minimum_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.usage_standard_deviation_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.summary_period_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.threshold_exceed_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.cost_estimate_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.time_above_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.efficiency_score_avg_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.power_consumption_avg_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceUsageSummary, _impl_.sustainability_compliant_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.cluster_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.hyphen_summaries_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.cluster_average_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.cluster_peak_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.last_updated_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.health_status_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.overloaded_hyphens_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.recovery_action_plan_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.cluster_utilization_score_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.load_distribution_score_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.sustainability_compliance_rate_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ClusterResourceStatus, _impl_.adaptive_scaling_events_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.cluster_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.forecast_period_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.projected_peak_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.projected_average_usage_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.confidence_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.forecast_created_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDemandForecast, _impl_.forecast_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.distribution_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.source_cluster_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.target_cluster_ids_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.max_latency_allowed_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.min_efficiency_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.distribution_strategy_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.distribution_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::resource_management::ResourceDistribution, _impl_.enable_encryption_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse)},
        {12, -1, -1, sizeof(::seigr::resource_management::ResourceUsage)},
        {33, -1, -1, sizeof(::seigr::resource_management::ResourceLimits)},
        {52, 62, -1, sizeof(::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse)},
        {64, 74, -1, sizeof(::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse)},
        {76, -1, -1, sizeof(::seigr::resource_management::ResourceMonitorConfig)},
        {95, -1, -1, sizeof(::seigr::resource_management::ResourceUsageSummary)},
        {116, 126, -1, sizeof(::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse)},
        {128, 138, -1, sizeof(::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse)},
        {140, -1, -1, sizeof(::seigr::resource_management::ClusterResourceStatus)},
        {160, 170, -1, sizeof(::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse)},
        {172, -1, -1, sizeof(::seigr::resource_management::ResourceDemandForecast)},
        {188, 198, -1, sizeof(::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse)},
        {200, -1, -1, sizeof(::seigr::resource_management::ResourceDistribution)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::seigr::resource_management::_ResourceUsage_UsageMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ResourceUsage_default_instance_._instance,
    &::seigr::resource_management::_ResourceLimits_default_instance_._instance,
    &::seigr::resource_management::_ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ResourceMonitorConfig_default_instance_._instance,
    &::seigr::resource_management::_ResourceUsageSummary_default_instance_._instance,
    &::seigr::resource_management::_ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ClusterResourceStatus_default_instance_._instance,
    &::seigr::resource_management::_ResourceDemandForecast_ForecastMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ResourceDemandForecast_default_instance_._instance,
    &::seigr::resource_management::_ResourceDistribution_DistributionMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::resource_management::_ResourceDistribution_default_instance_._instance,
};
const char descriptor_table_protodef_resource_5fmanagement_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031resource_management.proto\022\031seigr.resou"
    "rce_management\"\371\003\n\rResourceUsage\0225\n\004type"
    "\030\001 \001(\0162\'.seigr.resource_management.Resou"
    "rceType\022\030\n\020usage_percentage\030\002 \001(\001\022\026\n\016abs"
    "olute_usage\030\003 \001(\001\022\014\n\004unit\030\004 \001(\t\022\021\n\thyphe"
    "n_id\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\t\0227\n\005state\030\007"
    " \001(\0162(.seigr.resource_management.Resourc"
    "eState\022S\n\016usage_metadata\030\010 \003(\0132;.seigr.r"
    "esource_management.ResourceUsage.UsageMe"
    "tadataEntry\022\026\n\016application_id\030\t \001(\t\022\023\n\013t"
    "emperature\030\n \001(\001\022!\n\031resource_efficiency_"
    "score\030\013 \001(\001\022\031\n\021power_consumption\030\014 \001(\001\022\034"
    "\n\024sustainable_use_flag\030\r \001(\010\0324\n\022UsageMet"
    "adataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"\317\002\n\016ResourceLimits\0225\n\004type\030\001 \001(\0162\'.se"
    "igr.resource_management.ResourceType\022\031\n\021"
    "warning_threshold\030\002 \001(\001\022\032\n\022critical_thre"
    "shold\030\003 \001(\001\022\024\n\014absolute_max\030\004 \001(\001\022\014\n\004uni"
    "t\030\005 \001(\t\022\026\n\016enforce_limits\030\006 \001(\010\022\032\n\022escal"
    "ation_contact\030\007 \001(\t\022\'\n\037max_continuous_ov"
    "erload_seconds\030\010 \001(\005\022\031\n\021auto_scale_actio"
    "n\030\t \001(\t\022\030\n\020usage_decay_rate\030\n \001(\001\022\031\n\021sus"
    "tainable_limit\030\013 \001(\001\"\226\005\n\025ResourceMonitor"
    "Config\022\036\n\026check_interval_seconds\030\001 \001(\005\022B"
    "\n\017resource_limits\030\002 \003(\0132).seigr.resource"
    "_management.ResourceLimits\022\027\n\017enable_ale"
    "rting\030\003 \001(\010\022]\n\017config_metadata\030\004 \003(\0132D.s"
    "eigr.resource_management.ResourceMonitor"
    "Config.ConfigMetadataEntry\022\026\n\016alert_prot"
    "ocol\030\005 \001(\t\022\034\n\024grace_period_seconds\030\006 \001(\005"
    "\022\034\n\024auto_scale_threshold\030\007 \001(\005\022h\n\025alert_"
    "severity_levels\030\010 \003(\0132I.seigr.resource_m"
    "anagement.ResourceMonitorConfig.AlertSev"
    "erityLevelsEntry\022\035\n\025alert_frequency_limi"
    "t\030\t \001(\005\022 \n\030load_balancing_threshold\030\n \001("
    "\001\022/\n\'resource_efficiency_adjustment_inte"
    "rval\030\013 \001(\005\0325\n\023ConfigMetadataEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032:\n\030AlertSeveri"
    "tyLevelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\005:\0028\001\"\220\003\n\024ResourceUsageSummary\0225\n\004type\030\001"
    " \001(\0162\'.seigr.resource_management.Resourc"
    "eType\022\021\n\thyphen_id\030\002 \001(\t\022\025\n\raverage_usag"
    "e\030\003 \001(\001\022\022\n\npeak_usage\030\004 \001(\001\022\025\n\rminimum_u"
    "sage\030\005 \001(\001\022 \n\030usage_standard_deviation\030\006"
    " \001(\001\022\026\n\016summary_period\030\007 \001(\t\022\036\n\026threshol"
    "d_exceed_count\030\010 \001(\005\022\025\n\rcost_estimate\030\t "
    "\001(\001\022\034\n\024time_above_threshold\030\n \001(\005\022\034\n\024eff"
    "iciency_score_avg\030\013 \001(\001\022\035\n\025power_consump"
    "tion_avg\030\014 \001(\001\022 \n\030sustainability_complia"
    "nt\030\r \001(\010\"\263\005\n\025ClusterResourceStatus\022\022\n\ncl"
    "uster_id\030\001 \001(\t\022I\n\020hyphen_summaries\030\002 \003(\013"
    "2/.seigr.resource_management.ResourceUsa"
    "geSummary\022h\n\025cluster_average_usage\030\003 \003(\013"
    "2I.seigr.resource_management.ClusterReso"
    "urceStatus.ClusterAverageUsageEntry\022b\n\022c"
    "luster_peak_usage\030\004 \003(\0132F.seigr.resource"
    "_management.ClusterResourceStatus.Cluste"
    "rPeakUsageEntry\022\024\n\014last_updated\030\005 \001(\t\022\025\n"
    "\rhealth_status\030\006 \001(\t\022 \n\030overloaded_hyphe"
    "ns_count\030\007 \001(\005\022\034\n\024recovery_action_plan\030\010"
    " \001(\t\022!\n\031cluster_utilization_score\030\t \001(\001\022"
    "\037\n\027load_distribution_score\030\n \001(\001\022&\n\036sust"
    "ainability_compliance_rate\030\013 \001(\001\022\037\n\027adap"
    "tive_scaling_events\030\014 \001(\005\032:\n\030ClusterAver"
    "ageUsageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\001:\0028\001\0327\n\025ClusterPeakUsageEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\217\003\n\026ResourceDeman"
    "dForecast\0225\n\004type\030\001 \001(\0162\'.seigr.resource"
    "_management.ResourceType\022\022\n\ncluster_id\030\002"
    " \001(\t\022\027\n\017forecast_period\030\003 \001(\t\022\034\n\024project"
    "ed_peak_usage\030\004 \001(\001\022\037\n\027projected_average"
    "_usage\030\005 \001(\001\022\030\n\020confidence_level\030\006 \001(\001\022\033"
    "\n\023forecast_created_at\030\007 \001(\t\022b\n\021forecast_"
    "metadata\030\010 \003(\0132G.seigr.resource_manageme"
    "nt.ResourceDemandForecast.ForecastMetada"
    "taEntry\0327\n\025ForecastMetadataEntry\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\275\003\n\024ResourceDis"
    "tribution\022\027\n\017distribution_id\030\001 \001(\t\0225\n\004ty"
    "pe\030\002 \001(\0162\'.seigr.resource_management.Res"
    "ourceType\022\031\n\021source_cluster_id\030\003 \001(\t\022\032\n\022"
    "target_cluster_ids\030\004 \003(\t\022\033\n\023max_latency_"
    "allowed\030\005 \001(\001\022 \n\030min_efficiency_threshol"
    "d\030\006 \001(\001\022\035\n\025distribution_strategy\030\007 \001(\t\022h"
    "\n\025distribution_metadata\030\010 \003(\0132I.seigr.re"
    "source_management.ResourceDistribution.D"
    "istributionMetadataEntry\022\031\n\021enable_encry"
    "ption\030\t \001(\010\032;\n\031DistributionMetadataEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\270\001\n\014Res"
    "ourceType\022\026\n\022RESOURCE_UNDEFINED\020\000\022\020\n\014RES"
    "OURCE_CPU\020\001\022\023\n\017RESOURCE_MEMORY\020\002\022\024\n\020RESO"
    "URCE_DISK_IO\020\003\022\026\n\022RESOURCE_BANDWIDTH\020\004\022\020"
    "\n\014RESOURCE_GPU\020\005\022\024\n\020RESOURCE_STORAGE\020\006\022\023"
    "\n\017RESOURCE_ENERGY\020\007*\274\001\n\rResourceState\022\034\n"
    "\030RESOURCE_STATE_UNDEFINED\020\000\022\032\n\026RESOURCE_"
    "STATE_OPTIMAL\020\001\022\031\n\025RESOURCE_STATE_NORMAL"
    "\020\002\022\032\n\026RESOURCE_STATE_WARNING\020\003\022\033\n\027RESOUR"
    "CE_STATE_CRITICAL\020\004\022\035\n\031RESOURCE_STATE_OV"
    "ERLOADED\020\005b\006proto3"
};
static ::absl::once_flag descriptor_table_resource_5fmanagement_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_resource_5fmanagement_2eproto = {
    false,
    false,
    3898,
    descriptor_table_protodef_resource_5fmanagement_2eproto,
    "resource_management.proto",
    &descriptor_table_resource_5fmanagement_2eproto_once,
    nullptr,
    0,
    14,
    schemas,
    file_default_instances,
    TableStruct_resource_5fmanagement_2eproto::offsets,
    file_level_enum_descriptors_resource_5fmanagement_2eproto,
    file_level_service_descriptors_resource_5fmanagement_2eproto,
};
namespace seigr {
namespace resource_management {
const ::google::protobuf::EnumDescriptor* ResourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_resource_5fmanagement_2eproto);
  return file_level_enum_descriptors_resource_5fmanagement_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ResourceType_internal_data_[] = {
    524288u, 0u, };
bool ResourceType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* ResourceState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_resource_5fmanagement_2eproto);
  return file_level_enum_descriptors_resource_5fmanagement_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ResourceState_internal_data_[] = {
    393216u, 0u, };
bool ResourceState_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ResourceUsage_UsageMetadataEntry_DoNotUse::ResourceUsage_UsageMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ResourceUsage_UsageMetadataEntry_DoNotUse::ResourceUsage_UsageMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ResourceUsage_UsageMetadataEntry_DoNotUse::ResourceUsage_UsageMetadataEntry_DoNotUse() : SuperType() {}
              ResourceUsage_UsageMetadataEntry_DoNotUse::ResourceUsage_UsageMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ResourceUsage_UsageMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ResourceUsage_UsageMetadataEntry_DoNotUse(arena);
              }
              constexpr auto ResourceUsage_UsageMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceUsage_UsageMetadataEntry_DoNotUse),
                                                          alignof(ResourceUsage_UsageMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ResourceUsage_UsageMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ResourceUsage_UsageMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ResourceUsage_UsageMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ResourceUsage_UsageMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ResourceUsage_UsageMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ResourceUsage_UsageMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ResourceUsage_UsageMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ResourceUsage_UsageMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 75, 2> ResourceUsage_UsageMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceUsage_UsageMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage_UsageMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\3\5\0\0\0\0\0"
    "seigr.resource_management.ResourceUsage.UsageMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ResourceUsage::_Internal {
 public:
};

ResourceUsage::ResourceUsage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceUsage)
}
inline PROTOBUF_NDEBUG_INLINE ResourceUsage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceUsage& from_msg)
      : usage_metadata_{visibility, arena, from.usage_metadata_},
        unit_(arena, from.unit_),
        hyphen_id_(arena, from.hyphen_id_),
        timestamp_(arena, from.timestamp_),
        application_id_(arena, from.application_id_),
        _cached_size_{0} {}

ResourceUsage::ResourceUsage(
    ::google::protobuf::Arena* arena,
    const ResourceUsage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceUsage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, usage_percentage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, usage_percentage_),
           offsetof(Impl_, sustainable_use_flag_) -
               offsetof(Impl_, usage_percentage_) +
               sizeof(Impl_::sustainable_use_flag_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceUsage)
}
inline PROTOBUF_NDEBUG_INLINE ResourceUsage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : usage_metadata_{visibility, arena},
        unit_(arena),
        hyphen_id_(arena),
        timestamp_(arena),
        application_id_(arena),
        _cached_size_{0} {}

inline void ResourceUsage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, usage_percentage_),
           0,
           offsetof(Impl_, sustainable_use_flag_) -
               offsetof(Impl_, usage_percentage_) +
               sizeof(Impl_::sustainable_use_flag_));
}
ResourceUsage::~ResourceUsage() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceUsage)
  SharedDtor(*this);
}
inline void ResourceUsage::SharedDtor(MessageLite& self) {
  ResourceUsage& this_ = static_cast<ResourceUsage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.unit_.Destroy();
  this_._impl_.hyphen_id_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.application_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceUsage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceUsage(arena);
}
constexpr auto ResourceUsage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_metadata_) +
          decltype(ResourceUsage::_impl_.usage_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_metadata_) +
          decltype(ResourceUsage::_impl_.usage_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceUsage), alignof(ResourceUsage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceUsage::PlacementNew_,
                                 sizeof(ResourceUsage),
                                 alignof(ResourceUsage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceUsage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceUsage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceUsage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceUsage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceUsage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceUsage>(), &ResourceUsage::ByteSizeLong,
            &ResourceUsage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_._cached_size_),
        false,
    },
    &ResourceUsage::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceUsage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 1, 106, 2> ResourceUsage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceUsage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .seigr.resource_management.ResourceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceUsage, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.type_)}},
    // double usage_percentage = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_percentage_)}},
    // double absolute_usage = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.absolute_usage_)}},
    // string unit = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.unit_)}},
    // string hyphen_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.hyphen_id_)}},
    // string timestamp = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.timestamp_)}},
    // .seigr.resource_management.ResourceState state = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceUsage, _impl_.state_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string application_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.application_id_)}},
    // double temperature = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.temperature_)}},
    // double resource_efficiency_score = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.resource_efficiency_score_)}},
    // double power_consumption = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.power_consumption_)}},
    // bool sustainable_use_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ResourceUsage, _impl_.sustainable_use_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.sustainable_use_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.resource_management.ResourceType type = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double usage_percentage = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double absolute_usage = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.absolute_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string unit = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string hyphen_id = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.hyphen_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.resource_management.ResourceState state = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> usage_metadata = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string application_id = 9;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.application_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double temperature = 10;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double resource_efficiency_score = 11;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.resource_efficiency_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double power_consumption = 12;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.power_consumption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool sustainable_use_flag = 13;
    {PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.sustainable_use_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ResourceUsage()._impl_.usage_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\47\0\0\0\4\11\11\0\16\16\0\0\0\0\0\0"
    "seigr.resource_management.ResourceUsage"
    "unit"
    "hyphen_id"
    "timestamp"
    "usage_metadata"
    "application_id"
  }},
};

PROTOBUF_NOINLINE void ResourceUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceUsage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usage_metadata_.Clear();
  _impl_.unit_.ClearToEmpty();
  _impl_.hyphen_id_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.application_id_.ClearToEmpty();
  ::memset(&_impl_.usage_percentage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sustainable_use_flag_) -
      reinterpret_cast<char*>(&_impl_.usage_percentage_)) + sizeof(_impl_.sustainable_use_flag_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceUsage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceUsage& this_ = static_cast<const ResourceUsage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceUsage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceUsage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceUsage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .seigr.resource_management.ResourceType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // double usage_percentage = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_usage_percentage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_usage_percentage(), target);
          }

          // double absolute_usage = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_absolute_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_absolute_usage(), target);
          }

          // string unit = 4;
          if (!this_._internal_unit().empty()) {
            const std::string& _s = this_._internal_unit();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.unit");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string hyphen_id = 5;
          if (!this_._internal_hyphen_id().empty()) {
            const std::string& _s = this_._internal_hyphen_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.hyphen_id");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string timestamp = 6;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.timestamp");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // .seigr.resource_management.ResourceState state = 7;
          if (this_._internal_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_state(), target);
          }

          // map<string, string> usage_metadata = 8;
          if (!this_._internal_usage_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_usage_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.usage_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.usage_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.usage_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.usage_metadata");
              }
            }
          }

          // string application_id = 9;
          if (!this_._internal_application_id().empty()) {
            const std::string& _s = this_._internal_application_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsage.application_id");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // double temperature = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_temperature(), target);
          }

          // double resource_efficiency_score = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_resource_efficiency_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_resource_efficiency_score(), target);
          }

          // double power_consumption = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_power_consumption(), target);
          }

          // bool sustainable_use_flag = 13;
          if (this_._internal_sustainable_use_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_sustainable_use_flag(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceUsage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceUsage::ByteSizeLong(const MessageLite& base) {
          const ResourceUsage& this_ = static_cast<const ResourceUsage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceUsage::ByteSizeLong() const {
          const ResourceUsage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceUsage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> usage_metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_usage_metadata_size());
              for (const auto& entry : this_._internal_usage_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string unit = 4;
            if (!this_._internal_unit().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_unit());
            }
            // string hyphen_id = 5;
            if (!this_._internal_hyphen_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hyphen_id());
            }
            // string timestamp = 6;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string application_id = 9;
            if (!this_._internal_application_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_application_id());
            }
            // double usage_percentage = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_usage_percentage()) != 0) {
              total_size += 9;
            }
            // double absolute_usage = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_absolute_usage()) != 0) {
              total_size += 9;
            }
            // .seigr.resource_management.ResourceType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .seigr.resource_management.ResourceState state = 7;
            if (this_._internal_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_state());
            }
            // double temperature = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_temperature()) != 0) {
              total_size += 9;
            }
            // double resource_efficiency_score = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_resource_efficiency_score()) != 0) {
              total_size += 9;
            }
            // double power_consumption = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption()) != 0) {
              total_size += 9;
            }
            // bool sustainable_use_flag = 13;
            if (this_._internal_sustainable_use_flag() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceUsage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceUsage*>(&to_msg);
  auto& from = static_cast<const ResourceUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceUsage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usage_metadata_.MergeFrom(from._impl_.usage_metadata_);
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (!from._internal_hyphen_id().empty()) {
    _this->_internal_set_hyphen_id(from._internal_hyphen_id());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_application_id().empty()) {
    _this->_internal_set_application_id(from._internal_application_id());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_usage_percentage()) != 0) {
    _this->_impl_.usage_percentage_ = from._impl_.usage_percentage_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_absolute_usage()) != 0) {
    _this->_impl_.absolute_usage_ = from._impl_.absolute_usage_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_state() != 0) {
    _this->_impl_.state_ = from._impl_.state_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_temperature()) != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_resource_efficiency_score()) != 0) {
    _this->_impl_.resource_efficiency_score_ = from._impl_.resource_efficiency_score_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_power_consumption()) != 0) {
    _this->_impl_.power_consumption_ = from._impl_.power_consumption_;
  }
  if (from._internal_sustainable_use_flag() != 0) {
    _this->_impl_.sustainable_use_flag_ = from._impl_.sustainable_use_flag_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsage::CopyFrom(const ResourceUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceUsage::InternalSwap(ResourceUsage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.usage_metadata_.InternalSwap(&other->_impl_.usage_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_, &other->_impl_.unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hyphen_id_, &other->_impl_.hyphen_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.application_id_, &other->_impl_.application_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.sustainable_use_flag_)
      + sizeof(ResourceUsage::_impl_.sustainable_use_flag_)
      - PROTOBUF_FIELD_OFFSET(ResourceUsage, _impl_.usage_percentage_)>(
          reinterpret_cast<char*>(&_impl_.usage_percentage_),
          reinterpret_cast<char*>(&other->_impl_.usage_percentage_));
}

::google::protobuf::Metadata ResourceUsage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResourceLimits::_Internal {
 public:
};

ResourceLimits::ResourceLimits(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceLimits)
}
inline PROTOBUF_NDEBUG_INLINE ResourceLimits::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceLimits& from_msg)
      : unit_(arena, from.unit_),
        escalation_contact_(arena, from.escalation_contact_),
        auto_scale_action_(arena, from.auto_scale_action_),
        _cached_size_{0} {}

ResourceLimits::ResourceLimits(
    ::google::protobuf::Arena* arena,
    const ResourceLimits& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceLimits* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, warning_threshold_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, warning_threshold_),
           offsetof(Impl_, max_continuous_overload_seconds_) -
               offsetof(Impl_, warning_threshold_) +
               sizeof(Impl_::max_continuous_overload_seconds_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceLimits)
}
inline PROTOBUF_NDEBUG_INLINE ResourceLimits::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : unit_(arena),
        escalation_contact_(arena),
        auto_scale_action_(arena),
        _cached_size_{0} {}

inline void ResourceLimits::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, warning_threshold_),
           0,
           offsetof(Impl_, max_continuous_overload_seconds_) -
               offsetof(Impl_, warning_threshold_) +
               sizeof(Impl_::max_continuous_overload_seconds_));
}
ResourceLimits::~ResourceLimits() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceLimits)
  SharedDtor(*this);
}
inline void ResourceLimits::SharedDtor(MessageLite& self) {
  ResourceLimits& this_ = static_cast<ResourceLimits&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.unit_.Destroy();
  this_._impl_.escalation_contact_.Destroy();
  this_._impl_.auto_scale_action_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceLimits::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceLimits(arena);
}
constexpr auto ResourceLimits::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceLimits),
                                            alignof(ResourceLimits));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceLimits::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceLimits_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceLimits::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceLimits>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceLimits::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceLimits>(), &ResourceLimits::ByteSizeLong,
            &ResourceLimits::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_._cached_size_),
        false,
    },
    &ResourceLimits::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceLimits::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 96, 2> ResourceLimits::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceLimits>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .seigr.resource_management.ResourceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceLimits, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.type_)}},
    // double warning_threshold = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.warning_threshold_)}},
    // double critical_threshold = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.critical_threshold_)}},
    // double absolute_max = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.absolute_max_)}},
    // string unit = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.unit_)}},
    // bool enforce_limits = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ResourceLimits, _impl_.enforce_limits_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.enforce_limits_)}},
    // string escalation_contact = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.escalation_contact_)}},
    // int32 max_continuous_overload_seconds = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceLimits, _impl_.max_continuous_overload_seconds_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.max_continuous_overload_seconds_)}},
    // string auto_scale_action = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.auto_scale_action_)}},
    // double usage_decay_rate = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.usage_decay_rate_)}},
    // double sustainable_limit = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.sustainable_limit_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.resource_management.ResourceType type = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double warning_threshold = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.warning_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double critical_threshold = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.critical_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double absolute_max = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.absolute_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string unit = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool enforce_limits = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.enforce_limits_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string escalation_contact = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.escalation_contact_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 max_continuous_overload_seconds = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.max_continuous_overload_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string auto_scale_action = 9;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.auto_scale_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double usage_decay_rate = 10;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.usage_decay_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double sustainable_limit = 11;
    {PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.sustainable_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\50\0\0\0\0\4\0\22\0\21\0\0\0\0\0\0"
    "seigr.resource_management.ResourceLimits"
    "unit"
    "escalation_contact"
    "auto_scale_action"
  }},
};

PROTOBUF_NOINLINE void ResourceLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceLimits)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_.ClearToEmpty();
  _impl_.escalation_contact_.ClearToEmpty();
  _impl_.auto_scale_action_.ClearToEmpty();
  ::memset(&_impl_.warning_threshold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_continuous_overload_seconds_) -
      reinterpret_cast<char*>(&_impl_.warning_threshold_)) + sizeof(_impl_.max_continuous_overload_seconds_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceLimits::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceLimits& this_ = static_cast<const ResourceLimits&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceLimits::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceLimits& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceLimits)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .seigr.resource_management.ResourceType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // double warning_threshold = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_warning_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_warning_threshold(), target);
          }

          // double critical_threshold = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_critical_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_critical_threshold(), target);
          }

          // double absolute_max = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_absolute_max()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_absolute_max(), target);
          }

          // string unit = 5;
          if (!this_._internal_unit().empty()) {
            const std::string& _s = this_._internal_unit();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceLimits.unit");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // bool enforce_limits = 6;
          if (this_._internal_enforce_limits() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_enforce_limits(), target);
          }

          // string escalation_contact = 7;
          if (!this_._internal_escalation_contact().empty()) {
            const std::string& _s = this_._internal_escalation_contact();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceLimits.escalation_contact");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // int32 max_continuous_overload_seconds = 8;
          if (this_._internal_max_continuous_overload_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_max_continuous_overload_seconds(), target);
          }

          // string auto_scale_action = 9;
          if (!this_._internal_auto_scale_action().empty()) {
            const std::string& _s = this_._internal_auto_scale_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceLimits.auto_scale_action");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // double usage_decay_rate = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_usage_decay_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_usage_decay_rate(), target);
          }

          // double sustainable_limit = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sustainable_limit()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_sustainable_limit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceLimits)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceLimits::ByteSizeLong(const MessageLite& base) {
          const ResourceLimits& this_ = static_cast<const ResourceLimits&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceLimits::ByteSizeLong() const {
          const ResourceLimits& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceLimits)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string unit = 5;
            if (!this_._internal_unit().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_unit());
            }
            // string escalation_contact = 7;
            if (!this_._internal_escalation_contact().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_contact());
            }
            // string auto_scale_action = 9;
            if (!this_._internal_auto_scale_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_auto_scale_action());
            }
            // double warning_threshold = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_warning_threshold()) != 0) {
              total_size += 9;
            }
            // double critical_threshold = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_critical_threshold()) != 0) {
              total_size += 9;
            }
            // .seigr.resource_management.ResourceType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // bool enforce_limits = 6;
            if (this_._internal_enforce_limits() != 0) {
              total_size += 2;
            }
            // double absolute_max = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_absolute_max()) != 0) {
              total_size += 9;
            }
            // double usage_decay_rate = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_usage_decay_rate()) != 0) {
              total_size += 9;
            }
            // double sustainable_limit = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sustainable_limit()) != 0) {
              total_size += 9;
            }
            // int32 max_continuous_overload_seconds = 8;
            if (this_._internal_max_continuous_overload_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_continuous_overload_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceLimits::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceLimits*>(&to_msg);
  auto& from = static_cast<const ResourceLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (!from._internal_escalation_contact().empty()) {
    _this->_internal_set_escalation_contact(from._internal_escalation_contact());
  }
  if (!from._internal_auto_scale_action().empty()) {
    _this->_internal_set_auto_scale_action(from._internal_auto_scale_action());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_warning_threshold()) != 0) {
    _this->_impl_.warning_threshold_ = from._impl_.warning_threshold_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_critical_threshold()) != 0) {
    _this->_impl_.critical_threshold_ = from._impl_.critical_threshold_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_enforce_limits() != 0) {
    _this->_impl_.enforce_limits_ = from._impl_.enforce_limits_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_absolute_max()) != 0) {
    _this->_impl_.absolute_max_ = from._impl_.absolute_max_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_usage_decay_rate()) != 0) {
    _this->_impl_.usage_decay_rate_ = from._impl_.usage_decay_rate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sustainable_limit()) != 0) {
    _this->_impl_.sustainable_limit_ = from._impl_.sustainable_limit_;
  }
  if (from._internal_max_continuous_overload_seconds() != 0) {
    _this->_impl_.max_continuous_overload_seconds_ = from._impl_.max_continuous_overload_seconds_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLimits::CopyFrom(const ResourceLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceLimits::InternalSwap(ResourceLimits* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_, &other->_impl_.unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_contact_, &other->_impl_.escalation_contact_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.auto_scale_action_, &other->_impl_.auto_scale_action_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.max_continuous_overload_seconds_)
      + sizeof(ResourceLimits::_impl_.max_continuous_overload_seconds_)
      - PROTOBUF_FIELD_OFFSET(ResourceLimits, _impl_.warning_threshold_)>(
          reinterpret_cast<char*>(&_impl_.warning_threshold_),
          reinterpret_cast<char*>(&other->_impl_.warning_threshold_));
}

::google::protobuf::Metadata ResourceLimits::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse() : SuperType() {}
              ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(arena);
              }
              constexpr auto ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse),
                                                          alignof(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\103\3\5\0\0\0\0\0"
    "seigr.resource_management.ResourceMonitorConfig.ConfigMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse() : SuperType() {}
              ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(arena);
              }
              constexpr auto ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse),
                                                          alignof(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\110\3\0\0\0\0\0\0"
    "seigr.resource_management.ResourceMonitorConfig.AlertSeverityLevelsEntry"
    "key"
  }},
};

// ===================================================================

class ResourceMonitorConfig::_Internal {
 public:
};

ResourceMonitorConfig::ResourceMonitorConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceMonitorConfig)
}
inline PROTOBUF_NDEBUG_INLINE ResourceMonitorConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceMonitorConfig& from_msg)
      : resource_limits_{visibility, arena, from.resource_limits_},
        config_metadata_{visibility, arena, from.config_metadata_},
        alert_severity_levels_{visibility, arena, from.alert_severity_levels_},
        alert_protocol_(arena, from.alert_protocol_),
        _cached_size_{0} {}

ResourceMonitorConfig::ResourceMonitorConfig(
    ::google::protobuf::Arena* arena,
    const ResourceMonitorConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceMonitorConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, check_interval_seconds_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, check_interval_seconds_),
           offsetof(Impl_, resource_efficiency_adjustment_interval_) -
               offsetof(Impl_, check_interval_seconds_) +
               sizeof(Impl_::resource_efficiency_adjustment_interval_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceMonitorConfig)
}
inline PROTOBUF_NDEBUG_INLINE ResourceMonitorConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : resource_limits_{visibility, arena},
        config_metadata_{visibility, arena},
        alert_severity_levels_{visibility, arena},
        alert_protocol_(arena),
        _cached_size_{0} {}

inline void ResourceMonitorConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, check_interval_seconds_),
           0,
           offsetof(Impl_, resource_efficiency_adjustment_interval_) -
               offsetof(Impl_, check_interval_seconds_) +
               sizeof(Impl_::resource_efficiency_adjustment_interval_));
}
ResourceMonitorConfig::~ResourceMonitorConfig() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceMonitorConfig)
  SharedDtor(*this);
}
inline void ResourceMonitorConfig::SharedDtor(MessageLite& self) {
  ResourceMonitorConfig& this_ = static_cast<ResourceMonitorConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.alert_protocol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceMonitorConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceMonitorConfig(arena);
}
constexpr auto ResourceMonitorConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_limits_) +
          decltype(ResourceMonitorConfig::_impl_.resource_limits_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.config_metadata_) +
          decltype(ResourceMonitorConfig::_impl_.config_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.config_metadata_) +
          decltype(ResourceMonitorConfig::_impl_.config_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_severity_levels_) +
          decltype(ResourceMonitorConfig::_impl_.alert_severity_levels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_severity_levels_) +
          decltype(ResourceMonitorConfig::_impl_.alert_severity_levels_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceMonitorConfig), alignof(ResourceMonitorConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceMonitorConfig::PlacementNew_,
                                 sizeof(ResourceMonitorConfig),
                                 alignof(ResourceMonitorConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceMonitorConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceMonitorConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceMonitorConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceMonitorConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceMonitorConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceMonitorConfig>(), &ResourceMonitorConfig::ByteSizeLong,
            &ResourceMonitorConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_._cached_size_),
        false,
    },
    &ResourceMonitorConfig::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceMonitorConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 114, 2> ResourceMonitorConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceMonitorConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 check_interval_seconds = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig, _impl_.check_interval_seconds_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.check_interval_seconds_)}},
    // repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_limits_)}},
    // bool enable_alerting = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ResourceMonitorConfig, _impl_.enable_alerting_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.enable_alerting_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string alert_protocol = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_protocol_)}},
    // int32 grace_period_seconds = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig, _impl_.grace_period_seconds_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.grace_period_seconds_)}},
    // int32 auto_scale_threshold = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig, _impl_.auto_scale_threshold_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.auto_scale_threshold_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 alert_frequency_limit = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig, _impl_.alert_frequency_limit_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_frequency_limit_)}},
    // double load_balancing_threshold = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.load_balancing_threshold_)}},
    // int32 resource_efficiency_adjustment_interval = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceMonitorConfig, _impl_.resource_efficiency_adjustment_interval_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_efficiency_adjustment_interval_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 check_interval_seconds = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.check_interval_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_limits_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool enable_alerting = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.enable_alerting_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> config_metadata = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.config_metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string alert_protocol = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 grace_period_seconds = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.grace_period_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 auto_scale_threshold = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.auto_scale_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<string, int32> alert_severity_levels = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_severity_levels_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // int32 alert_frequency_limit = 9;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.alert_frequency_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double load_balancing_threshold = 10;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.load_balancing_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 resource_efficiency_adjustment_interval = 11;
    {PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_efficiency_adjustment_interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceLimits>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ResourceMonitorConfig()._impl_.config_metadata_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ResourceMonitorConfig()._impl_.alert_severity_levels_)>(
        1, 0, 0, 9,
        5)},
  }}, {{
    "\57\0\0\0\17\16\0\0\25\0\0\0\0\0\0\0"
    "seigr.resource_management.ResourceMonitorConfig"
    "config_metadata"
    "alert_protocol"
    "alert_severity_levels"
  }},
};

PROTOBUF_NOINLINE void ResourceMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceMonitorConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_limits_.Clear();
  _impl_.config_metadata_.Clear();
  _impl_.alert_severity_levels_.Clear();
  _impl_.alert_protocol_.ClearToEmpty();
  ::memset(&_impl_.check_interval_seconds_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.resource_efficiency_adjustment_interval_) -
      reinterpret_cast<char*>(&_impl_.check_interval_seconds_)) + sizeof(_impl_.resource_efficiency_adjustment_interval_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceMonitorConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceMonitorConfig& this_ = static_cast<const ResourceMonitorConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceMonitorConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceMonitorConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceMonitorConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 check_interval_seconds = 1;
          if (this_._internal_check_interval_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_check_interval_seconds(), target);
          }

          // repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_resource_limits_size());
               i < n; i++) {
            const auto& repfield = this_._internal_resource_limits().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool enable_alerting = 3;
          if (this_._internal_enable_alerting() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_enable_alerting(), target);
          }

          // map<string, string> config_metadata = 4;
          if (!this_._internal_config_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_config_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.config_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.config_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.config_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.config_metadata");
              }
            }
          }

          // string alert_protocol = 5;
          if (!this_._internal_alert_protocol().empty()) {
            const std::string& _s = this_._internal_alert_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.alert_protocol");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // int32 grace_period_seconds = 6;
          if (this_._internal_grace_period_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_grace_period_seconds(), target);
          }

          // int32 auto_scale_threshold = 7;
          if (this_._internal_auto_scale_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_auto_scale_threshold(), target);
          }

          // map<string, int32> alert_severity_levels = 8;
          if (!this_._internal_alert_severity_levels().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_alert_severity_levels();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.alert_severity_levels");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceMonitorConfig.alert_severity_levels");
              }
            }
          }

          // int32 alert_frequency_limit = 9;
          if (this_._internal_alert_frequency_limit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_alert_frequency_limit(), target);
          }

          // double load_balancing_threshold = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_load_balancing_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_load_balancing_threshold(), target);
          }

          // int32 resource_efficiency_adjustment_interval = 11;
          if (this_._internal_resource_efficiency_adjustment_interval() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_resource_efficiency_adjustment_interval(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceMonitorConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceMonitorConfig::ByteSizeLong(const MessageLite& base) {
          const ResourceMonitorConfig& this_ = static_cast<const ResourceMonitorConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceMonitorConfig::ByteSizeLong() const {
          const ResourceMonitorConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceMonitorConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
            {
              total_size += 1UL * this_._internal_resource_limits_size();
              for (const auto& msg : this_._internal_resource_limits()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> config_metadata = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_config_metadata_size());
              for (const auto& entry : this_._internal_config_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, int32> alert_severity_levels = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_alert_severity_levels_size());
              for (const auto& entry : this_._internal_alert_severity_levels()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string alert_protocol = 5;
            if (!this_._internal_alert_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alert_protocol());
            }
            // int32 check_interval_seconds = 1;
            if (this_._internal_check_interval_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_check_interval_seconds());
            }
            // bool enable_alerting = 3;
            if (this_._internal_enable_alerting() != 0) {
              total_size += 2;
            }
            // int32 grace_period_seconds = 6;
            if (this_._internal_grace_period_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_grace_period_seconds());
            }
            // int32 auto_scale_threshold = 7;
            if (this_._internal_auto_scale_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_auto_scale_threshold());
            }
            // double load_balancing_threshold = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_load_balancing_threshold()) != 0) {
              total_size += 9;
            }
            // int32 alert_frequency_limit = 9;
            if (this_._internal_alert_frequency_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_alert_frequency_limit());
            }
            // int32 resource_efficiency_adjustment_interval = 11;
            if (this_._internal_resource_efficiency_adjustment_interval() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_resource_efficiency_adjustment_interval());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceMonitorConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceMonitorConfig*>(&to_msg);
  auto& from = static_cast<const ResourceMonitorConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceMonitorConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_resource_limits()->MergeFrom(
      from._internal_resource_limits());
  _this->_impl_.config_metadata_.MergeFrom(from._impl_.config_metadata_);
  _this->_impl_.alert_severity_levels_.MergeFrom(from._impl_.alert_severity_levels_);
  if (!from._internal_alert_protocol().empty()) {
    _this->_internal_set_alert_protocol(from._internal_alert_protocol());
  }
  if (from._internal_check_interval_seconds() != 0) {
    _this->_impl_.check_interval_seconds_ = from._impl_.check_interval_seconds_;
  }
  if (from._internal_enable_alerting() != 0) {
    _this->_impl_.enable_alerting_ = from._impl_.enable_alerting_;
  }
  if (from._internal_grace_period_seconds() != 0) {
    _this->_impl_.grace_period_seconds_ = from._impl_.grace_period_seconds_;
  }
  if (from._internal_auto_scale_threshold() != 0) {
    _this->_impl_.auto_scale_threshold_ = from._impl_.auto_scale_threshold_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_load_balancing_threshold()) != 0) {
    _this->_impl_.load_balancing_threshold_ = from._impl_.load_balancing_threshold_;
  }
  if (from._internal_alert_frequency_limit() != 0) {
    _this->_impl_.alert_frequency_limit_ = from._impl_.alert_frequency_limit_;
  }
  if (from._internal_resource_efficiency_adjustment_interval() != 0) {
    _this->_impl_.resource_efficiency_adjustment_interval_ = from._impl_.resource_efficiency_adjustment_interval_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceMonitorConfig::CopyFrom(const ResourceMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceMonitorConfig::InternalSwap(ResourceMonitorConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_limits_.InternalSwap(&other->_impl_.resource_limits_);
  _impl_.config_metadata_.InternalSwap(&other->_impl_.config_metadata_);
  _impl_.alert_severity_levels_.InternalSwap(&other->_impl_.alert_severity_levels_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alert_protocol_, &other->_impl_.alert_protocol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.resource_efficiency_adjustment_interval_)
      + sizeof(ResourceMonitorConfig::_impl_.resource_efficiency_adjustment_interval_)
      - PROTOBUF_FIELD_OFFSET(ResourceMonitorConfig, _impl_.check_interval_seconds_)>(
          reinterpret_cast<char*>(&_impl_.check_interval_seconds_),
          reinterpret_cast<char*>(&other->_impl_.check_interval_seconds_));
}

::google::protobuf::Metadata ResourceMonitorConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResourceUsageSummary::_Internal {
 public:
};

ResourceUsageSummary::ResourceUsageSummary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceUsageSummary)
}
inline PROTOBUF_NDEBUG_INLINE ResourceUsageSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceUsageSummary& from_msg)
      : hyphen_id_(arena, from.hyphen_id_),
        summary_period_(arena, from.summary_period_),
        _cached_size_{0} {}

ResourceUsageSummary::ResourceUsageSummary(
    ::google::protobuf::Arena* arena,
    const ResourceUsageSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceUsageSummary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_usage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, average_usage_),
           offsetof(Impl_, power_consumption_avg_) -
               offsetof(Impl_, average_usage_) +
               sizeof(Impl_::power_consumption_avg_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceUsageSummary)
}
inline PROTOBUF_NDEBUG_INLINE ResourceUsageSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hyphen_id_(arena),
        summary_period_(arena),
        _cached_size_{0} {}

inline void ResourceUsageSummary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_usage_),
           0,
           offsetof(Impl_, power_consumption_avg_) -
               offsetof(Impl_, average_usage_) +
               sizeof(Impl_::power_consumption_avg_));
}
ResourceUsageSummary::~ResourceUsageSummary() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceUsageSummary)
  SharedDtor(*this);
}
inline void ResourceUsageSummary::SharedDtor(MessageLite& self) {
  ResourceUsageSummary& this_ = static_cast<ResourceUsageSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hyphen_id_.Destroy();
  this_._impl_.summary_period_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceUsageSummary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceUsageSummary(arena);
}
constexpr auto ResourceUsageSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceUsageSummary),
                                            alignof(ResourceUsageSummary));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceUsageSummary::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceUsageSummary_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceUsageSummary::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceUsageSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceUsageSummary::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceUsageSummary>(), &ResourceUsageSummary::ByteSizeLong,
            &ResourceUsageSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_._cached_size_),
        false,
    },
    &ResourceUsageSummary::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceUsageSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 86, 2> ResourceUsageSummary::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceUsageSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .seigr.resource_management.ResourceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceUsageSummary, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.type_)}},
    // string hyphen_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.hyphen_id_)}},
    // double average_usage = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.average_usage_)}},
    // double peak_usage = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.peak_usage_)}},
    // double minimum_usage = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.minimum_usage_)}},
    // double usage_standard_deviation = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.usage_standard_deviation_)}},
    // string summary_period = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.summary_period_)}},
    // int32 threshold_exceed_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceUsageSummary, _impl_.threshold_exceed_count_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.threshold_exceed_count_)}},
    // double cost_estimate = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.cost_estimate_)}},
    // int32 time_above_threshold = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceUsageSummary, _impl_.time_above_threshold_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.time_above_threshold_)}},
    // double efficiency_score_avg = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.efficiency_score_avg_)}},
    // double power_consumption_avg = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.power_consumption_avg_)}},
    // bool sustainability_compliant = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ResourceUsageSummary, _impl_.sustainability_compliant_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.sustainability_compliant_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.resource_management.ResourceType type = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string hyphen_id = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.hyphen_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double average_usage = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.average_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double peak_usage = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.peak_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double minimum_usage = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.minimum_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double usage_standard_deviation = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.usage_standard_deviation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string summary_period = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.summary_period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 threshold_exceed_count = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.threshold_exceed_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double cost_estimate = 9;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.cost_estimate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 time_above_threshold = 10;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.time_above_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double efficiency_score_avg = 11;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.efficiency_score_avg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double power_consumption_avg = 12;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.power_consumption_avg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool sustainability_compliant = 13;
    {PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.sustainability_compliant_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\56\0\11\0\0\0\0\16\0\0\0\0\0\0\0\0"
    "seigr.resource_management.ResourceUsageSummary"
    "hyphen_id"
    "summary_period"
  }},
};

PROTOBUF_NOINLINE void ResourceUsageSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceUsageSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hyphen_id_.ClearToEmpty();
  _impl_.summary_period_.ClearToEmpty();
  ::memset(&_impl_.average_usage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.power_consumption_avg_) -
      reinterpret_cast<char*>(&_impl_.average_usage_)) + sizeof(_impl_.power_consumption_avg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceUsageSummary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceUsageSummary& this_ = static_cast<const ResourceUsageSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceUsageSummary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceUsageSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceUsageSummary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .seigr.resource_management.ResourceType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // string hyphen_id = 2;
          if (!this_._internal_hyphen_id().empty()) {
            const std::string& _s = this_._internal_hyphen_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsageSummary.hyphen_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // double average_usage = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_average_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_average_usage(), target);
          }

          // double peak_usage = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_peak_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_peak_usage(), target);
          }

          // double minimum_usage = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_minimum_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_minimum_usage(), target);
          }

          // double usage_standard_deviation = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_usage_standard_deviation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_usage_standard_deviation(), target);
          }

          // string summary_period = 7;
          if (!this_._internal_summary_period().empty()) {
            const std::string& _s = this_._internal_summary_period();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceUsageSummary.summary_period");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // int32 threshold_exceed_count = 8;
          if (this_._internal_threshold_exceed_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_threshold_exceed_count(), target);
          }

          // double cost_estimate = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_cost_estimate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_cost_estimate(), target);
          }

          // int32 time_above_threshold = 10;
          if (this_._internal_time_above_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_time_above_threshold(), target);
          }

          // double efficiency_score_avg = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_efficiency_score_avg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_efficiency_score_avg(), target);
          }

          // double power_consumption_avg = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption_avg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_power_consumption_avg(), target);
          }

          // bool sustainability_compliant = 13;
          if (this_._internal_sustainability_compliant() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_sustainability_compliant(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceUsageSummary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceUsageSummary::ByteSizeLong(const MessageLite& base) {
          const ResourceUsageSummary& this_ = static_cast<const ResourceUsageSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceUsageSummary::ByteSizeLong() const {
          const ResourceUsageSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceUsageSummary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string hyphen_id = 2;
            if (!this_._internal_hyphen_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hyphen_id());
            }
            // string summary_period = 7;
            if (!this_._internal_summary_period().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_summary_period());
            }
            // double average_usage = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_average_usage()) != 0) {
              total_size += 9;
            }
            // double peak_usage = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_peak_usage()) != 0) {
              total_size += 9;
            }
            // .seigr.resource_management.ResourceType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // int32 threshold_exceed_count = 8;
            if (this_._internal_threshold_exceed_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_threshold_exceed_count());
            }
            // double minimum_usage = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_minimum_usage()) != 0) {
              total_size += 9;
            }
            // double usage_standard_deviation = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_usage_standard_deviation()) != 0) {
              total_size += 9;
            }
            // double cost_estimate = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_cost_estimate()) != 0) {
              total_size += 9;
            }
            // double efficiency_score_avg = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_efficiency_score_avg()) != 0) {
              total_size += 9;
            }
            // int32 time_above_threshold = 10;
            if (this_._internal_time_above_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_time_above_threshold());
            }
            // bool sustainability_compliant = 13;
            if (this_._internal_sustainability_compliant() != 0) {
              total_size += 2;
            }
            // double power_consumption_avg = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption_avg()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceUsageSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceUsageSummary*>(&to_msg);
  auto& from = static_cast<const ResourceUsageSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceUsageSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hyphen_id().empty()) {
    _this->_internal_set_hyphen_id(from._internal_hyphen_id());
  }
  if (!from._internal_summary_period().empty()) {
    _this->_internal_set_summary_period(from._internal_summary_period());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_average_usage()) != 0) {
    _this->_impl_.average_usage_ = from._impl_.average_usage_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_peak_usage()) != 0) {
    _this->_impl_.peak_usage_ = from._impl_.peak_usage_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_threshold_exceed_count() != 0) {
    _this->_impl_.threshold_exceed_count_ = from._impl_.threshold_exceed_count_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_minimum_usage()) != 0) {
    _this->_impl_.minimum_usage_ = from._impl_.minimum_usage_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_usage_standard_deviation()) != 0) {
    _this->_impl_.usage_standard_deviation_ = from._impl_.usage_standard_deviation_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_cost_estimate()) != 0) {
    _this->_impl_.cost_estimate_ = from._impl_.cost_estimate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_efficiency_score_avg()) != 0) {
    _this->_impl_.efficiency_score_avg_ = from._impl_.efficiency_score_avg_;
  }
  if (from._internal_time_above_threshold() != 0) {
    _this->_impl_.time_above_threshold_ = from._impl_.time_above_threshold_;
  }
  if (from._internal_sustainability_compliant() != 0) {
    _this->_impl_.sustainability_compliant_ = from._impl_.sustainability_compliant_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_power_consumption_avg()) != 0) {
    _this->_impl_.power_consumption_avg_ = from._impl_.power_consumption_avg_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsageSummary::CopyFrom(const ResourceUsageSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceUsageSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceUsageSummary::InternalSwap(ResourceUsageSummary* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hyphen_id_, &other->_impl_.hyphen_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_period_, &other->_impl_.summary_period_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.power_consumption_avg_)
      + sizeof(ResourceUsageSummary::_impl_.power_consumption_avg_)
      - PROTOBUF_FIELD_OFFSET(ResourceUsageSummary, _impl_.average_usage_)>(
          reinterpret_cast<char*>(&_impl_.average_usage_),
          reinterpret_cast<char*>(&other->_impl_.average_usage_));
}

::google::protobuf::Metadata ResourceUsageSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse() : SuperType() {}
              ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(arena);
              }
              constexpr auto ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse),
                                                          alignof(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\110\3\0\0\0\0\0\0"
    "seigr.resource_management.ClusterResourceStatus.ClusterAverageUsageEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse() : SuperType() {}
              ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(arena);
              }
              constexpr auto ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse),
                                                          alignof(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 81, 2> ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\105\3\0\0\0\0\0\0"
    "seigr.resource_management.ClusterResourceStatus.ClusterPeakUsageEntry"
    "key"
  }},
};

// ===================================================================

class ClusterResourceStatus::_Internal {
 public:
};

ClusterResourceStatus::ClusterResourceStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ClusterResourceStatus)
}
inline PROTOBUF_NDEBUG_INLINE ClusterResourceStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ClusterResourceStatus& from_msg)
      : hyphen_summaries_{visibility, arena, from.hyphen_summaries_},
        cluster_average_usage_{visibility, arena, from.cluster_average_usage_},
        cluster_peak_usage_{visibility, arena, from.cluster_peak_usage_},
        cluster_id_(arena, from.cluster_id_),
        last_updated_(arena, from.last_updated_),
        health_status_(arena, from.health_status_),
        recovery_action_plan_(arena, from.recovery_action_plan_),
        _cached_size_{0} {}

ClusterResourceStatus::ClusterResourceStatus(
    ::google::protobuf::Arena* arena,
    const ClusterResourceStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClusterResourceStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cluster_utilization_score_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cluster_utilization_score_),
           offsetof(Impl_, sustainability_compliance_rate_) -
               offsetof(Impl_, cluster_utilization_score_) +
               sizeof(Impl_::sustainability_compliance_rate_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ClusterResourceStatus)
}
inline PROTOBUF_NDEBUG_INLINE ClusterResourceStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hyphen_summaries_{visibility, arena},
        cluster_average_usage_{visibility, arena},
        cluster_peak_usage_{visibility, arena},
        cluster_id_(arena),
        last_updated_(arena),
        health_status_(arena),
        recovery_action_plan_(arena),
        _cached_size_{0} {}

inline void ClusterResourceStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cluster_utilization_score_),
           0,
           offsetof(Impl_, sustainability_compliance_rate_) -
               offsetof(Impl_, cluster_utilization_score_) +
               sizeof(Impl_::sustainability_compliance_rate_));
}
ClusterResourceStatus::~ClusterResourceStatus() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ClusterResourceStatus)
  SharedDtor(*this);
}
inline void ClusterResourceStatus::SharedDtor(MessageLite& self) {
  ClusterResourceStatus& this_ = static_cast<ClusterResourceStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cluster_id_.Destroy();
  this_._impl_.last_updated_.Destroy();
  this_._impl_.health_status_.Destroy();
  this_._impl_.recovery_action_plan_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ClusterResourceStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ClusterResourceStatus(arena);
}
constexpr auto ClusterResourceStatus::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.hyphen_summaries_) +
          decltype(ClusterResourceStatus::_impl_.hyphen_summaries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_average_usage_) +
          decltype(ClusterResourceStatus::_impl_.cluster_average_usage_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_average_usage_) +
          decltype(ClusterResourceStatus::_impl_.cluster_average_usage_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_peak_usage_) +
          decltype(ClusterResourceStatus::_impl_.cluster_peak_usage_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_peak_usage_) +
          decltype(ClusterResourceStatus::_impl_.cluster_peak_usage_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ClusterResourceStatus), alignof(ClusterResourceStatus), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ClusterResourceStatus::PlacementNew_,
                                 sizeof(ClusterResourceStatus),
                                 alignof(ClusterResourceStatus));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ClusterResourceStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ClusterResourceStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ClusterResourceStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ClusterResourceStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ClusterResourceStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ClusterResourceStatus>(), &ClusterResourceStatus::ByteSizeLong,
            &ClusterResourceStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_._cached_size_),
        false,
    },
    &ClusterResourceStatus::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ClusterResourceStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 158, 2> ClusterResourceStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ClusterResourceStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string cluster_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_id_)}},
    // repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.hyphen_summaries_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string last_updated = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.last_updated_)}},
    // string health_status = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.health_status_)}},
    // int32 overloaded_hyphens_count = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClusterResourceStatus, _impl_.overloaded_hyphens_count_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.overloaded_hyphens_count_)}},
    // string recovery_action_plan = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.recovery_action_plan_)}},
    // double cluster_utilization_score = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_utilization_score_)}},
    // double load_distribution_score = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.load_distribution_score_)}},
    // double sustainability_compliance_rate = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.sustainability_compliance_rate_)}},
    // int32 adaptive_scaling_events = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClusterResourceStatus, _impl_.adaptive_scaling_events_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.adaptive_scaling_events_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string cluster_id = 1;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.hyphen_summaries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, double> cluster_average_usage = 3;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_average_usage_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, double> cluster_peak_usage = 4;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_peak_usage_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string last_updated = 5;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.last_updated_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string health_status = 6;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.health_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 overloaded_hyphens_count = 7;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.overloaded_hyphens_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string recovery_action_plan = 8;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.recovery_action_plan_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double cluster_utilization_score = 9;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_utilization_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double load_distribution_score = 10;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.load_distribution_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double sustainability_compliance_rate = 11;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.sustainability_compliance_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 adaptive_scaling_events = 12;
    {PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.adaptive_scaling_events_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceUsageSummary>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ClusterResourceStatus()._impl_.cluster_average_usage_)>(
        1, 0, 0, 9,
        1)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ClusterResourceStatus()._impl_.cluster_peak_usage_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\57\12\0\25\22\14\15\0\24\0\0\0\0\0\0\0"
    "seigr.resource_management.ClusterResourceStatus"
    "cluster_id"
    "cluster_average_usage"
    "cluster_peak_usage"
    "last_updated"
    "health_status"
    "recovery_action_plan"
  }},
};

PROTOBUF_NOINLINE void ClusterResourceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ClusterResourceStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hyphen_summaries_.Clear();
  _impl_.cluster_average_usage_.Clear();
  _impl_.cluster_peak_usage_.Clear();
  _impl_.cluster_id_.ClearToEmpty();
  _impl_.last_updated_.ClearToEmpty();
  _impl_.health_status_.ClearToEmpty();
  _impl_.recovery_action_plan_.ClearToEmpty();
  ::memset(&_impl_.cluster_utilization_score_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sustainability_compliance_rate_) -
      reinterpret_cast<char*>(&_impl_.cluster_utilization_score_)) + sizeof(_impl_.sustainability_compliance_rate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ClusterResourceStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ClusterResourceStatus& this_ = static_cast<const ClusterResourceStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ClusterResourceStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ClusterResourceStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ClusterResourceStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string cluster_id = 1;
          if (!this_._internal_cluster_id().empty()) {
            const std::string& _s = this_._internal_cluster_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.cluster_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_hyphen_summaries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_hyphen_summaries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<string, double> cluster_average_usage = 3;
          if (!this_._internal_cluster_average_usage().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_cluster_average_usage();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.cluster_average_usage");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.cluster_average_usage");
              }
            }
          }

          // map<string, double> cluster_peak_usage = 4;
          if (!this_._internal_cluster_peak_usage().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_cluster_peak_usage();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.cluster_peak_usage");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.cluster_peak_usage");
              }
            }
          }

          // string last_updated = 5;
          if (!this_._internal_last_updated().empty()) {
            const std::string& _s = this_._internal_last_updated();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.last_updated");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string health_status = 6;
          if (!this_._internal_health_status().empty()) {
            const std::string& _s = this_._internal_health_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.health_status");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // int32 overloaded_hyphens_count = 7;
          if (this_._internal_overloaded_hyphens_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_overloaded_hyphens_count(), target);
          }

          // string recovery_action_plan = 8;
          if (!this_._internal_recovery_action_plan().empty()) {
            const std::string& _s = this_._internal_recovery_action_plan();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ClusterResourceStatus.recovery_action_plan");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // double cluster_utilization_score = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_cluster_utilization_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_cluster_utilization_score(), target);
          }

          // double load_distribution_score = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_load_distribution_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_load_distribution_score(), target);
          }

          // double sustainability_compliance_rate = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sustainability_compliance_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_sustainability_compliance_rate(), target);
          }

          // int32 adaptive_scaling_events = 12;
          if (this_._internal_adaptive_scaling_events() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_adaptive_scaling_events(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ClusterResourceStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ClusterResourceStatus::ByteSizeLong(const MessageLite& base) {
          const ClusterResourceStatus& this_ = static_cast<const ClusterResourceStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ClusterResourceStatus::ByteSizeLong() const {
          const ClusterResourceStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ClusterResourceStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
            {
              total_size += 1UL * this_._internal_hyphen_summaries_size();
              for (const auto& msg : this_._internal_hyphen_summaries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, double> cluster_average_usage = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_cluster_average_usage_size());
              for (const auto& entry : this_._internal_cluster_average_usage()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, double> cluster_peak_usage = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_cluster_peak_usage_size());
              for (const auto& entry : this_._internal_cluster_peak_usage()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string cluster_id = 1;
            if (!this_._internal_cluster_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cluster_id());
            }
            // string last_updated = 5;
            if (!this_._internal_last_updated().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_updated());
            }
            // string health_status = 6;
            if (!this_._internal_health_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_health_status());
            }
            // string recovery_action_plan = 8;
            if (!this_._internal_recovery_action_plan().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_recovery_action_plan());
            }
            // double cluster_utilization_score = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_cluster_utilization_score()) != 0) {
              total_size += 9;
            }
            // int32 overloaded_hyphens_count = 7;
            if (this_._internal_overloaded_hyphens_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_overloaded_hyphens_count());
            }
            // int32 adaptive_scaling_events = 12;
            if (this_._internal_adaptive_scaling_events() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_adaptive_scaling_events());
            }
            // double load_distribution_score = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_load_distribution_score()) != 0) {
              total_size += 9;
            }
            // double sustainability_compliance_rate = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sustainability_compliance_rate()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ClusterResourceStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClusterResourceStatus*>(&to_msg);
  auto& from = static_cast<const ClusterResourceStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ClusterResourceStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hyphen_summaries()->MergeFrom(
      from._internal_hyphen_summaries());
  _this->_impl_.cluster_average_usage_.MergeFrom(from._impl_.cluster_average_usage_);
  _this->_impl_.cluster_peak_usage_.MergeFrom(from._impl_.cluster_peak_usage_);
  if (!from._internal_cluster_id().empty()) {
    _this->_internal_set_cluster_id(from._internal_cluster_id());
  }
  if (!from._internal_last_updated().empty()) {
    _this->_internal_set_last_updated(from._internal_last_updated());
  }
  if (!from._internal_health_status().empty()) {
    _this->_internal_set_health_status(from._internal_health_status());
  }
  if (!from._internal_recovery_action_plan().empty()) {
    _this->_internal_set_recovery_action_plan(from._internal_recovery_action_plan());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_cluster_utilization_score()) != 0) {
    _this->_impl_.cluster_utilization_score_ = from._impl_.cluster_utilization_score_;
  }
  if (from._internal_overloaded_hyphens_count() != 0) {
    _this->_impl_.overloaded_hyphens_count_ = from._impl_.overloaded_hyphens_count_;
  }
  if (from._internal_adaptive_scaling_events() != 0) {
    _this->_impl_.adaptive_scaling_events_ = from._impl_.adaptive_scaling_events_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_load_distribution_score()) != 0) {
    _this->_impl_.load_distribution_score_ = from._impl_.load_distribution_score_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sustainability_compliance_rate()) != 0) {
    _this->_impl_.sustainability_compliance_rate_ = from._impl_.sustainability_compliance_rate_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClusterResourceStatus::CopyFrom(const ClusterResourceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ClusterResourceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClusterResourceStatus::InternalSwap(ClusterResourceStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hyphen_summaries_.InternalSwap(&other->_impl_.hyphen_summaries_);
  _impl_.cluster_average_usage_.InternalSwap(&other->_impl_.cluster_average_usage_);
  _impl_.cluster_peak_usage_.InternalSwap(&other->_impl_.cluster_peak_usage_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cluster_id_, &other->_impl_.cluster_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_updated_, &other->_impl_.last_updated_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.health_status_, &other->_impl_.health_status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recovery_action_plan_, &other->_impl_.recovery_action_plan_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.sustainability_compliance_rate_)
      + sizeof(ClusterResourceStatus::_impl_.sustainability_compliance_rate_)
      - PROTOBUF_FIELD_OFFSET(ClusterResourceStatus, _impl_.cluster_utilization_score_)>(
          reinterpret_cast<char*>(&_impl_.cluster_utilization_score_),
          reinterpret_cast<char*>(&other->_impl_.cluster_utilization_score_));
}

::google::protobuf::Metadata ClusterResourceStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse() : SuperType() {}
              ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(arena);
              }
              constexpr auto ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse),
                                                          alignof(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ResourceDemandForecast_ForecastMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ResourceDemandForecast_ForecastMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 87, 2> ResourceDemandForecast_ForecastMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceDemandForecast_ForecastMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\106\3\5\0\0\0\0\0"
    "seigr.resource_management.ResourceDemandForecast.ForecastMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ResourceDemandForecast::_Internal {
 public:
};

ResourceDemandForecast::ResourceDemandForecast(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceDemandForecast)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDemandForecast::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceDemandForecast& from_msg)
      : forecast_metadata_{visibility, arena, from.forecast_metadata_},
        cluster_id_(arena, from.cluster_id_),
        forecast_period_(arena, from.forecast_period_),
        forecast_created_at_(arena, from.forecast_created_at_),
        _cached_size_{0} {}

ResourceDemandForecast::ResourceDemandForecast(
    ::google::protobuf::Arena* arena,
    const ResourceDemandForecast& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceDemandForecast* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, projected_peak_usage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, projected_peak_usage_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, projected_peak_usage_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceDemandForecast)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDemandForecast::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : forecast_metadata_{visibility, arena},
        cluster_id_(arena),
        forecast_period_(arena),
        forecast_created_at_(arena),
        _cached_size_{0} {}

inline void ResourceDemandForecast::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, projected_peak_usage_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, projected_peak_usage_) +
               sizeof(Impl_::type_));
}
ResourceDemandForecast::~ResourceDemandForecast() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceDemandForecast)
  SharedDtor(*this);
}
inline void ResourceDemandForecast::SharedDtor(MessageLite& self) {
  ResourceDemandForecast& this_ = static_cast<ResourceDemandForecast&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cluster_id_.Destroy();
  this_._impl_.forecast_period_.Destroy();
  this_._impl_.forecast_created_at_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceDemandForecast::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceDemandForecast(arena);
}
constexpr auto ResourceDemandForecast::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_metadata_) +
          decltype(ResourceDemandForecast::_impl_.forecast_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_metadata_) +
          decltype(ResourceDemandForecast::_impl_.forecast_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceDemandForecast), alignof(ResourceDemandForecast), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceDemandForecast::PlacementNew_,
                                 sizeof(ResourceDemandForecast),
                                 alignof(ResourceDemandForecast));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceDemandForecast::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceDemandForecast_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceDemandForecast::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceDemandForecast>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceDemandForecast::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceDemandForecast>(), &ResourceDemandForecast::ByteSizeLong,
            &ResourceDemandForecast::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_._cached_size_),
        false,
    },
    &ResourceDemandForecast::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceDemandForecast::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 126, 2> ResourceDemandForecast::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceDemandForecast>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .seigr.resource_management.ResourceType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceDemandForecast, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.type_)}},
    // string cluster_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.cluster_id_)}},
    // string forecast_period = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_period_)}},
    // double projected_peak_usage = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.projected_peak_usage_)}},
    // double projected_average_usage = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.projected_average_usage_)}},
    // double confidence_level = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.confidence_level_)}},
    // string forecast_created_at = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.resource_management.ResourceType type = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string cluster_id = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.cluster_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string forecast_period = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double projected_peak_usage = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.projected_peak_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double projected_average_usage = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.projected_average_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double confidence_level = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.confidence_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string forecast_created_at = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> forecast_metadata = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.forecast_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ResourceDemandForecast()._impl_.forecast_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\60\0\12\17\0\0\0\23\21\0\0\0\0\0\0\0"
    "seigr.resource_management.ResourceDemandForecast"
    "cluster_id"
    "forecast_period"
    "forecast_created_at"
    "forecast_metadata"
  }},
};

PROTOBUF_NOINLINE void ResourceDemandForecast::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceDemandForecast)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.forecast_metadata_.Clear();
  _impl_.cluster_id_.ClearToEmpty();
  _impl_.forecast_period_.ClearToEmpty();
  _impl_.forecast_created_at_.ClearToEmpty();
  ::memset(&_impl_.projected_peak_usage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.projected_peak_usage_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceDemandForecast::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceDemandForecast& this_ = static_cast<const ResourceDemandForecast&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceDemandForecast::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceDemandForecast& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceDemandForecast)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .seigr.resource_management.ResourceType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // string cluster_id = 2;
          if (!this_._internal_cluster_id().empty()) {
            const std::string& _s = this_._internal_cluster_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.cluster_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string forecast_period = 3;
          if (!this_._internal_forecast_period().empty()) {
            const std::string& _s = this_._internal_forecast_period();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_period");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double projected_peak_usage = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_projected_peak_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_projected_peak_usage(), target);
          }

          // double projected_average_usage = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_projected_average_usage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_projected_average_usage(), target);
          }

          // double confidence_level = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_confidence_level()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_confidence_level(), target);
          }

          // string forecast_created_at = 7;
          if (!this_._internal_forecast_created_at().empty()) {
            const std::string& _s = this_._internal_forecast_created_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_created_at");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> forecast_metadata = 8;
          if (!this_._internal_forecast_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_forecast_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDemandForecast.forecast_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceDemandForecast)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceDemandForecast::ByteSizeLong(const MessageLite& base) {
          const ResourceDemandForecast& this_ = static_cast<const ResourceDemandForecast&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceDemandForecast::ByteSizeLong() const {
          const ResourceDemandForecast& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceDemandForecast)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> forecast_metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_forecast_metadata_size());
              for (const auto& entry : this_._internal_forecast_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string cluster_id = 2;
            if (!this_._internal_cluster_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cluster_id());
            }
            // string forecast_period = 3;
            if (!this_._internal_forecast_period().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_forecast_period());
            }
            // string forecast_created_at = 7;
            if (!this_._internal_forecast_created_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_forecast_created_at());
            }
            // double projected_peak_usage = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_projected_peak_usage()) != 0) {
              total_size += 9;
            }
            // double projected_average_usage = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_projected_average_usage()) != 0) {
              total_size += 9;
            }
            // double confidence_level = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_confidence_level()) != 0) {
              total_size += 9;
            }
            // .seigr.resource_management.ResourceType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceDemandForecast::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceDemandForecast*>(&to_msg);
  auto& from = static_cast<const ResourceDemandForecast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceDemandForecast)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.forecast_metadata_.MergeFrom(from._impl_.forecast_metadata_);
  if (!from._internal_cluster_id().empty()) {
    _this->_internal_set_cluster_id(from._internal_cluster_id());
  }
  if (!from._internal_forecast_period().empty()) {
    _this->_internal_set_forecast_period(from._internal_forecast_period());
  }
  if (!from._internal_forecast_created_at().empty()) {
    _this->_internal_set_forecast_created_at(from._internal_forecast_created_at());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_projected_peak_usage()) != 0) {
    _this->_impl_.projected_peak_usage_ = from._impl_.projected_peak_usage_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_projected_average_usage()) != 0) {
    _this->_impl_.projected_average_usage_ = from._impl_.projected_average_usage_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_confidence_level()) != 0) {
    _this->_impl_.confidence_level_ = from._impl_.confidence_level_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceDemandForecast::CopyFrom(const ResourceDemandForecast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceDemandForecast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceDemandForecast::InternalSwap(ResourceDemandForecast* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.forecast_metadata_.InternalSwap(&other->_impl_.forecast_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cluster_id_, &other->_impl_.cluster_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forecast_period_, &other->_impl_.forecast_period_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forecast_created_at_, &other->_impl_.forecast_created_at_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.type_)
      + sizeof(ResourceDemandForecast::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ResourceDemandForecast, _impl_.projected_peak_usage_)>(
          reinterpret_cast<char*>(&_impl_.projected_peak_usage_),
          reinterpret_cast<char*>(&other->_impl_.projected_peak_usage_));
}

::google::protobuf::Metadata ResourceDemandForecast::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ResourceDistribution_DistributionMetadataEntry_DoNotUse::ResourceDistribution_DistributionMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ResourceDistribution_DistributionMetadataEntry_DoNotUse::ResourceDistribution_DistributionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ResourceDistribution_DistributionMetadataEntry_DoNotUse::ResourceDistribution_DistributionMetadataEntry_DoNotUse() : SuperType() {}
              ResourceDistribution_DistributionMetadataEntry_DoNotUse::ResourceDistribution_DistributionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ResourceDistribution_DistributionMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ResourceDistribution_DistributionMetadataEntry_DoNotUse(arena);
              }
              constexpr auto ResourceDistribution_DistributionMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ResourceDistribution_DistributionMetadataEntry_DoNotUse),
                                                          alignof(ResourceDistribution_DistributionMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ResourceDistribution_DistributionMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ResourceDistribution_DistributionMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ResourceDistribution_DistributionMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ResourceDistribution_DistributionMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ResourceDistribution_DistributionMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ResourceDistribution_DistributionMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ResourceDistribution_DistributionMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_resource_5fmanagement_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ResourceDistribution_DistributionMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 89, 2> ResourceDistribution_DistributionMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceDistribution_DistributionMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution_DistributionMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\110\3\5\0\0\0\0\0"
    "seigr.resource_management.ResourceDistribution.DistributionMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ResourceDistribution::_Internal {
 public:
};

ResourceDistribution::ResourceDistribution(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.resource_management.ResourceDistribution)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDistribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::resource_management::ResourceDistribution& from_msg)
      : target_cluster_ids_{visibility, arena, from.target_cluster_ids_},
        distribution_metadata_{visibility, arena, from.distribution_metadata_},
        distribution_id_(arena, from.distribution_id_),
        source_cluster_id_(arena, from.source_cluster_id_),
        distribution_strategy_(arena, from.distribution_strategy_),
        _cached_size_{0} {}

ResourceDistribution::ResourceDistribution(
    ::google::protobuf::Arena* arena,
    const ResourceDistribution& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceDistribution* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_latency_allowed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_latency_allowed_),
           offsetof(Impl_, min_efficiency_threshold_) -
               offsetof(Impl_, max_latency_allowed_) +
               sizeof(Impl_::min_efficiency_threshold_));

  // @@protoc_insertion_point(copy_constructor:seigr.resource_management.ResourceDistribution)
}
inline PROTOBUF_NDEBUG_INLINE ResourceDistribution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_cluster_ids_{visibility, arena},
        distribution_metadata_{visibility, arena},
        distribution_id_(arena),
        source_cluster_id_(arena),
        distribution_strategy_(arena),
        _cached_size_{0} {}

inline void ResourceDistribution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_latency_allowed_),
           0,
           offsetof(Impl_, min_efficiency_threshold_) -
               offsetof(Impl_, max_latency_allowed_) +
               sizeof(Impl_::min_efficiency_threshold_));
}
ResourceDistribution::~ResourceDistribution() {
  // @@protoc_insertion_point(destructor:seigr.resource_management.ResourceDistribution)
  SharedDtor(*this);
}
inline void ResourceDistribution::SharedDtor(MessageLite& self) {
  ResourceDistribution& this_ = static_cast<ResourceDistribution&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.distribution_id_.Destroy();
  this_._impl_.source_cluster_id_.Destroy();
  this_._impl_.distribution_strategy_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ResourceDistribution::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceDistribution(arena);
}
constexpr auto ResourceDistribution::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.target_cluster_ids_) +
          decltype(ResourceDistribution::_impl_.target_cluster_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_metadata_) +
          decltype(ResourceDistribution::_impl_.distribution_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_metadata_) +
          decltype(ResourceDistribution::_impl_.distribution_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceDistribution), alignof(ResourceDistribution), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceDistribution::PlacementNew_,
                                 sizeof(ResourceDistribution),
                                 alignof(ResourceDistribution));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceDistribution::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceDistribution_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceDistribution::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceDistribution>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceDistribution::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceDistribution>(), &ResourceDistribution::ByteSizeLong,
            &ResourceDistribution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_._cached_size_),
        false,
    },
    &ResourceDistribution::kDescriptorMethods,
    &descriptor_table_resource_5fmanagement_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceDistribution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 155, 2> ResourceDistribution::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::resource_management::ResourceDistribution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string distribution_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_id_)}},
    // .seigr.resource_management.ResourceType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResourceDistribution, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.type_)}},
    // string source_cluster_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.source_cluster_id_)}},
    // repeated string target_cluster_ids = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.target_cluster_ids_)}},
    // double max_latency_allowed = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.max_latency_allowed_)}},
    // double min_efficiency_threshold = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.min_efficiency_threshold_)}},
    // string distribution_strategy = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_strategy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool enable_encryption = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ResourceDistribution, _impl_.enable_encryption_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.enable_encryption_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string distribution_id = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.resource_management.ResourceType type = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string source_cluster_id = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.source_cluster_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string target_cluster_ids = 4;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.target_cluster_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // double max_latency_allowed = 5;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.max_latency_allowed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double min_efficiency_threshold = 6;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.min_efficiency_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string distribution_strategy = 7;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_strategy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> distribution_metadata = 8;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.distribution_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool enable_encryption = 9;
    {PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.enable_encryption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ResourceDistribution()._impl_.distribution_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\56\17\0\21\22\0\0\25\25\0\0\0\0\0\0\0"
    "seigr.resource_management.ResourceDistribution"
    "distribution_id"
    "source_cluster_id"
    "target_cluster_ids"
    "distribution_strategy"
    "distribution_metadata"
  }},
};

PROTOBUF_NOINLINE void ResourceDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.resource_management.ResourceDistribution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_cluster_ids_.Clear();
  _impl_.distribution_metadata_.Clear();
  _impl_.distribution_id_.ClearToEmpty();
  _impl_.source_cluster_id_.ClearToEmpty();
  _impl_.distribution_strategy_.ClearToEmpty();
  ::memset(&_impl_.max_latency_allowed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_efficiency_threshold_) -
      reinterpret_cast<char*>(&_impl_.max_latency_allowed_)) + sizeof(_impl_.min_efficiency_threshold_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceDistribution::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceDistribution& this_ = static_cast<const ResourceDistribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceDistribution::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceDistribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.resource_management.ResourceDistribution)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string distribution_id = 1;
          if (!this_._internal_distribution_id().empty()) {
            const std::string& _s = this_._internal_distribution_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .seigr.resource_management.ResourceType type = 2;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          // string source_cluster_id = 3;
          if (!this_._internal_source_cluster_id().empty()) {
            const std::string& _s = this_._internal_source_cluster_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.source_cluster_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated string target_cluster_ids = 4;
          for (int i = 0, n = this_._internal_target_cluster_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_target_cluster_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.target_cluster_ids");
            target = stream->WriteString(4, s, target);
          }

          // double max_latency_allowed = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_max_latency_allowed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_max_latency_allowed(), target);
          }

          // double min_efficiency_threshold = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_min_efficiency_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_min_efficiency_threshold(), target);
          }

          // string distribution_strategy = 7;
          if (!this_._internal_distribution_strategy().empty()) {
            const std::string& _s = this_._internal_distribution_strategy();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_strategy");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> distribution_metadata = 8;
          if (!this_._internal_distribution_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_distribution_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.resource_management.ResourceDistribution.distribution_metadata");
              }
            }
          }

          // bool enable_encryption = 9;
          if (this_._internal_enable_encryption() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_enable_encryption(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.resource_management.ResourceDistribution)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceDistribution::ByteSizeLong(const MessageLite& base) {
          const ResourceDistribution& this_ = static_cast<const ResourceDistribution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceDistribution::ByteSizeLong() const {
          const ResourceDistribution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.resource_management.ResourceDistribution)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string target_cluster_ids = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_target_cluster_ids().size());
              for (int i = 0, n = this_._internal_target_cluster_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_target_cluster_ids().Get(i));
              }
            }
            // map<string, string> distribution_metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_distribution_metadata_size());
              for (const auto& entry : this_._internal_distribution_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string distribution_id = 1;
            if (!this_._internal_distribution_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_distribution_id());
            }
            // string source_cluster_id = 3;
            if (!this_._internal_source_cluster_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_source_cluster_id());
            }
            // string distribution_strategy = 7;
            if (!this_._internal_distribution_strategy().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_distribution_strategy());
            }
            // double max_latency_allowed = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_max_latency_allowed()) != 0) {
              total_size += 9;
            }
            // .seigr.resource_management.ResourceType type = 2;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // bool enable_encryption = 9;
            if (this_._internal_enable_encryption() != 0) {
              total_size += 2;
            }
            // double min_efficiency_threshold = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_min_efficiency_threshold()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceDistribution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceDistribution*>(&to_msg);
  auto& from = static_cast<const ResourceDistribution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.resource_management.ResourceDistribution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_target_cluster_ids()->MergeFrom(from._internal_target_cluster_ids());
  _this->_impl_.distribution_metadata_.MergeFrom(from._impl_.distribution_metadata_);
  if (!from._internal_distribution_id().empty()) {
    _this->_internal_set_distribution_id(from._internal_distribution_id());
  }
  if (!from._internal_source_cluster_id().empty()) {
    _this->_internal_set_source_cluster_id(from._internal_source_cluster_id());
  }
  if (!from._internal_distribution_strategy().empty()) {
    _this->_internal_set_distribution_strategy(from._internal_distribution_strategy());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_max_latency_allowed()) != 0) {
    _this->_impl_.max_latency_allowed_ = from._impl_.max_latency_allowed_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_enable_encryption() != 0) {
    _this->_impl_.enable_encryption_ = from._impl_.enable_encryption_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_min_efficiency_threshold()) != 0) {
    _this->_impl_.min_efficiency_threshold_ = from._impl_.min_efficiency_threshold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceDistribution::CopyFrom(const ResourceDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.resource_management.ResourceDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceDistribution::InternalSwap(ResourceDistribution* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_cluster_ids_.InternalSwap(&other->_impl_.target_cluster_ids_);
  _impl_.distribution_metadata_.InternalSwap(&other->_impl_.distribution_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.distribution_id_, &other->_impl_.distribution_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_cluster_id_, &other->_impl_.source_cluster_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.distribution_strategy_, &other->_impl_.distribution_strategy_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.min_efficiency_threshold_)
      + sizeof(ResourceDistribution::_impl_.min_efficiency_threshold_)
      - PROTOBUF_FIELD_OFFSET(ResourceDistribution, _impl_.max_latency_allowed_)>(
          reinterpret_cast<char*>(&_impl_.max_latency_allowed_),
          reinterpret_cast<char*>(&other->_impl_.max_latency_allowed_));
}

::google::protobuf::Metadata ResourceDistribution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace resource_management
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_resource_5fmanagement_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
