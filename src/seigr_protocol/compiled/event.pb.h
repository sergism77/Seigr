// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: event.proto
// Protobuf C++ Version: 5.29.2

#ifndef event_2eproto_2epb_2eh
#define event_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_event_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_event_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_event_2eproto;
namespace seigr {
namespace event {
class AcknowledgeRequest;
struct AcknowledgeRequestDefaultTypeInternal;
extern AcknowledgeRequestDefaultTypeInternal _AcknowledgeRequest_default_instance_;
class AcknowledgeResponse;
struct AcknowledgeResponseDefaultTypeInternal;
extern AcknowledgeResponseDefaultTypeInternal _AcknowledgeResponse_default_instance_;
class EscalationConfig;
struct EscalationConfigDefaultTypeInternal;
extern EscalationConfigDefaultTypeInternal _EscalationConfig_default_instance_;
class EscalationConfig_ConditionsEntry_DoNotUse;
struct EscalationConfig_ConditionsEntry_DoNotUseDefaultTypeInternal;
extern EscalationConfig_ConditionsEntry_DoNotUseDefaultTypeInternal _EscalationConfig_ConditionsEntry_DoNotUse_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventLog;
struct EventLogDefaultTypeInternal;
extern EventLogDefaultTypeInternal _EventLog_default_instance_;
class EventLogRequest;
struct EventLogRequestDefaultTypeInternal;
extern EventLogRequestDefaultTypeInternal _EventLogRequest_default_instance_;
class EventLogResponse;
struct EventLogResponseDefaultTypeInternal;
extern EventLogResponseDefaultTypeInternal _EventLogResponse_default_instance_;
class EventLog_LogMetadataEntry_DoNotUse;
struct EventLog_LogMetadataEntry_DoNotUseDefaultTypeInternal;
extern EventLog_LogMetadataEntry_DoNotUseDefaultTypeInternal _EventLog_LogMetadataEntry_DoNotUse_default_instance_;
class EventResponse;
struct EventResponseDefaultTypeInternal;
extern EventResponseDefaultTypeInternal _EventResponse_default_instance_;
class EventResponse_ResponseMetadataEntry_DoNotUse;
struct EventResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal;
extern EventResponse_ResponseMetadataEntry_DoNotUseDefaultTypeInternal _EventResponse_ResponseMetadataEntry_DoNotUse_default_instance_;
class EventSubscription;
struct EventSubscriptionDefaultTypeInternal;
extern EventSubscriptionDefaultTypeInternal _EventSubscription_default_instance_;
class EventSubscription_FiltersEntry_DoNotUse;
struct EventSubscription_FiltersEntry_DoNotUseDefaultTypeInternal;
extern EventSubscription_FiltersEntry_DoNotUseDefaultTypeInternal _EventSubscription_FiltersEntry_DoNotUse_default_instance_;
class EventSubscription_SubscriptionMetadataEntry_DoNotUse;
struct EventSubscription_SubscriptionMetadataEntry_DoNotUseDefaultTypeInternal;
extern EventSubscription_SubscriptionMetadataEntry_DoNotUseDefaultTypeInternal _EventSubscription_SubscriptionMetadataEntry_DoNotUse_default_instance_;
class Event_MetadataEntry_DoNotUse;
struct Event_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Event_MetadataEntry_DoNotUseDefaultTypeInternal _Event_MetadataEntry_DoNotUse_default_instance_;
class SubscriptionAck;
struct SubscriptionAckDefaultTypeInternal;
extern SubscriptionAckDefaultTypeInternal _SubscriptionAck_default_instance_;
}  // namespace event
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace event {
enum EventType : int {
  EVENT_TYPE_UNDEFINED = 0,
  EVENT_TYPE_ERROR = 1,
  EVENT_TYPE_ALERT = 2,
  EVENT_TYPE_USER_ACTION = 3,
  EVENT_TYPE_RESOURCE_THRESHOLD_REACHED = 4,
  EVENT_TYPE_SYSTEM_UPDATE = 5,
  EVENT_TYPE_MONITORING = 6,
  EVENT_TYPE_SELF_HEALING = 7,
  EVENT_TYPE_CUSTOM = 8,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
extern const uint32_t EventType_internal_data_[];
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(8);
constexpr int EventType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}
enum EscalationLevel : int {
  ESCALATION_LEVEL_NONE = 0,
  ESCALATION_LEVEL_LOW = 1,
  ESCALATION_LEVEL_MEDIUM = 2,
  ESCALATION_LEVEL_HIGH = 3,
  ESCALATION_LEVEL_CRITICAL = 4,
  EscalationLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EscalationLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EscalationLevel_IsValid(int value);
extern const uint32_t EscalationLevel_internal_data_[];
constexpr EscalationLevel EscalationLevel_MIN = static_cast<EscalationLevel>(0);
constexpr EscalationLevel EscalationLevel_MAX = static_cast<EscalationLevel>(4);
constexpr int EscalationLevel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
EscalationLevel_descriptor();
template <typename T>
const std::string& EscalationLevel_Name(T value) {
  static_assert(std::is_same<T, EscalationLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EscalationLevel_Name().");
  return EscalationLevel_Name(static_cast<EscalationLevel>(value));
}
template <>
inline const std::string& EscalationLevel_Name(EscalationLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EscalationLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool EscalationLevel_Parse(absl::string_view name, EscalationLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EscalationLevel>(
      EscalationLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SubscriptionAck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.SubscriptionAck) */ {
 public:
  inline SubscriptionAck() : SubscriptionAck(nullptr) {}
  ~SubscriptionAck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscriptionAck* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscriptionAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionAck(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionAck(const SubscriptionAck& from) : SubscriptionAck(nullptr, from) {}
  inline SubscriptionAck(SubscriptionAck&& from) noexcept
      : SubscriptionAck(nullptr, std::move(from)) {}
  inline SubscriptionAck& operator=(const SubscriptionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionAck& operator=(SubscriptionAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionAck* internal_default_instance() {
    return reinterpret_cast<const SubscriptionAck*>(
        &_SubscriptionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SubscriptionAck& a, SubscriptionAck& b) { a.Swap(&b); }
  inline void Swap(SubscriptionAck* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionAck* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscriptionAck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionAck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscriptionAck& from) { SubscriptionAck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscriptionAck* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.SubscriptionAck"; }

 protected:
  explicit SubscriptionAck(::google::protobuf::Arena* arena);
  SubscriptionAck(::google::protobuf::Arena* arena, const SubscriptionAck& from);
  SubscriptionAck(::google::protobuf::Arena* arena, SubscriptionAck&& from) noexcept
      : SubscriptionAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscriptionIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string subscription_id = 1;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.SubscriptionAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscriptionAck& from_msg);
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventSubscription_SubscriptionMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EventSubscription_SubscriptionMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventSubscription_SubscriptionMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EventSubscription_SubscriptionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EventSubscription_SubscriptionMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EventSubscription_SubscriptionMetadataEntry_DoNotUse*>(
        &_EventSubscription_SubscriptionMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class EventSubscription_FiltersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EventSubscription_FiltersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventSubscription_FiltersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EventSubscription_FiltersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EventSubscription_FiltersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EventSubscription_FiltersEntry_DoNotUse*>(
        &_EventSubscription_FiltersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class EventResponse_ResponseMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EventResponse_ResponseMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventResponse_ResponseMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EventResponse_ResponseMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EventResponse_ResponseMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EventResponse_ResponseMetadataEntry_DoNotUse*>(
        &_EventResponse_ResponseMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class EventLogRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EventLogRequest) */ {
 public:
  inline EventLogRequest() : EventLogRequest(nullptr) {}
  ~EventLogRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventLogRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventLogRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventLogRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventLogRequest(const EventLogRequest& from) : EventLogRequest(nullptr, from) {}
  inline EventLogRequest(EventLogRequest&& from) noexcept
      : EventLogRequest(nullptr, std::move(from)) {}
  inline EventLogRequest& operator=(const EventLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLogRequest& operator=(EventLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventLogRequest* internal_default_instance() {
    return reinterpret_cast<const EventLogRequest*>(
        &_EventLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(EventLogRequest& a, EventLogRequest& b) { a.Swap(&b); }
  inline void Swap(EventLogRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventLogRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventLogRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventLogRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventLogRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventLogRequest& from) { EventLogRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventLogRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EventLogRequest"; }

 protected:
  explicit EventLogRequest(::google::protobuf::Arena* arena);
  EventLogRequest(::google::protobuf::Arena* arena, const EventLogRequest& from);
  EventLogRequest(::google::protobuf::Arena* arena, EventLogRequest&& from) noexcept
      : EventLogRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFiltersFieldNumber = 4,
    kEventIdFieldNumber = 1,
    kTimeRangeStartFieldNumber = 2,
    kTimeRangeEndFieldNumber = 3,
  };
  // repeated string filters = 4;
  int filters_size() const;
  private:
  int _internal_filters_size() const;

  public:
  void clear_filters() ;
  const std::string& filters(int index) const;
  std::string* mutable_filters(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filters(int index, Arg_&& value, Args_... args);
  std::string* add_filters();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_filters(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& filters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filters();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filters();

  public:
  // string event_id = 1;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string time_range_start = 2;
  void clear_time_range_start() ;
  const std::string& time_range_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_range_start(Arg_&& arg, Args_... args);
  std::string* mutable_time_range_start();
  PROTOBUF_NODISCARD std::string* release_time_range_start();
  void set_allocated_time_range_start(std::string* value);

  private:
  const std::string& _internal_time_range_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_range_start(
      const std::string& value);
  std::string* _internal_mutable_time_range_start();

  public:
  // string time_range_end = 3;
  void clear_time_range_end() ;
  const std::string& time_range_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_range_end(Arg_&& arg, Args_... args);
  std::string* mutable_time_range_end();
  PROTOBUF_NODISCARD std::string* release_time_range_end();
  void set_allocated_time_range_end(std::string* value);

  private:
  const std::string& _internal_time_range_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_range_end(
      const std::string& value);
  std::string* _internal_mutable_time_range_end();

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EventLogRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventLogRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filters_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr time_range_start_;
    ::google::protobuf::internal::ArenaStringPtr time_range_end_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventLog_LogMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EventLog_LogMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventLog_LogMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EventLog_LogMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EventLog_LogMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EventLog_LogMetadataEntry_DoNotUse*>(
        &_EventLog_LogMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Event_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Event_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Event_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Event_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Event_MetadataEntry_DoNotUse*>(
        &_Event_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class EscalationConfig_ConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  EscalationConfig_ConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EscalationConfig_ConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EscalationConfig_ConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EscalationConfig_ConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EscalationConfig_ConditionsEntry_DoNotUse*>(
        &_EscalationConfig_ConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_event_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AcknowledgeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.AcknowledgeResponse) */ {
 public:
  inline AcknowledgeResponse() : AcknowledgeResponse(nullptr) {}
  ~AcknowledgeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AcknowledgeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AcknowledgeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AcknowledgeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AcknowledgeResponse(const AcknowledgeResponse& from) : AcknowledgeResponse(nullptr, from) {}
  inline AcknowledgeResponse(AcknowledgeResponse&& from) noexcept
      : AcknowledgeResponse(nullptr, std::move(from)) {}
  inline AcknowledgeResponse& operator=(const AcknowledgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcknowledgeResponse& operator=(AcknowledgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcknowledgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcknowledgeResponse* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeResponse*>(
        &_AcknowledgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(AcknowledgeResponse& a, AcknowledgeResponse& b) { a.Swap(&b); }
  inline void Swap(AcknowledgeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcknowledgeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcknowledgeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AcknowledgeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AcknowledgeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AcknowledgeResponse& from) { AcknowledgeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AcknowledgeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.AcknowledgeResponse"; }

 protected:
  explicit AcknowledgeResponse(::google::protobuf::Arena* arena);
  AcknowledgeResponse(::google::protobuf::Arena* arena, const AcknowledgeResponse& from);
  AcknowledgeResponse(::google::protobuf::Arena* arena, AcknowledgeResponse&& from) noexcept
      : AcknowledgeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.AcknowledgeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AcknowledgeResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class AcknowledgeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.AcknowledgeRequest) */ {
 public:
  inline AcknowledgeRequest() : AcknowledgeRequest(nullptr) {}
  ~AcknowledgeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AcknowledgeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AcknowledgeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AcknowledgeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AcknowledgeRequest(const AcknowledgeRequest& from) : AcknowledgeRequest(nullptr, from) {}
  inline AcknowledgeRequest(AcknowledgeRequest&& from) noexcept
      : AcknowledgeRequest(nullptr, std::move(from)) {}
  inline AcknowledgeRequest& operator=(const AcknowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcknowledgeRequest& operator=(AcknowledgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcknowledgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcknowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeRequest*>(
        &_AcknowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(AcknowledgeRequest& a, AcknowledgeRequest& b) { a.Swap(&b); }
  inline void Swap(AcknowledgeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcknowledgeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcknowledgeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AcknowledgeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AcknowledgeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AcknowledgeRequest& from) { AcknowledgeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AcknowledgeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.AcknowledgeRequest"; }

 protected:
  explicit AcknowledgeRequest(::google::protobuf::Arena* arena);
  AcknowledgeRequest(::google::protobuf::Arena* arena, const AcknowledgeRequest& from);
  AcknowledgeRequest(::google::protobuf::Arena* arena, AcknowledgeRequest&& from) noexcept
      : AcknowledgeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventIdFieldNumber = 1,
    kSubscriberIdFieldNumber = 2,
    kAcknowledgmentTimestampFieldNumber = 3,
  };
  // string event_id = 1;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string subscriber_id = 2;
  void clear_subscriber_id() ;
  const std::string& subscriber_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_id();
  PROTOBUF_NODISCARD std::string* release_subscriber_id();
  void set_allocated_subscriber_id(std::string* value);

  private:
  const std::string& _internal_subscriber_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_id(
      const std::string& value);
  std::string* _internal_mutable_subscriber_id();

  public:
  // string acknowledgment_timestamp = 3;
  void clear_acknowledgment_timestamp() ;
  const std::string& acknowledgment_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acknowledgment_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_acknowledgment_timestamp();
  PROTOBUF_NODISCARD std::string* release_acknowledgment_timestamp();
  void set_allocated_acknowledgment_timestamp(std::string* value);

  private:
  const std::string& _internal_acknowledgment_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acknowledgment_timestamp(
      const std::string& value);
  std::string* _internal_mutable_acknowledgment_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.AcknowledgeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AcknowledgeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_id_;
    ::google::protobuf::internal::ArenaStringPtr acknowledgment_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EventSubscription) */ {
 public:
  inline EventSubscription() : EventSubscription(nullptr) {}
  ~EventSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventSubscription(const EventSubscription& from) : EventSubscription(nullptr, from) {}
  inline EventSubscription(EventSubscription&& from) noexcept
      : EventSubscription(nullptr, std::move(from)) {}
  inline EventSubscription& operator=(const EventSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSubscription& operator=(EventSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSubscription* internal_default_instance() {
    return reinterpret_cast<const EventSubscription*>(
        &_EventSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(EventSubscription& a, EventSubscription& b) { a.Swap(&b); }
  inline void Swap(EventSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventSubscription& from) { EventSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EventSubscription"; }

 protected:
  explicit EventSubscription(::google::protobuf::Arena* arena);
  EventSubscription(::google::protobuf::Arena* arena, const EventSubscription& from);
  EventSubscription(::google::protobuf::Arena* arena, EventSubscription&& from) noexcept
      : EventSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventTypesFieldNumber = 3,
    kFiltersFieldNumber = 4,
    kSubscriptionMetadataFieldNumber = 6,
    kSubscriptionIdFieldNumber = 1,
    kSubscriberIdFieldNumber = 2,
    kCallbackUrlFieldNumber = 5,
    kLastUpdatedFieldNumber = 7,
    kMinEscalationLevelFieldNumber = 8,
    kActiveFieldNumber = 9,
  };
  // repeated .seigr.event.EventType event_types = 3;
  int event_types_size() const;
  private:
  int _internal_event_types_size() const;

  public:
  void clear_event_types() ;
  public:
  ::seigr::event::EventType event_types(int index) const;
  void set_event_types(int index, ::seigr::event::EventType value);
  void add_event_types(::seigr::event::EventType value);
  const ::google::protobuf::RepeatedField<int>& event_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_event_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_event_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_event_types();

  public:
  // map<string, string> filters = 4;
  int filters_size() const;
  private:
  int _internal_filters_size() const;

  public:
  void clear_filters() ;
  const ::google::protobuf::Map<std::string, std::string>& filters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_filters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_filters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_filters();

  public:
  // map<string, string> subscription_metadata = 6;
  int subscription_metadata_size() const;
  private:
  int _internal_subscription_metadata_size() const;

  public:
  void clear_subscription_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& subscription_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_subscription_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_subscription_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_subscription_metadata();

  public:
  // string subscription_id = 1;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // string subscriber_id = 2;
  void clear_subscriber_id() ;
  const std::string& subscriber_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_id();
  PROTOBUF_NODISCARD std::string* release_subscriber_id();
  void set_allocated_subscriber_id(std::string* value);

  private:
  const std::string& _internal_subscriber_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_id(
      const std::string& value);
  std::string* _internal_mutable_subscriber_id();

  public:
  // string callback_url = 5;
  void clear_callback_url() ;
  const std::string& callback_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callback_url(Arg_&& arg, Args_... args);
  std::string* mutable_callback_url();
  PROTOBUF_NODISCARD std::string* release_callback_url();
  void set_allocated_callback_url(std::string* value);

  private:
  const std::string& _internal_callback_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback_url(
      const std::string& value);
  std::string* _internal_mutable_callback_url();

  public:
  // string last_updated = 7;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // .seigr.event.EscalationLevel min_escalation_level = 8;
  void clear_min_escalation_level() ;
  ::seigr::event::EscalationLevel min_escalation_level() const;
  void set_min_escalation_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_min_escalation_level() const;
  void _internal_set_min_escalation_level(::seigr::event::EscalationLevel value);

  public:
  // bool active = 9;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EventSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventSubscription& from_msg);
    ::google::protobuf::RepeatedField<int> event_types_;
    ::google::protobuf::internal::CachedSize _event_types_cached_byte_size_;
    ::google::protobuf::internal::MapField<EventSubscription_FiltersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        filters_;
    ::google::protobuf::internal::MapField<EventSubscription_SubscriptionMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        subscription_metadata_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_id_;
    ::google::protobuf::internal::ArenaStringPtr callback_url_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    int min_escalation_level_;
    bool active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EventResponse) */ {
 public:
  inline EventResponse() : EventResponse(nullptr) {}
  ~EventResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventResponse(const EventResponse& from) : EventResponse(nullptr, from) {}
  inline EventResponse(EventResponse&& from) noexcept
      : EventResponse(nullptr, std::move(from)) {}
  inline EventResponse& operator=(const EventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventResponse& operator=(EventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventResponse* internal_default_instance() {
    return reinterpret_cast<const EventResponse*>(
        &_EventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(EventResponse& a, EventResponse& b) { a.Swap(&b); }
  inline void Swap(EventResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventResponse& from) { EventResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EventResponse"; }

 protected:
  explicit EventResponse(::google::protobuf::Arena* arena);
  EventResponse(::google::protobuf::Arena* arena, const EventResponse& from);
  EventResponse(::google::protobuf::Arena* arena, EventResponse&& from) noexcept
      : EventResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseMetadataFieldNumber = 6,
    kResponseIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kResponderIdFieldNumber = 3,
    kActionTakenFieldNumber = 4,
    kResponseTimestampFieldNumber = 5,
    kFollowUpActionIdFieldNumber = 8,
    kRequiresFollowUpFieldNumber = 7,
    kResolvedFieldNumber = 10,
    kEscalationPathFieldNumber = 9,
  };
  // map<string, string> response_metadata = 6;
  int response_metadata_size() const;
  private:
  int _internal_response_metadata_size() const;

  public:
  void clear_response_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_response_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_response_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_response_metadata();

  public:
  // string response_id = 1;
  void clear_response_id() ;
  const std::string& response_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_id(Arg_&& arg, Args_... args);
  std::string* mutable_response_id();
  PROTOBUF_NODISCARD std::string* release_response_id();
  void set_allocated_response_id(std::string* value);

  private:
  const std::string& _internal_response_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_id(
      const std::string& value);
  std::string* _internal_mutable_response_id();

  public:
  // string event_id = 2;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string responder_id = 3;
  void clear_responder_id() ;
  const std::string& responder_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_responder_id(Arg_&& arg, Args_... args);
  std::string* mutable_responder_id();
  PROTOBUF_NODISCARD std::string* release_responder_id();
  void set_allocated_responder_id(std::string* value);

  private:
  const std::string& _internal_responder_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responder_id(
      const std::string& value);
  std::string* _internal_mutable_responder_id();

  public:
  // string action_taken = 4;
  void clear_action_taken() ;
  const std::string& action_taken() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_taken(Arg_&& arg, Args_... args);
  std::string* mutable_action_taken();
  PROTOBUF_NODISCARD std::string* release_action_taken();
  void set_allocated_action_taken(std::string* value);

  private:
  const std::string& _internal_action_taken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_taken(
      const std::string& value);
  std::string* _internal_mutable_action_taken();

  public:
  // string response_timestamp = 5;
  void clear_response_timestamp() ;
  const std::string& response_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_response_timestamp();
  PROTOBUF_NODISCARD std::string* release_response_timestamp();
  void set_allocated_response_timestamp(std::string* value);

  private:
  const std::string& _internal_response_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_timestamp(
      const std::string& value);
  std::string* _internal_mutable_response_timestamp();

  public:
  // string follow_up_action_id = 8;
  void clear_follow_up_action_id() ;
  const std::string& follow_up_action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_follow_up_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_follow_up_action_id();
  PROTOBUF_NODISCARD std::string* release_follow_up_action_id();
  void set_allocated_follow_up_action_id(std::string* value);

  private:
  const std::string& _internal_follow_up_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follow_up_action_id(
      const std::string& value);
  std::string* _internal_mutable_follow_up_action_id();

  public:
  // bool requires_follow_up = 7;
  void clear_requires_follow_up() ;
  bool requires_follow_up() const;
  void set_requires_follow_up(bool value);

  private:
  bool _internal_requires_follow_up() const;
  void _internal_set_requires_follow_up(bool value);

  public:
  // bool resolved = 10;
  void clear_resolved() ;
  bool resolved() const;
  void set_resolved(bool value);

  private:
  bool _internal_resolved() const;
  void _internal_set_resolved(bool value);

  public:
  // .seigr.event.EscalationLevel escalation_path = 9;
  void clear_escalation_path() ;
  ::seigr::event::EscalationLevel escalation_path() const;
  void set_escalation_path(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_escalation_path() const;
  void _internal_set_escalation_path(::seigr::event::EscalationLevel value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EventResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      139, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventResponse& from_msg);
    ::google::protobuf::internal::MapField<EventResponse_ResponseMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        response_metadata_;
    ::google::protobuf::internal::ArenaStringPtr response_id_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr responder_id_;
    ::google::protobuf::internal::ArenaStringPtr action_taken_;
    ::google::protobuf::internal::ArenaStringPtr response_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr follow_up_action_id_;
    bool requires_follow_up_;
    bool resolved_;
    int escalation_path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EventLog) */ {
 public:
  inline EventLog() : EventLog(nullptr) {}
  ~EventLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventLog(const EventLog& from) : EventLog(nullptr, from) {}
  inline EventLog(EventLog&& from) noexcept
      : EventLog(nullptr, std::move(from)) {}
  inline EventLog& operator=(const EventLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLog& operator=(EventLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventLog* internal_default_instance() {
    return reinterpret_cast<const EventLog*>(
        &_EventLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(EventLog& a, EventLog& b) { a.Swap(&b); }
  inline void Swap(EventLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventLog& from) { EventLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EventLog"; }

 protected:
  explicit EventLog(::google::protobuf::Arena* arena);
  EventLog(::google::protobuf::Arena* arena, const EventLog& from);
  EventLog(::google::protobuf::Arena* arena, EventLog&& from) noexcept
      : EventLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogMetadataFieldNumber = 6,
    kLogIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kLoggedAtFieldNumber = 3,
    kLoggerIdFieldNumber = 4,
    kLogMessageFieldNumber = 5,
    kLoggedEscalationLevelFieldNumber = 7,
    kIsResolvedFieldNumber = 8,
  };
  // map<string, string> log_metadata = 6;
  int log_metadata_size() const;
  private:
  int _internal_log_metadata_size() const;

  public:
  void clear_log_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& log_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_log_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_log_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_log_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string event_id = 2;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string logged_at = 3;
  void clear_logged_at() ;
  const std::string& logged_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logged_at(Arg_&& arg, Args_... args);
  std::string* mutable_logged_at();
  PROTOBUF_NODISCARD std::string* release_logged_at();
  void set_allocated_logged_at(std::string* value);

  private:
  const std::string& _internal_logged_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logged_at(
      const std::string& value);
  std::string* _internal_mutable_logged_at();

  public:
  // string logger_id = 4;
  void clear_logger_id() ;
  const std::string& logger_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logger_id(Arg_&& arg, Args_... args);
  std::string* mutable_logger_id();
  PROTOBUF_NODISCARD std::string* release_logger_id();
  void set_allocated_logger_id(std::string* value);

  private:
  const std::string& _internal_logger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logger_id(
      const std::string& value);
  std::string* _internal_mutable_logger_id();

  public:
  // string log_message = 5;
  void clear_log_message() ;
  const std::string& log_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_message(Arg_&& arg, Args_... args);
  std::string* mutable_log_message();
  PROTOBUF_NODISCARD std::string* release_log_message();
  void set_allocated_log_message(std::string* value);

  private:
  const std::string& _internal_log_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_message(
      const std::string& value);
  std::string* _internal_mutable_log_message();

  public:
  // .seigr.event.EscalationLevel logged_escalation_level = 7;
  void clear_logged_escalation_level() ;
  ::seigr::event::EscalationLevel logged_escalation_level() const;
  void set_logged_escalation_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_logged_escalation_level() const;
  void _internal_set_logged_escalation_level(::seigr::event::EscalationLevel value);

  public:
  // bool is_resolved = 8;
  void clear_is_resolved() ;
  bool is_resolved() const;
  void set_is_resolved(bool value);

  private:
  bool _internal_is_resolved() const;
  void _internal_set_is_resolved(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EventLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      92, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventLog& from_msg);
    ::google::protobuf::internal::MapField<EventLog_LogMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        log_metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr logged_at_;
    ::google::protobuf::internal::ArenaStringPtr logger_id_;
    ::google::protobuf::internal::ArenaStringPtr log_message_;
    int logged_escalation_level_;
    bool is_resolved_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Event* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Event));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Event* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kTargetSubscribersFieldNumber = 9,
    kEventIdFieldNumber = 1,
    kOriginFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kTypeFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kEscalationLevelFieldNumber = 4,
    kRequiresAcknowledgmentFieldNumber = 10,
    kAllowForwardingFieldNumber = 11,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string target_subscribers = 9;
  int target_subscribers_size() const;
  private:
  int _internal_target_subscribers_size() const;

  public:
  void clear_target_subscribers() ;
  const std::string& target_subscribers(int index) const;
  std::string* mutable_target_subscribers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_subscribers(int index, Arg_&& value, Args_... args);
  std::string* add_target_subscribers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_target_subscribers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& target_subscribers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_target_subscribers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_target_subscribers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_target_subscribers();

  public:
  // string event_id = 1;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string origin = 5;
  void clear_origin() ;
  const std::string& origin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin(Arg_&& arg, Args_... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* value);

  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(
      const std::string& value);
  std::string* _internal_mutable_origin();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string description = 7;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .seigr.event.EventType type = 2;
  void clear_type() ;
  ::seigr::event::EventType type() const;
  void set_type(::seigr::event::EventType value);

  private:
  ::seigr::event::EventType _internal_type() const;
  void _internal_set_type(::seigr::event::EventType value);

  public:
  // .seigr.common.PriorityLevel priority = 3;
  void clear_priority() ;
  ::seigr::common::PriorityLevel priority() const;
  void set_priority(::seigr::common::PriorityLevel value);

  private:
  ::seigr::common::PriorityLevel _internal_priority() const;
  void _internal_set_priority(::seigr::common::PriorityLevel value);

  public:
  // .seigr.event.EscalationLevel escalation_level = 4;
  void clear_escalation_level() ;
  ::seigr::event::EscalationLevel escalation_level() const;
  void set_escalation_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_escalation_level() const;
  void _internal_set_escalation_level(::seigr::event::EscalationLevel value);

  public:
  // bool requires_acknowledgment = 10;
  void clear_requires_acknowledgment() ;
  bool requires_acknowledgment() const;
  void set_requires_acknowledgment(bool value);

  private:
  bool _internal_requires_acknowledgment() const;
  void _internal_set_requires_acknowledgment(bool value);

  public:
  // bool allow_forwarding = 11;
  void clear_allow_forwarding() ;
  bool allow_forwarding() const;
  void set_allow_forwarding(bool value);

  private:
  bool _internal_allow_forwarding() const;
  void _internal_set_allow_forwarding(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::internal::MapField<Event_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> target_subscribers_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr origin_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    int type_;
    int priority_;
    int escalation_level_;
    bool requires_acknowledgment_;
    bool allow_forwarding_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EscalationConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EscalationConfig) */ {
 public:
  inline EscalationConfig() : EscalationConfig(nullptr) {}
  ~EscalationConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EscalationConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EscalationConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EscalationConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline EscalationConfig(const EscalationConfig& from) : EscalationConfig(nullptr, from) {}
  inline EscalationConfig(EscalationConfig&& from) noexcept
      : EscalationConfig(nullptr, std::move(from)) {}
  inline EscalationConfig& operator=(const EscalationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscalationConfig& operator=(EscalationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EscalationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EscalationConfig* internal_default_instance() {
    return reinterpret_cast<const EscalationConfig*>(
        &_EscalationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(EscalationConfig& a, EscalationConfig& b) { a.Swap(&b); }
  inline void Swap(EscalationConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EscalationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EscalationConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EscalationConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EscalationConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EscalationConfig& from) { EscalationConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EscalationConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EscalationConfig"; }

 protected:
  explicit EscalationConfig(::google::protobuf::Arena* arena);
  EscalationConfig(::google::protobuf::Arena* arena, const EscalationConfig& from);
  EscalationConfig(::google::protobuf::Arena* arena, EscalationConfig&& from) noexcept
      : EscalationConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConditionsFieldNumber = 3,
    kAlertRecipientsFieldNumber = 4,
    kEscalationPathIdFieldNumber = 2,
    kEscalationStrategyFieldNumber = 5,
    kLevelFieldNumber = 1,
    kEnableAutomaticResponsesFieldNumber = 6,
  };
  // map<string, string> conditions = 3;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;

  public:
  void clear_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_conditions();

  public:
  // repeated string alert_recipients = 4;
  int alert_recipients_size() const;
  private:
  int _internal_alert_recipients_size() const;

  public:
  void clear_alert_recipients() ;
  const std::string& alert_recipients(int index) const;
  std::string* mutable_alert_recipients(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_recipients(int index, Arg_&& value, Args_... args);
  std::string* add_alert_recipients();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_alert_recipients(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& alert_recipients() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_alert_recipients();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_alert_recipients() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_alert_recipients();

  public:
  // string escalation_path_id = 2;
  void clear_escalation_path_id() ;
  const std::string& escalation_path_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_path_id(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_path_id();
  PROTOBUF_NODISCARD std::string* release_escalation_path_id();
  void set_allocated_escalation_path_id(std::string* value);

  private:
  const std::string& _internal_escalation_path_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_path_id(
      const std::string& value);
  std::string* _internal_mutable_escalation_path_id();

  public:
  // string escalation_strategy = 5;
  void clear_escalation_strategy() ;
  const std::string& escalation_strategy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_strategy(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_strategy();
  PROTOBUF_NODISCARD std::string* release_escalation_strategy();
  void set_allocated_escalation_strategy(std::string* value);

  private:
  const std::string& _internal_escalation_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_strategy(
      const std::string& value);
  std::string* _internal_mutable_escalation_strategy();

  public:
  // .seigr.event.EscalationLevel level = 1;
  void clear_level() ;
  ::seigr::event::EscalationLevel level() const;
  void set_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_level() const;
  void _internal_set_level(::seigr::event::EscalationLevel value);

  public:
  // bool enable_automatic_responses = 6;
  void clear_enable_automatic_responses() ;
  bool enable_automatic_responses() const;
  void set_enable_automatic_responses(bool value);

  private:
  bool _internal_enable_automatic_responses() const;
  void _internal_set_enable_automatic_responses(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EscalationConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      100, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EscalationConfig& from_msg);
    ::google::protobuf::internal::MapField<EscalationConfig_ConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        conditions_;
    ::google::protobuf::RepeatedPtrField<std::string> alert_recipients_;
    ::google::protobuf::internal::ArenaStringPtr escalation_path_id_;
    ::google::protobuf::internal::ArenaStringPtr escalation_strategy_;
    int level_;
    bool enable_automatic_responses_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class EventLogResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.event.EventLogResponse) */ {
 public:
  inline EventLogResponse() : EventLogResponse(nullptr) {}
  ~EventLogResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventLogResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventLogResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventLogResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventLogResponse(const EventLogResponse& from) : EventLogResponse(nullptr, from) {}
  inline EventLogResponse(EventLogResponse&& from) noexcept
      : EventLogResponse(nullptr, std::move(from)) {}
  inline EventLogResponse& operator=(const EventLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLogResponse& operator=(EventLogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventLogResponse* internal_default_instance() {
    return reinterpret_cast<const EventLogResponse*>(
        &_EventLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(EventLogResponse& a, EventLogResponse& b) { a.Swap(&b); }
  inline void Swap(EventLogResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventLogResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventLogResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventLogResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventLogResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventLogResponse& from) { EventLogResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventLogResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.event.EventLogResponse"; }

 protected:
  explicit EventLogResponse(::google::protobuf::Arena* arena);
  EventLogResponse(::google::protobuf::Arena* arena, const EventLogResponse& from);
  EventLogResponse(::google::protobuf::Arena* arena, EventLogResponse&& from) noexcept
      : EventLogResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogsFieldNumber = 1,
    kStatusFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // repeated .seigr.event.EventLog logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;

  public:
  void clear_logs() ;
  ::seigr::event::EventLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>* mutable_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>& _internal_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>* _internal_mutable_logs();
  public:
  const ::seigr::event::EventLog& logs(int index) const;
  ::seigr::event::EventLog* add_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>& logs() const;
  // string status = 2;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:seigr.event.EventLogResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventLogResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::event::EventLog > logs_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event

// string event_id = 1;
inline void Event::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& Event::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.Event.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.Event.event_id)
}
inline std::string* Event::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.Event.event_id)
  return _s;
}
inline const std::string& Event::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void Event::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* Event::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.Event.event_id)
  return _impl_.event_id_.Release();
}
inline void Event::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.Event.event_id)
}

// .seigr.event.EventType type = 2;
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::event::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:seigr.event.Event.type)
  return _internal_type();
}
inline void Event::set_type(::seigr::event::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.event.Event.type)
}
inline ::seigr::event::EventType Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EventType>(_impl_.type_);
}
inline void Event::_internal_set_type(::seigr::event::EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .seigr.common.PriorityLevel priority = 3;
inline void Event::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = 0;
}
inline ::seigr::common::PriorityLevel Event::priority() const {
  // @@protoc_insertion_point(field_get:seigr.event.Event.priority)
  return _internal_priority();
}
inline void Event::set_priority(::seigr::common::PriorityLevel value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:seigr.event.Event.priority)
}
inline ::seigr::common::PriorityLevel Event::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::PriorityLevel>(_impl_.priority_);
}
inline void Event::_internal_set_priority(::seigr::common::PriorityLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// .seigr.event.EscalationLevel escalation_level = 4;
inline void Event::clear_escalation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = 0;
}
inline ::seigr::event::EscalationLevel Event::escalation_level() const {
  // @@protoc_insertion_point(field_get:seigr.event.Event.escalation_level)
  return _internal_escalation_level();
}
inline void Event::set_escalation_level(::seigr::event::EscalationLevel value) {
  _internal_set_escalation_level(value);
  // @@protoc_insertion_point(field_set:seigr.event.Event.escalation_level)
}
inline ::seigr::event::EscalationLevel Event::_internal_escalation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.escalation_level_);
}
inline void Event::_internal_set_escalation_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = value;
}

// string origin = 5;
inline void Event::clear_origin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_.ClearToEmpty();
}
inline const std::string& Event::origin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.Event.origin)
  return _internal_origin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_origin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.Event.origin)
}
inline std::string* Event::mutable_origin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:seigr.event.Event.origin)
  return _s;
}
inline const std::string& Event::_internal_origin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_.Get();
}
inline void Event::_internal_set_origin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_origin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.origin_.Mutable( GetArena());
}
inline std::string* Event::release_origin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.Event.origin)
  return _impl_.origin_.Release();
}
inline void Event::set_allocated_origin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.origin_.IsDefault()) {
    _impl_.origin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.Event.origin)
}

// string timestamp = 6;
inline void Event::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Event::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.Event.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.Event.timestamp)
}
inline std::string* Event::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.event.Event.timestamp)
  return _s;
}
inline const std::string& Event::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Event::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Event::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.Event.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Event::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.Event.timestamp)
}

// string description = 7;
inline void Event::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Event::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.Event.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.Event.description)
}
inline std::string* Event::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.event.Event.description)
  return _s;
}
inline const std::string& Event::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Event::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Event::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.Event.description)
  return _impl_.description_.Release();
}
inline void Event::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.Event.description)
}

// map<string, string> metadata = 8;
inline int Event::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Event::metadata_size() const {
  return _internal_metadata_size();
}
inline void Event::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Event::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Event::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.Event.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Event::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Event::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.Event.metadata)
  return _internal_mutable_metadata();
}

// repeated string target_subscribers = 9;
inline int Event::_internal_target_subscribers_size() const {
  return _internal_target_subscribers().size();
}
inline int Event::target_subscribers_size() const {
  return _internal_target_subscribers_size();
}
inline void Event::clear_target_subscribers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_subscribers_.Clear();
}
inline std::string* Event::add_target_subscribers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_target_subscribers()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.event.Event.target_subscribers)
  return _s;
}
inline const std::string& Event::target_subscribers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.Event.target_subscribers)
  return _internal_target_subscribers().Get(index);
}
inline std::string* Event::mutable_target_subscribers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.event.Event.target_subscribers)
  return _internal_mutable_target_subscribers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Event::set_target_subscribers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_target_subscribers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.event.Event.target_subscribers)
}
template <typename Arg_, typename... Args_>
inline void Event::add_target_subscribers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_target_subscribers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.event.Event.target_subscribers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Event::target_subscribers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.event.Event.target_subscribers)
  return _internal_target_subscribers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Event::mutable_target_subscribers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.event.Event.target_subscribers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_target_subscribers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Event::_internal_target_subscribers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_subscribers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Event::_internal_mutable_target_subscribers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.target_subscribers_;
}

// bool requires_acknowledgment = 10;
inline void Event::clear_requires_acknowledgment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = false;
}
inline bool Event::requires_acknowledgment() const {
  // @@protoc_insertion_point(field_get:seigr.event.Event.requires_acknowledgment)
  return _internal_requires_acknowledgment();
}
inline void Event::set_requires_acknowledgment(bool value) {
  _internal_set_requires_acknowledgment(value);
  // @@protoc_insertion_point(field_set:seigr.event.Event.requires_acknowledgment)
}
inline bool Event::_internal_requires_acknowledgment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_acknowledgment_;
}
inline void Event::_internal_set_requires_acknowledgment(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = value;
}

// bool allow_forwarding = 11;
inline void Event::clear_allow_forwarding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_forwarding_ = false;
}
inline bool Event::allow_forwarding() const {
  // @@protoc_insertion_point(field_get:seigr.event.Event.allow_forwarding)
  return _internal_allow_forwarding();
}
inline void Event::set_allow_forwarding(bool value) {
  _internal_set_allow_forwarding(value);
  // @@protoc_insertion_point(field_set:seigr.event.Event.allow_forwarding)
}
inline bool Event::_internal_allow_forwarding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_forwarding_;
}
inline void Event::_internal_set_allow_forwarding(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_forwarding_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EventSubscription

// string subscription_id = 1;
inline void EventSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& EventSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.subscription_id)
}
inline std::string* EventSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventSubscription.subscription_id)
  return _s;
}
inline const std::string& EventSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void EventSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* EventSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* EventSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void EventSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventSubscription.subscription_id)
}

// string subscriber_id = 2;
inline void EventSubscription::clear_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.ClearToEmpty();
}
inline const std::string& EventSubscription::subscriber_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.subscriber_id)
  return _internal_subscriber_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSubscription::set_subscriber_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.subscriber_id)
}
inline std::string* EventSubscription::mutable_subscriber_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventSubscription.subscriber_id)
  return _s;
}
inline const std::string& EventSubscription::_internal_subscriber_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_id_.Get();
}
inline void EventSubscription::_internal_set_subscriber_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.Set(value, GetArena());
}
inline std::string* EventSubscription::_internal_mutable_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_id_.Mutable( GetArena());
}
inline std::string* EventSubscription::release_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventSubscription.subscriber_id)
  return _impl_.subscriber_id_.Release();
}
inline void EventSubscription::set_allocated_subscriber_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_id_.IsDefault()) {
    _impl_.subscriber_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventSubscription.subscriber_id)
}

// repeated .seigr.event.EventType event_types = 3;
inline int EventSubscription::_internal_event_types_size() const {
  return _internal_event_types().size();
}
inline int EventSubscription::event_types_size() const {
  return _internal_event_types_size();
}
inline void EventSubscription::clear_event_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_types_.Clear();
}
inline ::seigr::event::EventType EventSubscription::event_types(int index) const {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.event_types)
  return static_cast<::seigr::event::EventType>(_internal_event_types().Get(index));
}
inline void EventSubscription::set_event_types(int index, ::seigr::event::EventType value) {
  _internal_mutable_event_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.event_types)
}
inline void EventSubscription::add_event_types(::seigr::event::EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_event_types()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.event.EventSubscription.event_types)
}
inline const ::google::protobuf::RepeatedField<int>& EventSubscription::event_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.event.EventSubscription.event_types)
  return _internal_event_types();
}
inline ::google::protobuf::RepeatedField<int>* EventSubscription::mutable_event_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.event.EventSubscription.event_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_event_types();
}
inline const ::google::protobuf::RepeatedField<int>& EventSubscription::_internal_event_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_types_;
}
inline ::google::protobuf::RepeatedField<int>* EventSubscription::_internal_mutable_event_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.event_types_;
}

// map<string, string> filters = 4;
inline int EventSubscription::_internal_filters_size() const {
  return _internal_filters().size();
}
inline int EventSubscription::filters_size() const {
  return _internal_filters_size();
}
inline void EventSubscription::clear_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventSubscription::_internal_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventSubscription::filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.EventSubscription.filters)
  return _internal_filters();
}
inline ::google::protobuf::Map<std::string, std::string>* EventSubscription::_internal_mutable_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EventSubscription::mutable_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.EventSubscription.filters)
  return _internal_mutable_filters();
}

// string callback_url = 5;
inline void EventSubscription::clear_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.ClearToEmpty();
}
inline const std::string& EventSubscription::callback_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.callback_url)
  return _internal_callback_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSubscription::set_callback_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.callback_url)
}
inline std::string* EventSubscription::mutable_callback_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callback_url();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventSubscription.callback_url)
  return _s;
}
inline const std::string& EventSubscription::_internal_callback_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callback_url_.Get();
}
inline void EventSubscription::_internal_set_callback_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.Set(value, GetArena());
}
inline std::string* EventSubscription::_internal_mutable_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.callback_url_.Mutable( GetArena());
}
inline std::string* EventSubscription::release_callback_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventSubscription.callback_url)
  return _impl_.callback_url_.Release();
}
inline void EventSubscription::set_allocated_callback_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.callback_url_.IsDefault()) {
    _impl_.callback_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventSubscription.callback_url)
}

// map<string, string> subscription_metadata = 6;
inline int EventSubscription::_internal_subscription_metadata_size() const {
  return _internal_subscription_metadata().size();
}
inline int EventSubscription::subscription_metadata_size() const {
  return _internal_subscription_metadata_size();
}
inline void EventSubscription::clear_subscription_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventSubscription::_internal_subscription_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventSubscription::subscription_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.EventSubscription.subscription_metadata)
  return _internal_subscription_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* EventSubscription::_internal_mutable_subscription_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EventSubscription::mutable_subscription_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.EventSubscription.subscription_metadata)
  return _internal_mutable_subscription_metadata();
}

// string last_updated = 7;
inline void EventSubscription::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& EventSubscription::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSubscription::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.last_updated)
}
inline std::string* EventSubscription::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventSubscription.last_updated)
  return _s;
}
inline const std::string& EventSubscription::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void EventSubscription::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* EventSubscription::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* EventSubscription::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventSubscription.last_updated)
  return _impl_.last_updated_.Release();
}
inline void EventSubscription::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventSubscription.last_updated)
}

// .seigr.event.EscalationLevel min_escalation_level = 8;
inline void EventSubscription::clear_min_escalation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_escalation_level_ = 0;
}
inline ::seigr::event::EscalationLevel EventSubscription::min_escalation_level() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.min_escalation_level)
  return _internal_min_escalation_level();
}
inline void EventSubscription::set_min_escalation_level(::seigr::event::EscalationLevel value) {
  _internal_set_min_escalation_level(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.min_escalation_level)
}
inline ::seigr::event::EscalationLevel EventSubscription::_internal_min_escalation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.min_escalation_level_);
}
inline void EventSubscription::_internal_set_min_escalation_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_escalation_level_ = value;
}

// bool active = 9;
inline void EventSubscription::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool EventSubscription::active() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventSubscription.active)
  return _internal_active();
}
inline void EventSubscription::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventSubscription.active)
}
inline bool EventSubscription::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void EventSubscription::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EventResponse

// string response_id = 1;
inline void EventResponse::clear_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.ClearToEmpty();
}
inline const std::string& EventResponse::response_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.response_id)
  return _internal_response_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_response_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.response_id)
}
inline std::string* EventResponse::mutable_response_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.response_id)
  return _s;
}
inline const std::string& EventResponse::_internal_response_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_id_.Get();
}
inline void EventResponse::_internal_set_response_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_id_.Mutable( GetArena());
}
inline std::string* EventResponse::release_response_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.response_id)
  return _impl_.response_id_.Release();
}
inline void EventResponse::set_allocated_response_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.response_id_.IsDefault()) {
    _impl_.response_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.response_id)
}

// string event_id = 2;
inline void EventResponse::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& EventResponse::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.event_id)
}
inline std::string* EventResponse::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.event_id)
  return _s;
}
inline const std::string& EventResponse::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void EventResponse::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* EventResponse::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.event_id)
  return _impl_.event_id_.Release();
}
inline void EventResponse::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.event_id)
}

// string responder_id = 3;
inline void EventResponse::clear_responder_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responder_id_.ClearToEmpty();
}
inline const std::string& EventResponse::responder_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.responder_id)
  return _internal_responder_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_responder_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responder_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.responder_id)
}
inline std::string* EventResponse::mutable_responder_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_responder_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.responder_id)
  return _s;
}
inline const std::string& EventResponse::_internal_responder_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.responder_id_.Get();
}
inline void EventResponse::_internal_set_responder_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responder_id_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_responder_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.responder_id_.Mutable( GetArena());
}
inline std::string* EventResponse::release_responder_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.responder_id)
  return _impl_.responder_id_.Release();
}
inline void EventResponse::set_allocated_responder_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responder_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.responder_id_.IsDefault()) {
    _impl_.responder_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.responder_id)
}

// string action_taken = 4;
inline void EventResponse::clear_action_taken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_taken_.ClearToEmpty();
}
inline const std::string& EventResponse::action_taken() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.action_taken)
  return _internal_action_taken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_action_taken(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_taken_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.action_taken)
}
inline std::string* EventResponse::mutable_action_taken() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_taken();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.action_taken)
  return _s;
}
inline const std::string& EventResponse::_internal_action_taken() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_taken_.Get();
}
inline void EventResponse::_internal_set_action_taken(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_taken_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_action_taken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_taken_.Mutable( GetArena());
}
inline std::string* EventResponse::release_action_taken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.action_taken)
  return _impl_.action_taken_.Release();
}
inline void EventResponse::set_allocated_action_taken(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_taken_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_taken_.IsDefault()) {
    _impl_.action_taken_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.action_taken)
}

// string response_timestamp = 5;
inline void EventResponse::clear_response_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_.ClearToEmpty();
}
inline const std::string& EventResponse::response_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.response_timestamp)
  return _internal_response_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_response_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.response_timestamp)
}
inline std::string* EventResponse::mutable_response_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.response_timestamp)
  return _s;
}
inline const std::string& EventResponse::_internal_response_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_timestamp_.Get();
}
inline void EventResponse::_internal_set_response_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_response_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_timestamp_.Mutable( GetArena());
}
inline std::string* EventResponse::release_response_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.response_timestamp)
  return _impl_.response_timestamp_.Release();
}
inline void EventResponse::set_allocated_response_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.response_timestamp_.IsDefault()) {
    _impl_.response_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.response_timestamp)
}

// map<string, string> response_metadata = 6;
inline int EventResponse::_internal_response_metadata_size() const {
  return _internal_response_metadata().size();
}
inline int EventResponse::response_metadata_size() const {
  return _internal_response_metadata_size();
}
inline void EventResponse::clear_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventResponse::_internal_response_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventResponse::response_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.EventResponse.response_metadata)
  return _internal_response_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* EventResponse::_internal_mutable_response_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EventResponse::mutable_response_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.EventResponse.response_metadata)
  return _internal_mutable_response_metadata();
}

// bool requires_follow_up = 7;
inline void EventResponse::clear_requires_follow_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_follow_up_ = false;
}
inline bool EventResponse::requires_follow_up() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.requires_follow_up)
  return _internal_requires_follow_up();
}
inline void EventResponse::set_requires_follow_up(bool value) {
  _internal_set_requires_follow_up(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.requires_follow_up)
}
inline bool EventResponse::_internal_requires_follow_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_follow_up_;
}
inline void EventResponse::_internal_set_requires_follow_up(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_follow_up_ = value;
}

// string follow_up_action_id = 8;
inline void EventResponse::clear_follow_up_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_up_action_id_.ClearToEmpty();
}
inline const std::string& EventResponse::follow_up_action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.follow_up_action_id)
  return _internal_follow_up_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventResponse::set_follow_up_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_up_action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.follow_up_action_id)
}
inline std::string* EventResponse::mutable_follow_up_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_follow_up_action_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventResponse.follow_up_action_id)
  return _s;
}
inline const std::string& EventResponse::_internal_follow_up_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.follow_up_action_id_.Get();
}
inline void EventResponse::_internal_set_follow_up_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_up_action_id_.Set(value, GetArena());
}
inline std::string* EventResponse::_internal_mutable_follow_up_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.follow_up_action_id_.Mutable( GetArena());
}
inline std::string* EventResponse::release_follow_up_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventResponse.follow_up_action_id)
  return _impl_.follow_up_action_id_.Release();
}
inline void EventResponse::set_allocated_follow_up_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_up_action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.follow_up_action_id_.IsDefault()) {
    _impl_.follow_up_action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventResponse.follow_up_action_id)
}

// .seigr.event.EscalationLevel escalation_path = 9;
inline void EventResponse::clear_escalation_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_ = 0;
}
inline ::seigr::event::EscalationLevel EventResponse::escalation_path() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.escalation_path)
  return _internal_escalation_path();
}
inline void EventResponse::set_escalation_path(::seigr::event::EscalationLevel value) {
  _internal_set_escalation_path(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.escalation_path)
}
inline ::seigr::event::EscalationLevel EventResponse::_internal_escalation_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.escalation_path_);
}
inline void EventResponse::_internal_set_escalation_path(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_ = value;
}

// bool resolved = 10;
inline void EventResponse::clear_resolved() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_ = false;
}
inline bool EventResponse::resolved() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventResponse.resolved)
  return _internal_resolved();
}
inline void EventResponse::set_resolved(bool value) {
  _internal_set_resolved(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventResponse.resolved)
}
inline bool EventResponse::_internal_resolved() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolved_;
}
inline void EventResponse::_internal_set_resolved(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolved_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EscalationConfig

// .seigr.event.EscalationLevel level = 1;
inline void EscalationConfig::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::seigr::event::EscalationLevel EscalationConfig::level() const {
  // @@protoc_insertion_point(field_get:seigr.event.EscalationConfig.level)
  return _internal_level();
}
inline void EscalationConfig::set_level(::seigr::event::EscalationLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:seigr.event.EscalationConfig.level)
}
inline ::seigr::event::EscalationLevel EscalationConfig::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.level_);
}
inline void EscalationConfig::_internal_set_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// string escalation_path_id = 2;
inline void EscalationConfig::clear_escalation_path_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_id_.ClearToEmpty();
}
inline const std::string& EscalationConfig::escalation_path_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EscalationConfig.escalation_path_id)
  return _internal_escalation_path_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EscalationConfig::set_escalation_path_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EscalationConfig.escalation_path_id)
}
inline std::string* EscalationConfig::mutable_escalation_path_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_path_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EscalationConfig.escalation_path_id)
  return _s;
}
inline const std::string& EscalationConfig::_internal_escalation_path_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_path_id_.Get();
}
inline void EscalationConfig::_internal_set_escalation_path_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_id_.Set(value, GetArena());
}
inline std::string* EscalationConfig::_internal_mutable_escalation_path_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_path_id_.Mutable( GetArena());
}
inline std::string* EscalationConfig::release_escalation_path_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EscalationConfig.escalation_path_id)
  return _impl_.escalation_path_id_.Release();
}
inline void EscalationConfig::set_allocated_escalation_path_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_path_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_path_id_.IsDefault()) {
    _impl_.escalation_path_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EscalationConfig.escalation_path_id)
}

// map<string, string> conditions = 3;
inline int EscalationConfig::_internal_conditions_size() const {
  return _internal_conditions().size();
}
inline int EscalationConfig::conditions_size() const {
  return _internal_conditions_size();
}
inline void EscalationConfig::clear_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EscalationConfig::_internal_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EscalationConfig::conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.EscalationConfig.conditions)
  return _internal_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* EscalationConfig::_internal_mutable_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EscalationConfig::mutable_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.EscalationConfig.conditions)
  return _internal_mutable_conditions();
}

// repeated string alert_recipients = 4;
inline int EscalationConfig::_internal_alert_recipients_size() const {
  return _internal_alert_recipients().size();
}
inline int EscalationConfig::alert_recipients_size() const {
  return _internal_alert_recipients_size();
}
inline void EscalationConfig::clear_alert_recipients() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_recipients_.Clear();
}
inline std::string* EscalationConfig::add_alert_recipients() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_alert_recipients()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.event.EscalationConfig.alert_recipients)
  return _s;
}
inline const std::string& EscalationConfig::alert_recipients(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EscalationConfig.alert_recipients)
  return _internal_alert_recipients().Get(index);
}
inline std::string* EscalationConfig::mutable_alert_recipients(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.event.EscalationConfig.alert_recipients)
  return _internal_mutable_alert_recipients()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void EscalationConfig::set_alert_recipients(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_alert_recipients()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.event.EscalationConfig.alert_recipients)
}
template <typename Arg_, typename... Args_>
inline void EscalationConfig::add_alert_recipients(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_alert_recipients(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.event.EscalationConfig.alert_recipients)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EscalationConfig::alert_recipients() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.event.EscalationConfig.alert_recipients)
  return _internal_alert_recipients();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EscalationConfig::mutable_alert_recipients() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.event.EscalationConfig.alert_recipients)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alert_recipients();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EscalationConfig::_internal_alert_recipients() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_recipients_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EscalationConfig::_internal_mutable_alert_recipients() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alert_recipients_;
}

// string escalation_strategy = 5;
inline void EscalationConfig::clear_escalation_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_strategy_.ClearToEmpty();
}
inline const std::string& EscalationConfig::escalation_strategy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EscalationConfig.escalation_strategy)
  return _internal_escalation_strategy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EscalationConfig::set_escalation_strategy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_strategy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EscalationConfig.escalation_strategy)
}
inline std::string* EscalationConfig::mutable_escalation_strategy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_strategy();
  // @@protoc_insertion_point(field_mutable:seigr.event.EscalationConfig.escalation_strategy)
  return _s;
}
inline const std::string& EscalationConfig::_internal_escalation_strategy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_strategy_.Get();
}
inline void EscalationConfig::_internal_set_escalation_strategy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_strategy_.Set(value, GetArena());
}
inline std::string* EscalationConfig::_internal_mutable_escalation_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_strategy_.Mutable( GetArena());
}
inline std::string* EscalationConfig::release_escalation_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EscalationConfig.escalation_strategy)
  return _impl_.escalation_strategy_.Release();
}
inline void EscalationConfig::set_allocated_escalation_strategy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_strategy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_strategy_.IsDefault()) {
    _impl_.escalation_strategy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EscalationConfig.escalation_strategy)
}

// bool enable_automatic_responses = 6;
inline void EscalationConfig::clear_enable_automatic_responses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_responses_ = false;
}
inline bool EscalationConfig::enable_automatic_responses() const {
  // @@protoc_insertion_point(field_get:seigr.event.EscalationConfig.enable_automatic_responses)
  return _internal_enable_automatic_responses();
}
inline void EscalationConfig::set_enable_automatic_responses(bool value) {
  _internal_set_enable_automatic_responses(value);
  // @@protoc_insertion_point(field_set:seigr.event.EscalationConfig.enable_automatic_responses)
}
inline bool EscalationConfig::_internal_enable_automatic_responses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_automatic_responses_;
}
inline void EscalationConfig::_internal_set_enable_automatic_responses(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_responses_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EventLog

// string log_id = 1;
inline void EventLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& EventLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.log_id)
}
inline std::string* EventLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLog.log_id)
  return _s;
}
inline const std::string& EventLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void EventLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* EventLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* EventLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLog.log_id)
  return _impl_.log_id_.Release();
}
inline void EventLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLog.log_id)
}

// string event_id = 2;
inline void EventLog::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& EventLog::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLog::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.event_id)
}
inline std::string* EventLog::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLog.event_id)
  return _s;
}
inline const std::string& EventLog::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void EventLog::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* EventLog::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* EventLog::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLog.event_id)
  return _impl_.event_id_.Release();
}
inline void EventLog::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLog.event_id)
}

// string logged_at = 3;
inline void EventLog::clear_logged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_at_.ClearToEmpty();
}
inline const std::string& EventLog::logged_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.logged_at)
  return _internal_logged_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLog::set_logged_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.logged_at)
}
inline std::string* EventLog::mutable_logged_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logged_at();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLog.logged_at)
  return _s;
}
inline const std::string& EventLog::_internal_logged_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logged_at_.Get();
}
inline void EventLog::_internal_set_logged_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_at_.Set(value, GetArena());
}
inline std::string* EventLog::_internal_mutable_logged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.logged_at_.Mutable( GetArena());
}
inline std::string* EventLog::release_logged_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLog.logged_at)
  return _impl_.logged_at_.Release();
}
inline void EventLog::set_allocated_logged_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logged_at_.IsDefault()) {
    _impl_.logged_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLog.logged_at)
}

// string logger_id = 4;
inline void EventLog::clear_logger_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logger_id_.ClearToEmpty();
}
inline const std::string& EventLog::logger_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.logger_id)
  return _internal_logger_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLog::set_logger_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logger_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.logger_id)
}
inline std::string* EventLog::mutable_logger_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logger_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLog.logger_id)
  return _s;
}
inline const std::string& EventLog::_internal_logger_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logger_id_.Get();
}
inline void EventLog::_internal_set_logger_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logger_id_.Set(value, GetArena());
}
inline std::string* EventLog::_internal_mutable_logger_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.logger_id_.Mutable( GetArena());
}
inline std::string* EventLog::release_logger_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLog.logger_id)
  return _impl_.logger_id_.Release();
}
inline void EventLog::set_allocated_logger_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logger_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logger_id_.IsDefault()) {
    _impl_.logger_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLog.logger_id)
}

// string log_message = 5;
inline void EventLog::clear_log_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_message_.ClearToEmpty();
}
inline const std::string& EventLog::log_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.log_message)
  return _internal_log_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLog::set_log_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.log_message)
}
inline std::string* EventLog::mutable_log_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_message();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLog.log_message)
  return _s;
}
inline const std::string& EventLog::_internal_log_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_message_.Get();
}
inline void EventLog::_internal_set_log_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_message_.Set(value, GetArena());
}
inline std::string* EventLog::_internal_mutable_log_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_message_.Mutable( GetArena());
}
inline std::string* EventLog::release_log_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLog.log_message)
  return _impl_.log_message_.Release();
}
inline void EventLog::set_allocated_log_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_message_.IsDefault()) {
    _impl_.log_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLog.log_message)
}

// map<string, string> log_metadata = 6;
inline int EventLog::_internal_log_metadata_size() const {
  return _internal_log_metadata().size();
}
inline int EventLog::log_metadata_size() const {
  return _internal_log_metadata_size();
}
inline void EventLog::clear_log_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventLog::_internal_log_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& EventLog::log_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.event.EventLog.log_metadata)
  return _internal_log_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* EventLog::_internal_mutable_log_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* EventLog::mutable_log_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.event.EventLog.log_metadata)
  return _internal_mutable_log_metadata();
}

// .seigr.event.EscalationLevel logged_escalation_level = 7;
inline void EventLog::clear_logged_escalation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_escalation_level_ = 0;
}
inline ::seigr::event::EscalationLevel EventLog::logged_escalation_level() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.logged_escalation_level)
  return _internal_logged_escalation_level();
}
inline void EventLog::set_logged_escalation_level(::seigr::event::EscalationLevel value) {
  _internal_set_logged_escalation_level(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.logged_escalation_level)
}
inline ::seigr::event::EscalationLevel EventLog::_internal_logged_escalation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.logged_escalation_level_);
}
inline void EventLog::_internal_set_logged_escalation_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logged_escalation_level_ = value;
}

// bool is_resolved = 8;
inline void EventLog::clear_is_resolved() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_resolved_ = false;
}
inline bool EventLog::is_resolved() const {
  // @@protoc_insertion_point(field_get:seigr.event.EventLog.is_resolved)
  return _internal_is_resolved();
}
inline void EventLog::set_is_resolved(bool value) {
  _internal_set_is_resolved(value);
  // @@protoc_insertion_point(field_set:seigr.event.EventLog.is_resolved)
}
inline bool EventLog::_internal_is_resolved() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_resolved_;
}
inline void EventLog::_internal_set_is_resolved(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_resolved_ = value;
}

// -------------------------------------------------------------------

// SubscriptionAck

// string subscription_id = 1;
inline void SubscriptionAck::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& SubscriptionAck::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.SubscriptionAck.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionAck::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.SubscriptionAck.subscription_id)
}
inline std::string* SubscriptionAck::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.SubscriptionAck.subscription_id)
  return _s;
}
inline const std::string& SubscriptionAck::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void SubscriptionAck::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* SubscriptionAck::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* SubscriptionAck::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.SubscriptionAck.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void SubscriptionAck::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.SubscriptionAck.subscription_id)
}

// bool success = 2;
inline void SubscriptionAck::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SubscriptionAck::success() const {
  // @@protoc_insertion_point(field_get:seigr.event.SubscriptionAck.success)
  return _internal_success();
}
inline void SubscriptionAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.event.SubscriptionAck.success)
}
inline bool SubscriptionAck::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SubscriptionAck::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 3;
inline void SubscriptionAck::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SubscriptionAck::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.SubscriptionAck.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionAck::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.SubscriptionAck.message)
}
inline std::string* SubscriptionAck::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.event.SubscriptionAck.message)
  return _s;
}
inline const std::string& SubscriptionAck::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SubscriptionAck::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SubscriptionAck::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SubscriptionAck::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.SubscriptionAck.message)
  return _impl_.message_.Release();
}
inline void SubscriptionAck::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.SubscriptionAck.message)
}

// -------------------------------------------------------------------

// AcknowledgeRequest

// string event_id = 1;
inline void AcknowledgeRequest::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& AcknowledgeRequest::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.AcknowledgeRequest.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AcknowledgeRequest::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.AcknowledgeRequest.event_id)
}
inline std::string* AcknowledgeRequest::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.AcknowledgeRequest.event_id)
  return _s;
}
inline const std::string& AcknowledgeRequest::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void AcknowledgeRequest::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* AcknowledgeRequest::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* AcknowledgeRequest::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.AcknowledgeRequest.event_id)
  return _impl_.event_id_.Release();
}
inline void AcknowledgeRequest::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.AcknowledgeRequest.event_id)
}

// string subscriber_id = 2;
inline void AcknowledgeRequest::clear_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.ClearToEmpty();
}
inline const std::string& AcknowledgeRequest::subscriber_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.AcknowledgeRequest.subscriber_id)
  return _internal_subscriber_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AcknowledgeRequest::set_subscriber_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.AcknowledgeRequest.subscriber_id)
}
inline std::string* AcknowledgeRequest::mutable_subscriber_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.AcknowledgeRequest.subscriber_id)
  return _s;
}
inline const std::string& AcknowledgeRequest::_internal_subscriber_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_id_.Get();
}
inline void AcknowledgeRequest::_internal_set_subscriber_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.Set(value, GetArena());
}
inline std::string* AcknowledgeRequest::_internal_mutable_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_id_.Mutable( GetArena());
}
inline std::string* AcknowledgeRequest::release_subscriber_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.AcknowledgeRequest.subscriber_id)
  return _impl_.subscriber_id_.Release();
}
inline void AcknowledgeRequest::set_allocated_subscriber_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_id_.IsDefault()) {
    _impl_.subscriber_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.AcknowledgeRequest.subscriber_id)
}

// string acknowledgment_timestamp = 3;
inline void AcknowledgeRequest::clear_acknowledgment_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgment_timestamp_.ClearToEmpty();
}
inline const std::string& AcknowledgeRequest::acknowledgment_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.AcknowledgeRequest.acknowledgment_timestamp)
  return _internal_acknowledgment_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AcknowledgeRequest::set_acknowledgment_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgment_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.AcknowledgeRequest.acknowledgment_timestamp)
}
inline std::string* AcknowledgeRequest::mutable_acknowledgment_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_acknowledgment_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.event.AcknowledgeRequest.acknowledgment_timestamp)
  return _s;
}
inline const std::string& AcknowledgeRequest::_internal_acknowledgment_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acknowledgment_timestamp_.Get();
}
inline void AcknowledgeRequest::_internal_set_acknowledgment_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgment_timestamp_.Set(value, GetArena());
}
inline std::string* AcknowledgeRequest::_internal_mutable_acknowledgment_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.acknowledgment_timestamp_.Mutable( GetArena());
}
inline std::string* AcknowledgeRequest::release_acknowledgment_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.AcknowledgeRequest.acknowledgment_timestamp)
  return _impl_.acknowledgment_timestamp_.Release();
}
inline void AcknowledgeRequest::set_allocated_acknowledgment_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgment_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.acknowledgment_timestamp_.IsDefault()) {
    _impl_.acknowledgment_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.AcknowledgeRequest.acknowledgment_timestamp)
}

// -------------------------------------------------------------------

// AcknowledgeResponse

// bool success = 1;
inline void AcknowledgeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AcknowledgeResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.event.AcknowledgeResponse.success)
  return _internal_success();
}
inline void AcknowledgeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.event.AcknowledgeResponse.success)
}
inline bool AcknowledgeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AcknowledgeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void AcknowledgeResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AcknowledgeResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.AcknowledgeResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AcknowledgeResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.AcknowledgeResponse.message)
}
inline std::string* AcknowledgeResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.event.AcknowledgeResponse.message)
  return _s;
}
inline const std::string& AcknowledgeResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AcknowledgeResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AcknowledgeResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AcknowledgeResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.AcknowledgeResponse.message)
  return _impl_.message_.Release();
}
inline void AcknowledgeResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.AcknowledgeResponse.message)
}

// -------------------------------------------------------------------

// EventLogRequest

// string event_id = 1;
inline void EventLogRequest::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& EventLogRequest::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogRequest.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLogRequest::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLogRequest.event_id)
}
inline std::string* EventLogRequest::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogRequest.event_id)
  return _s;
}
inline const std::string& EventLogRequest::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void EventLogRequest::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* EventLogRequest::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* EventLogRequest::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLogRequest.event_id)
  return _impl_.event_id_.Release();
}
inline void EventLogRequest::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLogRequest.event_id)
}

// string time_range_start = 2;
inline void EventLogRequest::clear_time_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_start_.ClearToEmpty();
}
inline const std::string& EventLogRequest::time_range_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogRequest.time_range_start)
  return _internal_time_range_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLogRequest::set_time_range_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLogRequest.time_range_start)
}
inline std::string* EventLogRequest::mutable_time_range_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_range_start();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogRequest.time_range_start)
  return _s;
}
inline const std::string& EventLogRequest::_internal_time_range_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_range_start_.Get();
}
inline void EventLogRequest::_internal_set_time_range_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_start_.Set(value, GetArena());
}
inline std::string* EventLogRequest::_internal_mutable_time_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_range_start_.Mutable( GetArena());
}
inline std::string* EventLogRequest::release_time_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLogRequest.time_range_start)
  return _impl_.time_range_start_.Release();
}
inline void EventLogRequest::set_allocated_time_range_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_range_start_.IsDefault()) {
    _impl_.time_range_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLogRequest.time_range_start)
}

// string time_range_end = 3;
inline void EventLogRequest::clear_time_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_end_.ClearToEmpty();
}
inline const std::string& EventLogRequest::time_range_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogRequest.time_range_end)
  return _internal_time_range_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLogRequest::set_time_range_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLogRequest.time_range_end)
}
inline std::string* EventLogRequest::mutable_time_range_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_range_end();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogRequest.time_range_end)
  return _s;
}
inline const std::string& EventLogRequest::_internal_time_range_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_range_end_.Get();
}
inline void EventLogRequest::_internal_set_time_range_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_end_.Set(value, GetArena());
}
inline std::string* EventLogRequest::_internal_mutable_time_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_range_end_.Mutable( GetArena());
}
inline std::string* EventLogRequest::release_time_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLogRequest.time_range_end)
  return _impl_.time_range_end_.Release();
}
inline void EventLogRequest::set_allocated_time_range_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_range_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_range_end_.IsDefault()) {
    _impl_.time_range_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLogRequest.time_range_end)
}

// repeated string filters = 4;
inline int EventLogRequest::_internal_filters_size() const {
  return _internal_filters().size();
}
inline int EventLogRequest::filters_size() const {
  return _internal_filters_size();
}
inline void EventLogRequest::clear_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filters_.Clear();
}
inline std::string* EventLogRequest::add_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filters()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.event.EventLogRequest.filters)
  return _s;
}
inline const std::string& EventLogRequest::filters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogRequest.filters)
  return _internal_filters().Get(index);
}
inline std::string* EventLogRequest::mutable_filters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogRequest.filters)
  return _internal_mutable_filters()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void EventLogRequest::set_filters(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_filters()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.event.EventLogRequest.filters)
}
template <typename Arg_, typename... Args_>
inline void EventLogRequest::add_filters(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_filters(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.event.EventLogRequest.filters)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EventLogRequest::filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.event.EventLogRequest.filters)
  return _internal_filters();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EventLogRequest::mutable_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.event.EventLogRequest.filters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filters();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EventLogRequest::_internal_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filters_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EventLogRequest::_internal_mutable_filters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filters_;
}

// -------------------------------------------------------------------

// EventLogResponse

// repeated .seigr.event.EventLog logs = 1;
inline int EventLogResponse::_internal_logs_size() const {
  return _internal_logs().size();
}
inline int EventLogResponse::logs_size() const {
  return _internal_logs_size();
}
inline void EventLogResponse::clear_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.Clear();
}
inline ::seigr::event::EventLog* EventLogResponse::mutable_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogResponse.logs)
  return _internal_mutable_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>* EventLogResponse::mutable_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.event.EventLogResponse.logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_logs();
}
inline const ::seigr::event::EventLog& EventLogResponse::logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogResponse.logs)
  return _internal_logs().Get(index);
}
inline ::seigr::event::EventLog* EventLogResponse::add_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::event::EventLog* _add = _internal_mutable_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.event.EventLogResponse.logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>& EventLogResponse::logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.event.EventLogResponse.logs)
  return _internal_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>&
EventLogResponse::_internal_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::event::EventLog>*
EventLogResponse::_internal_mutable_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.logs_;
}

// string status = 2;
inline void EventLogResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& EventLogResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLogResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLogResponse.status)
}
inline std::string* EventLogResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogResponse.status)
  return _s;
}
inline const std::string& EventLogResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void EventLogResponse::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* EventLogResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* EventLogResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLogResponse.status)
  return _impl_.status_.Release();
}
inline void EventLogResponse::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLogResponse.status)
}

// string message = 3;
inline void EventLogResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EventLogResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.event.EventLogResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLogResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.event.EventLogResponse.message)
}
inline std::string* EventLogResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.event.EventLogResponse.message)
  return _s;
}
inline const std::string& EventLogResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void EventLogResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* EventLogResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* EventLogResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.event.EventLogResponse.message)
  return _impl_.message_.Release();
}
inline void EventLogResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.event.EventLogResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::event::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::event::EventType>() {
  return ::seigr::event::EventType_descriptor();
}
template <>
struct is_proto_enum<::seigr::event::EscalationLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::event::EscalationLevel>() {
  return ::seigr::event::EscalationLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // event_2eproto_2epb_2eh
