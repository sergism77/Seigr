syntax = "proto3";

package seigr.network;

import "common.proto"; // For ThreatLevel, QoSLevel, NetworkOperationLog, etc.

// ===========================
// ENUMS
// ===========================

/**
 * Enum defining network protocol types used in Seigr.
 */
enum NetworkProtocol {
    PROTOCOL_UNDEFINED = 0;         // Undefined protocol.
    PROTOCOL_TCP = 1;               // TCP protocol.
    PROTOCOL_UDP = 2;               // UDP protocol.
    PROTOCOL_IPFS = 3;              // IPFS-based communication.
    PROTOCOL_HYPHEN = 4;            // Custom Seigr Hyphen protocol.
    PROTOCOL_HTTP = 5;              // HTTP/HTTPS protocol.
    PROTOCOL_P2P = 6;               // Peer-to-peer protocol.
    PROTOCOL_ADAPTIVE_LAYERED = 7;  // Layered protocol with dynamic adjustments.
    PROTOCOL_SENARY_COMPRESSION = 8; // Senary-based compression protocol.
}

/**
 * Enum representing the current status of a network hyphen.
 */
enum HyphenStatus {
    HYPHEN_STATUS_UNDEFINED = 0;    // Undefined status.
    HYPHEN_ONLINE = 1;              // Online and reachable.
    HYPHEN_OFFLINE = 2;             // Offline.
    HYPHEN_MAINTENANCE = 3;         // Under maintenance.
    HYPHEN_DEGRADED = 4;            // Performance issues detected.
    HYPHEN_UNREACHABLE = 5;         // Unreachable due to network issues.
    HYPHEN_ADAPTIVE_SCALE_DOWN = 6; // Scaled down due to low demand.
    HYPHEN_ADAPTIVE_SCALE_UP = 7;   // Scaled up due to high demand.
}

// ===========================
// CORE NETWORK MESSAGES
// ===========================

/**
 * Represents an individual hyphen in the Seigr network.
 */
message NetworkHyphen {
    string hyphen_id = 1;                       // Unique identifier for the hyphen.
    string ip_address = 2;                      // IP address of the hyphen.
    int32 port = 3;                             // Port number for communication.
    NetworkProtocol primary_protocol = 4;       // Default protocol used.
    HyphenStatus status = 5;                    // Operational status of the hyphen.
    repeated NetworkProtocol supported_protocols = 6; // List of supported protocols.
    map<string, string> metadata = 7;           // Metadata (e.g., region, data center).
    string last_seen = 8;                       // Last interaction timestamp.
    int32 load_percentage = 9;                  // Real-time load percentage.
    int32 avg_latency_ms = 10;                  // Average latency in milliseconds.
    int32 available_bandwidth_mbps = 11;        // Bandwidth availability in Mbps.
    string adaptive_scaling_status = 12;        // Adaptive scaling status.
}

/**
 * Represents a peer connection between two hyphens.
 */
message PeerConnection {
    string connection_id = 1;                   // Unique identifier for the connection.
    string source_hyphen_id = 2;                // Source hyphen ID.
    string target_hyphen_id = 3;                // Target hyphen ID.
    NetworkProtocol protocol = 4;              // Protocol used for communication.
    int32 latency_ms = 5;                       // Connection latency in milliseconds.
    seigr.common.QoSLevel qos_level = 6;                     // Quality of Service level.
    string status = 7;                          // Connection status.
    string created_at = 8;                      // Timestamp of connection initiation.
    string last_updated = 9;                    // Last update timestamp.
    map<string, string> metadata = 10;          // Metadata for troubleshooting.
    int64 data_transferred_bytes = 11;          // Total data transferred.
    bool auto_scaled_qos = 12;                  // Adaptive QoS applied flag.
    float congestion_level = 13;                // Congestion level.
}

/**
 * Represents a cluster of hyphens in the Seigr network.
 */
message NetworkCluster {
    string cluster_id = 1;                      // Unique identifier for the cluster.
    repeated NetworkHyphen hyphens = 2;         // List of hyphens in the cluster.
    map<string, int32> hyphen_status_counts = 3; // Hyphen count by status.
    seigr.common.QoSLevel default_qos_level = 4;             // Default QoS level in the cluster.
    string last_health_check = 5;              // Timestamp of the last health check.
    string health_status = 6;                  // Overall health status.
    map<string, string> cluster_metadata = 7;   // Additional metadata.
    seigr.common.NetworkPerformanceSummary health_summary = 8;    // Health summary from common.proto.
    float load_balancing_factor = 9;            // Load balancing metric.
}

/**
 * Defines adaptive network configurations.
 */
message NetworkConfig {
    int32 max_connections = 1;                  // Maximum allowed connections.
    int32 retry_limit = 2;                      // Retry limit for failed attempts.
    int32 timeout_seconds = 3;                  // Timeout duration in seconds.
    bool enable_encryption = 4;                 // Enable encryption.
    seigr.common.QoSLevel default_qos = 5;                   // Default QoS level.
    repeated NetworkProtocol allowed_protocols = 6; // Allowed protocols.
    map<string, string> config_metadata = 7;    // Metadata for network configuration.
    int32 max_packet_loss_threshold = 8;        // Maximum packet loss threshold.
    bool enable_dynamic_qos_scaling = 9;        // Adaptive QoS scaling enabled.
    string fallback_protocol = 10;              // Fallback protocol.
}

/**
 * Represents aggregated network statistics.
 */
message NetworkStatistics {
    string cluster_id = 1;                      // Cluster ID.
    int32 total_hyphens = 2;                    // Total hyphens.
    int32 active_connections = 3;               // Active connections.
    int32 total_data_transferred_mb = 4;        // Total data transferred in MB.
    map<string, double> latency_averages = 5;   // Average latency per protocol.
    map<string, int32> qos_distribution = 6;    // Distribution of QoS levels.
    string last_updated = 7;                    // Last update timestamp.
    seigr.common.NetworkPerformanceSummary performance_summary = 8; // Performance summary.
    float avg_congestion_level = 9;             // Average congestion level.
}

/**
 * Network security policy configurations.
 */
message NetworkSecurityPolicy {
    string policy_id = 1;                       // Unique policy identifier.
    repeated string allowed_ip_ranges = 2;      // Allowed IP ranges.
    repeated string blocked_ip_ranges = 3;      // Blocked IP ranges.
    bool enforce_strict_tls = 4;                // Enforce TLS encryption.
    repeated NetworkProtocol allowed_protocols = 5; // Allowed protocols.
    bool adaptive_blacklisting = 6;            // Adaptive blacklisting enabled.
    map<string, string> policy_metadata = 7;    // Policy-specific metadata.
    string auto_response_action = 8;            // Default response to threats.
}

/**
 * Represents a network error event.
 */
message NetworkErrorEvent {
    string error_id = 1;                        // Unique error identifier.
    string source_hyphen_id = 2;                // Source hyphen ID.
    string target_hyphen_id = 3;                // Target hyphen ID.
    string error_code = 4;                      // Categorized error code.
    string error_message = 5;                   // Error description.
    string timestamp = 6;                       // Error timestamp.
    map<string, string> metadata = 7;           // Troubleshooting metadata.
    bool auto_resolved = 8;                     // Auto-resolved flag.
    int32 retry_attempts = 9;                   // Retry attempts.
}

/**
 * Message for network status request.
 */
message NetworkStatusRequest {
    string request_id = 1;     // Unique identifier for the status request.
    string hyphen_id = 2;      // ID of the hyphen being queried.
    map<string, string> filters = 3; // Query filters.
    bool include_diagnostics = 4; // Include detailed diagnostics in response.
}

/**
 * Message for network status response.
 */
message NetworkStatusResponse {
    string request_id = 1;     // Matches the request ID.
    string hyphen_id = 2;      // Hyphen being queried.
    string status = 3;         // Overall network status.
    map<string, string> diagnostics = 4; // Diagnostic data.
    string last_updated = 5;   // Last update timestamp.
}

/**
 * Network Operation Log
 */
message NetworkOperationLog {
    string log_id = 1;         // Unique log identifier.
    string action = 2;         // Action performed (e.g., CONNECT, DISCONNECT).
    string timestamp = 3;      // Timestamp of log entry.
    string source_hyphen_id = 4; // Source hyphen.
    string target_hyphen_id = 5; // Target hyphen.
    string status = 6;         // Status of the action.
    map<string, string> metadata = 7; // Contextual metadata.
}

/**
 * Network Performance Summary
 */
message NetworkPerformanceSummary {
    string summary_id = 1;    // Unique ID for performance summary.
    float avg_bandwidth_utilization = 2; // Average bandwidth utilization.
    float avg_response_time = 3; // Average response time.
    int32 total_data_transferred_mb = 4; // Total data transferred in MB.
    map<string, string> performance_notes = 5; // Contextual notes.
}

/**
 * Protocol Compatibility Log
 */
message ProtocolCompatibilityLog {
    string hyphen_id = 1;      // Hyphen ID.
    string protocol_version = 2; // Current protocol version.
    repeated string compatible_versions = 3; // Compatible versions.
    bool is_compatible = 4;    // Compatibility result.
    string timestamp = 5;      // Compatibility check timestamp.
}