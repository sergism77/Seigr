// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: resource_management.proto
// Protobuf C++ Version: 5.29.2

#ifndef resource_5fmanagement_2eproto_2epb_2eh
#define resource_5fmanagement_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_resource_5fmanagement_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_resource_5fmanagement_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_resource_5fmanagement_2eproto;
namespace seigr {
namespace resource_management {
class ClusterResourceStatus;
struct ClusterResourceStatusDefaultTypeInternal;
extern ClusterResourceStatusDefaultTypeInternal _ClusterResourceStatus_default_instance_;
class ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse;
struct ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal;
extern ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUseDefaultTypeInternal _ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse_default_instance_;
class ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse;
struct ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal;
extern ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUseDefaultTypeInternal _ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse_default_instance_;
class ResourceDemandForecast;
struct ResourceDemandForecastDefaultTypeInternal;
extern ResourceDemandForecastDefaultTypeInternal _ResourceDemandForecast_default_instance_;
class ResourceDemandForecast_ForecastMetadataEntry_DoNotUse;
struct ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal;
extern ResourceDemandForecast_ForecastMetadataEntry_DoNotUseDefaultTypeInternal _ResourceDemandForecast_ForecastMetadataEntry_DoNotUse_default_instance_;
class ResourceDistribution;
struct ResourceDistributionDefaultTypeInternal;
extern ResourceDistributionDefaultTypeInternal _ResourceDistribution_default_instance_;
class ResourceDistribution_DistributionMetadataEntry_DoNotUse;
struct ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal;
extern ResourceDistribution_DistributionMetadataEntry_DoNotUseDefaultTypeInternal _ResourceDistribution_DistributionMetadataEntry_DoNotUse_default_instance_;
class ResourceLimits;
struct ResourceLimitsDefaultTypeInternal;
extern ResourceLimitsDefaultTypeInternal _ResourceLimits_default_instance_;
class ResourceMonitorConfig;
struct ResourceMonitorConfigDefaultTypeInternal;
extern ResourceMonitorConfigDefaultTypeInternal _ResourceMonitorConfig_default_instance_;
class ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse;
struct ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal;
extern ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUseDefaultTypeInternal _ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse_default_instance_;
class ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse;
struct ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal;
extern ResourceMonitorConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal _ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse_default_instance_;
class ResourceUsage;
struct ResourceUsageDefaultTypeInternal;
extern ResourceUsageDefaultTypeInternal _ResourceUsage_default_instance_;
class ResourceUsageSummary;
struct ResourceUsageSummaryDefaultTypeInternal;
extern ResourceUsageSummaryDefaultTypeInternal _ResourceUsageSummary_default_instance_;
class ResourceUsage_UsageMetadataEntry_DoNotUse;
struct ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal;
extern ResourceUsage_UsageMetadataEntry_DoNotUseDefaultTypeInternal _ResourceUsage_UsageMetadataEntry_DoNotUse_default_instance_;
}  // namespace resource_management
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace resource_management {
enum ResourceType : int {
  RESOURCE_UNDEFINED = 0,
  RESOURCE_CPU = 1,
  RESOURCE_MEMORY = 2,
  RESOURCE_DISK_IO = 3,
  RESOURCE_BANDWIDTH = 4,
  RESOURCE_GPU = 5,
  RESOURCE_STORAGE = 6,
  RESOURCE_ENERGY = 7,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResourceType_IsValid(int value);
extern const uint32_t ResourceType_internal_data_[];
constexpr ResourceType ResourceType_MIN = static_cast<ResourceType>(0);
constexpr ResourceType ResourceType_MAX = static_cast<ResourceType>(7);
constexpr int ResourceType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
ResourceType_descriptor();
template <typename T>
const std::string& ResourceType_Name(T value) {
  static_assert(std::is_same<T, ResourceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResourceType_Name().");
  return ResourceType_Name(static_cast<ResourceType>(value));
}
template <>
inline const std::string& ResourceType_Name(ResourceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResourceType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool ResourceType_Parse(absl::string_view name, ResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResourceType>(
      ResourceType_descriptor(), name, value);
}
enum ResourceState : int {
  RESOURCE_STATE_UNDEFINED = 0,
  RESOURCE_STATE_OPTIMAL = 1,
  RESOURCE_STATE_NORMAL = 2,
  RESOURCE_STATE_WARNING = 3,
  RESOURCE_STATE_CRITICAL = 4,
  RESOURCE_STATE_OVERLOADED = 5,
  ResourceState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResourceState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResourceState_IsValid(int value);
extern const uint32_t ResourceState_internal_data_[];
constexpr ResourceState ResourceState_MIN = static_cast<ResourceState>(0);
constexpr ResourceState ResourceState_MAX = static_cast<ResourceState>(5);
constexpr int ResourceState_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ResourceState_descriptor();
template <typename T>
const std::string& ResourceState_Name(T value) {
  static_assert(std::is_same<T, ResourceState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResourceState_Name().");
  return ResourceState_Name(static_cast<ResourceState>(value));
}
template <>
inline const std::string& ResourceState_Name(ResourceState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResourceState_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ResourceState_Parse(absl::string_view name, ResourceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResourceState>(
      ResourceState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResourceUsageSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceUsageSummary) */ {
 public:
  inline ResourceUsageSummary() : ResourceUsageSummary(nullptr) {}
  ~ResourceUsageSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceUsageSummary* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceUsageSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceUsageSummary(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceUsageSummary(const ResourceUsageSummary& from) : ResourceUsageSummary(nullptr, from) {}
  inline ResourceUsageSummary(ResourceUsageSummary&& from) noexcept
      : ResourceUsageSummary(nullptr, std::move(from)) {}
  inline ResourceUsageSummary& operator=(const ResourceUsageSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceUsageSummary& operator=(ResourceUsageSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceUsageSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceUsageSummary* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageSummary*>(
        &_ResourceUsageSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ResourceUsageSummary& a, ResourceUsageSummary& b) { a.Swap(&b); }
  inline void Swap(ResourceUsageSummary* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceUsageSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceUsageSummary* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceUsageSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceUsageSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceUsageSummary& from) { ResourceUsageSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceUsageSummary* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceUsageSummary"; }

 protected:
  explicit ResourceUsageSummary(::google::protobuf::Arena* arena);
  ResourceUsageSummary(::google::protobuf::Arena* arena, const ResourceUsageSummary& from);
  ResourceUsageSummary(::google::protobuf::Arena* arena, ResourceUsageSummary&& from) noexcept
      : ResourceUsageSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHyphenIdFieldNumber = 2,
    kSummaryPeriodFieldNumber = 7,
    kAverageUsageFieldNumber = 3,
    kPeakUsageFieldNumber = 4,
    kTypeFieldNumber = 1,
    kThresholdExceedCountFieldNumber = 8,
    kMinimumUsageFieldNumber = 5,
    kUsageStandardDeviationFieldNumber = 6,
    kCostEstimateFieldNumber = 9,
    kEfficiencyScoreAvgFieldNumber = 11,
    kTimeAboveThresholdFieldNumber = 10,
    kSustainabilityCompliantFieldNumber = 13,
    kPowerConsumptionAvgFieldNumber = 12,
  };
  // string hyphen_id = 2;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string summary_period = 7;
  void clear_summary_period() ;
  const std::string& summary_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary_period(Arg_&& arg, Args_... args);
  std::string* mutable_summary_period();
  PROTOBUF_NODISCARD std::string* release_summary_period();
  void set_allocated_summary_period(std::string* value);

  private:
  const std::string& _internal_summary_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary_period(
      const std::string& value);
  std::string* _internal_mutable_summary_period();

  public:
  // double average_usage = 3;
  void clear_average_usage() ;
  double average_usage() const;
  void set_average_usage(double value);

  private:
  double _internal_average_usage() const;
  void _internal_set_average_usage(double value);

  public:
  // double peak_usage = 4;
  void clear_peak_usage() ;
  double peak_usage() const;
  void set_peak_usage(double value);

  private:
  double _internal_peak_usage() const;
  void _internal_set_peak_usage(double value);

  public:
  // .seigr.resource_management.ResourceType type = 1;
  void clear_type() ;
  ::seigr::resource_management::ResourceType type() const;
  void set_type(::seigr::resource_management::ResourceType value);

  private:
  ::seigr::resource_management::ResourceType _internal_type() const;
  void _internal_set_type(::seigr::resource_management::ResourceType value);

  public:
  // int32 threshold_exceed_count = 8;
  void clear_threshold_exceed_count() ;
  ::int32_t threshold_exceed_count() const;
  void set_threshold_exceed_count(::int32_t value);

  private:
  ::int32_t _internal_threshold_exceed_count() const;
  void _internal_set_threshold_exceed_count(::int32_t value);

  public:
  // double minimum_usage = 5;
  void clear_minimum_usage() ;
  double minimum_usage() const;
  void set_minimum_usage(double value);

  private:
  double _internal_minimum_usage() const;
  void _internal_set_minimum_usage(double value);

  public:
  // double usage_standard_deviation = 6;
  void clear_usage_standard_deviation() ;
  double usage_standard_deviation() const;
  void set_usage_standard_deviation(double value);

  private:
  double _internal_usage_standard_deviation() const;
  void _internal_set_usage_standard_deviation(double value);

  public:
  // double cost_estimate = 9;
  void clear_cost_estimate() ;
  double cost_estimate() const;
  void set_cost_estimate(double value);

  private:
  double _internal_cost_estimate() const;
  void _internal_set_cost_estimate(double value);

  public:
  // double efficiency_score_avg = 11;
  void clear_efficiency_score_avg() ;
  double efficiency_score_avg() const;
  void set_efficiency_score_avg(double value);

  private:
  double _internal_efficiency_score_avg() const;
  void _internal_set_efficiency_score_avg(double value);

  public:
  // int32 time_above_threshold = 10;
  void clear_time_above_threshold() ;
  ::int32_t time_above_threshold() const;
  void set_time_above_threshold(::int32_t value);

  private:
  ::int32_t _internal_time_above_threshold() const;
  void _internal_set_time_above_threshold(::int32_t value);

  public:
  // bool sustainability_compliant = 13;
  void clear_sustainability_compliant() ;
  bool sustainability_compliant() const;
  void set_sustainability_compliant(bool value);

  private:
  bool _internal_sustainability_compliant() const;
  void _internal_set_sustainability_compliant(bool value);

  public:
  // double power_consumption_avg = 12;
  void clear_power_consumption_avg() ;
  double power_consumption_avg() const;
  void set_power_consumption_avg(double value);

  private:
  double _internal_power_consumption_avg() const;
  void _internal_set_power_consumption_avg(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceUsageSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      86, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceUsageSummary& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr summary_period_;
    double average_usage_;
    double peak_usage_;
    int type_;
    ::int32_t threshold_exceed_count_;
    double minimum_usage_;
    double usage_standard_deviation_;
    double cost_estimate_;
    double efficiency_score_avg_;
    ::int32_t time_above_threshold_;
    bool sustainability_compliant_;
    double power_consumption_avg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsage_UsageMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ResourceUsage_UsageMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceUsage_UsageMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ResourceUsage_UsageMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ResourceUsage_UsageMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ResourceUsage_UsageMetadataEntry_DoNotUse*>(
        &_ResourceUsage_UsageMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse*>(
        &_ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse*>(
        &_ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ResourceLimits final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceLimits) */ {
 public:
  inline ResourceLimits() : ResourceLimits(nullptr) {}
  ~ResourceLimits() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceLimits* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceLimits));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceLimits(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceLimits(const ResourceLimits& from) : ResourceLimits(nullptr, from) {}
  inline ResourceLimits(ResourceLimits&& from) noexcept
      : ResourceLimits(nullptr, std::move(from)) {}
  inline ResourceLimits& operator=(const ResourceLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLimits& operator=(ResourceLimits&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceLimits* internal_default_instance() {
    return reinterpret_cast<const ResourceLimits*>(
        &_ResourceLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ResourceLimits& a, ResourceLimits& b) { a.Swap(&b); }
  inline void Swap(ResourceLimits* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceLimits* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceLimits>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceLimits& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceLimits& from) { ResourceLimits::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceLimits* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceLimits"; }

 protected:
  explicit ResourceLimits(::google::protobuf::Arena* arena);
  ResourceLimits(::google::protobuf::Arena* arena, const ResourceLimits& from);
  ResourceLimits(::google::protobuf::Arena* arena, ResourceLimits&& from) noexcept
      : ResourceLimits(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUnitFieldNumber = 5,
    kEscalationContactFieldNumber = 7,
    kAutoScaleActionFieldNumber = 9,
    kWarningThresholdFieldNumber = 2,
    kCriticalThresholdFieldNumber = 3,
    kTypeFieldNumber = 1,
    kEnforceLimitsFieldNumber = 6,
    kAbsoluteMaxFieldNumber = 4,
    kUsageDecayRateFieldNumber = 10,
    kSustainableLimitFieldNumber = 11,
    kMaxContinuousOverloadSecondsFieldNumber = 8,
  };
  // string unit = 5;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* value);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // string escalation_contact = 7;
  void clear_escalation_contact() ;
  const std::string& escalation_contact() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_contact(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_contact();
  PROTOBUF_NODISCARD std::string* release_escalation_contact();
  void set_allocated_escalation_contact(std::string* value);

  private:
  const std::string& _internal_escalation_contact() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_contact(
      const std::string& value);
  std::string* _internal_mutable_escalation_contact();

  public:
  // string auto_scale_action = 9;
  void clear_auto_scale_action() ;
  const std::string& auto_scale_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auto_scale_action(Arg_&& arg, Args_... args);
  std::string* mutable_auto_scale_action();
  PROTOBUF_NODISCARD std::string* release_auto_scale_action();
  void set_allocated_auto_scale_action(std::string* value);

  private:
  const std::string& _internal_auto_scale_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_scale_action(
      const std::string& value);
  std::string* _internal_mutable_auto_scale_action();

  public:
  // double warning_threshold = 2;
  void clear_warning_threshold() ;
  double warning_threshold() const;
  void set_warning_threshold(double value);

  private:
  double _internal_warning_threshold() const;
  void _internal_set_warning_threshold(double value);

  public:
  // double critical_threshold = 3;
  void clear_critical_threshold() ;
  double critical_threshold() const;
  void set_critical_threshold(double value);

  private:
  double _internal_critical_threshold() const;
  void _internal_set_critical_threshold(double value);

  public:
  // .seigr.resource_management.ResourceType type = 1;
  void clear_type() ;
  ::seigr::resource_management::ResourceType type() const;
  void set_type(::seigr::resource_management::ResourceType value);

  private:
  ::seigr::resource_management::ResourceType _internal_type() const;
  void _internal_set_type(::seigr::resource_management::ResourceType value);

  public:
  // bool enforce_limits = 6;
  void clear_enforce_limits() ;
  bool enforce_limits() const;
  void set_enforce_limits(bool value);

  private:
  bool _internal_enforce_limits() const;
  void _internal_set_enforce_limits(bool value);

  public:
  // double absolute_max = 4;
  void clear_absolute_max() ;
  double absolute_max() const;
  void set_absolute_max(double value);

  private:
  double _internal_absolute_max() const;
  void _internal_set_absolute_max(double value);

  public:
  // double usage_decay_rate = 10;
  void clear_usage_decay_rate() ;
  double usage_decay_rate() const;
  void set_usage_decay_rate(double value);

  private:
  double _internal_usage_decay_rate() const;
  void _internal_set_usage_decay_rate(double value);

  public:
  // double sustainable_limit = 11;
  void clear_sustainable_limit() ;
  double sustainable_limit() const;
  void set_sustainable_limit(double value);

  private:
  double _internal_sustainable_limit() const;
  void _internal_set_sustainable_limit(double value);

  public:
  // int32 max_continuous_overload_seconds = 8;
  void clear_max_continuous_overload_seconds() ;
  ::int32_t max_continuous_overload_seconds() const;
  void set_max_continuous_overload_seconds(::int32_t value);

  private:
  ::int32_t _internal_max_continuous_overload_seconds() const;
  void _internal_set_max_continuous_overload_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceLimits)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      96, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceLimits& from_msg);
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::google::protobuf::internal::ArenaStringPtr escalation_contact_;
    ::google::protobuf::internal::ArenaStringPtr auto_scale_action_;
    double warning_threshold_;
    double critical_threshold_;
    int type_;
    bool enforce_limits_;
    double absolute_max_;
    double usage_decay_rate_;
    double sustainable_limit_;
    ::int32_t max_continuous_overload_seconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResourceDistribution_DistributionMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ResourceDistribution_DistributionMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceDistribution_DistributionMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ResourceDistribution_DistributionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ResourceDistribution_DistributionMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ResourceDistribution_DistributionMetadataEntry_DoNotUse*>(
        &_ResourceDistribution_DistributionMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      89, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ResourceDemandForecast_ForecastMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ResourceDemandForecast_ForecastMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ResourceDemandForecast_ForecastMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ResourceDemandForecast_ForecastMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ResourceDemandForecast_ForecastMetadataEntry_DoNotUse*>(
        &_ResourceDemandForecast_ForecastMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      87, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse*>(
        &_ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      81, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse*>(
        &_ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_resource_5fmanagement_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ResourceUsage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceUsage) */ {
 public:
  inline ResourceUsage() : ResourceUsage(nullptr) {}
  ~ResourceUsage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceUsage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceUsage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceUsage(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceUsage(const ResourceUsage& from) : ResourceUsage(nullptr, from) {}
  inline ResourceUsage(ResourceUsage&& from) noexcept
      : ResourceUsage(nullptr, std::move(from)) {}
  inline ResourceUsage& operator=(const ResourceUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceUsage& operator=(ResourceUsage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceUsage* internal_default_instance() {
    return reinterpret_cast<const ResourceUsage*>(
        &_ResourceUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceUsage& a, ResourceUsage& b) { a.Swap(&b); }
  inline void Swap(ResourceUsage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceUsage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceUsage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceUsage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceUsage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceUsage& from) { ResourceUsage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceUsage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceUsage"; }

 protected:
  explicit ResourceUsage(::google::protobuf::Arena* arena);
  ResourceUsage(::google::protobuf::Arena* arena, const ResourceUsage& from);
  ResourceUsage(::google::protobuf::Arena* arena, ResourceUsage&& from) noexcept
      : ResourceUsage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsageMetadataFieldNumber = 8,
    kUnitFieldNumber = 4,
    kHyphenIdFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kApplicationIdFieldNumber = 9,
    kUsagePercentageFieldNumber = 2,
    kAbsoluteUsageFieldNumber = 3,
    kTypeFieldNumber = 1,
    kStateFieldNumber = 7,
    kTemperatureFieldNumber = 10,
    kResourceEfficiencyScoreFieldNumber = 11,
    kPowerConsumptionFieldNumber = 12,
    kSustainableUseFlagFieldNumber = 13,
  };
  // map<string, string> usage_metadata = 8;
  int usage_metadata_size() const;
  private:
  int _internal_usage_metadata_size() const;

  public:
  void clear_usage_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& usage_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_usage_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_usage_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_usage_metadata();

  public:
  // string unit = 4;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* value);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // string hyphen_id = 5;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string application_id = 9;
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // double usage_percentage = 2;
  void clear_usage_percentage() ;
  double usage_percentage() const;
  void set_usage_percentage(double value);

  private:
  double _internal_usage_percentage() const;
  void _internal_set_usage_percentage(double value);

  public:
  // double absolute_usage = 3;
  void clear_absolute_usage() ;
  double absolute_usage() const;
  void set_absolute_usage(double value);

  private:
  double _internal_absolute_usage() const;
  void _internal_set_absolute_usage(double value);

  public:
  // .seigr.resource_management.ResourceType type = 1;
  void clear_type() ;
  ::seigr::resource_management::ResourceType type() const;
  void set_type(::seigr::resource_management::ResourceType value);

  private:
  ::seigr::resource_management::ResourceType _internal_type() const;
  void _internal_set_type(::seigr::resource_management::ResourceType value);

  public:
  // .seigr.resource_management.ResourceState state = 7;
  void clear_state() ;
  ::seigr::resource_management::ResourceState state() const;
  void set_state(::seigr::resource_management::ResourceState value);

  private:
  ::seigr::resource_management::ResourceState _internal_state() const;
  void _internal_set_state(::seigr::resource_management::ResourceState value);

  public:
  // double temperature = 10;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // double resource_efficiency_score = 11;
  void clear_resource_efficiency_score() ;
  double resource_efficiency_score() const;
  void set_resource_efficiency_score(double value);

  private:
  double _internal_resource_efficiency_score() const;
  void _internal_set_resource_efficiency_score(double value);

  public:
  // double power_consumption = 12;
  void clear_power_consumption() ;
  double power_consumption() const;
  void set_power_consumption(double value);

  private:
  double _internal_power_consumption() const;
  void _internal_set_power_consumption(double value);

  public:
  // bool sustainable_use_flag = 13;
  void clear_sustainable_use_flag() ;
  bool sustainable_use_flag() const;
  void set_sustainable_use_flag(bool value);

  private:
  bool _internal_sustainable_use_flag() const;
  void _internal_set_sustainable_use_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceUsage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      106, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceUsage& from_msg);
    ::google::protobuf::internal::MapField<ResourceUsage_UsageMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        usage_metadata_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    double usage_percentage_;
    double absolute_usage_;
    int type_;
    int state_;
    double temperature_;
    double resource_efficiency_score_;
    double power_consumption_;
    bool sustainable_use_flag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceMonitorConfig) */ {
 public:
  inline ResourceMonitorConfig() : ResourceMonitorConfig(nullptr) {}
  ~ResourceMonitorConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceMonitorConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceMonitorConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceMonitorConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceMonitorConfig(const ResourceMonitorConfig& from) : ResourceMonitorConfig(nullptr, from) {}
  inline ResourceMonitorConfig(ResourceMonitorConfig&& from) noexcept
      : ResourceMonitorConfig(nullptr, std::move(from)) {}
  inline ResourceMonitorConfig& operator=(const ResourceMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig& operator=(ResourceMonitorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMonitorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig*>(
        &_ResourceMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ResourceMonitorConfig& a, ResourceMonitorConfig& b) { a.Swap(&b); }
  inline void Swap(ResourceMonitorConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMonitorConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMonitorConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceMonitorConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceMonitorConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceMonitorConfig& from) { ResourceMonitorConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceMonitorConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceMonitorConfig"; }

 protected:
  explicit ResourceMonitorConfig(::google::protobuf::Arena* arena);
  ResourceMonitorConfig(::google::protobuf::Arena* arena, const ResourceMonitorConfig& from);
  ResourceMonitorConfig(::google::protobuf::Arena* arena, ResourceMonitorConfig&& from) noexcept
      : ResourceMonitorConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourceLimitsFieldNumber = 2,
    kConfigMetadataFieldNumber = 4,
    kAlertSeverityLevelsFieldNumber = 8,
    kAlertProtocolFieldNumber = 5,
    kCheckIntervalSecondsFieldNumber = 1,
    kEnableAlertingFieldNumber = 3,
    kGracePeriodSecondsFieldNumber = 6,
    kAutoScaleThresholdFieldNumber = 7,
    kLoadBalancingThresholdFieldNumber = 10,
    kAlertFrequencyLimitFieldNumber = 9,
    kResourceEfficiencyAdjustmentIntervalFieldNumber = 11,
  };
  // repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
  int resource_limits_size() const;
  private:
  int _internal_resource_limits_size() const;

  public:
  void clear_resource_limits() ;
  ::seigr::resource_management::ResourceLimits* mutable_resource_limits(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>* mutable_resource_limits();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>& _internal_resource_limits() const;
  ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>* _internal_mutable_resource_limits();
  public:
  const ::seigr::resource_management::ResourceLimits& resource_limits(int index) const;
  ::seigr::resource_management::ResourceLimits* add_resource_limits();
  const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>& resource_limits() const;
  // map<string, string> config_metadata = 4;
  int config_metadata_size() const;
  private:
  int _internal_config_metadata_size() const;

  public:
  void clear_config_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_config_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_config_metadata();

  public:
  // map<string, int32> alert_severity_levels = 8;
  int alert_severity_levels_size() const;
  private:
  int _internal_alert_severity_levels_size() const;

  public:
  void clear_alert_severity_levels() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& alert_severity_levels() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_alert_severity_levels();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_alert_severity_levels() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_alert_severity_levels();

  public:
  // string alert_protocol = 5;
  void clear_alert_protocol() ;
  const std::string& alert_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alert_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_alert_protocol();
  PROTOBUF_NODISCARD std::string* release_alert_protocol();
  void set_allocated_alert_protocol(std::string* value);

  private:
  const std::string& _internal_alert_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_protocol(
      const std::string& value);
  std::string* _internal_mutable_alert_protocol();

  public:
  // int32 check_interval_seconds = 1;
  void clear_check_interval_seconds() ;
  ::int32_t check_interval_seconds() const;
  void set_check_interval_seconds(::int32_t value);

  private:
  ::int32_t _internal_check_interval_seconds() const;
  void _internal_set_check_interval_seconds(::int32_t value);

  public:
  // bool enable_alerting = 3;
  void clear_enable_alerting() ;
  bool enable_alerting() const;
  void set_enable_alerting(bool value);

  private:
  bool _internal_enable_alerting() const;
  void _internal_set_enable_alerting(bool value);

  public:
  // int32 grace_period_seconds = 6;
  void clear_grace_period_seconds() ;
  ::int32_t grace_period_seconds() const;
  void set_grace_period_seconds(::int32_t value);

  private:
  ::int32_t _internal_grace_period_seconds() const;
  void _internal_set_grace_period_seconds(::int32_t value);

  public:
  // int32 auto_scale_threshold = 7;
  void clear_auto_scale_threshold() ;
  ::int32_t auto_scale_threshold() const;
  void set_auto_scale_threshold(::int32_t value);

  private:
  ::int32_t _internal_auto_scale_threshold() const;
  void _internal_set_auto_scale_threshold(::int32_t value);

  public:
  // double load_balancing_threshold = 10;
  void clear_load_balancing_threshold() ;
  double load_balancing_threshold() const;
  void set_load_balancing_threshold(double value);

  private:
  double _internal_load_balancing_threshold() const;
  void _internal_set_load_balancing_threshold(double value);

  public:
  // int32 alert_frequency_limit = 9;
  void clear_alert_frequency_limit() ;
  ::int32_t alert_frequency_limit() const;
  void set_alert_frequency_limit(::int32_t value);

  private:
  ::int32_t _internal_alert_frequency_limit() const;
  void _internal_set_alert_frequency_limit(::int32_t value);

  public:
  // int32 resource_efficiency_adjustment_interval = 11;
  void clear_resource_efficiency_adjustment_interval() ;
  ::int32_t resource_efficiency_adjustment_interval() const;
  void set_resource_efficiency_adjustment_interval(::int32_t value);

  private:
  ::int32_t _internal_resource_efficiency_adjustment_interval() const;
  void _internal_set_resource_efficiency_adjustment_interval(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceMonitorConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 3,
      114, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceMonitorConfig& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::resource_management::ResourceLimits > resource_limits_;
    ::google::protobuf::internal::MapField<ResourceMonitorConfig_ConfigMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        config_metadata_;
    ::google::protobuf::internal::MapField<ResourceMonitorConfig_AlertSeverityLevelsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        alert_severity_levels_;
    ::google::protobuf::internal::ArenaStringPtr alert_protocol_;
    ::int32_t check_interval_seconds_;
    bool enable_alerting_;
    ::int32_t grace_period_seconds_;
    ::int32_t auto_scale_threshold_;
    double load_balancing_threshold_;
    ::int32_t alert_frequency_limit_;
    ::int32_t resource_efficiency_adjustment_interval_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResourceDistribution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceDistribution) */ {
 public:
  inline ResourceDistribution() : ResourceDistribution(nullptr) {}
  ~ResourceDistribution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceDistribution* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceDistribution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceDistribution(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceDistribution(const ResourceDistribution& from) : ResourceDistribution(nullptr, from) {}
  inline ResourceDistribution(ResourceDistribution&& from) noexcept
      : ResourceDistribution(nullptr, std::move(from)) {}
  inline ResourceDistribution& operator=(const ResourceDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDistribution& operator=(ResourceDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceDistribution* internal_default_instance() {
    return reinterpret_cast<const ResourceDistribution*>(
        &_ResourceDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ResourceDistribution& a, ResourceDistribution& b) { a.Swap(&b); }
  inline void Swap(ResourceDistribution* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDistribution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceDistribution* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceDistribution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceDistribution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceDistribution& from) { ResourceDistribution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceDistribution* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceDistribution"; }

 protected:
  explicit ResourceDistribution(::google::protobuf::Arena* arena);
  ResourceDistribution(::google::protobuf::Arena* arena, const ResourceDistribution& from);
  ResourceDistribution(::google::protobuf::Arena* arena, ResourceDistribution&& from) noexcept
      : ResourceDistribution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetClusterIdsFieldNumber = 4,
    kDistributionMetadataFieldNumber = 8,
    kDistributionIdFieldNumber = 1,
    kSourceClusterIdFieldNumber = 3,
    kDistributionStrategyFieldNumber = 7,
    kMaxLatencyAllowedFieldNumber = 5,
    kTypeFieldNumber = 2,
    kEnableEncryptionFieldNumber = 9,
    kMinEfficiencyThresholdFieldNumber = 6,
  };
  // repeated string target_cluster_ids = 4;
  int target_cluster_ids_size() const;
  private:
  int _internal_target_cluster_ids_size() const;

  public:
  void clear_target_cluster_ids() ;
  const std::string& target_cluster_ids(int index) const;
  std::string* mutable_target_cluster_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_cluster_ids(int index, Arg_&& value, Args_... args);
  std::string* add_target_cluster_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_target_cluster_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& target_cluster_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_target_cluster_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_target_cluster_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_target_cluster_ids();

  public:
  // map<string, string> distribution_metadata = 8;
  int distribution_metadata_size() const;
  private:
  int _internal_distribution_metadata_size() const;

  public:
  void clear_distribution_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& distribution_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_distribution_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_distribution_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_distribution_metadata();

  public:
  // string distribution_id = 1;
  void clear_distribution_id() ;
  const std::string& distribution_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_distribution_id(Arg_&& arg, Args_... args);
  std::string* mutable_distribution_id();
  PROTOBUF_NODISCARD std::string* release_distribution_id();
  void set_allocated_distribution_id(std::string* value);

  private:
  const std::string& _internal_distribution_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distribution_id(
      const std::string& value);
  std::string* _internal_mutable_distribution_id();

  public:
  // string source_cluster_id = 3;
  void clear_source_cluster_id() ;
  const std::string& source_cluster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_cluster_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_cluster_id();
  PROTOBUF_NODISCARD std::string* release_source_cluster_id();
  void set_allocated_source_cluster_id(std::string* value);

  private:
  const std::string& _internal_source_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_cluster_id(
      const std::string& value);
  std::string* _internal_mutable_source_cluster_id();

  public:
  // string distribution_strategy = 7;
  void clear_distribution_strategy() ;
  const std::string& distribution_strategy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_distribution_strategy(Arg_&& arg, Args_... args);
  std::string* mutable_distribution_strategy();
  PROTOBUF_NODISCARD std::string* release_distribution_strategy();
  void set_allocated_distribution_strategy(std::string* value);

  private:
  const std::string& _internal_distribution_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distribution_strategy(
      const std::string& value);
  std::string* _internal_mutable_distribution_strategy();

  public:
  // double max_latency_allowed = 5;
  void clear_max_latency_allowed() ;
  double max_latency_allowed() const;
  void set_max_latency_allowed(double value);

  private:
  double _internal_max_latency_allowed() const;
  void _internal_set_max_latency_allowed(double value);

  public:
  // .seigr.resource_management.ResourceType type = 2;
  void clear_type() ;
  ::seigr::resource_management::ResourceType type() const;
  void set_type(::seigr::resource_management::ResourceType value);

  private:
  ::seigr::resource_management::ResourceType _internal_type() const;
  void _internal_set_type(::seigr::resource_management::ResourceType value);

  public:
  // bool enable_encryption = 9;
  void clear_enable_encryption() ;
  bool enable_encryption() const;
  void set_enable_encryption(bool value);

  private:
  bool _internal_enable_encryption() const;
  void _internal_set_enable_encryption(bool value);

  public:
  // double min_efficiency_threshold = 6;
  void clear_min_efficiency_threshold() ;
  double min_efficiency_threshold() const;
  void set_min_efficiency_threshold(double value);

  private:
  double _internal_min_efficiency_threshold() const;
  void _internal_set_min_efficiency_threshold(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceDistribution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      155, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceDistribution& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> target_cluster_ids_;
    ::google::protobuf::internal::MapField<ResourceDistribution_DistributionMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        distribution_metadata_;
    ::google::protobuf::internal::ArenaStringPtr distribution_id_;
    ::google::protobuf::internal::ArenaStringPtr source_cluster_id_;
    ::google::protobuf::internal::ArenaStringPtr distribution_strategy_;
    double max_latency_allowed_;
    int type_;
    bool enable_encryption_;
    double min_efficiency_threshold_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ResourceDemandForecast final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ResourceDemandForecast) */ {
 public:
  inline ResourceDemandForecast() : ResourceDemandForecast(nullptr) {}
  ~ResourceDemandForecast() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResourceDemandForecast* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResourceDemandForecast));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceDemandForecast(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceDemandForecast(const ResourceDemandForecast& from) : ResourceDemandForecast(nullptr, from) {}
  inline ResourceDemandForecast(ResourceDemandForecast&& from) noexcept
      : ResourceDemandForecast(nullptr, std::move(from)) {}
  inline ResourceDemandForecast& operator=(const ResourceDemandForecast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDemandForecast& operator=(ResourceDemandForecast&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceDemandForecast& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceDemandForecast* internal_default_instance() {
    return reinterpret_cast<const ResourceDemandForecast*>(
        &_ResourceDemandForecast_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ResourceDemandForecast& a, ResourceDemandForecast& b) { a.Swap(&b); }
  inline void Swap(ResourceDemandForecast* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDemandForecast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceDemandForecast* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResourceDemandForecast>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceDemandForecast& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceDemandForecast& from) { ResourceDemandForecast::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResourceDemandForecast* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ResourceDemandForecast"; }

 protected:
  explicit ResourceDemandForecast(::google::protobuf::Arena* arena);
  ResourceDemandForecast(::google::protobuf::Arena* arena, const ResourceDemandForecast& from);
  ResourceDemandForecast(::google::protobuf::Arena* arena, ResourceDemandForecast&& from) noexcept
      : ResourceDemandForecast(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kForecastMetadataFieldNumber = 8,
    kClusterIdFieldNumber = 2,
    kForecastPeriodFieldNumber = 3,
    kForecastCreatedAtFieldNumber = 7,
    kProjectedPeakUsageFieldNumber = 4,
    kProjectedAverageUsageFieldNumber = 5,
    kConfidenceLevelFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // map<string, string> forecast_metadata = 8;
  int forecast_metadata_size() const;
  private:
  int _internal_forecast_metadata_size() const;

  public:
  void clear_forecast_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& forecast_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_forecast_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_forecast_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_forecast_metadata();

  public:
  // string cluster_id = 2;
  void clear_cluster_id() ;
  const std::string& cluster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cluster_id(Arg_&& arg, Args_... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* value);

  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(
      const std::string& value);
  std::string* _internal_mutable_cluster_id();

  public:
  // string forecast_period = 3;
  void clear_forecast_period() ;
  const std::string& forecast_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forecast_period(Arg_&& arg, Args_... args);
  std::string* mutable_forecast_period();
  PROTOBUF_NODISCARD std::string* release_forecast_period();
  void set_allocated_forecast_period(std::string* value);

  private:
  const std::string& _internal_forecast_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forecast_period(
      const std::string& value);
  std::string* _internal_mutable_forecast_period();

  public:
  // string forecast_created_at = 7;
  void clear_forecast_created_at() ;
  const std::string& forecast_created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forecast_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_forecast_created_at();
  PROTOBUF_NODISCARD std::string* release_forecast_created_at();
  void set_allocated_forecast_created_at(std::string* value);

  private:
  const std::string& _internal_forecast_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forecast_created_at(
      const std::string& value);
  std::string* _internal_mutable_forecast_created_at();

  public:
  // double projected_peak_usage = 4;
  void clear_projected_peak_usage() ;
  double projected_peak_usage() const;
  void set_projected_peak_usage(double value);

  private:
  double _internal_projected_peak_usage() const;
  void _internal_set_projected_peak_usage(double value);

  public:
  // double projected_average_usage = 5;
  void clear_projected_average_usage() ;
  double projected_average_usage() const;
  void set_projected_average_usage(double value);

  private:
  double _internal_projected_average_usage() const;
  void _internal_set_projected_average_usage(double value);

  public:
  // double confidence_level = 6;
  void clear_confidence_level() ;
  double confidence_level() const;
  void set_confidence_level(double value);

  private:
  double _internal_confidence_level() const;
  void _internal_set_confidence_level(double value);

  public:
  // .seigr.resource_management.ResourceType type = 1;
  void clear_type() ;
  ::seigr::resource_management::ResourceType type() const;
  void set_type(::seigr::resource_management::ResourceType value);

  private:
  ::seigr::resource_management::ResourceType _internal_type() const;
  void _internal_set_type(::seigr::resource_management::ResourceType value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ResourceDemandForecast)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResourceDemandForecast& from_msg);
    ::google::protobuf::internal::MapField<ResourceDemandForecast_ForecastMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        forecast_metadata_;
    ::google::protobuf::internal::ArenaStringPtr cluster_id_;
    ::google::protobuf::internal::ArenaStringPtr forecast_period_;
    ::google::protobuf::internal::ArenaStringPtr forecast_created_at_;
    double projected_peak_usage_;
    double projected_average_usage_;
    double confidence_level_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class ClusterResourceStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.resource_management.ClusterResourceStatus) */ {
 public:
  inline ClusterResourceStatus() : ClusterResourceStatus(nullptr) {}
  ~ClusterResourceStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClusterResourceStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClusterResourceStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClusterResourceStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClusterResourceStatus(const ClusterResourceStatus& from) : ClusterResourceStatus(nullptr, from) {}
  inline ClusterResourceStatus(ClusterResourceStatus&& from) noexcept
      : ClusterResourceStatus(nullptr, std::move(from)) {}
  inline ClusterResourceStatus& operator=(const ClusterResourceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterResourceStatus& operator=(ClusterResourceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterResourceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterResourceStatus* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceStatus*>(
        &_ClusterResourceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ClusterResourceStatus& a, ClusterResourceStatus& b) { a.Swap(&b); }
  inline void Swap(ClusterResourceStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterResourceStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterResourceStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClusterResourceStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClusterResourceStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClusterResourceStatus& from) { ClusterResourceStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClusterResourceStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.resource_management.ClusterResourceStatus"; }

 protected:
  explicit ClusterResourceStatus(::google::protobuf::Arena* arena);
  ClusterResourceStatus(::google::protobuf::Arena* arena, const ClusterResourceStatus& from);
  ClusterResourceStatus(::google::protobuf::Arena* arena, ClusterResourceStatus&& from) noexcept
      : ClusterResourceStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHyphenSummariesFieldNumber = 2,
    kClusterAverageUsageFieldNumber = 3,
    kClusterPeakUsageFieldNumber = 4,
    kClusterIdFieldNumber = 1,
    kLastUpdatedFieldNumber = 5,
    kHealthStatusFieldNumber = 6,
    kRecoveryActionPlanFieldNumber = 8,
    kClusterUtilizationScoreFieldNumber = 9,
    kOverloadedHyphensCountFieldNumber = 7,
    kAdaptiveScalingEventsFieldNumber = 12,
    kLoadDistributionScoreFieldNumber = 10,
    kSustainabilityComplianceRateFieldNumber = 11,
  };
  // repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
  int hyphen_summaries_size() const;
  private:
  int _internal_hyphen_summaries_size() const;

  public:
  void clear_hyphen_summaries() ;
  ::seigr::resource_management::ResourceUsageSummary* mutable_hyphen_summaries(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>* mutable_hyphen_summaries();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>& _internal_hyphen_summaries() const;
  ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>* _internal_mutable_hyphen_summaries();
  public:
  const ::seigr::resource_management::ResourceUsageSummary& hyphen_summaries(int index) const;
  ::seigr::resource_management::ResourceUsageSummary* add_hyphen_summaries();
  const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>& hyphen_summaries() const;
  // map<string, double> cluster_average_usage = 3;
  int cluster_average_usage_size() const;
  private:
  int _internal_cluster_average_usage_size() const;

  public:
  void clear_cluster_average_usage() ;
  const ::google::protobuf::Map<std::string, double>& cluster_average_usage() const;
  ::google::protobuf::Map<std::string, double>* mutable_cluster_average_usage();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_cluster_average_usage() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_cluster_average_usage();

  public:
  // map<string, double> cluster_peak_usage = 4;
  int cluster_peak_usage_size() const;
  private:
  int _internal_cluster_peak_usage_size() const;

  public:
  void clear_cluster_peak_usage() ;
  const ::google::protobuf::Map<std::string, double>& cluster_peak_usage() const;
  ::google::protobuf::Map<std::string, double>* mutable_cluster_peak_usage();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_cluster_peak_usage() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_cluster_peak_usage();

  public:
  // string cluster_id = 1;
  void clear_cluster_id() ;
  const std::string& cluster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cluster_id(Arg_&& arg, Args_... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* value);

  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(
      const std::string& value);
  std::string* _internal_mutable_cluster_id();

  public:
  // string last_updated = 5;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // string health_status = 6;
  void clear_health_status() ;
  const std::string& health_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_health_status(Arg_&& arg, Args_... args);
  std::string* mutable_health_status();
  PROTOBUF_NODISCARD std::string* release_health_status();
  void set_allocated_health_status(std::string* value);

  private:
  const std::string& _internal_health_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_health_status(
      const std::string& value);
  std::string* _internal_mutable_health_status();

  public:
  // string recovery_action_plan = 8;
  void clear_recovery_action_plan() ;
  const std::string& recovery_action_plan() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recovery_action_plan(Arg_&& arg, Args_... args);
  std::string* mutable_recovery_action_plan();
  PROTOBUF_NODISCARD std::string* release_recovery_action_plan();
  void set_allocated_recovery_action_plan(std::string* value);

  private:
  const std::string& _internal_recovery_action_plan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recovery_action_plan(
      const std::string& value);
  std::string* _internal_mutable_recovery_action_plan();

  public:
  // double cluster_utilization_score = 9;
  void clear_cluster_utilization_score() ;
  double cluster_utilization_score() const;
  void set_cluster_utilization_score(double value);

  private:
  double _internal_cluster_utilization_score() const;
  void _internal_set_cluster_utilization_score(double value);

  public:
  // int32 overloaded_hyphens_count = 7;
  void clear_overloaded_hyphens_count() ;
  ::int32_t overloaded_hyphens_count() const;
  void set_overloaded_hyphens_count(::int32_t value);

  private:
  ::int32_t _internal_overloaded_hyphens_count() const;
  void _internal_set_overloaded_hyphens_count(::int32_t value);

  public:
  // int32 adaptive_scaling_events = 12;
  void clear_adaptive_scaling_events() ;
  ::int32_t adaptive_scaling_events() const;
  void set_adaptive_scaling_events(::int32_t value);

  private:
  ::int32_t _internal_adaptive_scaling_events() const;
  void _internal_set_adaptive_scaling_events(::int32_t value);

  public:
  // double load_distribution_score = 10;
  void clear_load_distribution_score() ;
  double load_distribution_score() const;
  void set_load_distribution_score(double value);

  private:
  double _internal_load_distribution_score() const;
  void _internal_set_load_distribution_score(double value);

  public:
  // double sustainability_compliance_rate = 11;
  void clear_sustainability_compliance_rate() ;
  double sustainability_compliance_rate() const;
  void set_sustainability_compliance_rate(double value);

  private:
  double _internal_sustainability_compliance_rate() const;
  void _internal_set_sustainability_compliance_rate(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.resource_management.ClusterResourceStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      158, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClusterResourceStatus& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::resource_management::ResourceUsageSummary > hyphen_summaries_;
    ::google::protobuf::internal::MapField<ClusterResourceStatus_ClusterAverageUsageEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        cluster_average_usage_;
    ::google::protobuf::internal::MapField<ClusterResourceStatus_ClusterPeakUsageEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        cluster_peak_usage_;
    ::google::protobuf::internal::ArenaStringPtr cluster_id_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    ::google::protobuf::internal::ArenaStringPtr health_status_;
    ::google::protobuf::internal::ArenaStringPtr recovery_action_plan_;
    double cluster_utilization_score_;
    ::int32_t overloaded_hyphens_count_;
    ::int32_t adaptive_scaling_events_;
    double load_distribution_score_;
    double sustainability_compliance_rate_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_resource_5fmanagement_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResourceUsage

// .seigr.resource_management.ResourceType type = 1;
inline void ResourceUsage::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::resource_management::ResourceType ResourceUsage::type() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.type)
  return _internal_type();
}
inline void ResourceUsage::set_type(::seigr::resource_management::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.type)
}
inline ::seigr::resource_management::ResourceType ResourceUsage::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceType>(_impl_.type_);
}
inline void ResourceUsage::_internal_set_type(::seigr::resource_management::ResourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// double usage_percentage = 2;
inline void ResourceUsage::clear_usage_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_percentage_ = 0;
}
inline double ResourceUsage::usage_percentage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.usage_percentage)
  return _internal_usage_percentage();
}
inline void ResourceUsage::set_usage_percentage(double value) {
  _internal_set_usage_percentage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.usage_percentage)
}
inline double ResourceUsage::_internal_usage_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usage_percentage_;
}
inline void ResourceUsage::_internal_set_usage_percentage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_percentage_ = value;
}

// double absolute_usage = 3;
inline void ResourceUsage::clear_absolute_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_usage_ = 0;
}
inline double ResourceUsage::absolute_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.absolute_usage)
  return _internal_absolute_usage();
}
inline void ResourceUsage::set_absolute_usage(double value) {
  _internal_set_absolute_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.absolute_usage)
}
inline double ResourceUsage::_internal_absolute_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_usage_;
}
inline void ResourceUsage::_internal_set_absolute_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_usage_ = value;
}

// string unit = 4;
inline void ResourceUsage::clear_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& ResourceUsage::unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsage::set_unit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.unit)
}
inline std::string* ResourceUsage::mutable_unit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsage.unit)
  return _s;
}
inline const std::string& ResourceUsage::_internal_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_.Get();
}
inline void ResourceUsage::_internal_set_unit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(value, GetArena());
}
inline std::string* ResourceUsage::_internal_mutable_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.unit_.Mutable( GetArena());
}
inline std::string* ResourceUsage::release_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsage.unit)
  return _impl_.unit_.Release();
}
inline void ResourceUsage::set_allocated_unit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsage.unit)
}

// string hyphen_id = 5;
inline void ResourceUsage::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& ResourceUsage::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsage::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.hyphen_id)
}
inline std::string* ResourceUsage::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsage.hyphen_id)
  return _s;
}
inline const std::string& ResourceUsage::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void ResourceUsage::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* ResourceUsage::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* ResourceUsage::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsage.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void ResourceUsage::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsage.hyphen_id)
}

// string timestamp = 6;
inline void ResourceUsage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& ResourceUsage::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsage::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.timestamp)
}
inline std::string* ResourceUsage::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsage.timestamp)
  return _s;
}
inline const std::string& ResourceUsage::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void ResourceUsage::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* ResourceUsage::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* ResourceUsage::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsage.timestamp)
  return _impl_.timestamp_.Release();
}
inline void ResourceUsage::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsage.timestamp)
}

// .seigr.resource_management.ResourceState state = 7;
inline void ResourceUsage::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::seigr::resource_management::ResourceState ResourceUsage::state() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.state)
  return _internal_state();
}
inline void ResourceUsage::set_state(::seigr::resource_management::ResourceState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.state)
}
inline ::seigr::resource_management::ResourceState ResourceUsage::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceState>(_impl_.state_);
}
inline void ResourceUsage::_internal_set_state(::seigr::resource_management::ResourceState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// map<string, string> usage_metadata = 8;
inline int ResourceUsage::_internal_usage_metadata_size() const {
  return _internal_usage_metadata().size();
}
inline int ResourceUsage::usage_metadata_size() const {
  return _internal_usage_metadata_size();
}
inline void ResourceUsage::clear_usage_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceUsage::_internal_usage_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usage_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceUsage::usage_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ResourceUsage.usage_metadata)
  return _internal_usage_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceUsage::_internal_mutable_usage_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.usage_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceUsage::mutable_usage_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ResourceUsage.usage_metadata)
  return _internal_mutable_usage_metadata();
}

// string application_id = 9;
inline void ResourceUsage::clear_application_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& ResourceUsage::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsage::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.application_id)
}
inline std::string* ResourceUsage::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsage.application_id)
  return _s;
}
inline const std::string& ResourceUsage::_internal_application_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.application_id_.Get();
}
inline void ResourceUsage::_internal_set_application_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* ResourceUsage::_internal_mutable_application_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* ResourceUsage::release_application_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsage.application_id)
  return _impl_.application_id_.Release();
}
inline void ResourceUsage::set_allocated_application_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.application_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.application_id_.IsDefault()) {
    _impl_.application_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsage.application_id)
}

// double temperature = 10;
inline void ResourceUsage::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double ResourceUsage::temperature() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.temperature)
  return _internal_temperature();
}
inline void ResourceUsage::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.temperature)
}
inline double ResourceUsage::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void ResourceUsage::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// double resource_efficiency_score = 11;
inline void ResourceUsage::clear_resource_efficiency_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_efficiency_score_ = 0;
}
inline double ResourceUsage::resource_efficiency_score() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.resource_efficiency_score)
  return _internal_resource_efficiency_score();
}
inline void ResourceUsage::set_resource_efficiency_score(double value) {
  _internal_set_resource_efficiency_score(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.resource_efficiency_score)
}
inline double ResourceUsage::_internal_resource_efficiency_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_efficiency_score_;
}
inline void ResourceUsage::_internal_set_resource_efficiency_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_efficiency_score_ = value;
}

// double power_consumption = 12;
inline void ResourceUsage::clear_power_consumption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_consumption_ = 0;
}
inline double ResourceUsage::power_consumption() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.power_consumption)
  return _internal_power_consumption();
}
inline void ResourceUsage::set_power_consumption(double value) {
  _internal_set_power_consumption(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.power_consumption)
}
inline double ResourceUsage::_internal_power_consumption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.power_consumption_;
}
inline void ResourceUsage::_internal_set_power_consumption(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_consumption_ = value;
}

// bool sustainable_use_flag = 13;
inline void ResourceUsage::clear_sustainable_use_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainable_use_flag_ = false;
}
inline bool ResourceUsage::sustainable_use_flag() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsage.sustainable_use_flag)
  return _internal_sustainable_use_flag();
}
inline void ResourceUsage::set_sustainable_use_flag(bool value) {
  _internal_set_sustainable_use_flag(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsage.sustainable_use_flag)
}
inline bool ResourceUsage::_internal_sustainable_use_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sustainable_use_flag_;
}
inline void ResourceUsage::_internal_set_sustainable_use_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainable_use_flag_ = value;
}

// -------------------------------------------------------------------

// ResourceLimits

// .seigr.resource_management.ResourceType type = 1;
inline void ResourceLimits::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::resource_management::ResourceType ResourceLimits::type() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.type)
  return _internal_type();
}
inline void ResourceLimits::set_type(::seigr::resource_management::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.type)
}
inline ::seigr::resource_management::ResourceType ResourceLimits::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceType>(_impl_.type_);
}
inline void ResourceLimits::_internal_set_type(::seigr::resource_management::ResourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// double warning_threshold = 2;
inline void ResourceLimits::clear_warning_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_threshold_ = 0;
}
inline double ResourceLimits::warning_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.warning_threshold)
  return _internal_warning_threshold();
}
inline void ResourceLimits::set_warning_threshold(double value) {
  _internal_set_warning_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.warning_threshold)
}
inline double ResourceLimits::_internal_warning_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warning_threshold_;
}
inline void ResourceLimits::_internal_set_warning_threshold(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_threshold_ = value;
}

// double critical_threshold = 3;
inline void ResourceLimits::clear_critical_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_threshold_ = 0;
}
inline double ResourceLimits::critical_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.critical_threshold)
  return _internal_critical_threshold();
}
inline void ResourceLimits::set_critical_threshold(double value) {
  _internal_set_critical_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.critical_threshold)
}
inline double ResourceLimits::_internal_critical_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.critical_threshold_;
}
inline void ResourceLimits::_internal_set_critical_threshold(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_threshold_ = value;
}

// double absolute_max = 4;
inline void ResourceLimits::clear_absolute_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_max_ = 0;
}
inline double ResourceLimits::absolute_max() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.absolute_max)
  return _internal_absolute_max();
}
inline void ResourceLimits::set_absolute_max(double value) {
  _internal_set_absolute_max(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.absolute_max)
}
inline double ResourceLimits::_internal_absolute_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_max_;
}
inline void ResourceLimits::_internal_set_absolute_max(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_max_ = value;
}

// string unit = 5;
inline void ResourceLimits::clear_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& ResourceLimits::unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceLimits::set_unit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.unit)
}
inline std::string* ResourceLimits::mutable_unit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceLimits.unit)
  return _s;
}
inline const std::string& ResourceLimits::_internal_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_.Get();
}
inline void ResourceLimits::_internal_set_unit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(value, GetArena());
}
inline std::string* ResourceLimits::_internal_mutable_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.unit_.Mutable( GetArena());
}
inline std::string* ResourceLimits::release_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceLimits.unit)
  return _impl_.unit_.Release();
}
inline void ResourceLimits::set_allocated_unit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceLimits.unit)
}

// bool enforce_limits = 6;
inline void ResourceLimits::clear_enforce_limits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_limits_ = false;
}
inline bool ResourceLimits::enforce_limits() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.enforce_limits)
  return _internal_enforce_limits();
}
inline void ResourceLimits::set_enforce_limits(bool value) {
  _internal_set_enforce_limits(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.enforce_limits)
}
inline bool ResourceLimits::_internal_enforce_limits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforce_limits_;
}
inline void ResourceLimits::_internal_set_enforce_limits(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_limits_ = value;
}

// string escalation_contact = 7;
inline void ResourceLimits::clear_escalation_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_contact_.ClearToEmpty();
}
inline const std::string& ResourceLimits::escalation_contact() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.escalation_contact)
  return _internal_escalation_contact();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceLimits::set_escalation_contact(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_contact_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.escalation_contact)
}
inline std::string* ResourceLimits::mutable_escalation_contact() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_contact();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceLimits.escalation_contact)
  return _s;
}
inline const std::string& ResourceLimits::_internal_escalation_contact() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_contact_.Get();
}
inline void ResourceLimits::_internal_set_escalation_contact(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_contact_.Set(value, GetArena());
}
inline std::string* ResourceLimits::_internal_mutable_escalation_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_contact_.Mutable( GetArena());
}
inline std::string* ResourceLimits::release_escalation_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceLimits.escalation_contact)
  return _impl_.escalation_contact_.Release();
}
inline void ResourceLimits::set_allocated_escalation_contact(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_contact_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_contact_.IsDefault()) {
    _impl_.escalation_contact_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceLimits.escalation_contact)
}

// int32 max_continuous_overload_seconds = 8;
inline void ResourceLimits::clear_max_continuous_overload_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_continuous_overload_seconds_ = 0;
}
inline ::int32_t ResourceLimits::max_continuous_overload_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.max_continuous_overload_seconds)
  return _internal_max_continuous_overload_seconds();
}
inline void ResourceLimits::set_max_continuous_overload_seconds(::int32_t value) {
  _internal_set_max_continuous_overload_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.max_continuous_overload_seconds)
}
inline ::int32_t ResourceLimits::_internal_max_continuous_overload_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_continuous_overload_seconds_;
}
inline void ResourceLimits::_internal_set_max_continuous_overload_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_continuous_overload_seconds_ = value;
}

// string auto_scale_action = 9;
inline void ResourceLimits::clear_auto_scale_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_action_.ClearToEmpty();
}
inline const std::string& ResourceLimits::auto_scale_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.auto_scale_action)
  return _internal_auto_scale_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceLimits::set_auto_scale_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.auto_scale_action)
}
inline std::string* ResourceLimits::mutable_auto_scale_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_auto_scale_action();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceLimits.auto_scale_action)
  return _s;
}
inline const std::string& ResourceLimits::_internal_auto_scale_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_scale_action_.Get();
}
inline void ResourceLimits::_internal_set_auto_scale_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_action_.Set(value, GetArena());
}
inline std::string* ResourceLimits::_internal_mutable_auto_scale_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.auto_scale_action_.Mutable( GetArena());
}
inline std::string* ResourceLimits::release_auto_scale_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceLimits.auto_scale_action)
  return _impl_.auto_scale_action_.Release();
}
inline void ResourceLimits::set_allocated_auto_scale_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auto_scale_action_.IsDefault()) {
    _impl_.auto_scale_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceLimits.auto_scale_action)
}

// double usage_decay_rate = 10;
inline void ResourceLimits::clear_usage_decay_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_decay_rate_ = 0;
}
inline double ResourceLimits::usage_decay_rate() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.usage_decay_rate)
  return _internal_usage_decay_rate();
}
inline void ResourceLimits::set_usage_decay_rate(double value) {
  _internal_set_usage_decay_rate(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.usage_decay_rate)
}
inline double ResourceLimits::_internal_usage_decay_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usage_decay_rate_;
}
inline void ResourceLimits::_internal_set_usage_decay_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_decay_rate_ = value;
}

// double sustainable_limit = 11;
inline void ResourceLimits::clear_sustainable_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainable_limit_ = 0;
}
inline double ResourceLimits::sustainable_limit() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceLimits.sustainable_limit)
  return _internal_sustainable_limit();
}
inline void ResourceLimits::set_sustainable_limit(double value) {
  _internal_set_sustainable_limit(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceLimits.sustainable_limit)
}
inline double ResourceLimits::_internal_sustainable_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sustainable_limit_;
}
inline void ResourceLimits::_internal_set_sustainable_limit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainable_limit_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResourceMonitorConfig

// int32 check_interval_seconds = 1;
inline void ResourceMonitorConfig::clear_check_interval_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_interval_seconds_ = 0;
}
inline ::int32_t ResourceMonitorConfig::check_interval_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.check_interval_seconds)
  return _internal_check_interval_seconds();
}
inline void ResourceMonitorConfig::set_check_interval_seconds(::int32_t value) {
  _internal_set_check_interval_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.check_interval_seconds)
}
inline ::int32_t ResourceMonitorConfig::_internal_check_interval_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.check_interval_seconds_;
}
inline void ResourceMonitorConfig::_internal_set_check_interval_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_interval_seconds_ = value;
}

// repeated .seigr.resource_management.ResourceLimits resource_limits = 2;
inline int ResourceMonitorConfig::_internal_resource_limits_size() const {
  return _internal_resource_limits().size();
}
inline int ResourceMonitorConfig::resource_limits_size() const {
  return _internal_resource_limits_size();
}
inline void ResourceMonitorConfig::clear_resource_limits() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_limits_.Clear();
}
inline ::seigr::resource_management::ResourceLimits* ResourceMonitorConfig::mutable_resource_limits(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceMonitorConfig.resource_limits)
  return _internal_mutable_resource_limits()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>* ResourceMonitorConfig::mutable_resource_limits()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.resource_management.ResourceMonitorConfig.resource_limits)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_resource_limits();
}
inline const ::seigr::resource_management::ResourceLimits& ResourceMonitorConfig::resource_limits(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.resource_limits)
  return _internal_resource_limits().Get(index);
}
inline ::seigr::resource_management::ResourceLimits* ResourceMonitorConfig::add_resource_limits() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::resource_management::ResourceLimits* _add = _internal_mutable_resource_limits()->Add();
  // @@protoc_insertion_point(field_add:seigr.resource_management.ResourceMonitorConfig.resource_limits)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>& ResourceMonitorConfig::resource_limits() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.resource_management.ResourceMonitorConfig.resource_limits)
  return _internal_resource_limits();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>&
ResourceMonitorConfig::_internal_resource_limits() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_limits_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceLimits>*
ResourceMonitorConfig::_internal_mutable_resource_limits() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.resource_limits_;
}

// bool enable_alerting = 3;
inline void ResourceMonitorConfig::clear_enable_alerting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_alerting_ = false;
}
inline bool ResourceMonitorConfig::enable_alerting() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.enable_alerting)
  return _internal_enable_alerting();
}
inline void ResourceMonitorConfig::set_enable_alerting(bool value) {
  _internal_set_enable_alerting(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.enable_alerting)
}
inline bool ResourceMonitorConfig::_internal_enable_alerting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_alerting_;
}
inline void ResourceMonitorConfig::_internal_set_enable_alerting(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_alerting_ = value;
}

// map<string, string> config_metadata = 4;
inline int ResourceMonitorConfig::_internal_config_metadata_size() const {
  return _internal_config_metadata().size();
}
inline int ResourceMonitorConfig::config_metadata_size() const {
  return _internal_config_metadata_size();
}
inline void ResourceMonitorConfig::clear_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceMonitorConfig::_internal_config_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.config_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceMonitorConfig::config_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ResourceMonitorConfig.config_metadata)
  return _internal_config_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceMonitorConfig::_internal_mutable_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.config_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceMonitorConfig::mutable_config_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ResourceMonitorConfig.config_metadata)
  return _internal_mutable_config_metadata();
}

// string alert_protocol = 5;
inline void ResourceMonitorConfig::clear_alert_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_protocol_.ClearToEmpty();
}
inline const std::string& ResourceMonitorConfig::alert_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.alert_protocol)
  return _internal_alert_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceMonitorConfig::set_alert_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.alert_protocol)
}
inline std::string* ResourceMonitorConfig::mutable_alert_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alert_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceMonitorConfig.alert_protocol)
  return _s;
}
inline const std::string& ResourceMonitorConfig::_internal_alert_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_protocol_.Get();
}
inline void ResourceMonitorConfig::_internal_set_alert_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_protocol_.Set(value, GetArena());
}
inline std::string* ResourceMonitorConfig::_internal_mutable_alert_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alert_protocol_.Mutable( GetArena());
}
inline std::string* ResourceMonitorConfig::release_alert_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceMonitorConfig.alert_protocol)
  return _impl_.alert_protocol_.Release();
}
inline void ResourceMonitorConfig::set_allocated_alert_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alert_protocol_.IsDefault()) {
    _impl_.alert_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceMonitorConfig.alert_protocol)
}

// int32 grace_period_seconds = 6;
inline void ResourceMonitorConfig::clear_grace_period_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grace_period_seconds_ = 0;
}
inline ::int32_t ResourceMonitorConfig::grace_period_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.grace_period_seconds)
  return _internal_grace_period_seconds();
}
inline void ResourceMonitorConfig::set_grace_period_seconds(::int32_t value) {
  _internal_set_grace_period_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.grace_period_seconds)
}
inline ::int32_t ResourceMonitorConfig::_internal_grace_period_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grace_period_seconds_;
}
inline void ResourceMonitorConfig::_internal_set_grace_period_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grace_period_seconds_ = value;
}

// int32 auto_scale_threshold = 7;
inline void ResourceMonitorConfig::clear_auto_scale_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_threshold_ = 0;
}
inline ::int32_t ResourceMonitorConfig::auto_scale_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.auto_scale_threshold)
  return _internal_auto_scale_threshold();
}
inline void ResourceMonitorConfig::set_auto_scale_threshold(::int32_t value) {
  _internal_set_auto_scale_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.auto_scale_threshold)
}
inline ::int32_t ResourceMonitorConfig::_internal_auto_scale_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_scale_threshold_;
}
inline void ResourceMonitorConfig::_internal_set_auto_scale_threshold(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scale_threshold_ = value;
}

// map<string, int32> alert_severity_levels = 8;
inline int ResourceMonitorConfig::_internal_alert_severity_levels_size() const {
  return _internal_alert_severity_levels().size();
}
inline int ResourceMonitorConfig::alert_severity_levels_size() const {
  return _internal_alert_severity_levels_size();
}
inline void ResourceMonitorConfig::clear_alert_severity_levels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_severity_levels_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& ResourceMonitorConfig::_internal_alert_severity_levels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_severity_levels_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& ResourceMonitorConfig::alert_severity_levels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ResourceMonitorConfig.alert_severity_levels)
  return _internal_alert_severity_levels();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* ResourceMonitorConfig::_internal_mutable_alert_severity_levels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alert_severity_levels_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* ResourceMonitorConfig::mutable_alert_severity_levels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ResourceMonitorConfig.alert_severity_levels)
  return _internal_mutable_alert_severity_levels();
}

// int32 alert_frequency_limit = 9;
inline void ResourceMonitorConfig::clear_alert_frequency_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_frequency_limit_ = 0;
}
inline ::int32_t ResourceMonitorConfig::alert_frequency_limit() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.alert_frequency_limit)
  return _internal_alert_frequency_limit();
}
inline void ResourceMonitorConfig::set_alert_frequency_limit(::int32_t value) {
  _internal_set_alert_frequency_limit(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.alert_frequency_limit)
}
inline ::int32_t ResourceMonitorConfig::_internal_alert_frequency_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_frequency_limit_;
}
inline void ResourceMonitorConfig::_internal_set_alert_frequency_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_frequency_limit_ = value;
}

// double load_balancing_threshold = 10;
inline void ResourceMonitorConfig::clear_load_balancing_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_balancing_threshold_ = 0;
}
inline double ResourceMonitorConfig::load_balancing_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.load_balancing_threshold)
  return _internal_load_balancing_threshold();
}
inline void ResourceMonitorConfig::set_load_balancing_threshold(double value) {
  _internal_set_load_balancing_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.load_balancing_threshold)
}
inline double ResourceMonitorConfig::_internal_load_balancing_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load_balancing_threshold_;
}
inline void ResourceMonitorConfig::_internal_set_load_balancing_threshold(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_balancing_threshold_ = value;
}

// int32 resource_efficiency_adjustment_interval = 11;
inline void ResourceMonitorConfig::clear_resource_efficiency_adjustment_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_efficiency_adjustment_interval_ = 0;
}
inline ::int32_t ResourceMonitorConfig::resource_efficiency_adjustment_interval() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceMonitorConfig.resource_efficiency_adjustment_interval)
  return _internal_resource_efficiency_adjustment_interval();
}
inline void ResourceMonitorConfig::set_resource_efficiency_adjustment_interval(::int32_t value) {
  _internal_set_resource_efficiency_adjustment_interval(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceMonitorConfig.resource_efficiency_adjustment_interval)
}
inline ::int32_t ResourceMonitorConfig::_internal_resource_efficiency_adjustment_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resource_efficiency_adjustment_interval_;
}
inline void ResourceMonitorConfig::_internal_set_resource_efficiency_adjustment_interval(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resource_efficiency_adjustment_interval_ = value;
}

// -------------------------------------------------------------------

// ResourceUsageSummary

// .seigr.resource_management.ResourceType type = 1;
inline void ResourceUsageSummary::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::resource_management::ResourceType ResourceUsageSummary::type() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.type)
  return _internal_type();
}
inline void ResourceUsageSummary::set_type(::seigr::resource_management::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.type)
}
inline ::seigr::resource_management::ResourceType ResourceUsageSummary::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceType>(_impl_.type_);
}
inline void ResourceUsageSummary::_internal_set_type(::seigr::resource_management::ResourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string hyphen_id = 2;
inline void ResourceUsageSummary::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& ResourceUsageSummary::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsageSummary::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.hyphen_id)
}
inline std::string* ResourceUsageSummary::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsageSummary.hyphen_id)
  return _s;
}
inline const std::string& ResourceUsageSummary::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void ResourceUsageSummary::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* ResourceUsageSummary::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* ResourceUsageSummary::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsageSummary.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void ResourceUsageSummary::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsageSummary.hyphen_id)
}

// double average_usage = 3;
inline void ResourceUsageSummary::clear_average_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_usage_ = 0;
}
inline double ResourceUsageSummary::average_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.average_usage)
  return _internal_average_usage();
}
inline void ResourceUsageSummary::set_average_usage(double value) {
  _internal_set_average_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.average_usage)
}
inline double ResourceUsageSummary::_internal_average_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_usage_;
}
inline void ResourceUsageSummary::_internal_set_average_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_usage_ = value;
}

// double peak_usage = 4;
inline void ResourceUsageSummary::clear_peak_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_usage_ = 0;
}
inline double ResourceUsageSummary::peak_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.peak_usage)
  return _internal_peak_usage();
}
inline void ResourceUsageSummary::set_peak_usage(double value) {
  _internal_set_peak_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.peak_usage)
}
inline double ResourceUsageSummary::_internal_peak_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.peak_usage_;
}
inline void ResourceUsageSummary::_internal_set_peak_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peak_usage_ = value;
}

// double minimum_usage = 5;
inline void ResourceUsageSummary::clear_minimum_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_usage_ = 0;
}
inline double ResourceUsageSummary::minimum_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.minimum_usage)
  return _internal_minimum_usage();
}
inline void ResourceUsageSummary::set_minimum_usage(double value) {
  _internal_set_minimum_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.minimum_usage)
}
inline double ResourceUsageSummary::_internal_minimum_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minimum_usage_;
}
inline void ResourceUsageSummary::_internal_set_minimum_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_usage_ = value;
}

// double usage_standard_deviation = 6;
inline void ResourceUsageSummary::clear_usage_standard_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_standard_deviation_ = 0;
}
inline double ResourceUsageSummary::usage_standard_deviation() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.usage_standard_deviation)
  return _internal_usage_standard_deviation();
}
inline void ResourceUsageSummary::set_usage_standard_deviation(double value) {
  _internal_set_usage_standard_deviation(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.usage_standard_deviation)
}
inline double ResourceUsageSummary::_internal_usage_standard_deviation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usage_standard_deviation_;
}
inline void ResourceUsageSummary::_internal_set_usage_standard_deviation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_standard_deviation_ = value;
}

// string summary_period = 7;
inline void ResourceUsageSummary::clear_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.ClearToEmpty();
}
inline const std::string& ResourceUsageSummary::summary_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.summary_period)
  return _internal_summary_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceUsageSummary::set_summary_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.summary_period)
}
inline std::string* ResourceUsageSummary::mutable_summary_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary_period();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceUsageSummary.summary_period)
  return _s;
}
inline const std::string& ResourceUsageSummary::_internal_summary_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_period_.Get();
}
inline void ResourceUsageSummary::_internal_set_summary_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.Set(value, GetArena());
}
inline std::string* ResourceUsageSummary::_internal_mutable_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_period_.Mutable( GetArena());
}
inline std::string* ResourceUsageSummary::release_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceUsageSummary.summary_period)
  return _impl_.summary_period_.Release();
}
inline void ResourceUsageSummary::set_allocated_summary_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_period_.IsDefault()) {
    _impl_.summary_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceUsageSummary.summary_period)
}

// int32 threshold_exceed_count = 8;
inline void ResourceUsageSummary::clear_threshold_exceed_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_exceed_count_ = 0;
}
inline ::int32_t ResourceUsageSummary::threshold_exceed_count() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.threshold_exceed_count)
  return _internal_threshold_exceed_count();
}
inline void ResourceUsageSummary::set_threshold_exceed_count(::int32_t value) {
  _internal_set_threshold_exceed_count(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.threshold_exceed_count)
}
inline ::int32_t ResourceUsageSummary::_internal_threshold_exceed_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_exceed_count_;
}
inline void ResourceUsageSummary::_internal_set_threshold_exceed_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_exceed_count_ = value;
}

// double cost_estimate = 9;
inline void ResourceUsageSummary::clear_cost_estimate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_estimate_ = 0;
}
inline double ResourceUsageSummary::cost_estimate() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.cost_estimate)
  return _internal_cost_estimate();
}
inline void ResourceUsageSummary::set_cost_estimate(double value) {
  _internal_set_cost_estimate(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.cost_estimate)
}
inline double ResourceUsageSummary::_internal_cost_estimate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_estimate_;
}
inline void ResourceUsageSummary::_internal_set_cost_estimate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_estimate_ = value;
}

// int32 time_above_threshold = 10;
inline void ResourceUsageSummary::clear_time_above_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_above_threshold_ = 0;
}
inline ::int32_t ResourceUsageSummary::time_above_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.time_above_threshold)
  return _internal_time_above_threshold();
}
inline void ResourceUsageSummary::set_time_above_threshold(::int32_t value) {
  _internal_set_time_above_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.time_above_threshold)
}
inline ::int32_t ResourceUsageSummary::_internal_time_above_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_above_threshold_;
}
inline void ResourceUsageSummary::_internal_set_time_above_threshold(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_above_threshold_ = value;
}

// double efficiency_score_avg = 11;
inline void ResourceUsageSummary::clear_efficiency_score_avg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.efficiency_score_avg_ = 0;
}
inline double ResourceUsageSummary::efficiency_score_avg() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.efficiency_score_avg)
  return _internal_efficiency_score_avg();
}
inline void ResourceUsageSummary::set_efficiency_score_avg(double value) {
  _internal_set_efficiency_score_avg(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.efficiency_score_avg)
}
inline double ResourceUsageSummary::_internal_efficiency_score_avg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.efficiency_score_avg_;
}
inline void ResourceUsageSummary::_internal_set_efficiency_score_avg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.efficiency_score_avg_ = value;
}

// double power_consumption_avg = 12;
inline void ResourceUsageSummary::clear_power_consumption_avg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_consumption_avg_ = 0;
}
inline double ResourceUsageSummary::power_consumption_avg() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.power_consumption_avg)
  return _internal_power_consumption_avg();
}
inline void ResourceUsageSummary::set_power_consumption_avg(double value) {
  _internal_set_power_consumption_avg(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.power_consumption_avg)
}
inline double ResourceUsageSummary::_internal_power_consumption_avg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.power_consumption_avg_;
}
inline void ResourceUsageSummary::_internal_set_power_consumption_avg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_consumption_avg_ = value;
}

// bool sustainability_compliant = 13;
inline void ResourceUsageSummary::clear_sustainability_compliant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainability_compliant_ = false;
}
inline bool ResourceUsageSummary::sustainability_compliant() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceUsageSummary.sustainability_compliant)
  return _internal_sustainability_compliant();
}
inline void ResourceUsageSummary::set_sustainability_compliant(bool value) {
  _internal_set_sustainability_compliant(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceUsageSummary.sustainability_compliant)
}
inline bool ResourceUsageSummary::_internal_sustainability_compliant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sustainability_compliant_;
}
inline void ResourceUsageSummary::_internal_set_sustainability_compliant(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainability_compliant_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClusterResourceStatus

// string cluster_id = 1;
inline void ClusterResourceStatus::clear_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.ClearToEmpty();
}
inline const std::string& ClusterResourceStatus::cluster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.cluster_id)
  return _internal_cluster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterResourceStatus::set_cluster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.cluster_id)
}
inline std::string* ClusterResourceStatus::mutable_cluster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ClusterResourceStatus.cluster_id)
  return _s;
}
inline const std::string& ClusterResourceStatus::_internal_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_id_.Get();
}
inline void ClusterResourceStatus::_internal_set_cluster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(value, GetArena());
}
inline std::string* ClusterResourceStatus::_internal_mutable_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_id_.Mutable( GetArena());
}
inline std::string* ClusterResourceStatus::release_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ClusterResourceStatus.cluster_id)
  return _impl_.cluster_id_.Release();
}
inline void ClusterResourceStatus::set_allocated_cluster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cluster_id_.IsDefault()) {
    _impl_.cluster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ClusterResourceStatus.cluster_id)
}

// repeated .seigr.resource_management.ResourceUsageSummary hyphen_summaries = 2;
inline int ClusterResourceStatus::_internal_hyphen_summaries_size() const {
  return _internal_hyphen_summaries().size();
}
inline int ClusterResourceStatus::hyphen_summaries_size() const {
  return _internal_hyphen_summaries_size();
}
inline void ClusterResourceStatus::clear_hyphen_summaries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_summaries_.Clear();
}
inline ::seigr::resource_management::ResourceUsageSummary* ClusterResourceStatus::mutable_hyphen_summaries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ClusterResourceStatus.hyphen_summaries)
  return _internal_mutable_hyphen_summaries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>* ClusterResourceStatus::mutable_hyphen_summaries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.resource_management.ClusterResourceStatus.hyphen_summaries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hyphen_summaries();
}
inline const ::seigr::resource_management::ResourceUsageSummary& ClusterResourceStatus::hyphen_summaries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.hyphen_summaries)
  return _internal_hyphen_summaries().Get(index);
}
inline ::seigr::resource_management::ResourceUsageSummary* ClusterResourceStatus::add_hyphen_summaries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::resource_management::ResourceUsageSummary* _add = _internal_mutable_hyphen_summaries()->Add();
  // @@protoc_insertion_point(field_add:seigr.resource_management.ClusterResourceStatus.hyphen_summaries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>& ClusterResourceStatus::hyphen_summaries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.resource_management.ClusterResourceStatus.hyphen_summaries)
  return _internal_hyphen_summaries();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>&
ClusterResourceStatus::_internal_hyphen_summaries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_summaries_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::resource_management::ResourceUsageSummary>*
ClusterResourceStatus::_internal_mutable_hyphen_summaries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hyphen_summaries_;
}

// map<string, double> cluster_average_usage = 3;
inline int ClusterResourceStatus::_internal_cluster_average_usage_size() const {
  return _internal_cluster_average_usage().size();
}
inline int ClusterResourceStatus::cluster_average_usage_size() const {
  return _internal_cluster_average_usage_size();
}
inline void ClusterResourceStatus::clear_cluster_average_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_average_usage_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& ClusterResourceStatus::_internal_cluster_average_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_average_usage_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& ClusterResourceStatus::cluster_average_usage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ClusterResourceStatus.cluster_average_usage)
  return _internal_cluster_average_usage();
}
inline ::google::protobuf::Map<std::string, double>* ClusterResourceStatus::_internal_mutable_cluster_average_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_average_usage_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* ClusterResourceStatus::mutable_cluster_average_usage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ClusterResourceStatus.cluster_average_usage)
  return _internal_mutable_cluster_average_usage();
}

// map<string, double> cluster_peak_usage = 4;
inline int ClusterResourceStatus::_internal_cluster_peak_usage_size() const {
  return _internal_cluster_peak_usage().size();
}
inline int ClusterResourceStatus::cluster_peak_usage_size() const {
  return _internal_cluster_peak_usage_size();
}
inline void ClusterResourceStatus::clear_cluster_peak_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_peak_usage_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& ClusterResourceStatus::_internal_cluster_peak_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_peak_usage_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& ClusterResourceStatus::cluster_peak_usage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ClusterResourceStatus.cluster_peak_usage)
  return _internal_cluster_peak_usage();
}
inline ::google::protobuf::Map<std::string, double>* ClusterResourceStatus::_internal_mutable_cluster_peak_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_peak_usage_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* ClusterResourceStatus::mutable_cluster_peak_usage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ClusterResourceStatus.cluster_peak_usage)
  return _internal_mutable_cluster_peak_usage();
}

// string last_updated = 5;
inline void ClusterResourceStatus::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& ClusterResourceStatus::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterResourceStatus::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.last_updated)
}
inline std::string* ClusterResourceStatus::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ClusterResourceStatus.last_updated)
  return _s;
}
inline const std::string& ClusterResourceStatus::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void ClusterResourceStatus::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* ClusterResourceStatus::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* ClusterResourceStatus::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ClusterResourceStatus.last_updated)
  return _impl_.last_updated_.Release();
}
inline void ClusterResourceStatus::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ClusterResourceStatus.last_updated)
}

// string health_status = 6;
inline void ClusterResourceStatus::clear_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.ClearToEmpty();
}
inline const std::string& ClusterResourceStatus::health_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.health_status)
  return _internal_health_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterResourceStatus::set_health_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.health_status)
}
inline std::string* ClusterResourceStatus::mutable_health_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_health_status();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ClusterResourceStatus.health_status)
  return _s;
}
inline const std::string& ClusterResourceStatus::_internal_health_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.health_status_.Get();
}
inline void ClusterResourceStatus::_internal_set_health_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.Set(value, GetArena());
}
inline std::string* ClusterResourceStatus::_internal_mutable_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.health_status_.Mutable( GetArena());
}
inline std::string* ClusterResourceStatus::release_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ClusterResourceStatus.health_status)
  return _impl_.health_status_.Release();
}
inline void ClusterResourceStatus::set_allocated_health_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.health_status_.IsDefault()) {
    _impl_.health_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ClusterResourceStatus.health_status)
}

// int32 overloaded_hyphens_count = 7;
inline void ClusterResourceStatus::clear_overloaded_hyphens_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.overloaded_hyphens_count_ = 0;
}
inline ::int32_t ClusterResourceStatus::overloaded_hyphens_count() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.overloaded_hyphens_count)
  return _internal_overloaded_hyphens_count();
}
inline void ClusterResourceStatus::set_overloaded_hyphens_count(::int32_t value) {
  _internal_set_overloaded_hyphens_count(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.overloaded_hyphens_count)
}
inline ::int32_t ClusterResourceStatus::_internal_overloaded_hyphens_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.overloaded_hyphens_count_;
}
inline void ClusterResourceStatus::_internal_set_overloaded_hyphens_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.overloaded_hyphens_count_ = value;
}

// string recovery_action_plan = 8;
inline void ClusterResourceStatus::clear_recovery_action_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_action_plan_.ClearToEmpty();
}
inline const std::string& ClusterResourceStatus::recovery_action_plan() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.recovery_action_plan)
  return _internal_recovery_action_plan();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterResourceStatus::set_recovery_action_plan(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_action_plan_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.recovery_action_plan)
}
inline std::string* ClusterResourceStatus::mutable_recovery_action_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recovery_action_plan();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ClusterResourceStatus.recovery_action_plan)
  return _s;
}
inline const std::string& ClusterResourceStatus::_internal_recovery_action_plan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recovery_action_plan_.Get();
}
inline void ClusterResourceStatus::_internal_set_recovery_action_plan(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_action_plan_.Set(value, GetArena());
}
inline std::string* ClusterResourceStatus::_internal_mutable_recovery_action_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recovery_action_plan_.Mutable( GetArena());
}
inline std::string* ClusterResourceStatus::release_recovery_action_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ClusterResourceStatus.recovery_action_plan)
  return _impl_.recovery_action_plan_.Release();
}
inline void ClusterResourceStatus::set_allocated_recovery_action_plan(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovery_action_plan_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recovery_action_plan_.IsDefault()) {
    _impl_.recovery_action_plan_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ClusterResourceStatus.recovery_action_plan)
}

// double cluster_utilization_score = 9;
inline void ClusterResourceStatus::clear_cluster_utilization_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_utilization_score_ = 0;
}
inline double ClusterResourceStatus::cluster_utilization_score() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.cluster_utilization_score)
  return _internal_cluster_utilization_score();
}
inline void ClusterResourceStatus::set_cluster_utilization_score(double value) {
  _internal_set_cluster_utilization_score(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.cluster_utilization_score)
}
inline double ClusterResourceStatus::_internal_cluster_utilization_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_utilization_score_;
}
inline void ClusterResourceStatus::_internal_set_cluster_utilization_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_utilization_score_ = value;
}

// double load_distribution_score = 10;
inline void ClusterResourceStatus::clear_load_distribution_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_distribution_score_ = 0;
}
inline double ClusterResourceStatus::load_distribution_score() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.load_distribution_score)
  return _internal_load_distribution_score();
}
inline void ClusterResourceStatus::set_load_distribution_score(double value) {
  _internal_set_load_distribution_score(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.load_distribution_score)
}
inline double ClusterResourceStatus::_internal_load_distribution_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load_distribution_score_;
}
inline void ClusterResourceStatus::_internal_set_load_distribution_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_distribution_score_ = value;
}

// double sustainability_compliance_rate = 11;
inline void ClusterResourceStatus::clear_sustainability_compliance_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainability_compliance_rate_ = 0;
}
inline double ClusterResourceStatus::sustainability_compliance_rate() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.sustainability_compliance_rate)
  return _internal_sustainability_compliance_rate();
}
inline void ClusterResourceStatus::set_sustainability_compliance_rate(double value) {
  _internal_set_sustainability_compliance_rate(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.sustainability_compliance_rate)
}
inline double ClusterResourceStatus::_internal_sustainability_compliance_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sustainability_compliance_rate_;
}
inline void ClusterResourceStatus::_internal_set_sustainability_compliance_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sustainability_compliance_rate_ = value;
}

// int32 adaptive_scaling_events = 12;
inline void ClusterResourceStatus::clear_adaptive_scaling_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_events_ = 0;
}
inline ::int32_t ClusterResourceStatus::adaptive_scaling_events() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ClusterResourceStatus.adaptive_scaling_events)
  return _internal_adaptive_scaling_events();
}
inline void ClusterResourceStatus::set_adaptive_scaling_events(::int32_t value) {
  _internal_set_adaptive_scaling_events(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ClusterResourceStatus.adaptive_scaling_events)
}
inline ::int32_t ClusterResourceStatus::_internal_adaptive_scaling_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_scaling_events_;
}
inline void ClusterResourceStatus::_internal_set_adaptive_scaling_events(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_events_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResourceDemandForecast

// .seigr.resource_management.ResourceType type = 1;
inline void ResourceDemandForecast::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::resource_management::ResourceType ResourceDemandForecast::type() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.type)
  return _internal_type();
}
inline void ResourceDemandForecast::set_type(::seigr::resource_management::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.type)
}
inline ::seigr::resource_management::ResourceType ResourceDemandForecast::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceType>(_impl_.type_);
}
inline void ResourceDemandForecast::_internal_set_type(::seigr::resource_management::ResourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string cluster_id = 2;
inline void ResourceDemandForecast::clear_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.ClearToEmpty();
}
inline const std::string& ResourceDemandForecast::cluster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.cluster_id)
  return _internal_cluster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDemandForecast::set_cluster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.cluster_id)
}
inline std::string* ResourceDemandForecast::mutable_cluster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDemandForecast.cluster_id)
  return _s;
}
inline const std::string& ResourceDemandForecast::_internal_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_id_.Get();
}
inline void ResourceDemandForecast::_internal_set_cluster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(value, GetArena());
}
inline std::string* ResourceDemandForecast::_internal_mutable_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_id_.Mutable( GetArena());
}
inline std::string* ResourceDemandForecast::release_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDemandForecast.cluster_id)
  return _impl_.cluster_id_.Release();
}
inline void ResourceDemandForecast::set_allocated_cluster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cluster_id_.IsDefault()) {
    _impl_.cluster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDemandForecast.cluster_id)
}

// string forecast_period = 3;
inline void ResourceDemandForecast::clear_forecast_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_period_.ClearToEmpty();
}
inline const std::string& ResourceDemandForecast::forecast_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.forecast_period)
  return _internal_forecast_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDemandForecast::set_forecast_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.forecast_period)
}
inline std::string* ResourceDemandForecast::mutable_forecast_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_forecast_period();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDemandForecast.forecast_period)
  return _s;
}
inline const std::string& ResourceDemandForecast::_internal_forecast_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecast_period_.Get();
}
inline void ResourceDemandForecast::_internal_set_forecast_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_period_.Set(value, GetArena());
}
inline std::string* ResourceDemandForecast::_internal_mutable_forecast_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.forecast_period_.Mutable( GetArena());
}
inline std::string* ResourceDemandForecast::release_forecast_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDemandForecast.forecast_period)
  return _impl_.forecast_period_.Release();
}
inline void ResourceDemandForecast::set_allocated_forecast_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.forecast_period_.IsDefault()) {
    _impl_.forecast_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDemandForecast.forecast_period)
}

// double projected_peak_usage = 4;
inline void ResourceDemandForecast::clear_projected_peak_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.projected_peak_usage_ = 0;
}
inline double ResourceDemandForecast::projected_peak_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.projected_peak_usage)
  return _internal_projected_peak_usage();
}
inline void ResourceDemandForecast::set_projected_peak_usage(double value) {
  _internal_set_projected_peak_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.projected_peak_usage)
}
inline double ResourceDemandForecast::_internal_projected_peak_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.projected_peak_usage_;
}
inline void ResourceDemandForecast::_internal_set_projected_peak_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.projected_peak_usage_ = value;
}

// double projected_average_usage = 5;
inline void ResourceDemandForecast::clear_projected_average_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.projected_average_usage_ = 0;
}
inline double ResourceDemandForecast::projected_average_usage() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.projected_average_usage)
  return _internal_projected_average_usage();
}
inline void ResourceDemandForecast::set_projected_average_usage(double value) {
  _internal_set_projected_average_usage(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.projected_average_usage)
}
inline double ResourceDemandForecast::_internal_projected_average_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.projected_average_usage_;
}
inline void ResourceDemandForecast::_internal_set_projected_average_usage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.projected_average_usage_ = value;
}

// double confidence_level = 6;
inline void ResourceDemandForecast::clear_confidence_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_level_ = 0;
}
inline double ResourceDemandForecast::confidence_level() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.confidence_level)
  return _internal_confidence_level();
}
inline void ResourceDemandForecast::set_confidence_level(double value) {
  _internal_set_confidence_level(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.confidence_level)
}
inline double ResourceDemandForecast::_internal_confidence_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_level_;
}
inline void ResourceDemandForecast::_internal_set_confidence_level(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_level_ = value;
}

// string forecast_created_at = 7;
inline void ResourceDemandForecast::clear_forecast_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_created_at_.ClearToEmpty();
}
inline const std::string& ResourceDemandForecast::forecast_created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDemandForecast.forecast_created_at)
  return _internal_forecast_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDemandForecast::set_forecast_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDemandForecast.forecast_created_at)
}
inline std::string* ResourceDemandForecast::mutable_forecast_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_forecast_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDemandForecast.forecast_created_at)
  return _s;
}
inline const std::string& ResourceDemandForecast::_internal_forecast_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecast_created_at_.Get();
}
inline void ResourceDemandForecast::_internal_set_forecast_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_created_at_.Set(value, GetArena());
}
inline std::string* ResourceDemandForecast::_internal_mutable_forecast_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.forecast_created_at_.Mutable( GetArena());
}
inline std::string* ResourceDemandForecast::release_forecast_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDemandForecast.forecast_created_at)
  return _impl_.forecast_created_at_.Release();
}
inline void ResourceDemandForecast::set_allocated_forecast_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.forecast_created_at_.IsDefault()) {
    _impl_.forecast_created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDemandForecast.forecast_created_at)
}

// map<string, string> forecast_metadata = 8;
inline int ResourceDemandForecast::_internal_forecast_metadata_size() const {
  return _internal_forecast_metadata().size();
}
inline int ResourceDemandForecast::forecast_metadata_size() const {
  return _internal_forecast_metadata_size();
}
inline void ResourceDemandForecast::clear_forecast_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceDemandForecast::_internal_forecast_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecast_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceDemandForecast::forecast_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ResourceDemandForecast.forecast_metadata)
  return _internal_forecast_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceDemandForecast::_internal_mutable_forecast_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.forecast_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceDemandForecast::mutable_forecast_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ResourceDemandForecast.forecast_metadata)
  return _internal_mutable_forecast_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResourceDistribution

// string distribution_id = 1;
inline void ResourceDistribution::clear_distribution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_id_.ClearToEmpty();
}
inline const std::string& ResourceDistribution::distribution_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.distribution_id)
  return _internal_distribution_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDistribution::set_distribution_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.distribution_id)
}
inline std::string* ResourceDistribution::mutable_distribution_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_distribution_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDistribution.distribution_id)
  return _s;
}
inline const std::string& ResourceDistribution::_internal_distribution_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribution_id_.Get();
}
inline void ResourceDistribution::_internal_set_distribution_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_id_.Set(value, GetArena());
}
inline std::string* ResourceDistribution::_internal_mutable_distribution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.distribution_id_.Mutable( GetArena());
}
inline std::string* ResourceDistribution::release_distribution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDistribution.distribution_id)
  return _impl_.distribution_id_.Release();
}
inline void ResourceDistribution::set_allocated_distribution_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.distribution_id_.IsDefault()) {
    _impl_.distribution_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDistribution.distribution_id)
}

// .seigr.resource_management.ResourceType type = 2;
inline void ResourceDistribution::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::resource_management::ResourceType ResourceDistribution::type() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.type)
  return _internal_type();
}
inline void ResourceDistribution::set_type(::seigr::resource_management::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.type)
}
inline ::seigr::resource_management::ResourceType ResourceDistribution::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::resource_management::ResourceType>(_impl_.type_);
}
inline void ResourceDistribution::_internal_set_type(::seigr::resource_management::ResourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string source_cluster_id = 3;
inline void ResourceDistribution::clear_source_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_cluster_id_.ClearToEmpty();
}
inline const std::string& ResourceDistribution::source_cluster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.source_cluster_id)
  return _internal_source_cluster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDistribution::set_source_cluster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_cluster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.source_cluster_id)
}
inline std::string* ResourceDistribution::mutable_source_cluster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_cluster_id();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDistribution.source_cluster_id)
  return _s;
}
inline const std::string& ResourceDistribution::_internal_source_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_cluster_id_.Get();
}
inline void ResourceDistribution::_internal_set_source_cluster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_cluster_id_.Set(value, GetArena());
}
inline std::string* ResourceDistribution::_internal_mutable_source_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_cluster_id_.Mutable( GetArena());
}
inline std::string* ResourceDistribution::release_source_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDistribution.source_cluster_id)
  return _impl_.source_cluster_id_.Release();
}
inline void ResourceDistribution::set_allocated_source_cluster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_cluster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_cluster_id_.IsDefault()) {
    _impl_.source_cluster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDistribution.source_cluster_id)
}

// repeated string target_cluster_ids = 4;
inline int ResourceDistribution::_internal_target_cluster_ids_size() const {
  return _internal_target_cluster_ids().size();
}
inline int ResourceDistribution::target_cluster_ids_size() const {
  return _internal_target_cluster_ids_size();
}
inline void ResourceDistribution::clear_target_cluster_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_cluster_ids_.Clear();
}
inline std::string* ResourceDistribution::add_target_cluster_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_target_cluster_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.resource_management.ResourceDistribution.target_cluster_ids)
  return _s;
}
inline const std::string& ResourceDistribution::target_cluster_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.target_cluster_ids)
  return _internal_target_cluster_ids().Get(index);
}
inline std::string* ResourceDistribution::mutable_target_cluster_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDistribution.target_cluster_ids)
  return _internal_mutable_target_cluster_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ResourceDistribution::set_target_cluster_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_target_cluster_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.target_cluster_ids)
}
template <typename Arg_, typename... Args_>
inline void ResourceDistribution::add_target_cluster_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_target_cluster_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.resource_management.ResourceDistribution.target_cluster_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResourceDistribution::target_cluster_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.resource_management.ResourceDistribution.target_cluster_ids)
  return _internal_target_cluster_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResourceDistribution::mutable_target_cluster_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.resource_management.ResourceDistribution.target_cluster_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_target_cluster_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResourceDistribution::_internal_target_cluster_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_cluster_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResourceDistribution::_internal_mutable_target_cluster_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.target_cluster_ids_;
}

// double max_latency_allowed = 5;
inline void ResourceDistribution::clear_max_latency_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_latency_allowed_ = 0;
}
inline double ResourceDistribution::max_latency_allowed() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.max_latency_allowed)
  return _internal_max_latency_allowed();
}
inline void ResourceDistribution::set_max_latency_allowed(double value) {
  _internal_set_max_latency_allowed(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.max_latency_allowed)
}
inline double ResourceDistribution::_internal_max_latency_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_latency_allowed_;
}
inline void ResourceDistribution::_internal_set_max_latency_allowed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_latency_allowed_ = value;
}

// double min_efficiency_threshold = 6;
inline void ResourceDistribution::clear_min_efficiency_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_efficiency_threshold_ = 0;
}
inline double ResourceDistribution::min_efficiency_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.min_efficiency_threshold)
  return _internal_min_efficiency_threshold();
}
inline void ResourceDistribution::set_min_efficiency_threshold(double value) {
  _internal_set_min_efficiency_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.min_efficiency_threshold)
}
inline double ResourceDistribution::_internal_min_efficiency_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_efficiency_threshold_;
}
inline void ResourceDistribution::_internal_set_min_efficiency_threshold(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_efficiency_threshold_ = value;
}

// string distribution_strategy = 7;
inline void ResourceDistribution::clear_distribution_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_strategy_.ClearToEmpty();
}
inline const std::string& ResourceDistribution::distribution_strategy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.distribution_strategy)
  return _internal_distribution_strategy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDistribution::set_distribution_strategy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_strategy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.distribution_strategy)
}
inline std::string* ResourceDistribution::mutable_distribution_strategy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_distribution_strategy();
  // @@protoc_insertion_point(field_mutable:seigr.resource_management.ResourceDistribution.distribution_strategy)
  return _s;
}
inline const std::string& ResourceDistribution::_internal_distribution_strategy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribution_strategy_.Get();
}
inline void ResourceDistribution::_internal_set_distribution_strategy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_strategy_.Set(value, GetArena());
}
inline std::string* ResourceDistribution::_internal_mutable_distribution_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.distribution_strategy_.Mutable( GetArena());
}
inline std::string* ResourceDistribution::release_distribution_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.resource_management.ResourceDistribution.distribution_strategy)
  return _impl_.distribution_strategy_.Release();
}
inline void ResourceDistribution::set_allocated_distribution_strategy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_strategy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.distribution_strategy_.IsDefault()) {
    _impl_.distribution_strategy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.resource_management.ResourceDistribution.distribution_strategy)
}

// map<string, string> distribution_metadata = 8;
inline int ResourceDistribution::_internal_distribution_metadata_size() const {
  return _internal_distribution_metadata().size();
}
inline int ResourceDistribution::distribution_metadata_size() const {
  return _internal_distribution_metadata_size();
}
inline void ResourceDistribution::clear_distribution_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceDistribution::_internal_distribution_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribution_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ResourceDistribution::distribution_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.resource_management.ResourceDistribution.distribution_metadata)
  return _internal_distribution_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceDistribution::_internal_mutable_distribution_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.distribution_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ResourceDistribution::mutable_distribution_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.resource_management.ResourceDistribution.distribution_metadata)
  return _internal_mutable_distribution_metadata();
}

// bool enable_encryption = 9;
inline void ResourceDistribution::clear_enable_encryption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = false;
}
inline bool ResourceDistribution::enable_encryption() const {
  // @@protoc_insertion_point(field_get:seigr.resource_management.ResourceDistribution.enable_encryption)
  return _internal_enable_encryption();
}
inline void ResourceDistribution::set_enable_encryption(bool value) {
  _internal_set_enable_encryption(value);
  // @@protoc_insertion_point(field_set:seigr.resource_management.ResourceDistribution.enable_encryption)
}
inline bool ResourceDistribution::_internal_enable_encryption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_encryption_;
}
inline void ResourceDistribution::_internal_set_enable_encryption(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace resource_management
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::resource_management::ResourceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::resource_management::ResourceType>() {
  return ::seigr::resource_management::ResourceType_descriptor();
}
template <>
struct is_proto_enum<::seigr::resource_management::ResourceState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::resource_management::ResourceState>() {
  return ::seigr::resource_management::ResourceState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // resource_5fmanagement_2eproto_2epb_2eh
