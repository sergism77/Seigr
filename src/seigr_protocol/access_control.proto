syntax = "proto3";

package seigr.access_control;

import "google/protobuf/timestamp.proto";

/**
 * Access Control Protocol
 *
 * Defines roles, permissions, policies, and auditing mechanisms for managing
 * access within the Seigr ecosystem, ensuring compliance, traceability, and security.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Represents different user role types within the access control system.
 */
enum RoleType {
    ROLE_TYPE_UNDEFINED = 0;       // Undefined or unknown role.
    ROLE_TYPE_ADMIN = 1;           // Full administrative access.
    ROLE_TYPE_EDITOR = 2;          // Can edit resources but limited administrative control.
    ROLE_TYPE_VIEWER = 3;          // Read-only access.
    ROLE_TYPE_CONTRIBUTOR = 4;     // Can contribute content but with restrictions.
    ROLE_TYPE_AUDITOR = 5;         // Can only view audit logs and reports.
    ROLE_TYPE_DELEGATOR = 6;       // Can delegate permissions to other users.
    ROLE_TYPE_API = 7;             // Role for API-based access.
    ROLE_TYPE_SYSTEM = 8;          // Reserved for internal system processes.
}

/**
 * Defines granular permission types available for resources and actions.
 */
enum PermissionType {
    PERMISSION_TYPE_UNDEFINED = 0; // Undefined or unknown permission.
    PERMISSION_TYPE_READ = 1;      // Permission to read data.
    PERMISSION_TYPE_WRITE = 2;     // Permission to modify data.
    PERMISSION_TYPE_EXECUTE = 3;   // Permission to execute operations.
    PERMISSION_TYPE_DELETE = 4;    // Permission to delete resources.
    PERMISSION_TYPE_SHARE = 5;     // Permission to share resources.
    PERMISSION_TYPE_MANAGE = 6;    // Permission to manage permissions.
    PERMISSION_TYPE_DELEGATE = 7;  // Permission to delegate access.
    PERMISSION_TYPE_AUDIT = 8;     // Permission to audit logs.
    PERMISSION_TYPE_BYPASS = 9;    // Critical bypass permission.
}

/**
 * Represents types of access actions performed on resources.
 */
enum AccessType {
    ACCESS_TYPE_UNDEFINED = 0;     // Undefined access type.
    ACCESS_TYPE_READ = 1;          // Read access.
    ACCESS_TYPE_WRITE = 2;         // Write access.
    ACCESS_TYPE_EXECUTE = 3;       // Execute access.
    ACCESS_TYPE_DELETE = 4;        // Delete access.
    ACCESS_TYPE_SHARE = 5;         // Share access.
    ACCESS_TYPE_ADMINISTRATE = 6;  // Administrative access.
    ACCESS_TYPE_DELEGATE = 7;      // Access delegation.
    ACCESS_TYPE_API_CALL = 8;      // API-based access.
}

/**
 * Represents the status of an access control policy.
 */
enum PolicyStatus {
    POLICY_STATUS_UNDEFINED = 0;       // Undefined policy status.
    POLICY_STATUS_ACTIVE = 1;          // Policy is active and enforced.
    POLICY_STATUS_INACTIVE = 2;        // Policy is inactive.
    POLICY_STATUS_EXPIRED = 3;         // Policy has expired.
    POLICY_STATUS_REVOKED = 4;         // Policy was revoked.
    POLICY_STATUS_PENDING_REVIEW = 5;  // Policy is pending review.
    POLICY_STATUS_SCHEDULED_REVIEW = 6;// Policy is scheduled for review.
}

/**
 * Represents the result of an access request evaluation.
 */
enum AccessDecisionType {
    ACCESS_DECISION_UNDEFINED = 0; // Undefined decision.
    ACCESS_DECISION_ALLOW = 1;     // Access is allowed.
    ACCESS_DECISION_DENY = 2;      // Access is denied.
    ACCESS_DECISION_CONDITIONAL = 3; // Access allowed with conditions.
    ACCESS_DECISION_PENDING = 4;   // Decision is pending evaluation.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents a user role with permissions and constraints.
 */
message Role {
    string role_id = 1;                          // Unique identifier for the role.
    string name = 2;                             // Descriptive name of the role.
    repeated PermissionType permissions = 3;     // List of permissions associated with the role.
    map<string, string> constraints = 4;         // Contextual constraints (e.g., time, location).
    bool can_delegate = 5;                       // Whether the role can delegate permissions.
    int32 inheritance_depth = 6;                 // Level of inherited permissions.
    repeated string parent_roles = 7;            // Parent roles for inheritance.
    string description = 8;                      // Role description for documentation purposes.
}

/**
 * Defines permission settings for a specific user or entity.
 */
message Permission {
    string entity_id = 1;                        // ID of the user or entity.
    RoleType role = 2;                           // Role associated with the entity.
    repeated PermissionType actions = 3;         // Actions the entity is allowed to perform.
    string constraints = 4;                      // Time or location-based constraints.
    google.protobuf.Timestamp expiry = 5;        // Expiration date for temporary permissions.
    bool requires_mfa = 6;                       // Whether MFA is required for access.
    map<string, string> metadata = 7;            // Additional metadata.
    bool conditional_access = 8;                 // Conditional access flag.
}

/**
 * Defines an access control entry for a user or entity.
 */
message AccessControlEntry {
    string user_id = 1;                          // ID of the user/entity.
    RoleType role = 2;                           // Assigned role.
    repeated PermissionType permissions = 3;     // List of granted permissions.
    repeated AccessType allowed_actions = 4;     // Specific allowed actions.
    bool is_inherited = 5;                       // Whether permissions are inherited.
    google.protobuf.Timestamp effective_from = 6; // Start date for permissions.
    google.protobuf.Timestamp expires_on = 7;    // Expiration date for permissions.
    bool mfa_required = 8;                       // MFA requirement flag.
    string delegated_by = 9;                     // ID of the user who delegated access.
    string access_reason = 10;                   // Reason for granting access.
    map<string, string> custom_metadata = 11;    // Extensible custom metadata.
}

/**
 * Defines an access control list (ACL) containing multiple entries.
 */
message AccessControlList {
    repeated AccessControlEntry entries = 1;     // List of access control entries.
    string version = 2;                          // ACL version.
    map<string, string> metadata = 3;            // Metadata for tracking changes.
    string policy_id = 4;                        // Governing policy ID.
    PolicyStatus status = 5;                     // Status of the ACL.
    google.protobuf.Timestamp last_reviewed = 6; // Timestamp of last review.
    google.protobuf.Timestamp next_review_due = 7; // Next scheduled review date.
}

/**
 * Represents an access control policy.
 */
message AccessPolicy {
    string policy_id = 1;                        // Unique identifier for the policy.
    string policy_name = 2;                      // Human-readable policy name.
    PolicyStatus status = 3;                     // Current status of the policy.
    google.protobuf.Timestamp creation_timestamp = 4; // Policy creation timestamp.
    google.protobuf.Timestamp updated_timestamp = 5;  // Last updated timestamp.
    repeated Permission permissions = 6;         // List of permissions in the policy.
    google.protobuf.Timestamp enforced_on = 7;   // Enforcement date.
    map<string, string> metadata = 8;            // Additional metadata.
    repeated string applicable_roles = 9;        // Roles governed by the policy.
    string compliance_requirements = 10;         // Compliance policies enforced (e.g., GDPR).
}

/**
 * Logs detailed access-related events for auditing.
 */
message AccessAuditLog {
    string user_id = 1;                          // ID of the user performing the action.
    AccessType action = 2;                       // Action performed.
    google.protobuf.Timestamp timestamp = 3;    // Timestamp of the action.
    string status = 4;                           // Status of the action (e.g., SUCCESS, FAILURE).
    string details = 5;                          // Detailed description of the action.
    string ip_address = 6;                       // Originating IP address.
    string device_info = 7;                      // Device information.
    bool mfa_verified = 8;                       // MFA verification status.
    bool delegated_access = 9;                   // Whether access was delegated.
    string origin_role = 10;                     // Role of the initiating user/entity.
    string access_reason = 11;                   // Reason for access.
    map<string, string> audit_metadata = 12;     // Metadata for additional auditing context.
}
