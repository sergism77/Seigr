// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: workflow.proto
// Protobuf C++ Version: 5.29.2

#ifndef workflow_2eproto_2epb_2eh
#define workflow_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_workflow_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_workflow_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_workflow_2eproto;
namespace seigr {
namespace workflow {
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class Task_InputsEntry_DoNotUse;
struct Task_InputsEntry_DoNotUseDefaultTypeInternal;
extern Task_InputsEntry_DoNotUseDefaultTypeInternal _Task_InputsEntry_DoNotUse_default_instance_;
class Task_OutputsEntry_DoNotUse;
struct Task_OutputsEntry_DoNotUseDefaultTypeInternal;
extern Task_OutputsEntry_DoNotUseDefaultTypeInternal _Task_OutputsEntry_DoNotUse_default_instance_;
class WorkflowDefinition;
struct WorkflowDefinitionDefaultTypeInternal;
extern WorkflowDefinitionDefaultTypeInternal _WorkflowDefinition_default_instance_;
class WorkflowDefinition_DependenciesEntry_DoNotUse;
struct WorkflowDefinition_DependenciesEntry_DoNotUseDefaultTypeInternal;
extern WorkflowDefinition_DependenciesEntry_DoNotUseDefaultTypeInternal _WorkflowDefinition_DependenciesEntry_DoNotUse_default_instance_;
class WorkflowDefinition_PoliciesEntry_DoNotUse;
struct WorkflowDefinition_PoliciesEntry_DoNotUseDefaultTypeInternal;
extern WorkflowDefinition_PoliciesEntry_DoNotUseDefaultTypeInternal _WorkflowDefinition_PoliciesEntry_DoNotUse_default_instance_;
class WorkflowExecution;
struct WorkflowExecutionDefaultTypeInternal;
extern WorkflowExecutionDefaultTypeInternal _WorkflowExecution_default_instance_;
class WorkflowExecution_ExecutionLogsEntry_DoNotUse;
struct WorkflowExecution_ExecutionLogsEntry_DoNotUseDefaultTypeInternal;
extern WorkflowExecution_ExecutionLogsEntry_DoNotUseDefaultTypeInternal _WorkflowExecution_ExecutionLogsEntry_DoNotUse_default_instance_;
}  // namespace workflow
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace workflow {

// ===================================================================


// -------------------------------------------------------------------

class WorkflowExecution_ExecutionLogsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WorkflowExecution_ExecutionLogsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkflowExecution_ExecutionLogsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WorkflowExecution_ExecutionLogsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WorkflowExecution_ExecutionLogsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecution_ExecutionLogsEntry_DoNotUse*>(
        &_WorkflowExecution_ExecutionLogsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_workflow_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class WorkflowDefinition_PoliciesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WorkflowDefinition_PoliciesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkflowDefinition_PoliciesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WorkflowDefinition_PoliciesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WorkflowDefinition_PoliciesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WorkflowDefinition_PoliciesEntry_DoNotUse*>(
        &_WorkflowDefinition_PoliciesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_workflow_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class WorkflowDefinition_DependenciesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WorkflowDefinition_DependenciesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkflowDefinition_DependenciesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WorkflowDefinition_DependenciesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WorkflowDefinition_DependenciesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WorkflowDefinition_DependenciesEntry_DoNotUse*>(
        &_WorkflowDefinition_DependenciesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_workflow_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Task_OutputsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Task_OutputsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task_OutputsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Task_OutputsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Task_OutputsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Task_OutputsEntry_DoNotUse*>(
        &_Task_OutputsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_workflow_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Task_InputsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Task_InputsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task_InputsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Task_InputsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Task_InputsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Task_InputsEntry_DoNotUse*>(
        &_Task_InputsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_workflow_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class WorkflowExecution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.workflow.WorkflowExecution) */ {
 public:
  inline WorkflowExecution() : WorkflowExecution(nullptr) {}
  ~WorkflowExecution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorkflowExecution* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorkflowExecution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkflowExecution(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkflowExecution(const WorkflowExecution& from) : WorkflowExecution(nullptr, from) {}
  inline WorkflowExecution(WorkflowExecution&& from) noexcept
      : WorkflowExecution(nullptr, std::move(from)) {}
  inline WorkflowExecution& operator=(const WorkflowExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowExecution& operator=(WorkflowExecution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowExecution* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecution*>(
        &_WorkflowExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(WorkflowExecution& a, WorkflowExecution& b) { a.Swap(&b); }
  inline void Swap(WorkflowExecution* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowExecution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowExecution* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorkflowExecution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkflowExecution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkflowExecution& from) { WorkflowExecution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorkflowExecution* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.workflow.WorkflowExecution"; }

 protected:
  explicit WorkflowExecution(::google::protobuf::Arena* arena);
  WorkflowExecution(::google::protobuf::Arena* arena, const WorkflowExecution& from);
  WorkflowExecution(::google::protobuf::Arena* arena, WorkflowExecution&& from) noexcept
      : WorkflowExecution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExecutionLogsFieldNumber = 5,
    kExecutionIdFieldNumber = 1,
    kWorkflowIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kStartedAtFieldNumber = 4,
  };
  // map<string, string> execution_logs = 5;
  int execution_logs_size() const;
  private:
  int _internal_execution_logs_size() const;

  public:
  void clear_execution_logs() ;
  const ::google::protobuf::Map<std::string, std::string>& execution_logs() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_execution_logs();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_execution_logs() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_execution_logs();

  public:
  // string execution_id = 1;
  void clear_execution_id() ;
  const std::string& execution_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_execution_id(Arg_&& arg, Args_... args);
  std::string* mutable_execution_id();
  PROTOBUF_NODISCARD std::string* release_execution_id();
  void set_allocated_execution_id(std::string* value);

  private:
  const std::string& _internal_execution_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_execution_id(
      const std::string& value);
  std::string* _internal_mutable_execution_id();

  public:
  // string workflow_id = 2;
  void clear_workflow_id() ;
  const std::string& workflow_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workflow_id(Arg_&& arg, Args_... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* value);

  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(
      const std::string& value);
  std::string* _internal_mutable_workflow_id();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string started_at = 4;
  void clear_started_at() ;
  const std::string& started_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_started_at(Arg_&& arg, Args_... args);
  std::string* mutable_started_at();
  PROTOBUF_NODISCARD std::string* release_started_at();
  void set_allocated_started_at(std::string* value);

  private:
  const std::string& _internal_started_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_started_at(
      const std::string& value);
  std::string* _internal_mutable_started_at();

  public:
  // @@protoc_insertion_point(class_scope:seigr.workflow.WorkflowExecution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkflowExecution& from_msg);
    ::google::protobuf::internal::MapField<WorkflowExecution_ExecutionLogsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        execution_logs_;
    ::google::protobuf::internal::ArenaStringPtr execution_id_;
    ::google::protobuf::internal::ArenaStringPtr workflow_id_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr started_at_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class Task final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.workflow.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Task* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Task));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Task(
      ::google::protobuf::internal::ConstantInitialized);

  inline Task(const Task& from) : Task(nullptr, from) {}
  inline Task(Task&& from) noexcept
      : Task(nullptr, std::move(from)) {}
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
        &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Task& a, Task& b) { a.Swap(&b); }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Task>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Task& from) { Task::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Task* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.workflow.Task"; }

 protected:
  explicit Task(::google::protobuf::Arena* arena);
  Task(::google::protobuf::Arena* arena, const Task& from);
  Task(::google::protobuf::Arena* arena, Task&& from) noexcept
      : Task(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // map<string, string> inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;

  public:
  void clear_inputs() ;
  const ::google::protobuf::Map<std::string, std::string>& inputs() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_inputs();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_inputs() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_inputs();

  public:
  // map<string, string> outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;

  public:
  void clear_outputs() ;
  const ::google::protobuf::Map<std::string, std::string>& outputs() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_outputs();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_outputs() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_outputs();

  public:
  // string task_id = 1;
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:seigr.workflow.Task)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 2,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Task& from_msg);
    ::google::protobuf::internal::MapField<Task_InputsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        inputs_;
    ::google::protobuf::internal::MapField<Task_OutputsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        outputs_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowDefinition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.workflow.WorkflowDefinition) */ {
 public:
  inline WorkflowDefinition() : WorkflowDefinition(nullptr) {}
  ~WorkflowDefinition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorkflowDefinition* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorkflowDefinition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkflowDefinition(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorkflowDefinition(const WorkflowDefinition& from) : WorkflowDefinition(nullptr, from) {}
  inline WorkflowDefinition(WorkflowDefinition&& from) noexcept
      : WorkflowDefinition(nullptr, std::move(from)) {}
  inline WorkflowDefinition& operator=(const WorkflowDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowDefinition& operator=(WorkflowDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowDefinition* internal_default_instance() {
    return reinterpret_cast<const WorkflowDefinition*>(
        &_WorkflowDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WorkflowDefinition& a, WorkflowDefinition& b) { a.Swap(&b); }
  inline void Swap(WorkflowDefinition* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowDefinition* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorkflowDefinition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkflowDefinition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorkflowDefinition& from) { WorkflowDefinition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorkflowDefinition* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.workflow.WorkflowDefinition"; }

 protected:
  explicit WorkflowDefinition(::google::protobuf::Arena* arena);
  WorkflowDefinition(::google::protobuf::Arena* arena, const WorkflowDefinition& from);
  WorkflowDefinition(::google::protobuf::Arena* arena, WorkflowDefinition&& from) noexcept
      : WorkflowDefinition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTasksFieldNumber = 3,
    kDependenciesFieldNumber = 4,
    kPoliciesFieldNumber = 5,
    kWorkflowIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .seigr.workflow.Task tasks = 3;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;

  public:
  void clear_tasks() ;
  ::seigr::workflow::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>* mutable_tasks();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>& _internal_tasks() const;
  ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>* _internal_mutable_tasks();
  public:
  const ::seigr::workflow::Task& tasks(int index) const;
  ::seigr::workflow::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>& tasks() const;
  // map<string, string> dependencies = 4;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;

  public:
  void clear_dependencies() ;
  const ::google::protobuf::Map<std::string, std::string>& dependencies() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_dependencies();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_dependencies() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_dependencies();

  public:
  // map<string, string> policies = 5;
  int policies_size() const;
  private:
  int _internal_policies_size() const;

  public:
  void clear_policies() ;
  const ::google::protobuf::Map<std::string, std::string>& policies() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_policies();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_policies() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_policies();

  public:
  // string workflow_id = 1;
  void clear_workflow_id() ;
  const std::string& workflow_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workflow_id(Arg_&& arg, Args_... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* value);

  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(
      const std::string& value);
  std::string* _internal_mutable_workflow_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:seigr.workflow.WorkflowDefinition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 3,
      77, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorkflowDefinition& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::workflow::Task > tasks_;
    ::google::protobuf::internal::MapField<WorkflowDefinition_DependenciesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        dependencies_;
    ::google::protobuf::internal::MapField<WorkflowDefinition_PoliciesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        policies_;
    ::google::protobuf::internal::ArenaStringPtr workflow_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_workflow_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkflowDefinition

// string workflow_id = 1;
inline void WorkflowDefinition::clear_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.ClearToEmpty();
}
inline const std::string& WorkflowDefinition::workflow_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowDefinition.workflow_id)
  return _internal_workflow_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowDefinition::set_workflow_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowDefinition.workflow_id)
}
inline std::string* WorkflowDefinition::mutable_workflow_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowDefinition.workflow_id)
  return _s;
}
inline const std::string& WorkflowDefinition::_internal_workflow_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.workflow_id_.Get();
}
inline void WorkflowDefinition::_internal_set_workflow_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(value, GetArena());
}
inline std::string* WorkflowDefinition::_internal_mutable_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.workflow_id_.Mutable( GetArena());
}
inline std::string* WorkflowDefinition::release_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowDefinition.workflow_id)
  return _impl_.workflow_id_.Release();
}
inline void WorkflowDefinition::set_allocated_workflow_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.workflow_id_.IsDefault()) {
    _impl_.workflow_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowDefinition.workflow_id)
}

// string name = 2;
inline void WorkflowDefinition::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WorkflowDefinition::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowDefinition.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowDefinition::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowDefinition.name)
}
inline std::string* WorkflowDefinition::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowDefinition.name)
  return _s;
}
inline const std::string& WorkflowDefinition::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void WorkflowDefinition::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* WorkflowDefinition::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* WorkflowDefinition::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowDefinition.name)
  return _impl_.name_.Release();
}
inline void WorkflowDefinition::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowDefinition.name)
}

// repeated .seigr.workflow.Task tasks = 3;
inline int WorkflowDefinition::_internal_tasks_size() const {
  return _internal_tasks().size();
}
inline int WorkflowDefinition::tasks_size() const {
  return _internal_tasks_size();
}
inline void WorkflowDefinition::clear_tasks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tasks_.Clear();
}
inline ::seigr::workflow::Task* WorkflowDefinition::mutable_tasks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowDefinition.tasks)
  return _internal_mutable_tasks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>* WorkflowDefinition::mutable_tasks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.workflow.WorkflowDefinition.tasks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tasks();
}
inline const ::seigr::workflow::Task& WorkflowDefinition::tasks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowDefinition.tasks)
  return _internal_tasks().Get(index);
}
inline ::seigr::workflow::Task* WorkflowDefinition::add_tasks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::workflow::Task* _add = _internal_mutable_tasks()->Add();
  // @@protoc_insertion_point(field_add:seigr.workflow.WorkflowDefinition.tasks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>& WorkflowDefinition::tasks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.workflow.WorkflowDefinition.tasks)
  return _internal_tasks();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>&
WorkflowDefinition::_internal_tasks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tasks_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::workflow::Task>*
WorkflowDefinition::_internal_mutable_tasks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tasks_;
}

// map<string, string> dependencies = 4;
inline int WorkflowDefinition::_internal_dependencies_size() const {
  return _internal_dependencies().size();
}
inline int WorkflowDefinition::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void WorkflowDefinition::clear_dependencies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dependencies_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowDefinition::_internal_dependencies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dependencies_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowDefinition::dependencies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.workflow.WorkflowDefinition.dependencies)
  return _internal_dependencies();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowDefinition::_internal_mutable_dependencies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dependencies_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowDefinition::mutable_dependencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.workflow.WorkflowDefinition.dependencies)
  return _internal_mutable_dependencies();
}

// map<string, string> policies = 5;
inline int WorkflowDefinition::_internal_policies_size() const {
  return _internal_policies().size();
}
inline int WorkflowDefinition::policies_size() const {
  return _internal_policies_size();
}
inline void WorkflowDefinition::clear_policies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policies_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowDefinition::_internal_policies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policies_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowDefinition::policies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.workflow.WorkflowDefinition.policies)
  return _internal_policies();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowDefinition::_internal_mutable_policies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policies_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowDefinition::mutable_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.workflow.WorkflowDefinition.policies)
  return _internal_mutable_policies();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkflowExecution

// string execution_id = 1;
inline void WorkflowExecution::clear_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.ClearToEmpty();
}
inline const std::string& WorkflowExecution::execution_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowExecution.execution_id)
  return _internal_execution_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowExecution::set_execution_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowExecution.execution_id)
}
inline std::string* WorkflowExecution::mutable_execution_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_execution_id();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowExecution.execution_id)
  return _s;
}
inline const std::string& WorkflowExecution::_internal_execution_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.execution_id_.Get();
}
inline void WorkflowExecution::_internal_set_execution_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.Set(value, GetArena());
}
inline std::string* WorkflowExecution::_internal_mutable_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.execution_id_.Mutable( GetArena());
}
inline std::string* WorkflowExecution::release_execution_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowExecution.execution_id)
  return _impl_.execution_id_.Release();
}
inline void WorkflowExecution::set_allocated_execution_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.execution_id_.IsDefault()) {
    _impl_.execution_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowExecution.execution_id)
}

// string workflow_id = 2;
inline void WorkflowExecution::clear_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.ClearToEmpty();
}
inline const std::string& WorkflowExecution::workflow_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowExecution.workflow_id)
  return _internal_workflow_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowExecution::set_workflow_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowExecution.workflow_id)
}
inline std::string* WorkflowExecution::mutable_workflow_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowExecution.workflow_id)
  return _s;
}
inline const std::string& WorkflowExecution::_internal_workflow_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.workflow_id_.Get();
}
inline void WorkflowExecution::_internal_set_workflow_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(value, GetArena());
}
inline std::string* WorkflowExecution::_internal_mutable_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.workflow_id_.Mutable( GetArena());
}
inline std::string* WorkflowExecution::release_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowExecution.workflow_id)
  return _impl_.workflow_id_.Release();
}
inline void WorkflowExecution::set_allocated_workflow_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.workflow_id_.IsDefault()) {
    _impl_.workflow_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowExecution.workflow_id)
}

// string status = 3;
inline void WorkflowExecution::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& WorkflowExecution::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowExecution.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowExecution::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowExecution.status)
}
inline std::string* WorkflowExecution::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowExecution.status)
  return _s;
}
inline const std::string& WorkflowExecution::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void WorkflowExecution::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* WorkflowExecution::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* WorkflowExecution::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowExecution.status)
  return _impl_.status_.Release();
}
inline void WorkflowExecution::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowExecution.status)
}

// string started_at = 4;
inline void WorkflowExecution::clear_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_at_.ClearToEmpty();
}
inline const std::string& WorkflowExecution::started_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.WorkflowExecution.started_at)
  return _internal_started_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkflowExecution::set_started_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.WorkflowExecution.started_at)
}
inline std::string* WorkflowExecution::mutable_started_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.WorkflowExecution.started_at)
  return _s;
}
inline const std::string& WorkflowExecution::_internal_started_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.started_at_.Get();
}
inline void WorkflowExecution::_internal_set_started_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_at_.Set(value, GetArena());
}
inline std::string* WorkflowExecution::_internal_mutable_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.started_at_.Mutable( GetArena());
}
inline std::string* WorkflowExecution::release_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.WorkflowExecution.started_at)
  return _impl_.started_at_.Release();
}
inline void WorkflowExecution::set_allocated_started_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.started_at_.IsDefault()) {
    _impl_.started_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.WorkflowExecution.started_at)
}

// map<string, string> execution_logs = 5;
inline int WorkflowExecution::_internal_execution_logs_size() const {
  return _internal_execution_logs().size();
}
inline int WorkflowExecution::execution_logs_size() const {
  return _internal_execution_logs_size();
}
inline void WorkflowExecution::clear_execution_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.execution_logs_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowExecution::_internal_execution_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.execution_logs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WorkflowExecution::execution_logs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.workflow.WorkflowExecution.execution_logs)
  return _internal_execution_logs();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowExecution::_internal_mutable_execution_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.execution_logs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WorkflowExecution::mutable_execution_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.workflow.WorkflowExecution.execution_logs)
  return _internal_mutable_execution_logs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Task

// string task_id = 1;
inline void Task::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& Task::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.Task.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.Task.task_id)
}
inline std::string* Task::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.Task.task_id)
  return _s;
}
inline const std::string& Task::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void Task::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* Task::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.Task.task_id)
  return _impl_.task_id_.Release();
}
inline void Task::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.Task.task_id)
}

// string action = 2;
inline void Task::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& Task::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.workflow.Task.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Task::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.workflow.Task.action)
}
inline std::string* Task::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.workflow.Task.action)
  return _s;
}
inline const std::string& Task::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void Task::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* Task::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* Task::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.workflow.Task.action)
  return _impl_.action_.Release();
}
inline void Task::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.workflow.Task.action)
}

// map<string, string> inputs = 3;
inline int Task::_internal_inputs_size() const {
  return _internal_inputs().size();
}
inline int Task::inputs_size() const {
  return _internal_inputs_size();
}
inline void Task::clear_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Task::_internal_inputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inputs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Task::inputs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.workflow.Task.inputs)
  return _internal_inputs();
}
inline ::google::protobuf::Map<std::string, std::string>* Task::_internal_mutable_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inputs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Task::mutable_inputs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.workflow.Task.inputs)
  return _internal_mutable_inputs();
}

// map<string, string> outputs = 4;
inline int Task::_internal_outputs_size() const {
  return _internal_outputs().size();
}
inline int Task::outputs_size() const {
  return _internal_outputs_size();
}
inline void Task::clear_outputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outputs_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Task::_internal_outputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outputs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Task::outputs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.workflow.Task.outputs)
  return _internal_outputs();
}
inline ::google::protobuf::Map<std::string, std::string>* Task::_internal_mutable_outputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.outputs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Task::mutable_outputs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.workflow.Task.outputs)
  return _internal_mutable_outputs();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace workflow
}  // namespace seigr


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // workflow_2eproto_2epb_2eh
