// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mycelith_voting.proto
// Protobuf C++ Version: 5.29.2

#ifndef mycelith_5fvoting_2eproto_2epb_2eh
#define mycelith_5fvoting_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mycelith_5fvoting_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mycelith_5fvoting_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mycelith_5fvoting_2eproto;
namespace seigr {
namespace voting {
class CastVoteRequest;
struct CastVoteRequestDefaultTypeInternal;
extern CastVoteRequestDefaultTypeInternal _CastVoteRequest_default_instance_;
class CastVoteResponse;
struct CastVoteResponseDefaultTypeInternal;
extern CastVoteResponseDefaultTypeInternal _CastVoteResponse_default_instance_;
class GetProposalDetailsRequest;
struct GetProposalDetailsRequestDefaultTypeInternal;
extern GetProposalDetailsRequestDefaultTypeInternal _GetProposalDetailsRequest_default_instance_;
class GetProposalDetailsResponse;
struct GetProposalDetailsResponseDefaultTypeInternal;
extern GetProposalDetailsResponseDefaultTypeInternal _GetProposalDetailsResponse_default_instance_;
class GetProposalDetailsResponse_MetadataEntry_DoNotUse;
struct GetProposalDetailsResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetProposalDetailsResponse_MetadataEntry_DoNotUseDefaultTypeInternal _GetProposalDetailsResponse_MetadataEntry_DoNotUse_default_instance_;
class GetProposalResultRequest;
struct GetProposalResultRequestDefaultTypeInternal;
extern GetProposalResultRequestDefaultTypeInternal _GetProposalResultRequest_default_instance_;
class GetProposalResultResponse;
struct GetProposalResultResponseDefaultTypeInternal;
extern GetProposalResultResponseDefaultTypeInternal _GetProposalResultResponse_default_instance_;
class GetProposalResultResponse_MetadataEntry_DoNotUse;
struct GetProposalResultResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetProposalResultResponse_MetadataEntry_DoNotUseDefaultTypeInternal _GetProposalResultResponse_MetadataEntry_DoNotUse_default_instance_;
class ProposalConfig;
struct ProposalConfigDefaultTypeInternal;
extern ProposalConfigDefaultTypeInternal _ProposalConfig_default_instance_;
class SubmitProposalRequest;
struct SubmitProposalRequestDefaultTypeInternal;
extern SubmitProposalRequestDefaultTypeInternal _SubmitProposalRequest_default_instance_;
class SubmitProposalResponse;
struct SubmitProposalResponseDefaultTypeInternal;
extern SubmitProposalResponseDefaultTypeInternal _SubmitProposalResponse_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class Vote_MetadataEntry_DoNotUse;
struct Vote_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Vote_MetadataEntry_DoNotUseDefaultTypeInternal _Vote_MetadataEntry_DoNotUse_default_instance_;
class VotingAuditLog;
struct VotingAuditLogDefaultTypeInternal;
extern VotingAuditLogDefaultTypeInternal _VotingAuditLog_default_instance_;
class VotingAuditLog_MetadataEntry_DoNotUse;
struct VotingAuditLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern VotingAuditLog_MetadataEntry_DoNotUseDefaultTypeInternal _VotingAuditLog_MetadataEntry_DoNotUse_default_instance_;
class VotingLayer;
struct VotingLayerDefaultTypeInternal;
extern VotingLayerDefaultTypeInternal _VotingLayer_default_instance_;
class VotingProposal;
struct VotingProposalDefaultTypeInternal;
extern VotingProposalDefaultTypeInternal _VotingProposal_default_instance_;
}  // namespace voting
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace voting {
enum LayerStatus : int {
  LAYER_STATUS_UNDEFINED = 0,
  LAYER_STATUS_OPEN = 1,
  LAYER_STATUS_CLOSED = 2,
  LayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LayerStatus_IsValid(int value);
extern const uint32_t LayerStatus_internal_data_[];
constexpr LayerStatus LayerStatus_MIN = static_cast<LayerStatus>(0);
constexpr LayerStatus LayerStatus_MAX = static_cast<LayerStatus>(2);
constexpr int LayerStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LayerStatus_descriptor();
template <typename T>
const std::string& LayerStatus_Name(T value) {
  static_assert(std::is_same<T, LayerStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LayerStatus_Name().");
  return LayerStatus_Name(static_cast<LayerStatus>(value));
}
template <>
inline const std::string& LayerStatus_Name(LayerStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LayerStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LayerStatus_Parse(absl::string_view name, LayerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerStatus>(
      LayerStatus_descriptor(), name, value);
}
enum VoteChoice : int {
  VOTE_CHOICE_UNDEFINED = 0,
  VOTE_CHOICE_YES = 1,
  VOTE_CHOICE_NO = 2,
  VOTE_CHOICE_ABSTAIN = 3,
  VoteChoice_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VoteChoice_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VoteChoice_IsValid(int value);
extern const uint32_t VoteChoice_internal_data_[];
constexpr VoteChoice VoteChoice_MIN = static_cast<VoteChoice>(0);
constexpr VoteChoice VoteChoice_MAX = static_cast<VoteChoice>(3);
constexpr int VoteChoice_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
VoteChoice_descriptor();
template <typename T>
const std::string& VoteChoice_Name(T value) {
  static_assert(std::is_same<T, VoteChoice>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VoteChoice_Name().");
  return VoteChoice_Name(static_cast<VoteChoice>(value));
}
template <>
inline const std::string& VoteChoice_Name(VoteChoice value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VoteChoice_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool VoteChoice_Parse(absl::string_view name, VoteChoice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoteChoice>(
      VoteChoice_descriptor(), name, value);
}
enum VotingStatus : int {
  VOTING_STATUS_UNDEFINED = 0,
  VOTING_STATUS_PENDING = 1,
  VOTING_STATUS_ACTIVE = 2,
  VOTING_STATUS_COMPLETED = 3,
  VOTING_STATUS_FAILED = 4,
  VotingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VotingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VotingStatus_IsValid(int value);
extern const uint32_t VotingStatus_internal_data_[];
constexpr VotingStatus VotingStatus_MIN = static_cast<VotingStatus>(0);
constexpr VotingStatus VotingStatus_MAX = static_cast<VotingStatus>(4);
constexpr int VotingStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VotingStatus_descriptor();
template <typename T>
const std::string& VotingStatus_Name(T value) {
  static_assert(std::is_same<T, VotingStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VotingStatus_Name().");
  return VotingStatus_Name(static_cast<VotingStatus>(value));
}
template <>
inline const std::string& VotingStatus_Name(VotingStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VotingStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VotingStatus_Parse(absl::string_view name, VotingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VotingStatus>(
      VotingStatus_descriptor(), name, value);
}
enum VotingOutcome : int {
  VOTING_OUTCOME_UNDECIDED = 0,
  VOTING_OUTCOME_APPROVED = 1,
  VOTING_OUTCOME_REJECTED = 2,
  VOTING_OUTCOME_ABSTAINED = 3,
  VOTING_OUTCOME_INCONCLUSIVE = 4,
  VotingOutcome_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VotingOutcome_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VotingOutcome_IsValid(int value);
extern const uint32_t VotingOutcome_internal_data_[];
constexpr VotingOutcome VotingOutcome_MIN = static_cast<VotingOutcome>(0);
constexpr VotingOutcome VotingOutcome_MAX = static_cast<VotingOutcome>(4);
constexpr int VotingOutcome_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VotingOutcome_descriptor();
template <typename T>
const std::string& VotingOutcome_Name(T value) {
  static_assert(std::is_same<T, VotingOutcome>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VotingOutcome_Name().");
  return VotingOutcome_Name(static_cast<VotingOutcome>(value));
}
template <>
inline const std::string& VotingOutcome_Name(VotingOutcome value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VotingOutcome_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VotingOutcome_Parse(absl::string_view name, VotingOutcome* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VotingOutcome>(
      VotingOutcome_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VotingAuditLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  VotingAuditLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotingAuditLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit VotingAuditLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const VotingAuditLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const VotingAuditLog_MetadataEntry_DoNotUse*>(
        &_VotingAuditLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Vote_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Vote_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vote_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Vote_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Vote_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Vote_MetadataEntry_DoNotUse*>(
        &_Vote_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SubmitProposalResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.SubmitProposalResponse) */ {
 public:
  inline SubmitProposalResponse() : SubmitProposalResponse(nullptr) {}
  ~SubmitProposalResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitProposalResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitProposalResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitProposalResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitProposalResponse(const SubmitProposalResponse& from) : SubmitProposalResponse(nullptr, from) {}
  inline SubmitProposalResponse(SubmitProposalResponse&& from) noexcept
      : SubmitProposalResponse(nullptr, std::move(from)) {}
  inline SubmitProposalResponse& operator=(const SubmitProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitProposalResponse& operator=(SubmitProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitProposalResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitProposalResponse*>(
        &_SubmitProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SubmitProposalResponse& a, SubmitProposalResponse& b) { a.Swap(&b); }
  inline void Swap(SubmitProposalResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitProposalResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitProposalResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitProposalResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitProposalResponse& from) { SubmitProposalResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitProposalResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.SubmitProposalResponse"; }

 protected:
  explicit SubmitProposalResponse(::google::protobuf::Arena* arena);
  SubmitProposalResponse(::google::protobuf::Arena* arena, const SubmitProposalResponse& from);
  SubmitProposalResponse(::google::protobuf::Arena* arena, SubmitProposalResponse&& from) noexcept
      : SubmitProposalResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.SubmitProposalResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitProposalResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class ProposalConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.ProposalConfig) */ {
 public:
  inline ProposalConfig() : ProposalConfig(nullptr) {}
  ~ProposalConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProposalConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProposalConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProposalConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProposalConfig(const ProposalConfig& from) : ProposalConfig(nullptr, from) {}
  inline ProposalConfig(ProposalConfig&& from) noexcept
      : ProposalConfig(nullptr, std::move(from)) {}
  inline ProposalConfig& operator=(const ProposalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalConfig& operator=(ProposalConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalConfig* internal_default_instance() {
    return reinterpret_cast<const ProposalConfig*>(
        &_ProposalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProposalConfig& a, ProposalConfig& b) { a.Swap(&b); }
  inline void Swap(ProposalConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProposalConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProposalConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProposalConfig& from) { ProposalConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProposalConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.ProposalConfig"; }

 protected:
  explicit ProposalConfig(::google::protobuf::Arena* arena);
  ProposalConfig(::google::protobuf::Arena* arena, const ProposalConfig& from);
  ProposalConfig(::google::protobuf::Arena* arena, ProposalConfig&& from) noexcept
      : ProposalConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseInfluenceWeightFieldNumber = 1,
    kInfluenceMultiplierFieldNumber = 2,
    kConsistencyFactorFieldNumber = 3,
    kMinLayersToPassFieldNumber = 4,
    kRequiredParticipationFieldNumber = 5,
    kParticipationFactorFieldNumber = 7,
    kEngagementFactorFieldNumber = 8,
    kAdaptiveThresholdsFieldNumber = 6,
    kEnableDynamicLayerAdjustmentsFieldNumber = 9,
  };
  // double base_influence_weight = 1;
  void clear_base_influence_weight() ;
  double base_influence_weight() const;
  void set_base_influence_weight(double value);

  private:
  double _internal_base_influence_weight() const;
  void _internal_set_base_influence_weight(double value);

  public:
  // double influence_multiplier = 2;
  void clear_influence_multiplier() ;
  double influence_multiplier() const;
  void set_influence_multiplier(double value);

  private:
  double _internal_influence_multiplier() const;
  void _internal_set_influence_multiplier(double value);

  public:
  // double consistency_factor = 3;
  void clear_consistency_factor() ;
  double consistency_factor() const;
  void set_consistency_factor(double value);

  private:
  double _internal_consistency_factor() const;
  void _internal_set_consistency_factor(double value);

  public:
  // uint32 min_layers_to_pass = 4;
  void clear_min_layers_to_pass() ;
  ::uint32_t min_layers_to_pass() const;
  void set_min_layers_to_pass(::uint32_t value);

  private:
  ::uint32_t _internal_min_layers_to_pass() const;
  void _internal_set_min_layers_to_pass(::uint32_t value);

  public:
  // uint32 required_participation = 5;
  void clear_required_participation() ;
  ::uint32_t required_participation() const;
  void set_required_participation(::uint32_t value);

  private:
  ::uint32_t _internal_required_participation() const;
  void _internal_set_required_participation(::uint32_t value);

  public:
  // double participation_factor = 7;
  void clear_participation_factor() ;
  double participation_factor() const;
  void set_participation_factor(double value);

  private:
  double _internal_participation_factor() const;
  void _internal_set_participation_factor(double value);

  public:
  // double engagement_factor = 8;
  void clear_engagement_factor() ;
  double engagement_factor() const;
  void set_engagement_factor(double value);

  private:
  double _internal_engagement_factor() const;
  void _internal_set_engagement_factor(double value);

  public:
  // bool adaptive_thresholds = 6;
  void clear_adaptive_thresholds() ;
  bool adaptive_thresholds() const;
  void set_adaptive_thresholds(bool value);

  private:
  bool _internal_adaptive_thresholds() const;
  void _internal_set_adaptive_thresholds(bool value);

  public:
  // bool enable_dynamic_layer_adjustments = 9;
  void clear_enable_dynamic_layer_adjustments() ;
  bool enable_dynamic_layer_adjustments() const;
  void set_enable_dynamic_layer_adjustments(bool value);

  private:
  bool _internal_enable_dynamic_layer_adjustments() const;
  void _internal_set_enable_dynamic_layer_adjustments(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.ProposalConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProposalConfig& from_msg);
    double base_influence_weight_;
    double influence_multiplier_;
    double consistency_factor_;
    ::uint32_t min_layers_to_pass_;
    ::uint32_t required_participation_;
    double participation_factor_;
    double engagement_factor_;
    bool adaptive_thresholds_;
    bool enable_dynamic_layer_adjustments_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class GetProposalResultResponse_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  GetProposalResultResponse_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalResultResponse_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GetProposalResultResponse_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GetProposalResultResponse_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GetProposalResultResponse_MetadataEntry_DoNotUse*>(
        &_GetProposalResultResponse_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetProposalResultRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.GetProposalResultRequest) */ {
 public:
  inline GetProposalResultRequest() : GetProposalResultRequest(nullptr) {}
  ~GetProposalResultRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetProposalResultRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetProposalResultRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalResultRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetProposalResultRequest(const GetProposalResultRequest& from) : GetProposalResultRequest(nullptr, from) {}
  inline GetProposalResultRequest(GetProposalResultRequest&& from) noexcept
      : GetProposalResultRequest(nullptr, std::move(from)) {}
  inline GetProposalResultRequest& operator=(const GetProposalResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalResultRequest& operator=(GetProposalResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProposalResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProposalResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalResultRequest*>(
        &_GetProposalResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(GetProposalResultRequest& a, GetProposalResultRequest& b) { a.Swap(&b); }
  inline void Swap(GetProposalResultRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalResultRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProposalResultRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetProposalResultRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetProposalResultRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetProposalResultRequest& from) { GetProposalResultRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetProposalResultRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.GetProposalResultRequest"; }

 protected:
  explicit GetProposalResultRequest(::google::protobuf::Arena* arena);
  GetProposalResultRequest(::google::protobuf::Arena* arena, const GetProposalResultRequest& from);
  GetProposalResultRequest(::google::protobuf::Arena* arena, GetProposalResultRequest&& from) noexcept
      : GetProposalResultRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.GetProposalResultRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetProposalResultRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class GetProposalDetailsResponse_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  GetProposalDetailsResponse_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalDetailsResponse_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GetProposalDetailsResponse_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GetProposalDetailsResponse_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GetProposalDetailsResponse_MetadataEntry_DoNotUse*>(
        &_GetProposalDetailsResponse_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetProposalDetailsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.GetProposalDetailsRequest) */ {
 public:
  inline GetProposalDetailsRequest() : GetProposalDetailsRequest(nullptr) {}
  ~GetProposalDetailsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetProposalDetailsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetProposalDetailsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalDetailsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetProposalDetailsRequest(const GetProposalDetailsRequest& from) : GetProposalDetailsRequest(nullptr, from) {}
  inline GetProposalDetailsRequest(GetProposalDetailsRequest&& from) noexcept
      : GetProposalDetailsRequest(nullptr, std::move(from)) {}
  inline GetProposalDetailsRequest& operator=(const GetProposalDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalDetailsRequest& operator=(GetProposalDetailsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProposalDetailsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProposalDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalDetailsRequest*>(
        &_GetProposalDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(GetProposalDetailsRequest& a, GetProposalDetailsRequest& b) { a.Swap(&b); }
  inline void Swap(GetProposalDetailsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalDetailsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProposalDetailsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetProposalDetailsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetProposalDetailsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetProposalDetailsRequest& from) { GetProposalDetailsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetProposalDetailsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.GetProposalDetailsRequest"; }

 protected:
  explicit GetProposalDetailsRequest(::google::protobuf::Arena* arena);
  GetProposalDetailsRequest(::google::protobuf::Arena* arena, const GetProposalDetailsRequest& from);
  GetProposalDetailsRequest(::google::protobuf::Arena* arena, GetProposalDetailsRequest&& from) noexcept
      : GetProposalDetailsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.GetProposalDetailsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetProposalDetailsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class CastVoteResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.CastVoteResponse) */ {
 public:
  inline CastVoteResponse() : CastVoteResponse(nullptr) {}
  ~CastVoteResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CastVoteResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CastVoteResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CastVoteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CastVoteResponse(const CastVoteResponse& from) : CastVoteResponse(nullptr, from) {}
  inline CastVoteResponse(CastVoteResponse&& from) noexcept
      : CastVoteResponse(nullptr, std::move(from)) {}
  inline CastVoteResponse& operator=(const CastVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastVoteResponse& operator=(CastVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CastVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CastVoteResponse* internal_default_instance() {
    return reinterpret_cast<const CastVoteResponse*>(
        &_CastVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(CastVoteResponse& a, CastVoteResponse& b) { a.Swap(&b); }
  inline void Swap(CastVoteResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CastVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CastVoteResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CastVoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CastVoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CastVoteResponse& from) { CastVoteResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CastVoteResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.CastVoteResponse"; }

 protected:
  explicit CastVoteResponse(::google::protobuf::Arena* arena);
  CastVoteResponse(::google::protobuf::Arena* arena, const CastVoteResponse& from);
  CastVoteResponse(::google::protobuf::Arena* arena, CastVoteResponse&& from) noexcept
      : CastVoteResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 4,
    kInfluenceWeightFieldNumber = 2,
    kConsistencyBonusFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // double influence_weight = 2;
  void clear_influence_weight() ;
  double influence_weight() const;
  void set_influence_weight(double value);

  private:
  double _internal_influence_weight() const;
  void _internal_set_influence_weight(double value);

  public:
  // double consistency_bonus = 3;
  void clear_consistency_bonus() ;
  double consistency_bonus() const;
  void set_consistency_bonus(double value);

  private:
  double _internal_consistency_bonus() const;
  void _internal_set_consistency_bonus(double value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.CastVoteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CastVoteResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    double influence_weight_;
    double consistency_bonus_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class CastVoteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.CastVoteRequest) */ {
 public:
  inline CastVoteRequest() : CastVoteRequest(nullptr) {}
  ~CastVoteRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CastVoteRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CastVoteRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CastVoteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CastVoteRequest(const CastVoteRequest& from) : CastVoteRequest(nullptr, from) {}
  inline CastVoteRequest(CastVoteRequest&& from) noexcept
      : CastVoteRequest(nullptr, std::move(from)) {}
  inline CastVoteRequest& operator=(const CastVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastVoteRequest& operator=(CastVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CastVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CastVoteRequest* internal_default_instance() {
    return reinterpret_cast<const CastVoteRequest*>(
        &_CastVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CastVoteRequest& a, CastVoteRequest& b) { a.Swap(&b); }
  inline void Swap(CastVoteRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CastVoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CastVoteRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CastVoteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CastVoteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CastVoteRequest& from) { CastVoteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CastVoteRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.CastVoteRequest"; }

 protected:
  explicit CastVoteRequest(::google::protobuf::Arena* arena);
  CastVoteRequest(::google::protobuf::Arena* arena, const CastVoteRequest& from);
  CastVoteRequest(::google::protobuf::Arena* arena, CastVoteRequest&& from) noexcept
      : CastVoteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
    kVoterIdFieldNumber = 3,
    kJustificationFieldNumber = 5,
    kLayerNumberFieldNumber = 2,
    kChoiceFieldNumber = 4,
  };
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // string voter_id = 3;
  void clear_voter_id() ;
  const std::string& voter_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter_id(Arg_&& arg, Args_... args);
  std::string* mutable_voter_id();
  PROTOBUF_NODISCARD std::string* release_voter_id();
  void set_allocated_voter_id(std::string* value);

  private:
  const std::string& _internal_voter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter_id(
      const std::string& value);
  std::string* _internal_mutable_voter_id();

  public:
  // string justification = 5;
  void clear_justification() ;
  const std::string& justification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_justification(Arg_&& arg, Args_... args);
  std::string* mutable_justification();
  PROTOBUF_NODISCARD std::string* release_justification();
  void set_allocated_justification(std::string* value);

  private:
  const std::string& _internal_justification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_justification(
      const std::string& value);
  std::string* _internal_mutable_justification();

  public:
  // uint32 layer_number = 2;
  void clear_layer_number() ;
  ::uint32_t layer_number() const;
  void set_layer_number(::uint32_t value);

  private:
  ::uint32_t _internal_layer_number() const;
  void _internal_set_layer_number(::uint32_t value);

  public:
  // .seigr.voting.VoteChoice choice = 4;
  void clear_choice() ;
  ::seigr::voting::VoteChoice choice() const;
  void set_choice(::seigr::voting::VoteChoice value);

  private:
  ::seigr::voting::VoteChoice _internal_choice() const;
  void _internal_set_choice(::seigr::voting::VoteChoice value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.CastVoteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CastVoteRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::ArenaStringPtr voter_id_;
    ::google::protobuf::internal::ArenaStringPtr justification_;
    ::uint32_t layer_number_;
    int choice_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class VotingAuditLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.VotingAuditLog) */ {
 public:
  inline VotingAuditLog() : VotingAuditLog(nullptr) {}
  ~VotingAuditLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VotingAuditLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VotingAuditLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotingAuditLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotingAuditLog(const VotingAuditLog& from) : VotingAuditLog(nullptr, from) {}
  inline VotingAuditLog(VotingAuditLog&& from) noexcept
      : VotingAuditLog(nullptr, std::move(from)) {}
  inline VotingAuditLog& operator=(const VotingAuditLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingAuditLog& operator=(VotingAuditLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotingAuditLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotingAuditLog* internal_default_instance() {
    return reinterpret_cast<const VotingAuditLog*>(
        &_VotingAuditLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(VotingAuditLog& a, VotingAuditLog& b) { a.Swap(&b); }
  inline void Swap(VotingAuditLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingAuditLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotingAuditLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VotingAuditLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotingAuditLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotingAuditLog& from) { VotingAuditLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VotingAuditLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.VotingAuditLog"; }

 protected:
  explicit VotingAuditLog(::google::protobuf::Arena* arena);
  VotingAuditLog(::google::protobuf::Arena* arena, const VotingAuditLog& from);
  VotingAuditLog(::google::protobuf::Arena* arena, VotingAuditLog&& from) noexcept
      : VotingAuditLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 6,
    kLogIdFieldNumber = 1,
    kActionFieldNumber = 2,
    kActorIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kDetailsFieldNumber = 5,
    kComplianceTagFieldNumber = 7,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string actor_id = 3;
  void clear_actor_id() ;
  const std::string& actor_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actor_id(Arg_&& arg, Args_... args);
  std::string* mutable_actor_id();
  PROTOBUF_NODISCARD std::string* release_actor_id();
  void set_allocated_actor_id(std::string* value);

  private:
  const std::string& _internal_actor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_id(
      const std::string& value);
  std::string* _internal_mutable_actor_id();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string details = 5;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string compliance_tag = 7;
  void clear_compliance_tag() ;
  const std::string& compliance_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_tag(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_tag();
  PROTOBUF_NODISCARD std::string* release_compliance_tag();
  void set_allocated_compliance_tag(std::string* value);

  private:
  const std::string& _internal_compliance_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_tag(
      const std::string& value);
  std::string* _internal_mutable_compliance_tag();

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.VotingAuditLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VotingAuditLog& from_msg);
    ::google::protobuf::internal::MapField<VotingAuditLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr actor_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr compliance_tag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class Vote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vote(const Vote& from) : Vote(nullptr, from) {}
  inline Vote(Vote&& from) noexcept
      : Vote(nullptr, std::move(from)) {}
  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
        &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Vote& a, Vote& b) { a.Swap(&b); }
  inline void Swap(Vote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vote& from) { Vote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.Vote"; }

 protected:
  explicit Vote(::google::protobuf::Arena* arena);
  Vote(::google::protobuf::Arena* arena, const Vote& from);
  Vote(::google::protobuf::Arena* arena, Vote&& from) noexcept
      : Vote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kVoterIdFieldNumber = 1,
    kTimestampFieldNumber = 6,
    kJustificationFieldNumber = 7,
    kInfluenceWeightFieldNumber = 3,
    kChoiceFieldNumber = 2,
    kIsConsistentFieldNumber = 5,
    kConsistencyBonusFieldNumber = 4,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string voter_id = 1;
  void clear_voter_id() ;
  const std::string& voter_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter_id(Arg_&& arg, Args_... args);
  std::string* mutable_voter_id();
  PROTOBUF_NODISCARD std::string* release_voter_id();
  void set_allocated_voter_id(std::string* value);

  private:
  const std::string& _internal_voter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter_id(
      const std::string& value);
  std::string* _internal_mutable_voter_id();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string justification = 7;
  void clear_justification() ;
  const std::string& justification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_justification(Arg_&& arg, Args_... args);
  std::string* mutable_justification();
  PROTOBUF_NODISCARD std::string* release_justification();
  void set_allocated_justification(std::string* value);

  private:
  const std::string& _internal_justification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_justification(
      const std::string& value);
  std::string* _internal_mutable_justification();

  public:
  // double influence_weight = 3;
  void clear_influence_weight() ;
  double influence_weight() const;
  void set_influence_weight(double value);

  private:
  double _internal_influence_weight() const;
  void _internal_set_influence_weight(double value);

  public:
  // .seigr.voting.VoteChoice choice = 2;
  void clear_choice() ;
  ::seigr::voting::VoteChoice choice() const;
  void set_choice(::seigr::voting::VoteChoice value);

  private:
  ::seigr::voting::VoteChoice _internal_choice() const;
  void _internal_set_choice(::seigr::voting::VoteChoice value);

  public:
  // bool is_consistent = 5;
  void clear_is_consistent() ;
  bool is_consistent() const;
  void set_is_consistent(bool value);

  private:
  bool _internal_is_consistent() const;
  void _internal_set_is_consistent(bool value);

  public:
  // double consistency_bonus = 4;
  void clear_consistency_bonus() ;
  double consistency_bonus() const;
  void set_consistency_bonus(double value);

  private:
  double _internal_consistency_bonus() const;
  void _internal_set_consistency_bonus(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.Vote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vote& from_msg);
    ::google::protobuf::internal::MapField<Vote_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr voter_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr justification_;
    double influence_weight_;
    int choice_;
    bool is_consistent_;
    double consistency_bonus_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class SubmitProposalRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.SubmitProposalRequest) */ {
 public:
  inline SubmitProposalRequest() : SubmitProposalRequest(nullptr) {}
  ~SubmitProposalRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubmitProposalRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubmitProposalRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitProposalRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitProposalRequest(const SubmitProposalRequest& from) : SubmitProposalRequest(nullptr, from) {}
  inline SubmitProposalRequest(SubmitProposalRequest&& from) noexcept
      : SubmitProposalRequest(nullptr, std::move(from)) {}
  inline SubmitProposalRequest& operator=(const SubmitProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitProposalRequest& operator=(SubmitProposalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitProposalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitProposalRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitProposalRequest*>(
        &_SubmitProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SubmitProposalRequest& a, SubmitProposalRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitProposalRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitProposalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitProposalRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubmitProposalRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitProposalRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitProposalRequest& from) { SubmitProposalRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubmitProposalRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.SubmitProposalRequest"; }

 protected:
  explicit SubmitProposalRequest(::google::protobuf::Arena* arena);
  SubmitProposalRequest(::google::protobuf::Arena* arena, const SubmitProposalRequest& from);
  SubmitProposalRequest(::google::protobuf::Arena* arena, SubmitProposalRequest&& from) noexcept
      : SubmitProposalRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescriptionFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // string description = 1;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .seigr.voting.ProposalConfig config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::seigr::voting::ProposalConfig& config() const;
  PROTOBUF_NODISCARD ::seigr::voting::ProposalConfig* release_config();
  ::seigr::voting::ProposalConfig* mutable_config();
  void set_allocated_config(::seigr::voting::ProposalConfig* value);
  void unsafe_arena_set_allocated_config(::seigr::voting::ProposalConfig* value);
  ::seigr::voting::ProposalConfig* unsafe_arena_release_config();

  private:
  const ::seigr::voting::ProposalConfig& _internal_config() const;
  ::seigr::voting::ProposalConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.SubmitProposalRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitProposalRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::seigr::voting::ProposalConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class VotingLayer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.VotingLayer) */ {
 public:
  inline VotingLayer() : VotingLayer(nullptr) {}
  ~VotingLayer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VotingLayer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VotingLayer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotingLayer(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotingLayer(const VotingLayer& from) : VotingLayer(nullptr, from) {}
  inline VotingLayer(VotingLayer&& from) noexcept
      : VotingLayer(nullptr, std::move(from)) {}
  inline VotingLayer& operator=(const VotingLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingLayer& operator=(VotingLayer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotingLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotingLayer* internal_default_instance() {
    return reinterpret_cast<const VotingLayer*>(
        &_VotingLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(VotingLayer& a, VotingLayer& b) { a.Swap(&b); }
  inline void Swap(VotingLayer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingLayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotingLayer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VotingLayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotingLayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotingLayer& from) { VotingLayer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VotingLayer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.VotingLayer"; }

 protected:
  explicit VotingLayer(::google::protobuf::Arena* arena);
  VotingLayer(::google::protobuf::Arena* arena, const VotingLayer& from);
  VotingLayer(::google::protobuf::Arena* arena, VotingLayer&& from) noexcept
      : VotingLayer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVotesFieldNumber = 3,
    kParticipantIdsFieldNumber = 6,
    kAnalysisNotesFieldNumber = 11,
    kLayerNumberFieldNumber = 1,
    kStatusFieldNumber = 2,
    kLayerInfluenceTotalFieldNumber = 4,
    kYesInfluenceTotalFieldNumber = 7,
    kTotalParticipantsFieldNumber = 5,
    kLayerOutcomeFieldNumber = 10,
    kNoInfluenceTotalFieldNumber = 8,
    kAbstainInfluenceTotalFieldNumber = 9,
  };
  // repeated .seigr.voting.Vote votes = 3;
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::seigr::voting::Vote* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>* mutable_votes();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>& _internal_votes() const;
  ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>* _internal_mutable_votes();
  public:
  const ::seigr::voting::Vote& votes(int index) const;
  ::seigr::voting::Vote* add_votes();
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>& votes() const;
  // repeated string participant_ids = 6;
  int participant_ids_size() const;
  private:
  int _internal_participant_ids_size() const;

  public:
  void clear_participant_ids() ;
  const std::string& participant_ids(int index) const;
  std::string* mutable_participant_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_ids(int index, Arg_&& value, Args_... args);
  std::string* add_participant_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_participant_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& participant_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_participant_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_participant_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_participant_ids();

  public:
  // string analysis_notes = 11;
  void clear_analysis_notes() ;
  const std::string& analysis_notes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_analysis_notes(Arg_&& arg, Args_... args);
  std::string* mutable_analysis_notes();
  PROTOBUF_NODISCARD std::string* release_analysis_notes();
  void set_allocated_analysis_notes(std::string* value);

  private:
  const std::string& _internal_analysis_notes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analysis_notes(
      const std::string& value);
  std::string* _internal_mutable_analysis_notes();

  public:
  // uint32 layer_number = 1;
  void clear_layer_number() ;
  ::uint32_t layer_number() const;
  void set_layer_number(::uint32_t value);

  private:
  ::uint32_t _internal_layer_number() const;
  void _internal_set_layer_number(::uint32_t value);

  public:
  // .seigr.voting.LayerStatus status = 2;
  void clear_status() ;
  ::seigr::voting::LayerStatus status() const;
  void set_status(::seigr::voting::LayerStatus value);

  private:
  ::seigr::voting::LayerStatus _internal_status() const;
  void _internal_set_status(::seigr::voting::LayerStatus value);

  public:
  // double layer_influence_total = 4;
  void clear_layer_influence_total() ;
  double layer_influence_total() const;
  void set_layer_influence_total(double value);

  private:
  double _internal_layer_influence_total() const;
  void _internal_set_layer_influence_total(double value);

  public:
  // double yes_influence_total = 7;
  void clear_yes_influence_total() ;
  double yes_influence_total() const;
  void set_yes_influence_total(double value);

  private:
  double _internal_yes_influence_total() const;
  void _internal_set_yes_influence_total(double value);

  public:
  // uint32 total_participants = 5;
  void clear_total_participants() ;
  ::uint32_t total_participants() const;
  void set_total_participants(::uint32_t value);

  private:
  ::uint32_t _internal_total_participants() const;
  void _internal_set_total_participants(::uint32_t value);

  public:
  // .seigr.voting.VotingOutcome layer_outcome = 10;
  void clear_layer_outcome() ;
  ::seigr::voting::VotingOutcome layer_outcome() const;
  void set_layer_outcome(::seigr::voting::VotingOutcome value);

  private:
  ::seigr::voting::VotingOutcome _internal_layer_outcome() const;
  void _internal_set_layer_outcome(::seigr::voting::VotingOutcome value);

  public:
  // double no_influence_total = 8;
  void clear_no_influence_total() ;
  double no_influence_total() const;
  void set_no_influence_total(double value);

  private:
  double _internal_no_influence_total() const;
  void _internal_set_no_influence_total(double value);

  public:
  // double abstain_influence_total = 9;
  void clear_abstain_influence_total() ;
  double abstain_influence_total() const;
  void set_abstain_influence_total(double value);

  private:
  double _internal_abstain_influence_total() const;
  void _internal_set_abstain_influence_total(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.VotingLayer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VotingLayer& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::voting::Vote > votes_;
    ::google::protobuf::RepeatedPtrField<std::string> participant_ids_;
    ::google::protobuf::internal::ArenaStringPtr analysis_notes_;
    ::uint32_t layer_number_;
    int status_;
    double layer_influence_total_;
    double yes_influence_total_;
    ::uint32_t total_participants_;
    int layer_outcome_;
    double no_influence_total_;
    double abstain_influence_total_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class VotingProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.VotingProposal) */ {
 public:
  inline VotingProposal() : VotingProposal(nullptr) {}
  ~VotingProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VotingProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VotingProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotingProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotingProposal(const VotingProposal& from) : VotingProposal(nullptr, from) {}
  inline VotingProposal(VotingProposal&& from) noexcept
      : VotingProposal(nullptr, std::move(from)) {}
  inline VotingProposal& operator=(const VotingProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingProposal& operator=(VotingProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotingProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotingProposal* internal_default_instance() {
    return reinterpret_cast<const VotingProposal*>(
        &_VotingProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VotingProposal& a, VotingProposal& b) { a.Swap(&b); }
  inline void Swap(VotingProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotingProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VotingProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotingProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotingProposal& from) { VotingProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VotingProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.VotingProposal"; }

 protected:
  explicit VotingProposal(::google::protobuf::Arena* arena);
  VotingProposal(::google::protobuf::Arena* arena, const VotingProposal& from);
  VotingProposal(::google::protobuf::Arena* arena, VotingProposal&& from) noexcept
      : VotingProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 4,
    kAssociatedDataIdsFieldNumber = 12,
    kProposalIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kCreatedByFieldNumber = 8,
    kCreatedTimestampFieldNumber = 9,
    kClosingTimestampFieldNumber = 10,
    kOutcomeJustificationFieldNumber = 11,
    kConfigFieldNumber = 7,
    kStatusFieldNumber = 3,
    kTotalLayersFieldNumber = 5,
    kOutcomeFieldNumber = 6,
    kRequiresExpertReviewFieldNumber = 13,
  };
  // repeated .seigr.voting.VotingLayer layers = 4;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::seigr::voting::VotingLayer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* _internal_mutable_layers();
  public:
  const ::seigr::voting::VotingLayer& layers(int index) const;
  ::seigr::voting::VotingLayer* add_layers();
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& layers() const;
  // repeated string associated_data_ids = 12;
  int associated_data_ids_size() const;
  private:
  int _internal_associated_data_ids_size() const;

  public:
  void clear_associated_data_ids() ;
  const std::string& associated_data_ids(int index) const;
  std::string* mutable_associated_data_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_associated_data_ids(int index, Arg_&& value, Args_... args);
  std::string* add_associated_data_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_associated_data_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& associated_data_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_associated_data_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_associated_data_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_associated_data_ids();

  public:
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string created_by = 8;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_timestamp = 9;
  void clear_created_timestamp() ;
  const std::string& created_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_created_timestamp();
  PROTOBUF_NODISCARD std::string* release_created_timestamp();
  void set_allocated_created_timestamp(std::string* value);

  private:
  const std::string& _internal_created_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_timestamp(
      const std::string& value);
  std::string* _internal_mutable_created_timestamp();

  public:
  // string closing_timestamp = 10;
  void clear_closing_timestamp() ;
  const std::string& closing_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_closing_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_closing_timestamp();
  PROTOBUF_NODISCARD std::string* release_closing_timestamp();
  void set_allocated_closing_timestamp(std::string* value);

  private:
  const std::string& _internal_closing_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_closing_timestamp(
      const std::string& value);
  std::string* _internal_mutable_closing_timestamp();

  public:
  // string outcome_justification = 11;
  void clear_outcome_justification() ;
  const std::string& outcome_justification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outcome_justification(Arg_&& arg, Args_... args);
  std::string* mutable_outcome_justification();
  PROTOBUF_NODISCARD std::string* release_outcome_justification();
  void set_allocated_outcome_justification(std::string* value);

  private:
  const std::string& _internal_outcome_justification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outcome_justification(
      const std::string& value);
  std::string* _internal_mutable_outcome_justification();

  public:
  // .seigr.voting.ProposalConfig config = 7;
  bool has_config() const;
  void clear_config() ;
  const ::seigr::voting::ProposalConfig& config() const;
  PROTOBUF_NODISCARD ::seigr::voting::ProposalConfig* release_config();
  ::seigr::voting::ProposalConfig* mutable_config();
  void set_allocated_config(::seigr::voting::ProposalConfig* value);
  void unsafe_arena_set_allocated_config(::seigr::voting::ProposalConfig* value);
  ::seigr::voting::ProposalConfig* unsafe_arena_release_config();

  private:
  const ::seigr::voting::ProposalConfig& _internal_config() const;
  ::seigr::voting::ProposalConfig* _internal_mutable_config();

  public:
  // .seigr.voting.VotingStatus status = 3;
  void clear_status() ;
  ::seigr::voting::VotingStatus status() const;
  void set_status(::seigr::voting::VotingStatus value);

  private:
  ::seigr::voting::VotingStatus _internal_status() const;
  void _internal_set_status(::seigr::voting::VotingStatus value);

  public:
  // uint32 total_layers = 5;
  void clear_total_layers() ;
  ::uint32_t total_layers() const;
  void set_total_layers(::uint32_t value);

  private:
  ::uint32_t _internal_total_layers() const;
  void _internal_set_total_layers(::uint32_t value);

  public:
  // .seigr.voting.VotingOutcome outcome = 6;
  void clear_outcome() ;
  ::seigr::voting::VotingOutcome outcome() const;
  void set_outcome(::seigr::voting::VotingOutcome value);

  private:
  ::seigr::voting::VotingOutcome _internal_outcome() const;
  void _internal_set_outcome(::seigr::voting::VotingOutcome value);

  public:
  // bool requires_expert_review = 13;
  void clear_requires_expert_review() ;
  bool requires_expert_review() const;
  void set_requires_expert_review(bool value);

  private:
  bool _internal_requires_expert_review() const;
  void _internal_set_requires_expert_review(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.VotingProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 2,
      150, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VotingProposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seigr::voting::VotingLayer > layers_;
    ::google::protobuf::RepeatedPtrField<std::string> associated_data_ids_;
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr closing_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr outcome_justification_;
    ::seigr::voting::ProposalConfig* config_;
    int status_;
    ::uint32_t total_layers_;
    int outcome_;
    bool requires_expert_review_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class GetProposalResultResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.GetProposalResultResponse) */ {
 public:
  inline GetProposalResultResponse() : GetProposalResultResponse(nullptr) {}
  ~GetProposalResultResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetProposalResultResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetProposalResultResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalResultResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetProposalResultResponse(const GetProposalResultResponse& from) : GetProposalResultResponse(nullptr, from) {}
  inline GetProposalResultResponse(GetProposalResultResponse&& from) noexcept
      : GetProposalResultResponse(nullptr, std::move(from)) {}
  inline GetProposalResultResponse& operator=(const GetProposalResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalResultResponse& operator=(GetProposalResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProposalResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProposalResultResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalResultResponse*>(
        &_GetProposalResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetProposalResultResponse& a, GetProposalResultResponse& b) { a.Swap(&b); }
  inline void Swap(GetProposalResultResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProposalResultResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetProposalResultResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetProposalResultResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetProposalResultResponse& from) { GetProposalResultResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetProposalResultResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.GetProposalResultResponse"; }

 protected:
  explicit GetProposalResultResponse(::google::protobuf::Arena* arena);
  GetProposalResultResponse(::google::protobuf::Arena* arena, const GetProposalResultResponse& from);
  GetProposalResultResponse(::google::protobuf::Arena* arena, GetProposalResultResponse&& from) noexcept
      : GetProposalResultResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 4,
    kMetadataFieldNumber = 6,
    kProposalIdFieldNumber = 1,
    kOutcomeJustificationFieldNumber = 3,
    kFinalizedTimestampFieldNumber = 5,
    kOutcomeFieldNumber = 2,
  };
  // repeated .seigr.voting.VotingLayer layers = 4;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::seigr::voting::VotingLayer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* _internal_mutable_layers();
  public:
  const ::seigr::voting::VotingLayer& layers(int index) const;
  ::seigr::voting::VotingLayer* add_layers();
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& layers() const;
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string proposal_id = 1;
  void clear_proposal_id() ;
  const std::string& proposal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposal_id(Arg_&& arg, Args_... args);
  std::string* mutable_proposal_id();
  PROTOBUF_NODISCARD std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* value);

  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(
      const std::string& value);
  std::string* _internal_mutable_proposal_id();

  public:
  // string outcome_justification = 3;
  void clear_outcome_justification() ;
  const std::string& outcome_justification() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outcome_justification(Arg_&& arg, Args_... args);
  std::string* mutable_outcome_justification();
  PROTOBUF_NODISCARD std::string* release_outcome_justification();
  void set_allocated_outcome_justification(std::string* value);

  private:
  const std::string& _internal_outcome_justification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outcome_justification(
      const std::string& value);
  std::string* _internal_mutable_outcome_justification();

  public:
  // string finalized_timestamp = 5;
  void clear_finalized_timestamp() ;
  const std::string& finalized_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_finalized_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_finalized_timestamp();
  PROTOBUF_NODISCARD std::string* release_finalized_timestamp();
  void set_allocated_finalized_timestamp(std::string* value);

  private:
  const std::string& _internal_finalized_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finalized_timestamp(
      const std::string& value);
  std::string* _internal_mutable_finalized_timestamp();

  public:
  // .seigr.voting.VotingOutcome outcome = 2;
  void clear_outcome() ;
  ::seigr::voting::VotingOutcome outcome() const;
  void set_outcome(::seigr::voting::VotingOutcome value);

  private:
  ::seigr::voting::VotingOutcome _internal_outcome() const;
  void _internal_set_outcome(::seigr::voting::VotingOutcome value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.GetProposalResultResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      106, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetProposalResultResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::voting::VotingLayer > layers_;
    ::google::protobuf::internal::MapField<GetProposalResultResponse_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr proposal_id_;
    ::google::protobuf::internal::ArenaStringPtr outcome_justification_;
    ::google::protobuf::internal::ArenaStringPtr finalized_timestamp_;
    int outcome_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};
// -------------------------------------------------------------------

class GetProposalDetailsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.voting.GetProposalDetailsResponse) */ {
 public:
  inline GetProposalDetailsResponse() : GetProposalDetailsResponse(nullptr) {}
  ~GetProposalDetailsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetProposalDetailsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetProposalDetailsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetProposalDetailsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetProposalDetailsResponse(const GetProposalDetailsResponse& from) : GetProposalDetailsResponse(nullptr, from) {}
  inline GetProposalDetailsResponse(GetProposalDetailsResponse&& from) noexcept
      : GetProposalDetailsResponse(nullptr, std::move(from)) {}
  inline GetProposalDetailsResponse& operator=(const GetProposalDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalDetailsResponse& operator=(GetProposalDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProposalDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProposalDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalDetailsResponse*>(
        &_GetProposalDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(GetProposalDetailsResponse& a, GetProposalDetailsResponse& b) { a.Swap(&b); }
  inline void Swap(GetProposalDetailsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalDetailsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProposalDetailsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetProposalDetailsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetProposalDetailsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetProposalDetailsResponse& from) { GetProposalDetailsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetProposalDetailsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.voting.GetProposalDetailsResponse"; }

 protected:
  explicit GetProposalDetailsResponse(::google::protobuf::Arena* arena);
  GetProposalDetailsResponse(::google::protobuf::Arena* arena, const GetProposalDetailsResponse& from);
  GetProposalDetailsResponse(::google::protobuf::Arena* arena, GetProposalDetailsResponse&& from) noexcept
      : GetProposalDetailsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuditLogsFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kMessageFieldNumber = 2,
    kProposalFieldNumber = 1,
  };
  // repeated .seigr.voting.VotingAuditLog audit_logs = 3;
  int audit_logs_size() const;
  private:
  int _internal_audit_logs_size() const;

  public:
  void clear_audit_logs() ;
  ::seigr::voting::VotingAuditLog* mutable_audit_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>* mutable_audit_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>& _internal_audit_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>* _internal_mutable_audit_logs();
  public:
  const ::seigr::voting::VotingAuditLog& audit_logs(int index) const;
  ::seigr::voting::VotingAuditLog* add_audit_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>& audit_logs() const;
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .seigr.voting.VotingProposal proposal = 1;
  bool has_proposal() const;
  void clear_proposal() ;
  const ::seigr::voting::VotingProposal& proposal() const;
  PROTOBUF_NODISCARD ::seigr::voting::VotingProposal* release_proposal();
  ::seigr::voting::VotingProposal* mutable_proposal();
  void set_allocated_proposal(::seigr::voting::VotingProposal* value);
  void unsafe_arena_set_allocated_proposal(::seigr::voting::VotingProposal* value);
  ::seigr::voting::VotingProposal* unsafe_arena_release_proposal();

  private:
  const ::seigr::voting::VotingProposal& _internal_proposal() const;
  ::seigr::voting::VotingProposal* _internal_mutable_proposal();

  public:
  // @@protoc_insertion_point(class_scope:seigr.voting.GetProposalDetailsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetProposalDetailsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seigr::voting::VotingAuditLog > audit_logs_;
    ::google::protobuf::internal::MapField<GetProposalDetailsResponse_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::seigr::voting::VotingProposal* proposal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mycelith_5fvoting_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProposalConfig

// double base_influence_weight = 1;
inline void ProposalConfig::clear_base_influence_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_influence_weight_ = 0;
}
inline double ProposalConfig::base_influence_weight() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.base_influence_weight)
  return _internal_base_influence_weight();
}
inline void ProposalConfig::set_base_influence_weight(double value) {
  _internal_set_base_influence_weight(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.base_influence_weight)
}
inline double ProposalConfig::_internal_base_influence_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_influence_weight_;
}
inline void ProposalConfig::_internal_set_base_influence_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_influence_weight_ = value;
}

// double influence_multiplier = 2;
inline void ProposalConfig::clear_influence_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_multiplier_ = 0;
}
inline double ProposalConfig::influence_multiplier() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.influence_multiplier)
  return _internal_influence_multiplier();
}
inline void ProposalConfig::set_influence_multiplier(double value) {
  _internal_set_influence_multiplier(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.influence_multiplier)
}
inline double ProposalConfig::_internal_influence_multiplier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.influence_multiplier_;
}
inline void ProposalConfig::_internal_set_influence_multiplier(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_multiplier_ = value;
}

// double consistency_factor = 3;
inline void ProposalConfig::clear_consistency_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_factor_ = 0;
}
inline double ProposalConfig::consistency_factor() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.consistency_factor)
  return _internal_consistency_factor();
}
inline void ProposalConfig::set_consistency_factor(double value) {
  _internal_set_consistency_factor(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.consistency_factor)
}
inline double ProposalConfig::_internal_consistency_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consistency_factor_;
}
inline void ProposalConfig::_internal_set_consistency_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_factor_ = value;
}

// uint32 min_layers_to_pass = 4;
inline void ProposalConfig::clear_min_layers_to_pass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_layers_to_pass_ = 0u;
}
inline ::uint32_t ProposalConfig::min_layers_to_pass() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.min_layers_to_pass)
  return _internal_min_layers_to_pass();
}
inline void ProposalConfig::set_min_layers_to_pass(::uint32_t value) {
  _internal_set_min_layers_to_pass(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.min_layers_to_pass)
}
inline ::uint32_t ProposalConfig::_internal_min_layers_to_pass() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_layers_to_pass_;
}
inline void ProposalConfig::_internal_set_min_layers_to_pass(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_layers_to_pass_ = value;
}

// uint32 required_participation = 5;
inline void ProposalConfig::clear_required_participation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_participation_ = 0u;
}
inline ::uint32_t ProposalConfig::required_participation() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.required_participation)
  return _internal_required_participation();
}
inline void ProposalConfig::set_required_participation(::uint32_t value) {
  _internal_set_required_participation(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.required_participation)
}
inline ::uint32_t ProposalConfig::_internal_required_participation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.required_participation_;
}
inline void ProposalConfig::_internal_set_required_participation(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_participation_ = value;
}

// bool adaptive_thresholds = 6;
inline void ProposalConfig::clear_adaptive_thresholds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_thresholds_ = false;
}
inline bool ProposalConfig::adaptive_thresholds() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.adaptive_thresholds)
  return _internal_adaptive_thresholds();
}
inline void ProposalConfig::set_adaptive_thresholds(bool value) {
  _internal_set_adaptive_thresholds(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.adaptive_thresholds)
}
inline bool ProposalConfig::_internal_adaptive_thresholds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_thresholds_;
}
inline void ProposalConfig::_internal_set_adaptive_thresholds(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_thresholds_ = value;
}

// double participation_factor = 7;
inline void ProposalConfig::clear_participation_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participation_factor_ = 0;
}
inline double ProposalConfig::participation_factor() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.participation_factor)
  return _internal_participation_factor();
}
inline void ProposalConfig::set_participation_factor(double value) {
  _internal_set_participation_factor(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.participation_factor)
}
inline double ProposalConfig::_internal_participation_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participation_factor_;
}
inline void ProposalConfig::_internal_set_participation_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participation_factor_ = value;
}

// double engagement_factor = 8;
inline void ProposalConfig::clear_engagement_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engagement_factor_ = 0;
}
inline double ProposalConfig::engagement_factor() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.engagement_factor)
  return _internal_engagement_factor();
}
inline void ProposalConfig::set_engagement_factor(double value) {
  _internal_set_engagement_factor(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.engagement_factor)
}
inline double ProposalConfig::_internal_engagement_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.engagement_factor_;
}
inline void ProposalConfig::_internal_set_engagement_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.engagement_factor_ = value;
}

// bool enable_dynamic_layer_adjustments = 9;
inline void ProposalConfig::clear_enable_dynamic_layer_adjustments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dynamic_layer_adjustments_ = false;
}
inline bool ProposalConfig::enable_dynamic_layer_adjustments() const {
  // @@protoc_insertion_point(field_get:seigr.voting.ProposalConfig.enable_dynamic_layer_adjustments)
  return _internal_enable_dynamic_layer_adjustments();
}
inline void ProposalConfig::set_enable_dynamic_layer_adjustments(bool value) {
  _internal_set_enable_dynamic_layer_adjustments(value);
  // @@protoc_insertion_point(field_set:seigr.voting.ProposalConfig.enable_dynamic_layer_adjustments)
}
inline bool ProposalConfig::_internal_enable_dynamic_layer_adjustments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_dynamic_layer_adjustments_;
}
inline void ProposalConfig::_internal_set_enable_dynamic_layer_adjustments(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dynamic_layer_adjustments_ = value;
}

// -------------------------------------------------------------------

// VotingProposal

// string proposal_id = 1;
inline void VotingProposal::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& VotingProposal::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.proposal_id)
}
inline std::string* VotingProposal::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.proposal_id)
  return _s;
}
inline const std::string& VotingProposal::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void VotingProposal::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void VotingProposal::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.proposal_id)
}

// string description = 2;
inline void VotingProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& VotingProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.description)
}
inline std::string* VotingProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.description)
  return _s;
}
inline const std::string& VotingProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void VotingProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.description)
  return _impl_.description_.Release();
}
inline void VotingProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.description)
}

// .seigr.voting.VotingStatus status = 3;
inline void VotingProposal::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::voting::VotingStatus VotingProposal::status() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.status)
  return _internal_status();
}
inline void VotingProposal::set_status(::seigr::voting::VotingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.status)
}
inline ::seigr::voting::VotingStatus VotingProposal::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VotingStatus>(_impl_.status_);
}
inline void VotingProposal::_internal_set_status(::seigr::voting::VotingStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated .seigr.voting.VotingLayer layers = 4;
inline int VotingProposal::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int VotingProposal::layers_size() const {
  return _internal_layers_size();
}
inline void VotingProposal::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::seigr::voting::VotingLayer* VotingProposal::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* VotingProposal::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.VotingProposal.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::seigr::voting::VotingLayer& VotingProposal::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.layers)
  return _internal_layers().Get(index);
}
inline ::seigr::voting::VotingLayer* VotingProposal::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::voting::VotingLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:seigr.voting.VotingProposal.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& VotingProposal::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.VotingProposal.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>&
VotingProposal::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>*
VotingProposal::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

// uint32 total_layers = 5;
inline void VotingProposal::clear_total_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_layers_ = 0u;
}
inline ::uint32_t VotingProposal::total_layers() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.total_layers)
  return _internal_total_layers();
}
inline void VotingProposal::set_total_layers(::uint32_t value) {
  _internal_set_total_layers(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.total_layers)
}
inline ::uint32_t VotingProposal::_internal_total_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_layers_;
}
inline void VotingProposal::_internal_set_total_layers(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_layers_ = value;
}

// .seigr.voting.VotingOutcome outcome = 6;
inline void VotingProposal::clear_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_ = 0;
}
inline ::seigr::voting::VotingOutcome VotingProposal::outcome() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.outcome)
  return _internal_outcome();
}
inline void VotingProposal::set_outcome(::seigr::voting::VotingOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.outcome)
}
inline ::seigr::voting::VotingOutcome VotingProposal::_internal_outcome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VotingOutcome>(_impl_.outcome_);
}
inline void VotingProposal::_internal_set_outcome(::seigr::voting::VotingOutcome value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_ = value;
}

// .seigr.voting.ProposalConfig config = 7;
inline bool VotingProposal::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void VotingProposal::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::voting::ProposalConfig& VotingProposal::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::voting::ProposalConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::voting::ProposalConfig&>(::seigr::voting::_ProposalConfig_default_instance_);
}
inline const ::seigr::voting::ProposalConfig& VotingProposal::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.config)
  return _internal_config();
}
inline void VotingProposal::unsafe_arena_set_allocated_config(::seigr::voting::ProposalConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.voting.VotingProposal.config)
}
inline ::seigr::voting::ProposalConfig* VotingProposal::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::ProposalConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::voting::ProposalConfig* VotingProposal::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::ProposalConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::seigr::voting::ProposalConfig* VotingProposal::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::voting::ProposalConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(p);
  }
  return _impl_.config_;
}
inline ::seigr::voting::ProposalConfig* VotingProposal::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::voting::ProposalConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.config)
  return _msg;
}
inline void VotingProposal::set_allocated_config(::seigr::voting::ProposalConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.config)
}

// string created_by = 8;
inline void VotingProposal::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& VotingProposal::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.created_by)
}
inline std::string* VotingProposal::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.created_by)
  return _s;
}
inline const std::string& VotingProposal::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void VotingProposal::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.created_by)
  return _impl_.created_by_.Release();
}
inline void VotingProposal::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.created_by)
}

// string created_timestamp = 9;
inline void VotingProposal::clear_created_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_.ClearToEmpty();
}
inline const std::string& VotingProposal::created_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.created_timestamp)
  return _internal_created_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_created_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.created_timestamp)
}
inline std::string* VotingProposal::mutable_created_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.created_timestamp)
  return _s;
}
inline const std::string& VotingProposal::_internal_created_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_timestamp_.Get();
}
inline void VotingProposal::_internal_set_created_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_created_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_timestamp_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_created_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.created_timestamp)
  return _impl_.created_timestamp_.Release();
}
inline void VotingProposal::set_allocated_created_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_timestamp_.IsDefault()) {
    _impl_.created_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.created_timestamp)
}

// string closing_timestamp = 10;
inline void VotingProposal::clear_closing_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.closing_timestamp_.ClearToEmpty();
}
inline const std::string& VotingProposal::closing_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.closing_timestamp)
  return _internal_closing_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_closing_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.closing_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.closing_timestamp)
}
inline std::string* VotingProposal::mutable_closing_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_closing_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.closing_timestamp)
  return _s;
}
inline const std::string& VotingProposal::_internal_closing_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.closing_timestamp_.Get();
}
inline void VotingProposal::_internal_set_closing_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.closing_timestamp_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_closing_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.closing_timestamp_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_closing_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.closing_timestamp)
  return _impl_.closing_timestamp_.Release();
}
inline void VotingProposal::set_allocated_closing_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.closing_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.closing_timestamp_.IsDefault()) {
    _impl_.closing_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.closing_timestamp)
}

// string outcome_justification = 11;
inline void VotingProposal::clear_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.ClearToEmpty();
}
inline const std::string& VotingProposal::outcome_justification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.outcome_justification)
  return _internal_outcome_justification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingProposal::set_outcome_justification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.outcome_justification)
}
inline std::string* VotingProposal::mutable_outcome_justification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outcome_justification();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.outcome_justification)
  return _s;
}
inline const std::string& VotingProposal::_internal_outcome_justification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outcome_justification_.Get();
}
inline void VotingProposal::_internal_set_outcome_justification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.Set(value, GetArena());
}
inline std::string* VotingProposal::_internal_mutable_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.outcome_justification_.Mutable( GetArena());
}
inline std::string* VotingProposal::release_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingProposal.outcome_justification)
  return _impl_.outcome_justification_.Release();
}
inline void VotingProposal::set_allocated_outcome_justification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.outcome_justification_.IsDefault()) {
    _impl_.outcome_justification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingProposal.outcome_justification)
}

// repeated string associated_data_ids = 12;
inline int VotingProposal::_internal_associated_data_ids_size() const {
  return _internal_associated_data_ids().size();
}
inline int VotingProposal::associated_data_ids_size() const {
  return _internal_associated_data_ids_size();
}
inline void VotingProposal::clear_associated_data_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_data_ids_.Clear();
}
inline std::string* VotingProposal::add_associated_data_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_associated_data_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.voting.VotingProposal.associated_data_ids)
  return _s;
}
inline const std::string& VotingProposal::associated_data_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.associated_data_ids)
  return _internal_associated_data_ids().Get(index);
}
inline std::string* VotingProposal::mutable_associated_data_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingProposal.associated_data_ids)
  return _internal_mutable_associated_data_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void VotingProposal::set_associated_data_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_associated_data_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.associated_data_ids)
}
template <typename Arg_, typename... Args_>
inline void VotingProposal::add_associated_data_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_associated_data_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.voting.VotingProposal.associated_data_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VotingProposal::associated_data_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.VotingProposal.associated_data_ids)
  return _internal_associated_data_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VotingProposal::mutable_associated_data_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.VotingProposal.associated_data_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_associated_data_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VotingProposal::_internal_associated_data_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.associated_data_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VotingProposal::_internal_mutable_associated_data_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.associated_data_ids_;
}

// bool requires_expert_review = 13;
inline void VotingProposal::clear_requires_expert_review() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_expert_review_ = false;
}
inline bool VotingProposal::requires_expert_review() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingProposal.requires_expert_review)
  return _internal_requires_expert_review();
}
inline void VotingProposal::set_requires_expert_review(bool value) {
  _internal_set_requires_expert_review(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingProposal.requires_expert_review)
}
inline bool VotingProposal::_internal_requires_expert_review() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_expert_review_;
}
inline void VotingProposal::_internal_set_requires_expert_review(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_expert_review_ = value;
}

// -------------------------------------------------------------------

// VotingLayer

// uint32 layer_number = 1;
inline void VotingLayer::clear_layer_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_number_ = 0u;
}
inline ::uint32_t VotingLayer::layer_number() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.layer_number)
  return _internal_layer_number();
}
inline void VotingLayer::set_layer_number(::uint32_t value) {
  _internal_set_layer_number(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.layer_number)
}
inline ::uint32_t VotingLayer::_internal_layer_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layer_number_;
}
inline void VotingLayer::_internal_set_layer_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_number_ = value;
}

// .seigr.voting.LayerStatus status = 2;
inline void VotingLayer::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::voting::LayerStatus VotingLayer::status() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.status)
  return _internal_status();
}
inline void VotingLayer::set_status(::seigr::voting::LayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.status)
}
inline ::seigr::voting::LayerStatus VotingLayer::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::LayerStatus>(_impl_.status_);
}
inline void VotingLayer::_internal_set_status(::seigr::voting::LayerStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated .seigr.voting.Vote votes = 3;
inline int VotingLayer::_internal_votes_size() const {
  return _internal_votes().size();
}
inline int VotingLayer::votes_size() const {
  return _internal_votes_size();
}
inline void VotingLayer::clear_votes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.votes_.Clear();
}
inline ::seigr::voting::Vote* VotingLayer::mutable_votes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingLayer.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>* VotingLayer::mutable_votes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.VotingLayer.votes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_votes();
}
inline const ::seigr::voting::Vote& VotingLayer::votes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.votes)
  return _internal_votes().Get(index);
}
inline ::seigr::voting::Vote* VotingLayer::add_votes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::voting::Vote* _add = _internal_mutable_votes()->Add();
  // @@protoc_insertion_point(field_add:seigr.voting.VotingLayer.votes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>& VotingLayer::votes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.VotingLayer.votes)
  return _internal_votes();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>&
VotingLayer::_internal_votes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.votes_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::Vote>*
VotingLayer::_internal_mutable_votes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.votes_;
}

// double layer_influence_total = 4;
inline void VotingLayer::clear_layer_influence_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_influence_total_ = 0;
}
inline double VotingLayer::layer_influence_total() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.layer_influence_total)
  return _internal_layer_influence_total();
}
inline void VotingLayer::set_layer_influence_total(double value) {
  _internal_set_layer_influence_total(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.layer_influence_total)
}
inline double VotingLayer::_internal_layer_influence_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layer_influence_total_;
}
inline void VotingLayer::_internal_set_layer_influence_total(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_influence_total_ = value;
}

// uint32 total_participants = 5;
inline void VotingLayer::clear_total_participants() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_participants_ = 0u;
}
inline ::uint32_t VotingLayer::total_participants() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.total_participants)
  return _internal_total_participants();
}
inline void VotingLayer::set_total_participants(::uint32_t value) {
  _internal_set_total_participants(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.total_participants)
}
inline ::uint32_t VotingLayer::_internal_total_participants() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_participants_;
}
inline void VotingLayer::_internal_set_total_participants(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_participants_ = value;
}

// repeated string participant_ids = 6;
inline int VotingLayer::_internal_participant_ids_size() const {
  return _internal_participant_ids().size();
}
inline int VotingLayer::participant_ids_size() const {
  return _internal_participant_ids_size();
}
inline void VotingLayer::clear_participant_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_ids_.Clear();
}
inline std::string* VotingLayer::add_participant_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_participant_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.voting.VotingLayer.participant_ids)
  return _s;
}
inline const std::string& VotingLayer::participant_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.participant_ids)
  return _internal_participant_ids().Get(index);
}
inline std::string* VotingLayer::mutable_participant_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingLayer.participant_ids)
  return _internal_mutable_participant_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void VotingLayer::set_participant_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_participant_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.participant_ids)
}
template <typename Arg_, typename... Args_>
inline void VotingLayer::add_participant_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_participant_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.voting.VotingLayer.participant_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VotingLayer::participant_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.VotingLayer.participant_ids)
  return _internal_participant_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VotingLayer::mutable_participant_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.VotingLayer.participant_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_participant_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VotingLayer::_internal_participant_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VotingLayer::_internal_mutable_participant_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.participant_ids_;
}

// double yes_influence_total = 7;
inline void VotingLayer::clear_yes_influence_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_influence_total_ = 0;
}
inline double VotingLayer::yes_influence_total() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.yes_influence_total)
  return _internal_yes_influence_total();
}
inline void VotingLayer::set_yes_influence_total(double value) {
  _internal_set_yes_influence_total(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.yes_influence_total)
}
inline double VotingLayer::_internal_yes_influence_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yes_influence_total_;
}
inline void VotingLayer::_internal_set_yes_influence_total(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_influence_total_ = value;
}

// double no_influence_total = 8;
inline void VotingLayer::clear_no_influence_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_influence_total_ = 0;
}
inline double VotingLayer::no_influence_total() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.no_influence_total)
  return _internal_no_influence_total();
}
inline void VotingLayer::set_no_influence_total(double value) {
  _internal_set_no_influence_total(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.no_influence_total)
}
inline double VotingLayer::_internal_no_influence_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_influence_total_;
}
inline void VotingLayer::_internal_set_no_influence_total(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_influence_total_ = value;
}

// double abstain_influence_total = 9;
inline void VotingLayer::clear_abstain_influence_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_influence_total_ = 0;
}
inline double VotingLayer::abstain_influence_total() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.abstain_influence_total)
  return _internal_abstain_influence_total();
}
inline void VotingLayer::set_abstain_influence_total(double value) {
  _internal_set_abstain_influence_total(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.abstain_influence_total)
}
inline double VotingLayer::_internal_abstain_influence_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abstain_influence_total_;
}
inline void VotingLayer::_internal_set_abstain_influence_total(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_influence_total_ = value;
}

// .seigr.voting.VotingOutcome layer_outcome = 10;
inline void VotingLayer::clear_layer_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_outcome_ = 0;
}
inline ::seigr::voting::VotingOutcome VotingLayer::layer_outcome() const {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.layer_outcome)
  return _internal_layer_outcome();
}
inline void VotingLayer::set_layer_outcome(::seigr::voting::VotingOutcome value) {
  _internal_set_layer_outcome(value);
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.layer_outcome)
}
inline ::seigr::voting::VotingOutcome VotingLayer::_internal_layer_outcome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VotingOutcome>(_impl_.layer_outcome_);
}
inline void VotingLayer::_internal_set_layer_outcome(::seigr::voting::VotingOutcome value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_outcome_ = value;
}

// string analysis_notes = 11;
inline void VotingLayer::clear_analysis_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_notes_.ClearToEmpty();
}
inline const std::string& VotingLayer::analysis_notes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingLayer.analysis_notes)
  return _internal_analysis_notes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingLayer::set_analysis_notes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_notes_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingLayer.analysis_notes)
}
inline std::string* VotingLayer::mutable_analysis_notes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_analysis_notes();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingLayer.analysis_notes)
  return _s;
}
inline const std::string& VotingLayer::_internal_analysis_notes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analysis_notes_.Get();
}
inline void VotingLayer::_internal_set_analysis_notes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_notes_.Set(value, GetArena());
}
inline std::string* VotingLayer::_internal_mutable_analysis_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.analysis_notes_.Mutable( GetArena());
}
inline std::string* VotingLayer::release_analysis_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingLayer.analysis_notes)
  return _impl_.analysis_notes_.Release();
}
inline void VotingLayer::set_allocated_analysis_notes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analysis_notes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.analysis_notes_.IsDefault()) {
    _impl_.analysis_notes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingLayer.analysis_notes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Vote

// string voter_id = 1;
inline void Vote::clear_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.ClearToEmpty();
}
inline const std::string& Vote::voter_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.voter_id)
  return _internal_voter_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_voter_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.voter_id)
}
inline std::string* Vote::mutable_voter_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voter_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.Vote.voter_id)
  return _s;
}
inline const std::string& Vote::_internal_voter_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voter_id_.Get();
}
inline void Vote::_internal_set_voter_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.voter_id_.Mutable( GetArena());
}
inline std::string* Vote::release_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.Vote.voter_id)
  return _impl_.voter_id_.Release();
}
inline void Vote::set_allocated_voter_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.voter_id_.IsDefault()) {
    _impl_.voter_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.Vote.voter_id)
}

// .seigr.voting.VoteChoice choice = 2;
inline void Vote::clear_choice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.choice_ = 0;
}
inline ::seigr::voting::VoteChoice Vote::choice() const {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.choice)
  return _internal_choice();
}
inline void Vote::set_choice(::seigr::voting::VoteChoice value) {
  _internal_set_choice(value);
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.choice)
}
inline ::seigr::voting::VoteChoice Vote::_internal_choice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VoteChoice>(_impl_.choice_);
}
inline void Vote::_internal_set_choice(::seigr::voting::VoteChoice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.choice_ = value;
}

// double influence_weight = 3;
inline void Vote::clear_influence_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_weight_ = 0;
}
inline double Vote::influence_weight() const {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.influence_weight)
  return _internal_influence_weight();
}
inline void Vote::set_influence_weight(double value) {
  _internal_set_influence_weight(value);
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.influence_weight)
}
inline double Vote::_internal_influence_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.influence_weight_;
}
inline void Vote::_internal_set_influence_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_weight_ = value;
}

// double consistency_bonus = 4;
inline void Vote::clear_consistency_bonus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_bonus_ = 0;
}
inline double Vote::consistency_bonus() const {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.consistency_bonus)
  return _internal_consistency_bonus();
}
inline void Vote::set_consistency_bonus(double value) {
  _internal_set_consistency_bonus(value);
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.consistency_bonus)
}
inline double Vote::_internal_consistency_bonus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consistency_bonus_;
}
inline void Vote::_internal_set_consistency_bonus(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_bonus_ = value;
}

// bool is_consistent = 5;
inline void Vote::clear_is_consistent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_consistent_ = false;
}
inline bool Vote::is_consistent() const {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.is_consistent)
  return _internal_is_consistent();
}
inline void Vote::set_is_consistent(bool value) {
  _internal_set_is_consistent(value);
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.is_consistent)
}
inline bool Vote::_internal_is_consistent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_consistent_;
}
inline void Vote::_internal_set_is_consistent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_consistent_ = value;
}

// string timestamp = 6;
inline void Vote::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Vote::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.timestamp)
}
inline std::string* Vote::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.voting.Vote.timestamp)
  return _s;
}
inline const std::string& Vote::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Vote::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Vote::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.Vote.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Vote::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.Vote.timestamp)
}

// string justification = 7;
inline void Vote::clear_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.ClearToEmpty();
}
inline const std::string& Vote::justification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.Vote.justification)
  return _internal_justification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_justification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.Vote.justification)
}
inline std::string* Vote::mutable_justification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_justification();
  // @@protoc_insertion_point(field_mutable:seigr.voting.Vote.justification)
  return _s;
}
inline const std::string& Vote::_internal_justification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.justification_.Get();
}
inline void Vote::_internal_set_justification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.justification_.Mutable( GetArena());
}
inline std::string* Vote::release_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.Vote.justification)
  return _impl_.justification_.Release();
}
inline void Vote::set_allocated_justification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.justification_.IsDefault()) {
    _impl_.justification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.Vote.justification)
}

// map<string, string> metadata = 8;
inline int Vote::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Vote::metadata_size() const {
  return _internal_metadata_size();
}
inline void Vote::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Vote::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Vote::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.voting.Vote.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* Vote::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Vote::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.voting.Vote.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VotingAuditLog

// string log_id = 1;
inline void VotingAuditLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.log_id)
}
inline std::string* VotingAuditLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.log_id)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void VotingAuditLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.log_id)
  return _impl_.log_id_.Release();
}
inline void VotingAuditLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.log_id)
}

// string action = 2;
inline void VotingAuditLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.action)
}
inline std::string* VotingAuditLog::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.action)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void VotingAuditLog::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.action)
  return _impl_.action_.Release();
}
inline void VotingAuditLog::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.action)
}

// string actor_id = 3;
inline void VotingAuditLog::clear_actor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actor_id_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::actor_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.actor_id)
  return _internal_actor_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_actor_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actor_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.actor_id)
}
inline std::string* VotingAuditLog::mutable_actor_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actor_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.actor_id)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_actor_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actor_id_.Get();
}
inline void VotingAuditLog::_internal_set_actor_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actor_id_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_actor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.actor_id_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_actor_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.actor_id)
  return _impl_.actor_id_.Release();
}
inline void VotingAuditLog::set_allocated_actor_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actor_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.actor_id_.IsDefault()) {
    _impl_.actor_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.actor_id)
}

// string timestamp = 4;
inline void VotingAuditLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.timestamp)
}
inline std::string* VotingAuditLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.timestamp)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void VotingAuditLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void VotingAuditLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.timestamp)
}

// string details = 5;
inline void VotingAuditLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.details)
}
inline std::string* VotingAuditLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.details)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void VotingAuditLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.details)
  return _impl_.details_.Release();
}
inline void VotingAuditLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.details)
}

// map<string, string> metadata = 6;
inline int VotingAuditLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int VotingAuditLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void VotingAuditLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& VotingAuditLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& VotingAuditLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.voting.VotingAuditLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* VotingAuditLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* VotingAuditLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.voting.VotingAuditLog.metadata)
  return _internal_mutable_metadata();
}

// string compliance_tag = 7;
inline void VotingAuditLog::clear_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.ClearToEmpty();
}
inline const std::string& VotingAuditLog::compliance_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.VotingAuditLog.compliance_tag)
  return _internal_compliance_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotingAuditLog::set_compliance_tag(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.VotingAuditLog.compliance_tag)
}
inline std::string* VotingAuditLog::mutable_compliance_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_tag();
  // @@protoc_insertion_point(field_mutable:seigr.voting.VotingAuditLog.compliance_tag)
  return _s;
}
inline const std::string& VotingAuditLog::_internal_compliance_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_tag_.Get();
}
inline void VotingAuditLog::_internal_set_compliance_tag(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(value, GetArena());
}
inline std::string* VotingAuditLog::_internal_mutable_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_tag_.Mutable( GetArena());
}
inline std::string* VotingAuditLog::release_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.VotingAuditLog.compliance_tag)
  return _impl_.compliance_tag_.Release();
}
inline void VotingAuditLog::set_allocated_compliance_tag(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_tag_.IsDefault()) {
    _impl_.compliance_tag_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.VotingAuditLog.compliance_tag)
}

// -------------------------------------------------------------------

// SubmitProposalRequest

// string description = 1;
inline void SubmitProposalRequest::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SubmitProposalRequest::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.SubmitProposalRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitProposalRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.SubmitProposalRequest.description)
}
inline std::string* SubmitProposalRequest::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.voting.SubmitProposalRequest.description)
  return _s;
}
inline const std::string& SubmitProposalRequest::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void SubmitProposalRequest::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* SubmitProposalRequest::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* SubmitProposalRequest::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.SubmitProposalRequest.description)
  return _impl_.description_.Release();
}
inline void SubmitProposalRequest::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.SubmitProposalRequest.description)
}

// .seigr.voting.ProposalConfig config = 2;
inline bool SubmitProposalRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void SubmitProposalRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::voting::ProposalConfig& SubmitProposalRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::voting::ProposalConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::voting::ProposalConfig&>(::seigr::voting::_ProposalConfig_default_instance_);
}
inline const ::seigr::voting::ProposalConfig& SubmitProposalRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.SubmitProposalRequest.config)
  return _internal_config();
}
inline void SubmitProposalRequest::unsafe_arena_set_allocated_config(::seigr::voting::ProposalConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.voting.SubmitProposalRequest.config)
}
inline ::seigr::voting::ProposalConfig* SubmitProposalRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::ProposalConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::voting::ProposalConfig* SubmitProposalRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.SubmitProposalRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::ProposalConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::seigr::voting::ProposalConfig* SubmitProposalRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::voting::ProposalConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(p);
  }
  return _impl_.config_;
}
inline ::seigr::voting::ProposalConfig* SubmitProposalRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::voting::ProposalConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:seigr.voting.SubmitProposalRequest.config)
  return _msg;
}
inline void SubmitProposalRequest::set_allocated_config(::seigr::voting::ProposalConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::seigr::voting::ProposalConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.SubmitProposalRequest.config)
}

// -------------------------------------------------------------------

// SubmitProposalResponse

// string proposal_id = 1;
inline void SubmitProposalResponse::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& SubmitProposalResponse::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.SubmitProposalResponse.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitProposalResponse::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.SubmitProposalResponse.proposal_id)
}
inline std::string* SubmitProposalResponse::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.SubmitProposalResponse.proposal_id)
  return _s;
}
inline const std::string& SubmitProposalResponse::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void SubmitProposalResponse::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* SubmitProposalResponse::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* SubmitProposalResponse::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.SubmitProposalResponse.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void SubmitProposalResponse::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.SubmitProposalResponse.proposal_id)
}

// bool success = 2;
inline void SubmitProposalResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SubmitProposalResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.voting.SubmitProposalResponse.success)
  return _internal_success();
}
inline void SubmitProposalResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.voting.SubmitProposalResponse.success)
}
inline bool SubmitProposalResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SubmitProposalResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 3;
inline void SubmitProposalResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SubmitProposalResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.SubmitProposalResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitProposalResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.SubmitProposalResponse.message)
}
inline std::string* SubmitProposalResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.voting.SubmitProposalResponse.message)
  return _s;
}
inline const std::string& SubmitProposalResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SubmitProposalResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SubmitProposalResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SubmitProposalResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.SubmitProposalResponse.message)
  return _impl_.message_.Release();
}
inline void SubmitProposalResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.SubmitProposalResponse.message)
}

// -------------------------------------------------------------------

// CastVoteRequest

// string proposal_id = 1;
inline void CastVoteRequest::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& CastVoteRequest::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteRequest.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CastVoteRequest::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteRequest.proposal_id)
}
inline std::string* CastVoteRequest::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.CastVoteRequest.proposal_id)
  return _s;
}
inline const std::string& CastVoteRequest::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void CastVoteRequest::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* CastVoteRequest::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* CastVoteRequest::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.CastVoteRequest.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void CastVoteRequest::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.CastVoteRequest.proposal_id)
}

// uint32 layer_number = 2;
inline void CastVoteRequest::clear_layer_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_number_ = 0u;
}
inline ::uint32_t CastVoteRequest::layer_number() const {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteRequest.layer_number)
  return _internal_layer_number();
}
inline void CastVoteRequest::set_layer_number(::uint32_t value) {
  _internal_set_layer_number(value);
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteRequest.layer_number)
}
inline ::uint32_t CastVoteRequest::_internal_layer_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layer_number_;
}
inline void CastVoteRequest::_internal_set_layer_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_number_ = value;
}

// string voter_id = 3;
inline void CastVoteRequest::clear_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.ClearToEmpty();
}
inline const std::string& CastVoteRequest::voter_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteRequest.voter_id)
  return _internal_voter_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CastVoteRequest::set_voter_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteRequest.voter_id)
}
inline std::string* CastVoteRequest::mutable_voter_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voter_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.CastVoteRequest.voter_id)
  return _s;
}
inline const std::string& CastVoteRequest::_internal_voter_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voter_id_.Get();
}
inline void CastVoteRequest::_internal_set_voter_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.Set(value, GetArena());
}
inline std::string* CastVoteRequest::_internal_mutable_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.voter_id_.Mutable( GetArena());
}
inline std::string* CastVoteRequest::release_voter_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.CastVoteRequest.voter_id)
  return _impl_.voter_id_.Release();
}
inline void CastVoteRequest::set_allocated_voter_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.voter_id_.IsDefault()) {
    _impl_.voter_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.CastVoteRequest.voter_id)
}

// .seigr.voting.VoteChoice choice = 4;
inline void CastVoteRequest::clear_choice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.choice_ = 0;
}
inline ::seigr::voting::VoteChoice CastVoteRequest::choice() const {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteRequest.choice)
  return _internal_choice();
}
inline void CastVoteRequest::set_choice(::seigr::voting::VoteChoice value) {
  _internal_set_choice(value);
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteRequest.choice)
}
inline ::seigr::voting::VoteChoice CastVoteRequest::_internal_choice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VoteChoice>(_impl_.choice_);
}
inline void CastVoteRequest::_internal_set_choice(::seigr::voting::VoteChoice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.choice_ = value;
}

// string justification = 5;
inline void CastVoteRequest::clear_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.ClearToEmpty();
}
inline const std::string& CastVoteRequest::justification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteRequest.justification)
  return _internal_justification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CastVoteRequest::set_justification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteRequest.justification)
}
inline std::string* CastVoteRequest::mutable_justification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_justification();
  // @@protoc_insertion_point(field_mutable:seigr.voting.CastVoteRequest.justification)
  return _s;
}
inline const std::string& CastVoteRequest::_internal_justification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.justification_.Get();
}
inline void CastVoteRequest::_internal_set_justification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.Set(value, GetArena());
}
inline std::string* CastVoteRequest::_internal_mutable_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.justification_.Mutable( GetArena());
}
inline std::string* CastVoteRequest::release_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.CastVoteRequest.justification)
  return _impl_.justification_.Release();
}
inline void CastVoteRequest::set_allocated_justification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.justification_.IsDefault()) {
    _impl_.justification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.CastVoteRequest.justification)
}

// -------------------------------------------------------------------

// CastVoteResponse

// bool success = 1;
inline void CastVoteResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CastVoteResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteResponse.success)
  return _internal_success();
}
inline void CastVoteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteResponse.success)
}
inline bool CastVoteResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CastVoteResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// double influence_weight = 2;
inline void CastVoteResponse::clear_influence_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_weight_ = 0;
}
inline double CastVoteResponse::influence_weight() const {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteResponse.influence_weight)
  return _internal_influence_weight();
}
inline void CastVoteResponse::set_influence_weight(double value) {
  _internal_set_influence_weight(value);
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteResponse.influence_weight)
}
inline double CastVoteResponse::_internal_influence_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.influence_weight_;
}
inline void CastVoteResponse::_internal_set_influence_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.influence_weight_ = value;
}

// double consistency_bonus = 3;
inline void CastVoteResponse::clear_consistency_bonus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_bonus_ = 0;
}
inline double CastVoteResponse::consistency_bonus() const {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteResponse.consistency_bonus)
  return _internal_consistency_bonus();
}
inline void CastVoteResponse::set_consistency_bonus(double value) {
  _internal_set_consistency_bonus(value);
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteResponse.consistency_bonus)
}
inline double CastVoteResponse::_internal_consistency_bonus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consistency_bonus_;
}
inline void CastVoteResponse::_internal_set_consistency_bonus(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consistency_bonus_ = value;
}

// string message = 4;
inline void CastVoteResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CastVoteResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.CastVoteResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CastVoteResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.CastVoteResponse.message)
}
inline std::string* CastVoteResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.voting.CastVoteResponse.message)
  return _s;
}
inline const std::string& CastVoteResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CastVoteResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CastVoteResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CastVoteResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.CastVoteResponse.message)
  return _impl_.message_.Release();
}
inline void CastVoteResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.CastVoteResponse.message)
}

// -------------------------------------------------------------------

// GetProposalResultRequest

// string proposal_id = 1;
inline void GetProposalResultRequest::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& GetProposalResultRequest::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultRequest.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalResultRequest::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalResultRequest.proposal_id)
}
inline std::string* GetProposalResultRequest::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalResultRequest.proposal_id)
  return _s;
}
inline const std::string& GetProposalResultRequest::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void GetProposalResultRequest::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* GetProposalResultRequest::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* GetProposalResultRequest::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalResultRequest.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void GetProposalResultRequest::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalResultRequest.proposal_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetProposalResultResponse

// string proposal_id = 1;
inline void GetProposalResultResponse::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& GetProposalResultResponse::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultResponse.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalResultResponse::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalResultResponse.proposal_id)
}
inline std::string* GetProposalResultResponse::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalResultResponse.proposal_id)
  return _s;
}
inline const std::string& GetProposalResultResponse::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void GetProposalResultResponse::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* GetProposalResultResponse::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* GetProposalResultResponse::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalResultResponse.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void GetProposalResultResponse::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalResultResponse.proposal_id)
}

// .seigr.voting.VotingOutcome outcome = 2;
inline void GetProposalResultResponse::clear_outcome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_ = 0;
}
inline ::seigr::voting::VotingOutcome GetProposalResultResponse::outcome() const {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultResponse.outcome)
  return _internal_outcome();
}
inline void GetProposalResultResponse::set_outcome(::seigr::voting::VotingOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalResultResponse.outcome)
}
inline ::seigr::voting::VotingOutcome GetProposalResultResponse::_internal_outcome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::voting::VotingOutcome>(_impl_.outcome_);
}
inline void GetProposalResultResponse::_internal_set_outcome(::seigr::voting::VotingOutcome value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_ = value;
}

// string outcome_justification = 3;
inline void GetProposalResultResponse::clear_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.ClearToEmpty();
}
inline const std::string& GetProposalResultResponse::outcome_justification() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultResponse.outcome_justification)
  return _internal_outcome_justification();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalResultResponse::set_outcome_justification(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalResultResponse.outcome_justification)
}
inline std::string* GetProposalResultResponse::mutable_outcome_justification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outcome_justification();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalResultResponse.outcome_justification)
  return _s;
}
inline const std::string& GetProposalResultResponse::_internal_outcome_justification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outcome_justification_.Get();
}
inline void GetProposalResultResponse::_internal_set_outcome_justification(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.Set(value, GetArena());
}
inline std::string* GetProposalResultResponse::_internal_mutable_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.outcome_justification_.Mutable( GetArena());
}
inline std::string* GetProposalResultResponse::release_outcome_justification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalResultResponse.outcome_justification)
  return _impl_.outcome_justification_.Release();
}
inline void GetProposalResultResponse::set_allocated_outcome_justification(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outcome_justification_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.outcome_justification_.IsDefault()) {
    _impl_.outcome_justification_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalResultResponse.outcome_justification)
}

// repeated .seigr.voting.VotingLayer layers = 4;
inline int GetProposalResultResponse::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int GetProposalResultResponse::layers_size() const {
  return _internal_layers_size();
}
inline void GetProposalResultResponse::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::seigr::voting::VotingLayer* GetProposalResultResponse::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalResultResponse.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>* GetProposalResultResponse::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.GetProposalResultResponse.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::seigr::voting::VotingLayer& GetProposalResultResponse::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultResponse.layers)
  return _internal_layers().Get(index);
}
inline ::seigr::voting::VotingLayer* GetProposalResultResponse::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::voting::VotingLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:seigr.voting.GetProposalResultResponse.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>& GetProposalResultResponse::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.GetProposalResultResponse.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>&
GetProposalResultResponse::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingLayer>*
GetProposalResultResponse::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

// string finalized_timestamp = 5;
inline void GetProposalResultResponse::clear_finalized_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalized_timestamp_.ClearToEmpty();
}
inline const std::string& GetProposalResultResponse::finalized_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalResultResponse.finalized_timestamp)
  return _internal_finalized_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalResultResponse::set_finalized_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalized_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalResultResponse.finalized_timestamp)
}
inline std::string* GetProposalResultResponse::mutable_finalized_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_finalized_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalResultResponse.finalized_timestamp)
  return _s;
}
inline const std::string& GetProposalResultResponse::_internal_finalized_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finalized_timestamp_.Get();
}
inline void GetProposalResultResponse::_internal_set_finalized_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalized_timestamp_.Set(value, GetArena());
}
inline std::string* GetProposalResultResponse::_internal_mutable_finalized_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.finalized_timestamp_.Mutable( GetArena());
}
inline std::string* GetProposalResultResponse::release_finalized_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalResultResponse.finalized_timestamp)
  return _impl_.finalized_timestamp_.Release();
}
inline void GetProposalResultResponse::set_allocated_finalized_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finalized_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.finalized_timestamp_.IsDefault()) {
    _impl_.finalized_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalResultResponse.finalized_timestamp)
}

// map<string, string> metadata = 6;
inline int GetProposalResultResponse::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int GetProposalResultResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetProposalResultResponse::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& GetProposalResultResponse::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& GetProposalResultResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.voting.GetProposalResultResponse.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* GetProposalResultResponse::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* GetProposalResultResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.voting.GetProposalResultResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// GetProposalDetailsRequest

// string proposal_id = 1;
inline void GetProposalDetailsRequest::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.ClearToEmpty();
}
inline const std::string& GetProposalDetailsRequest::proposal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalDetailsRequest.proposal_id)
  return _internal_proposal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalDetailsRequest::set_proposal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalDetailsRequest.proposal_id)
}
inline std::string* GetProposalDetailsRequest::mutable_proposal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalDetailsRequest.proposal_id)
  return _s;
}
inline const std::string& GetProposalDetailsRequest::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_.Get();
}
inline void GetProposalDetailsRequest::_internal_set_proposal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.Set(value, GetArena());
}
inline std::string* GetProposalDetailsRequest::_internal_mutable_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposal_id_.Mutable( GetArena());
}
inline std::string* GetProposalDetailsRequest::release_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalDetailsRequest.proposal_id)
  return _impl_.proposal_id_.Release();
}
inline void GetProposalDetailsRequest::set_allocated_proposal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposal_id_.IsDefault()) {
    _impl_.proposal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalDetailsRequest.proposal_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetProposalDetailsResponse

// .seigr.voting.VotingProposal proposal = 1;
inline bool GetProposalDetailsResponse::has_proposal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposal_ != nullptr);
  return value;
}
inline void GetProposalDetailsResponse::clear_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::voting::VotingProposal& GetProposalDetailsResponse::_internal_proposal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::voting::VotingProposal* p = _impl_.proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::voting::VotingProposal&>(::seigr::voting::_VotingProposal_default_instance_);
}
inline const ::seigr::voting::VotingProposal& GetProposalDetailsResponse::proposal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalDetailsResponse.proposal)
  return _internal_proposal();
}
inline void GetProposalDetailsResponse::unsafe_arena_set_allocated_proposal(::seigr::voting::VotingProposal* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proposal_);
  }
  _impl_.proposal_ = reinterpret_cast<::seigr::voting::VotingProposal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.voting.GetProposalDetailsResponse.proposal)
}
inline ::seigr::voting::VotingProposal* GetProposalDetailsResponse::release_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::VotingProposal* released = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::voting::VotingProposal* GetProposalDetailsResponse::unsafe_arena_release_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalDetailsResponse.proposal)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::voting::VotingProposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  return temp;
}
inline ::seigr::voting::VotingProposal* GetProposalDetailsResponse::_internal_mutable_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposal_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::voting::VotingProposal>(GetArena());
    _impl_.proposal_ = reinterpret_cast<::seigr::voting::VotingProposal*>(p);
  }
  return _impl_.proposal_;
}
inline ::seigr::voting::VotingProposal* GetProposalDetailsResponse::mutable_proposal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::voting::VotingProposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalDetailsResponse.proposal)
  return _msg;
}
inline void GetProposalDetailsResponse::set_allocated_proposal(::seigr::voting::VotingProposal* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.proposal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proposal_ = reinterpret_cast<::seigr::voting::VotingProposal*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalDetailsResponse.proposal)
}

// string message = 2;
inline void GetProposalDetailsResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetProposalDetailsResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalDetailsResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetProposalDetailsResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.voting.GetProposalDetailsResponse.message)
}
inline std::string* GetProposalDetailsResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalDetailsResponse.message)
  return _s;
}
inline const std::string& GetProposalDetailsResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void GetProposalDetailsResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* GetProposalDetailsResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* GetProposalDetailsResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.voting.GetProposalDetailsResponse.message)
  return _impl_.message_.Release();
}
inline void GetProposalDetailsResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.voting.GetProposalDetailsResponse.message)
}

// repeated .seigr.voting.VotingAuditLog audit_logs = 3;
inline int GetProposalDetailsResponse::_internal_audit_logs_size() const {
  return _internal_audit_logs().size();
}
inline int GetProposalDetailsResponse::audit_logs_size() const {
  return _internal_audit_logs_size();
}
inline void GetProposalDetailsResponse::clear_audit_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_logs_.Clear();
}
inline ::seigr::voting::VotingAuditLog* GetProposalDetailsResponse::mutable_audit_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.voting.GetProposalDetailsResponse.audit_logs)
  return _internal_mutable_audit_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>* GetProposalDetailsResponse::mutable_audit_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.voting.GetProposalDetailsResponse.audit_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_audit_logs();
}
inline const ::seigr::voting::VotingAuditLog& GetProposalDetailsResponse::audit_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.voting.GetProposalDetailsResponse.audit_logs)
  return _internal_audit_logs().Get(index);
}
inline ::seigr::voting::VotingAuditLog* GetProposalDetailsResponse::add_audit_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::voting::VotingAuditLog* _add = _internal_mutable_audit_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.voting.GetProposalDetailsResponse.audit_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>& GetProposalDetailsResponse::audit_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.voting.GetProposalDetailsResponse.audit_logs)
  return _internal_audit_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>&
GetProposalDetailsResponse::_internal_audit_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::voting::VotingAuditLog>*
GetProposalDetailsResponse::_internal_mutable_audit_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.audit_logs_;
}

// map<string, string> metadata = 4;
inline int GetProposalDetailsResponse::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int GetProposalDetailsResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetProposalDetailsResponse::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& GetProposalDetailsResponse::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& GetProposalDetailsResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.voting.GetProposalDetailsResponse.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* GetProposalDetailsResponse::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* GetProposalDetailsResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.voting.GetProposalDetailsResponse.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace voting
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::voting::LayerStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::voting::LayerStatus>() {
  return ::seigr::voting::LayerStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::voting::VoteChoice> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::voting::VoteChoice>() {
  return ::seigr::voting::VoteChoice_descriptor();
}
template <>
struct is_proto_enum<::seigr::voting::VotingStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::voting::VotingStatus>() {
  return ::seigr::voting::VotingStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::voting::VotingOutcome> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::voting::VotingOutcome>() {
  return ::seigr::voting::VotingOutcome_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mycelith_5fvoting_2eproto_2epb_2eh
