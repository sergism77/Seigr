syntax = "proto3";

package seigr.voting;

/**
 * Mycelith Voting Protocol
 *
 * Defines structures and services for managing decentralized voting proposals,
 * including adaptive configurations, multi-layer voting, transparency, and auditability.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the status of each voting layer.
 */
enum LayerStatus {
    LAYER_STATUS_UNDEFINED = 0; // Undefined status.
    LAYER_STATUS_OPEN = 1; // Voting layer is currently open.
    LAYER_STATUS_CLOSED = 2; // Voting layer is closed.
}

/**
 * Enum representing voting choices available to participants.
 */
enum VoteChoice {
    VOTE_CHOICE_UNDEFINED = 0; // Undefined choice.
    VOTE_CHOICE_YES = 1; // Vote in favor of the proposal.
    VOTE_CHOICE_NO = 2; // Vote against the proposal.
    VOTE_CHOICE_ABSTAIN = 3; // Abstain from voting.
}

/**
 * Enum representing voting proposal statuses.
 */
enum VotingStatus {
    VOTING_STATUS_UNDEFINED = 0; // Undefined status.
    VOTING_STATUS_PENDING = 1; // Proposal pending activation.
    VOTING_STATUS_ACTIVE = 2; // Proposal is actively being voted on.
    VOTING_STATUS_COMPLETED = 3; // Voting has concluded.
    VOTING_STATUS_FAILED = 4; // Proposal failed due to unmet requirements.
}

/**
 * Enum representing the final voting outcome.
 */
enum VotingOutcome {
    VOTING_OUTCOME_UNDECIDED = 0; // Outcome undecided.
    VOTING_OUTCOME_APPROVED = 1; // Proposal approved.
    VOTING_OUTCOME_REJECTED = 2; // Proposal rejected.
    VOTING_OUTCOME_ABSTAINED = 3; // Outcome determined by abstentions.
    VOTING_OUTCOME_INCONCLUSIVE = 4; // Inconclusive results.
}

// ===========================
// CONFIGURATION MESSAGES
// ===========================

/**
 * Configuration parameters for a voting proposal.
 */
message ProposalConfig {
    double base_influence_weight = 1; // Base weight for initial layer votes.
    double influence_multiplier = 2; // Growth multiplier across voting layers.
    double consistency_factor = 3; // Adjust influence for consistent voting behavior.
    uint32 min_layers_to_pass = 4; // Minimum layers required to pass the proposal.
    uint32 required_participation = 5; // Minimum participation percentage per layer.
    bool adaptive_thresholds = 6; // Enable adaptive thresholds based on engagement.
    double participation_factor = 7; // Influence of participation on the outcome.
    double engagement_factor = 8; // Influence of engagement levels on voting results.
    bool enable_dynamic_layer_adjustments = 9; // Enable dynamic layer requirements.
    bool experimental_features = 10; // Enable experimental features for governance trials.
    string governance_link = 11; // Link to a governance document or policy.
}

// ===========================
// CORE VOTING MESSAGES
// ===========================

/**
 * Represents an individual voting proposal.
 */
message VotingProposal {
    string proposal_id = 1; // Unique identifier for the proposal.
    string description = 2; // Description of the proposal.
    VotingStatus status = 3; // Current status of the proposal.
    repeated VotingLayer layers = 4; // List of voting layers.
    uint32 total_layers = 5; // Total number of voting layers.
    VotingOutcome outcome = 6; // Final outcome of the proposal.
    ProposalConfig config = 7; // Configuration parameters.
    string created_by = 8; // ID of the proposal creator.
    string created_timestamp = 9; // Creation timestamp.
    string closing_timestamp = 10; // Closing timestamp.
    string outcome_justification = 11; // Explanation for the outcome.
    repeated string associated_data_ids = 12; // Related documents or data references.
    bool requires_expert_review = 13; // Flag for expert review requirement.
    string governance_policy_reference = 14; // Reference to governance policy or framework.
}

/**
 * Represents an individual voting layer.
 */
message VotingLayer {
    uint32 layer_number = 1; // Sequential layer number.
    LayerStatus status = 2; // Current status of the layer.
    repeated Vote votes = 3; // List of votes in this layer.
    double layer_influence_total = 4; // Total influence weight.
    uint32 total_participants = 5; // Total participants in the layer.
    repeated string participant_ids = 6; // IDs of participants.
    double yes_influence_total = 7; // Total influence for 'yes' votes.
    double no_influence_total = 8; // Total influence for 'no' votes.
    double abstain_influence_total = 9; // Total influence for abstentions.
    VotingOutcome layer_outcome = 10; // Outcome for the layer.
    string analysis_notes = 11; // Analytical notes or insights.
}

/**
 * Represents an individual vote.
 */
message Vote {
    string voter_id = 1; // ID of the voter.
    VoteChoice choice = 2; // Choice made by the voter.
    double influence_weight = 3; // Weighted influence of the vote.
    double consistency_bonus = 4; // Bonus for consistent voting behavior.
    bool is_consistent = 5; // Consistency flag.
    string timestamp = 6; // Voting timestamp.
    string justification = 7; // Optional justification for the vote.
    map<string, string> metadata = 8; // Metadata for transparency.
    string compliance_reference = 9; // Reference to compliance frameworks.
}

/**
 * Audit log for tracking voting actions and events.
 */
message VotingAuditLog {
    string log_id = 1; // Unique identifier for the log.
    string action = 2; // Description of the action (e.g., "VOTE_CAST").
    string actor_id = 3; // ID of the actor initiating the action.
    string timestamp = 4; // Action timestamp.
    string details = 5; // Additional action details.
    map<string, string> metadata = 6; // Metadata for extensibility.
    string compliance_tag = 7; // Compliance-related tag.
    bool critical_action_flag = 8; // Flag for critical voting actions.
}

/**
 * Request to submit a new voting proposal.
 */
message SubmitProposalRequest {
    string description = 1;                   // Description of the proposal.
    ProposalConfig config = 2;                // Configuration parameters for the proposal.
    string created_by = 3;                    // ID of the user/system creating the proposal.
    string governance_policy_reference = 4;   // Reference to governance policy or framework.
    string associated_data_id = 5;            // ID of related documents or data.
    map<string, string> metadata = 6;         // Additional metadata for extensibility.
}

/**
 * Response to a proposal submission.
 */
message SubmitProposalResponse {
    bool success = 1;                         // Indicates whether the proposal submission was successful.
    string proposal_id = 2;                   // Unique identifier for the created proposal.
    string message = 3;                       // Additional details about the submission.
}

/**
 * Request to cast a vote in a proposal.
 */
message CastVoteRequest {
    string proposal_id = 1;                   // ID of the proposal being voted on.
    string voter_id = 2;                      // ID of the voter.
    VoteChoice choice = 3;                    // Choice made by the voter.
    double influence_weight = 4;              // Weighted influence of the vote.
    string justification = 5;                 // Optional justification for the vote.
    map<string, string> metadata = 6;         // Additional metadata for transparency.
}

/**
 * Response to a vote being cast.
 */
message CastVoteResponse {
    bool success = 1;                         // Indicates whether the vote was successfully cast.
    string message = 2;                       // Additional information about the voting process.
    double updated_influence_total = 3;       // Updated influence total for the proposal.
}

/**
 * Request to retrieve the result of a proposal.
 */
message GetProposalResultRequest {
    string proposal_id = 1;                   // ID of the proposal to retrieve results for.
}

/**
 * Response containing the result of a proposal.
 */
message GetProposalResultResponse {
    string proposal_id = 1;                   // ID of the proposal.
    VotingOutcome outcome = 2;                // Final outcome of the proposal.
    string outcome_justification = 3;         // Justification for the outcome.
    repeated VotingLayer layers = 4;          // List of voting layers with results.
    string message = 5;                       // Additional information about the result.
}

/**
 * Request to retrieve detailed information about a proposal.
 */
message GetProposalDetailsRequest {
    string proposal_id = 1;                   // ID of the proposal to retrieve details for.
}

/**
 * Response containing detailed information about a proposal.
 */
message GetProposalDetailsResponse {
    string proposal_id = 1;                   // ID of the proposal.
    VotingProposal proposal_details = 2;      // Complete details of the proposal.
    string message = 3;                       // Additional information about the request.
}

// ===========================
// SERVICE DEFINITIONS
// ===========================

/**
 * Service definition for managing voting proposals, casting votes, and retrieving results.
 */
service MycelithVotingService {
    rpc SubmitProposal (SubmitProposalRequest) returns (SubmitProposalResponse);
    rpc CastVote (CastVoteRequest) returns (CastVoteResponse);
    rpc GetProposalResult (GetProposalResultRequest) returns (GetProposalResultResponse);
    rpc GetProposalDetails (GetProposalDetailsRequest) returns (GetProposalDetailsResponse);
    rpc RetrieveAuditLogs (AuditLogRequest) returns (AuditLogResponse);
}

/**
 * Request for retrieving audit logs.
 */
message AuditLogRequest {
    string proposal_id = 1; // ID of the proposal to fetch logs for.
    string time_range_start = 2; // Start of the time range.
    string time_range_end = 3; // End of the time range.
    map<string, string> filters = 4; // Filters for log retrieval.
}

/**
 * Response containing audit logs.
 */
message AuditLogResponse {
    repeated VotingAuditLog logs = 1; // List of retrieved logs.
    string status = 2; // Status of retrieval.
    string message = 3; // Additional information.
}
