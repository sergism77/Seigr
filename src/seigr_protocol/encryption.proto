syntax = "proto3";

package seigr.encryption;

import "hashing.proto";  // For shared hash-related definitions.
import "audit.proto";    // For audit trail integration.

/**
 * Encryption Protocol
 *
 * This protocol defines robust structures and operations for managing encryption,
 * cryptographic key lifecycles, signature verification, integrity checks, and
 * compliance enforcement.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the lifecycle status of cryptographic keys.
 */
enum KeyStatus {
    KEY_STATUS_UNDEFINED = 0;         // Undefined status.
    KEY_STATUS_ACTIVE = 1;            // Key is active and ready for use.
    KEY_STATUS_INACTIVE = 2;          // Key is inactive but retained.
    KEY_STATUS_REVOKED = 3;           // Key has been revoked.
    KEY_STATUS_PENDING_ROTATION = 4;  // Key is scheduled for rotation.
    KEY_STATUS_EXPIRED = 5;           // Key has expired and cannot be used.
}

/**
 * Enum representing encryption methodologies.
 */
enum EncryptionType {
    ENCRYPTION_TYPE_UNDEFINED = 0;  // Undefined encryption type.
    ENCRYPTION_TYPE_SYMMETRIC = 1;  // Symmetric encryption (e.g., AES).
    ENCRYPTION_TYPE_ASYMMETRIC = 2; // Asymmetric encryption (e.g., RSA).
    ENCRYPTION_TYPE_HYBRID = 3;     // Hybrid encryption combining symmetric and asymmetric.
    ENCRYPTION_TYPE_QUANTUM_SAFE = 4; // Quantum-resistant encryption (e.g., lattice-based).
}

/**
 * Enum for cryptographic operations.
 */
enum CryptographicOperationType {
    OPERATION_TYPE_UNDEFINED = 0;  // Undefined operation.
    OPERATION_TYPE_ENCRYPTION = 1; // Data encryption.
    OPERATION_TYPE_DECRYPTION = 2; // Data decryption.
    OPERATION_TYPE_SIGNING = 3;    // Digital signature creation.
    OPERATION_TYPE_VERIFICATION = 4; // Signature verification.
    OPERATION_TYPE_KEY_ROTATION = 5; // Rotation of cryptographic keys.
    OPERATION_TYPE_INTEGRITY_CHECK = 6; // Data integrity check.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents a cryptographic key policy for enforcement.
 */
message EncryptionPolicy {
    string policy_id = 1;                       // Unique identifier for the policy.
    string policy_name = 2;                     // Human-readable name for the policy.
    EncryptionType encryption_type = 3;         // Required encryption type.
    string compliance_standard = 4;             // Compliance standard (e.g., "FIPS", "GDPR").
    map<string, string> metadata = 5;           // Additional metadata for the policy.
    string created_at = 6;                      // Policy creation timestamp.
    string updated_at = 7;                      // Last updated timestamp.
    repeated string applicable_resources = 8;   // List of resources governed by this policy.
    bool enforce_integrity_checks = 9;          // Whether integrity checks are mandatory.
    repeated string approved_algorithms = 10;   // List of approved encryption algorithms.
}

/**
 * Represents symmetric encryption key details.
 */
message SymmetricKey {
    string key_id = 1;                         // Unique key identifier.
    bytes key = 2;                             // Symmetric key bytes.
    bytes salt = 3;                            // Salt for key derivation.
    string algorithm = 4;                      // Algorithm used (e.g., "AES-256-GCM").
    string created_at = 5;                     // Key creation timestamp.
    string expiration_at = 6;                  // Expiration timestamp.
    KeyStatus status = 7;                      // Lifecycle status of the key.
    string rotation_schedule = 8;              // Key rotation schedule (e.g., "monthly").
    string custodian = 9;                      // Responsible entity for the key.
    map<string, string> metadata = 10;         // Additional metadata.
}

/**
 * Represents asymmetric cryptographic key pair.
 */
message AsymmetricKeyPair {
    string key_pair_id = 1;                    // Unique identifier for the key pair.
    bytes public_key = 2;                      // Public key (PEM format).
    bytes private_key = 3;                     // Private key (PEM format, optional).
    string algorithm = 4;                      // Algorithm used (e.g., "RSA-2048").
    string created_at = 5;                     // Creation timestamp.
    string expiration_at = 6;                  // Expiration timestamp.
    KeyStatus status = 7;                      // Lifecycle status of the key pair.
    map<string, string> metadata = 8;          // Metadata for usage policies.
}

/**
 * Represents encrypted data details.
 */
message EncryptedData {
    string data_id = 1;                        // Unique identifier for the encrypted data.
    bytes ciphertext = 2;                      // Encrypted content.
    bytes iv = 3;                              // Initialization vector.
    string key_id = 4;                         // ID of the encryption key used.
    EncryptionType encryption_type = 5;        // Type of encryption applied.
    string encrypted_at = 6;                   // Timestamp of encryption.
    map<string, string> metadata = 7;          // Metadata for encryption context.
}

/**
 * Represents a digital signature log for verifying authenticity.
 */
message DigitalSignature {
    string signature_id = 1;                   // Unique identifier for the signature.
    string signer_id = 2;                      // User or system that created the signature.
    bytes signature = 3;                       // Signature bytes.
    string algorithm = 4;                      // Algorithm used (e.g., "RSA-SHA256").
    string signed_at = 5;                      // Timestamp when the signature was created.
    map<string, string> metadata = 6;          // Additional context metadata.
}

/**
 * Tracks cryptographic operations performed within the system.
 */
message CryptographicOperationLog {
    string operation_id = 1;                   // Unique identifier for the operation.
    CryptographicOperationType operation_type = 2; // Type of operation performed.
    string performed_by = 3;                   // User/system that initiated the operation.
    string key_id = 4;                         // Key used during the operation.
    string operation_status = 5;               // Status of the operation (e.g., "SUCCESS").
    string timestamp = 6;                      // Timestamp of the operation.
    map<string, string> metadata = 7;          // Additional metadata.
}

