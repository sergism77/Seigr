syntax = "proto3";

package seigr.event;

import "common.proto"; // For PriorityLevel

/**
 * Event Protocol
 *
 * Provides structures and services for event management, logging,
 * escalation, subscription, and real-time interactions across the Seigr ecosystem.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing different types of events within the Seigr ecosystem.
 */
enum EventType {
    EVENT_TYPE_UNDEFINED = 0;                    // Default value, undefined event type.
    EVENT_TYPE_ERROR = 1;                        // Error event indicating issues or failures.
    EVENT_TYPE_ALERT = 2;                        // Critical alert requiring attention.
    EVENT_TYPE_USER_ACTION = 3;                  // User-initiated actions (e.g., login, upload).
    EVENT_TYPE_RESOURCE_THRESHOLD_REACHED = 4;   // Resource usage threshold exceeded.
    EVENT_TYPE_SYSTEM_UPDATE = 5;                // System update or maintenance event.
    EVENT_TYPE_MONITORING = 6;                   // Health check or monitoring event.
    EVENT_TYPE_SELF_HEALING = 7;                 // Event triggered by self-healing processes.
    EVENT_TYPE_CUSTOM = 8;                       // Custom user-defined event type.
    EVENT_TYPE_SECURITY = 9;                     // Security-related events (e.g., access violation).
}

/**
 * Enum defining escalation levels for critical events.
 */
enum EscalationLevel {
    ESCALATION_LEVEL_NONE = 0;                   // No escalation required.
    ESCALATION_LEVEL_LOW = 1;                    // Low-priority escalation.
    ESCALATION_LEVEL_MEDIUM = 2;                 // Medium-priority escalation.
    ESCALATION_LEVEL_HIGH = 3;                   // High-priority escalation requiring immediate action.
    ESCALATION_LEVEL_CRITICAL = 4;               // Critical escalation, triggers fail-safes.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents an event occurring within the Seigr ecosystem.
 */
message Event {
    string event_id = 1;                         // Unique identifier for the event.
    EventType type = 2;                          // Type of event.
    seigr.common.PriorityLevel priority = 3;     // Priority level for handling the event.
    EscalationLevel escalation_level = 4;        // Escalation level associated with the event.
    string origin = 5;                           // Source of the event (e.g., component, user ID).
    string timestamp = 6;                        // ISO-formatted timestamp of the event.
    string description = 7;                      // Detailed description of the event.
    map<string, string> metadata = 8;            // Additional metadata for context.
    repeated string target_subscribers = 9;      // Subscribers or systems targeted by the event.
    bool requires_acknowledgment = 10;           // Whether acknowledgment is required.
    bool allow_forwarding = 11;                  // Whether the event can be forwarded to others.
}

/**
 * Configuration for subscribing to specific types of events.
 */
message EventSubscription {
    string subscription_id = 1;                  // Unique ID for the subscription.
    string subscriber_id = 2;                    // ID of the subscribing user or system.
    repeated EventType event_types = 3;          // Types of events to subscribe to.
    map<string, string> filters = 4;             // Filters for fine-grained subscription control.
    string callback_url = 5;                     // URL for delivering event notifications.
    map<string, string> subscription_metadata = 6; // Additional metadata for the subscription.
    string last_updated = 7;                     // Timestamp of the last update.
    EscalationLevel min_escalation_level = 8;    // Minimum escalation level for receiving events.
    bool active = 9;                             // Whether the subscription is currently active.
}

/**
 * Response to an event, including actions taken or planned follow-ups.
 */
message EventResponse {
    string response_id = 1;                      // Unique ID for the response.
    string event_id = 2;                         // ID of the related event.
    string responder_id = 3;                     // ID of the system or user responding.
    string action_taken = 4;                     // Description of the action taken.
    string response_timestamp = 5;               // ISO-formatted timestamp of the response.
    map<string, string> response_metadata = 6;   // Additional metadata for response context.
    bool requires_follow_up = 7;                 // Whether follow-up actions are needed.
    string follow_up_action_id = 8;              // ID for the follow-up action, if applicable.
    EscalationLevel escalation_path = 9;         // Escalation level triggered by this response.
    bool resolved = 10;                          // Whether the event has been resolved.
}

/**
 * Configuration for automatic escalation triggered by specific conditions.
 */
message EscalationConfig {
    EscalationLevel level = 1;                   // Level of escalation.
    string escalation_path_id = 2;               // Identifier for the escalation path.
    map<string, string> conditions = 3;          // Conditions that trigger escalation.
    repeated string alert_recipients = 4;        // List of recipients for alerts.
    string escalation_strategy = 5;              // Strategy for managing escalation (e.g., failover).
    bool enable_automatic_responses = 6;         // Whether automated responses are enabled.
}

/**
 * Log entry for auditing events.
 */
message EventLog {
    string log_id = 1;                           // Unique identifier for the log entry.
    string event_id = 2;                         // ID of the logged event.
    string logged_at = 3;                        // Timestamp of the log creation.
    string logger_id = 4;                        // ID of the user or system creating the log.
    string log_message = 5;                      // Description or summary of the event.
    map<string, string> log_metadata = 6;        // Additional metadata for logging.
    EscalationLevel logged_escalation_level = 7; // Escalation level associated with the log entry.
    bool is_resolved = 8;                        // Whether the event was resolved at the time of logging.
}

// ===========================
// SERVICE DEFINITIONS
// ===========================

/**
 * Event Management Service
 * Handles event publishing, subscription management, and log retrieval.
 */
service EventService {
    rpc PublishEvent (Event) returns (EventResponse);                  // Publish a new event.
    rpc SubscribeToEvents (EventSubscription) returns (SubscriptionAck); // Create a subscription.
    rpc AcknowledgeEvent (AcknowledgeRequest) returns (AcknowledgeResponse); // Acknowledge an event.
    rpc RetrieveEventLog (EventLogRequest) returns (EventLogResponse); // Retrieve event logs.
}

/**
 * Acknowledgment response for successful event subscription.
 */
message SubscriptionAck {
    string subscription_id = 1;                  // Confirmed subscription ID.
    bool success = 2;                            // Whether the subscription was successful.
    string message = 3;                          // Additional details or error message.
}

/**
 * Request to acknowledge receipt of an event.
 */
message AcknowledgeRequest {
    string event_id = 1;                         // ID of the event being acknowledged.
    string subscriber_id = 2;                    // ID of the acknowledging subscriber.
    string acknowledgment_timestamp = 3;         // Timestamp of the acknowledgment.
}

/**
 * Response for acknowledging an event.
 */
message AcknowledgeResponse {
    bool success = 1;                            // Whether acknowledgment was successful.
    string message = 2;                          // Additional details or error message.
}

/**
 * Request to retrieve logs for specific events.
 */
message EventLogRequest {
    string event_id = 1;                         // ID of the event to retrieve logs for.
    string time_range_start = 2;                 // Start of the time range for filtering logs.
    string time_range_end = 3;                   // End of the time range for filtering logs.
    repeated string filters = 4;                 // Custom filters for log retrieval.
}

/**
 * Response containing retrieved event logs.
 */
message EventLogResponse {
    repeated EventLog logs = 1;                  // List of retrieved event logs.
    string status = 2;                           // Status of the log retrieval operation.
    string message = 3;                          // Additional information or errors.
}
