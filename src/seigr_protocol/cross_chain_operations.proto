syntax = "proto3";

package seigr.crosschain;

/**
 * Cross-Chain Operations Protocol
 * 
 * This protocol defines structures and services for managing cross-chain 
 * token operations, including wrapping, unwrapping, governance synchronization,
 * transaction history retrieval, and status updates.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the status of cross-chain operations.
 */
enum CrossChainStatus {
    CROSS_CHAIN_ACTIVE = 0;          // Operation is active and ongoing.
    CROSS_CHAIN_SYNCED = 1;          // Operation has been synchronized successfully.
    CROSS_CHAIN_INACTIVE = 2;        // Operation is currently inactive.
    CROSS_CHAIN_PENDING_WRAP = 3;   // Awaiting wrapping confirmation.
    CROSS_CHAIN_PENDING_UNWRAP = 4; // Awaiting unwrapping confirmation.
    CROSS_CHAIN_FAILED = 5;         // Operation failed.
}

/**
 * Enum defining transaction types in cross-chain operations.
 */
enum TransactionType {
    TRANSACTION_TYPE_UNDEFINED = 0; // Undefined transaction type.
    TRANSACTION_TYPE_WRAP = 1;      // Token wrap transaction.
    TRANSACTION_TYPE_UNWRAP = 2;    // Token unwrap transaction.
    TRANSACTION_TYPE_GOVERNANCE_SYNC = 3; // Governance synchronization transaction.
    TRANSACTION_TYPE_STATUS_UPDATE = 4;   // Status update transaction.
}

/**
 * Enum defining possible compliance levels for cross-chain operations.
 */
enum ComplianceLevel {
    COMPLIANCE_LEVEL_UNDEFINED = 0; // Undefined compliance level.
    COMPLIANCE_LEVEL_GDPR = 1;      // GDPR-compliant transaction.
    COMPLIANCE_LEVEL_CCPA = 2;      // CCPA-compliant transaction.
    COMPLIANCE_LEVEL_NONE = 3;      // No specific compliance level.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents details of a cross-chain token operation.
 */
message CrossChainToken {
    string chain_name = 1;                         // Name of the originating blockchain.
    string wrapped_token_id = 2;                   // Unique ID of the wrapped token.
    uint64 amount = 3;                             // Amount of tokens involved in the operation.
    CrossChainStatus status = 4;                   // Current status of the token operation.
    string originating_chain = 5;                  // Original blockchain of the token.
    string destination_chain = 6;                  // Target blockchain for wrapping/unwrapping.
    ComplianceLevel compliance_level = 7;          // Compliance level for the operation.
    string destination_wallet_id = 8;              // Destination wallet ID for the tokens.
    map<string, string> token_metadata = 9;        // Additional metadata for the token.
}

/**
 * Represents an individual cross-chain transaction record.
 */
message CrossChainTransaction {
    string transaction_id = 1;                     // Unique transaction ID.
    string from_chain = 2;                         // Source blockchain.
    string to_chain = 3;                           // Destination blockchain.
    uint64 amount = 4;                             // Amount of tokens involved.
    string timestamp = 5;                          // Timestamp of the transaction.
    TransactionType type = 6;                      // Type of transaction.
    CrossChainStatus status = 7;                   // Status of the transaction.
    string fee = 8;                                // Transaction fee, if applicable.
    string wallet_id = 9;                          // Wallet ID involved in the transaction.
    string compliance_note = 10;                   // Compliance notes or regulatory details.
}

/**
 * Request for wrapping tokens across blockchains.
 */
message WrapTokenRequest {
    string chain_name = 1;                         // Originating blockchain name.
    uint64 amount = 2;                             // Amount of tokens to wrap.
    string destination_chain = 3;                  // Destination blockchain.
    string destination_wallet_id = 4;              // Target wallet for wrapped tokens.
    map<string, string> wrap_metadata = 5;         // Additional metadata for wrapping.
}

/**
 * Response for wrapping tokens across blockchains.
 */
message WrapTokenResponse {
    bool success = 1;                              // Indicates if wrapping was successful.
    string message = 2;                            // Detailed result message.
    string transaction_id = 3;                     // ID of the wrapping transaction.
    string error_code = 4;                         // Error code in case of failure.
}

/**
 * Request for unwrapping tokens across blockchains.
 */
message UnwrapTokenRequest {
    string chain_name = 1;                         // Originating blockchain name.
    uint64 amount = 2;                             // Amount of tokens to unwrap.
    string destination_chain = 3;                  // Destination blockchain.
    string destination_wallet_id = 4;              // Target wallet for unwrapped tokens.
    map<string, string> unwrap_metadata = 5;       // Additional metadata for unwrapping.
}

/**
 * Response for unwrapping tokens across blockchains.
 */
message UnwrapTokenResponse {
    bool success = 1;                              // Indicates if unwrapping was successful.
    string message = 2;                            // Detailed result message.
    string transaction_id = 3;                     // ID of the unwrapping transaction.
    string error_code = 4;                         // Error code in case of failure.
}

/**
 * Request to synchronize cross-chain governance configurations.
 */
message SyncGovernanceRequest {
    string chain_name = 1;                         // Blockchain name for governance sync.
    map<string, string> sync_metadata = 2;         // Additional metadata for synchronization.
}

/**
 * Response for synchronizing cross-chain governance.
 */
message SyncGovernanceResponse {
    bool success = 1;                              // Indicates if synchronization was successful.
    string message = 2;                            // Result message.
    string transaction_id = 3;                     // ID of the sync transaction.
    string error_code = 4;                         // Error code in case of failure.
}

/**
 * Request for retrieving cross-chain transaction history.
 */
message GetCrossChainTransactionHistoryRequest {
    string chain_name = 1;                         // Blockchain name.
    uint32 limit = 2;                               // Maximum number of transactions to fetch.
    repeated TransactionType filter_types = 3;     // Transaction types for filtering.
    string date_range_start = 4;                   // Start date for filtering.
    string date_range_end = 5;                     // End date for filtering.
}

/**
 * Response containing cross-chain transaction history.
 */
message GetCrossChainTransactionHistoryResponse {
    string chain_name = 1;                         // Blockchain name.
    repeated CrossChainTransaction transactions = 2; // List of transaction records.
}

/**
 * Request to update the status of a cross-chain operation.
 */
message UpdateCrossChainStatusRequest {
    string chain_name = 1;                         // Blockchain name.
    CrossChainStatus new_status = 2;               // New status for the operation.
    string status_reason = 3;                      // Reason for the status change.
    int32 retry_count = 4;                         // Retry count.
    map<string, string> update_metadata = 5;       // Additional metadata.
}

/**
 * Response for updating cross-chain status.
 */
message UpdateCrossChainStatusResponse {
    bool success = 1;                              // Indicates if the update was successful.
    string message = 2;                            // Result message.
    string error_code = 3;                         // Error code in case of failure.
}

// ===========================
// SERVICE
// ===========================

/**
 * Service for managing cross-chain operations.
 */
service CrossChainService {
    rpc WrapToken(WrapTokenRequest) returns (WrapTokenResponse);
    rpc UnwrapToken(UnwrapTokenRequest) returns (UnwrapTokenResponse);
    rpc SyncGovernance(SyncGovernanceRequest) returns (SyncGovernanceResponse);
    rpc GetCrossChainTransactionHistory(GetCrossChainTransactionHistoryRequest) returns (GetCrossChainTransactionHistoryResponse);
    rpc UpdateCrossChainStatus(UpdateCrossChainStatusRequest) returns (UpdateCrossChainStatusResponse);
}
