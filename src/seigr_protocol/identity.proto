syntax = "proto3";

package seigr.identity;

import "access_control.proto"; // Dependency for AccessPolicy definitions.

/**
 * Identity Protocol
 *
 * Manages identity lifecycle, verification, privacy levels, and alias identities
 * within the Seigr ecosystem, ensuring robust identity management, traceability,
 * and compliance with security policies.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the status of an identity within the Seigr ecosystem.
 */
enum IdentityStatus {
    IDENTITY_STATUS_UNDEFINED = 0;    // Default undefined status.
    IDENTITY_ACTIVE = 1;              // Identity is active and operational.
    IDENTITY_SUSPENDED = 2;           // Temporarily suspended, pending further actions.
    IDENTITY_REVOKED = 3;             // Permanently revoked and cannot be reactivated.
    IDENTITY_PENDING_VERIFICATION = 4; // Pending verification or approval process.
    IDENTITY_EXPIRED = 5;             // Identity has expired and needs renewal.
}

/**
 * Enum representing different types of identities in the Seigr ecosystem.
 */
enum IdentityType {
    IDENTITY_TYPE_UNDEFINED = 0;    // Default undefined identity type.
    IDENTITY_USER = 1;              // User identity.
    IDENTITY_SENSOR = 2;            // Sensor-based identity.
    IDENTITY_SERVER = 3;            // Server-specific identity.
    IDENTITY_APPLICATION = 4;       // Application-level identity.
    IDENTITY_DEVICE = 5;            // IoT or physical device identity.
}

/**
 * Enum specifying privacy levels for identity exposure and traceability.
 */
enum PrivacyLevel {
    PRIVACY_PUBLIC = 0;                // Fully visible identity.
    PRIVACY_PARTIAL_TRACE = 1;         // Partially traceable, breadcrumbs remain.
    PRIVACY_SEMI_ANONYMOUS = 2;        // Minimal traceability, optional logging.
    PRIVACY_FULL_ANONYMOUS = 3;        // Fully anonymous identity.
    PRIVACY_SELECTIVE_EXPOSURE = 4;    // Controlled exposure of selected fields.
}

/**
 * Enum specifying identity verification trust levels.
 */
enum VerificationLevel {
    VERIFICATION_LEVEL_UNDEFINED = 0; // Default undefined verification.
    VERIFICATION_LOW_TRUST = 1;       // Basic trust, minimal checks.
    VERIFICATION_MEDIUM_TRUST = 2;    // Medium trust, verified contact details.
    VERIFICATION_HIGH_TRUST = 3;      // High trust, strong authentication.
    VERIFICATION_ADMIN_VERIFIED = 4;  // Admin-verified trust.
    VERIFICATION_CUSTOM = 5;          // Custom verification criteria.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Message representing alias identities linked to a primary Seigr identity.
 */
message AliasIdentity {
    string alias_id = 1;                        // Unique identifier for the alias.
    IdentityStatus status = 2;                  // Status of the alias (e.g., ACTIVE, SUSPENDED).
    PrivacyLevel privacy_level = 3;             // Privacy level applied to this alias.
    IdentityType identity_type = 4;            // Type of alias identity (e.g., USER, DEVICE).
    string alias_name = 5;                      // Display name or alias for the identity.
    string alias_signature = 6;                 // Signature linked to alias operations.
    repeated AccessPolicy alias_access_policies = 7; // Access policies specific to this alias.
    map<string, string> alias_metadata = 8;     // Extensible metadata for additional context.
    string expiration_timestamp = 9;            // Expiration date for time-limited aliases.
    repeated string related_aliases = 10;       // Grouped related aliases.
    string traceability_level = 11;             // Traceability description for the alias.
}

/**
 * Message for tracking audit logs related to identity actions.
 */
message IdentityAuditLog {
    string action = 1;                          // Type of action (e.g., "CREATE", "UPDATE").
    string performed_by = 2;                    // ID of the entity performing the action.
    string timestamp = 3;                       // ISO 8601 timestamp of the action.
    string status = 4;                          // Status (e.g., SUCCESS, FAILURE).
    string details = 5;                         // Details or context for the action.
    map<string, string> metadata = 6;           // Extensible metadata for log context.
    map<string, string> action_details = 7;     // Detailed parameters for specific actions.
    string compliance_tag = 8;                  // Regulatory or compliance tag.
}

/**
 * Message defining the primary Seigr identity with metadata, privacy, and security attributes.
 */
message SeigrIdentityData {
    // Core identity details
    int64 creation_timestamp = 1;               // Creation timestamp in epoch format.
    IdentityType identity_type = 2;             // Type of the identity (USER, SERVER, etc.).
    IdentityStatus status = 3;                  // Current status (ACTIVE, REVOKED, etc.).
    
    // Cryptographic attributes
    bytes senary_id = 4;                        // Unique Senary-encoded identifier.
    bytes owner_public_key = 5;                 // Owner's public key.
    bytes encrypted_private_key = 6;            // Encrypted private key for secure storage.
    bytes owner_signature = 7;                  // Owner's digital signature.
    
    // Verification details
    bool revoked = 8;                           // Indicates if the identity is revoked.
    string revocation_reason = 9;               // Reason for revocation.
    VerificationLevel verification_level = 10;  // Trust level of identity verification.
    map<string, string> verification_metadata = 11; // Metadata for verification details.
    
    // Access control and audit
    repeated AccessPolicy access_policies = 12; // Linked access policies.
    repeated IdentityAuditLog audit_logs = 13;  // History of identity-related actions.
    string version = 14;                        // Version identifier for identity schema.
    map<string, string> metadata = 15;          // Additional metadata for extensibility.
    
    // Security attributes
    bytes encryption_key = 16;                  // Key used for encryption purposes.
    string usb_path = 17;                       // USB storage path for physical security.
    bool usb_required = 18;                     // Indicates USB requirement for access.
    string last_used_timestamp = 19;            // Timestamp of last usage.
    map<string, string> security_parameters = 20; // Additional security parameters.
    bool multi_factor_enabled = 21;             // Flag for MFA requirement.
    string security_policy_id = 22;             // Linked security policy identifier.
    
    // Alias and lifecycle management
    repeated AliasIdentity aliases = 23;        // List of associated aliases.
    string expiration_timestamp = 24;           // Identity expiration timestamp.
    string reactivation_code = 25;              // Reactivation code for suspended accounts.
    string key_rotation_schedule = 26;          // Scheduled key rotation interval.
    PrivacyLevel default_privacy_level = 27;    // Default privacy configuration.
}