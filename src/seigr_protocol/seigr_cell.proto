// Updated seigr_cell.proto

syntax = "proto3";

package seigr.seigr_cell;

import "google/protobuf/timestamp.proto";
import "machine_learning.proto"; // For GenesisState, Feedback
import "seed_dot_seigr.proto";   // For SeedState, SeedRouting
import "common.proto"; // For LineageEntry
import "cell_metadata.proto";         // For centralized CellMetadata
import "file_metadata.proto";
import "coordinate.proto";

// ===========================
// PRIMARY SEIGR CELL DEFINITION
// ===========================

/**
 * Core Seigr Cell structure for efficient, modular, and decentralized data management.
 * Supports spatial-temporal indexing, redundancy, lineage, and flexible metadata.
 */
message SeigrCell {
    string cell_id = 1; // Unique identifier for the Seigr cell.

    // Adaptive State and Learning
    seigr.machine_learning.GenesisState genesis_state = 2; // Adaptive and learning state.

    // Seed Associations
    repeated seigr.seed_dot_seigr.SeedState seed_states = 3; // Associated seed states for interconnection.

    // Metadata
    repeated seigr.cell_metadata.CellMetadata metadata = 4; // Comprehensive metadata about the Seigr cell.

    // Feedback Mechanism
    repeated seigr.common.Feedback cell_feedback = 5; // Feedback directly related to this cell.

    // Timestamps
    google.protobuf.Timestamp created_at = 6; // Timestamp of cell creation.
    google.protobuf.Timestamp last_updated = 7; // Timestamp of the last update.

    // Routing
    repeated seigr.seed_dot_seigr.SeedRouting cell_routing = 8; // Defines the routing interactions of this cell.

    // Lineage
    repeated seigr.common.LineageEntry lineage_entries = 9; // Tracks history and changes for the cell.

    // Processing Pipeline
    repeated seigr.file_metadata.OperationLog operation_logs = 10; // Logs for cell operations.

    // License and Ethical Usage
    RE_License re_license = 11;

    // Spatial and Temporal Alignment
    seigr.coordinate.CoordinateIndex coordinate_index = 12; // Unified 4D coordinate indexing.

    // Validation Metadata
    ValidationDetails validation_details = 13; // Tracks last validation status.
}

// ===========================
// CELL ROUTING
// ===========================

/**
 * Manages the connections and interactions between Seigr cells within the ecosystem.
 */
message CellRouting {
    string source_cell_id = 1; // Source cell ID.
    string target_cell_id = 2; // Target cell ID.
    string route_type = 3; // Type of route (e.g., peer-to-peer, hierarchical).
    map<string, string> attributes = 4; // Additional attributes for the routing.
}

// ===========================
// VALIDATION DETAILS
// ===========================

/**
 * Captures details about the validation status of a Seigr cell.
 */
message ValidationDetails {
    bool is_valid = 1; // Whether the cell is valid.
    string validation_message = 2; // Additional validation feedback.
    google.protobuf.Timestamp last_validated_at = 3; // Last validation timestamp.
    repeated string issues_detected = 4; // Issues found during validation.
}

// ===========================
// CELL SNAPSHOT
// ===========================

/**
 * Captures the operational state of a Seigr cell at a specific moment in time.
 */
message CellSnapshot {
    string snapshot_id = 1; // Unique identifier for the snapshot.
    SeigrCell cell_state = 2; // State of the Seigr cell.
    google.protobuf.Timestamp snapshot_time = 3; // Timestamp of the snapshot.
    string creator = 4; // Entity responsible for creating the snapshot.
}

// ===========================
// RE LICENSE & ETHICAL USE
// ===========================

/**
 * License metadata adhering to the Responsible and Ethical (RE) License model.
 */
message RE_License {
    string license_type = 1; // License type (e.g., "RE License", "CC-BY-SA").
    string terms = 2; // Terms or link to detailed license terms.
    string license_id = 3; // Unique identifier for the license.
    repeated string contributors = 4; // IDs of contributors.
    string ethical_use_guideline = 5; // Guideline for ethical and sustainable usage.
    Permissions permissions = 6; // Granular permission controls.
    map<string, string> license_metadata = 7; // Metadata for extended license information.
}

/**
 * Granular permissions for controlling data modification, sharing, and usage.
 */
message Permissions {
    bool allow_modification = 1; // Whether modifications are permitted.
    bool allow_derivatives = 2; // Whether derivative works are allowed.
    bool allow_commercial_use = 3; // Whether commercial use is permitted.
    string geographic_restriction = 4; // Geo-based access restrictions.
    string temporal_restriction = 5; // Time-based restrictions on access.
    string compliance_tag = 6; // Compliance classification tag.
}

// ===========================
// SEIGR CELL SERVICES
// ===========================

/**
 * Services for managing Seigr Cells, including validation, lifecycle operations, and lineage tracking.
 */
service SeigrCellService {
    rpc ValidateSeigrCell (ValidateSeigrCellRequest) returns (ValidateSeigrCellResponse);
    rpc RetrieveSeigrCell (RetrieveSeigrCellRequest) returns (RetrieveSeigrCellResponse);
    rpc UpdateSeigrCell (UpdateSeigrCellRequest) returns (UpdateSeigrCellResponse);
    rpc ListSeigrCells (ListSeigrCellsRequest) returns (ListSeigrCellsResponse);
    rpc LinkToSeedCluster (LinkToSeedClusterRequest) returns (LinkToSeedClusterResponse);
}

// ===========================
// SERVICE REQUESTS & RESPONSES
// ===========================

/**
 * Request to validate the integrity and configuration of a Seigr Cell.
 */
message ValidateSeigrCellRequest {
    string cell_id = 1;                        // Unique ID of the cell to validate
}

/**
 * Response containing validation results.
 */
message ValidateSeigrCellResponse {
    bool is_valid = 1;                         // Validation status
    string validation_message = 2;             // Validation feedback
    map<string, string> validation_metadata = 3; // Additional validation details
}

/**
 * Request to retrieve a specific Seigr Cell by ID.
 */
message RetrieveSeigrCellRequest {
    string cell_id = 1;                        // Unique identifier for the target cell
}

/**
 * Response containing the retrieved Seigr Cell.
 */
message RetrieveSeigrCellResponse {
    SeigrCell cell = 1;                        // Retrieved Seigr Cell
    string retrieval_timestamp = 2;            // Timestamp of retrieval
}

/**
 * Request to update an existing Seigr Cell.
 */
message UpdateSeigrCellRequest {
    string cell_id = 1;                        // Identifier of the cell to update
    map<string, string> updates = 2;           // Key-value updates for metadata or content
}

/**
 * Response confirming updates to a Seigr Cell.
 */
message UpdateSeigrCellResponse {
    bool success = 1;                          // Update success flag
    string message = 2;                        // Feedback on the update process
}

/**
 * Request to list Seigr Cells with optional filters.
 */
message ListSeigrCellsRequest {
    repeated string tags = 1;                  // Filter by tags
    string access_level = 2;                   // Filter by access level
    bool show_only_active = 3;                 // Filter active cells only
}

/**
 * Response containing a list of matching Seigr Cells.
 */
message ListSeigrCellsResponse {
    repeated SeigrCell cells = 1;              // List of retrieved Seigr Cells
    string retrieval_timestamp = 2;            // Timestamp of the retrieval process
}

/**
 * Request to link a Seigr Cell to a Seed Cluster.
 */
message LinkToSeedClusterRequest {
    string cell_id = 1;                        // Cell ID to be linked
    string seed_cluster_id = 2;                // Seed Cluster ID for linkage
    map<string, string> linkage_metadata = 3;  // Metadata for the linkage
}

/**
 * Response for linking a Seigr Cell to a Seed Cluster.
 */
message LinkToSeedClusterResponse {
    bool success = 1;                          // Success flag for the linkage
    string message = 2;                        // Feedback on the linkage process
}
