syntax = "proto3";

package seigr.replication;

import "common_requests.proto"; // ReplicationPriority, ReplicationTrigger, ReplicationStrategy
import "event.proto";           // EscalationLevel

// ===========================
// REPLICATION CONFIGURATION
// ===========================

/**
 * Defines configuration options for data replication.
 */
message ReplicationConfig {
    int32 replication_factor = 1;                    // Desired replication factor.
    int32 min_replication_factor = 2;               // Minimum acceptable replication factor.
    int32 max_replication_factor = 3;               // Maximum allowed replication factor.
    bool adaptive_replication_enabled = 4;          // Enable adaptive replication adjustments.
    seigr.common_requests.ReplicationStrategy default_strategy = 5;       // Default replication strategy.
    string config_version = 6;                      // Version identifier for replication config.
    map<string, string> metadata = 7;               // Metadata for replication context.
    int32 adaptive_scaling_threshold = 8;           // Threshold for adaptive scaling.
    bool failover_enabled = 9;                      // Enable automatic failover for failed nodes.
    bool dynamic_redundancy_scaling = 10;           // Scale redundancy dynamically.
    bool load_balanced_replication = 11;            // Balance replication load across nodes.
    bool auto_priority_adjustment = 12;            // Adjust replication priority dynamically.
    string redundancy_policy_id = 13;              // Policy governing redundancy strategies.
}

// ===========================
// REPLICATION STATUS
// ===========================

/**
 * Monitors the current replication status of a data segment.
 */
message ReplicationStatus {
    string segment_id = 1;                          // Unique identifier for the segment.
    int32 current_replication_count = 2;            // Current replication count.
    int32 target_replication_count = 3;            // Desired replication count.
    repeated string replica_hyphen_ids = 4;        // List of replica hyphen IDs.
    bool replication_completed = 5;                // Flag if replication is completed.
    seigr.common_requests.ReplicationPriority priority = 6;             // Priority level of the replication task.
    string last_checked = 7;                       // Timestamp of last replication check.
    map<string, string> metadata = 8;              // Contextual metadata.
    string failover_target_id = 9;                 // Target hyphen ID for failover.
    int32 estimated_completion_time = 10;          // Estimated time for replication completion (in seconds).
    int64 replication_speed_bytes_per_sec = 11;    // Current replication speed.
    float replication_progress = 12;              // Progress percentage.
    bool is_synchronized = 13;                    // Synchronization status across replicas.
}

// ===========================
// REPLICATION EVENT LOG
// ===========================

/**
 * Logs events related to replication tasks.
 */
message ReplicationEventLog {
    string event_id = 1;                            // Unique event identifier.
    string segment_id = 2;                          // Segment associated with this event.
    string action = 3;                               // Action taken during the event.
    string initiated_by = 4;                         // User/system initiating the event.
    string timestamp = 5;                            // Timestamp of the event.
    string status = 6;                               // Status of the replication event.
    map<string, string> details = 7;                 // Detailed context of the event.
    string failover_status = 8;                      // Status of any failover mechanism triggered.
    string initiator_type = 9;                       // Type of initiator (e.g., USER, SYSTEM).
    int32 retries_attempted = 10;                    // Retry attempts made.
    string escalation_level = 11;                    // Escalation level applied.
    string resolution_notes = 12;                    // Notes on resolution actions.
}

// ===========================
// REDUNDANCY MANAGER
// ===========================

/**
 * Manages redundancy levels and segment priorities.
 */
message RedundancyManager {
    int32 min_redundancy_level = 1;                  // Minimum redundancy level.
    int32 max_redundancy_level = 2;                  // Maximum redundancy level.
    map<string, seigr.common_requests.ReplicationPriority> segment_priority = 3; // Priority mapping by segment.
    repeated string high_priority_segments = 4;      // Segments marked as high priority.
    repeated string critical_segments = 5;           // Critical segments for replication.
    map<string, string> redundancy_metadata = 6;     // Additional metadata.
    int32 failover_timeout_seconds = 7;             // Timeout for triggering failover.
    bool adaptive_redundancy = 8;                   // Enable adaptive redundancy adjustments.
    string adaptive_redundancy_policy_id = 9;       // Policy governing adaptive redundancy.
    bool cross_cluster_replication_enabled = 10;    // Enable replication across clusters.
}

// ===========================
// REPLICATION ESCALATION
// ===========================

/**
 * Handles escalations during replication tasks.
 */
message ReplicationEscalation {
    string escalation_id = 1;                       // Unique escalation identifier.
    string segment_id = 2;                           // Segment ID requiring escalation.
    seigr.common_requests.ReplicationPriority priority = 3;               // Priority level assigned during escalation.
    string escalated_at = 4;                         // Timestamp of escalation.
    string reason = 5;                               // Reason for escalation.
    repeated string alert_recipients = 6;            // Recipients notified during escalation.
    bool immediate_replication_triggered = 7;        // If immediate replication was triggered.
    map<string, string> metadata = 8;               // Additional metadata.
    map<string, string> alert_preferences = 9;      // Preferences for alerting.
    seigr.event.EscalationLevel escalation_level = 10;          // Severity level of escalation.
    string escalation_status = 11;                  // Status of escalation resolution.
    string escalation_resolution_timestamp = 12;   // Timestamp of resolution.
    string fallback_strategy = 13;                 // Strategy for fallback actions.
    int32 replication_delay_penalty = 14;          // Penalty score for delayed replication.
}

// ===========================
// REPLICATION SUMMARY
// ===========================

/**
 * Provides an aggregated summary of replication across the network.
 */
message ReplicationSummary {
    string summary_id = 1;                           // Unique summary identifier.
    int32 total_segments_replicated = 2;             // Total replicated segments.
    int32 high_priority_replications = 3;           // High-priority replication tasks completed.
    int32 failed_replications = 4;                 // Count of failed replications.
    int32 ongoing_replications = 5;                // Count of ongoing replications.
    string generated_at = 6;                        // Timestamp of report generation.
    map<string, ReplicationStatus> segment_statuses = 7; // Statuses by segment.
    map<string, string> summary_metadata = 8;       // Contextual metadata.
    float average_replication_time = 9;            // Average replication time in seconds.
    int64 total_data_replicated_bytes = 10;        // Total data replicated in bytes.
    float synchronization_rate = 11;              // Rate of synchronized segments.
    map<string, int32> escalation_counts = 12;    // Count of escalations by severity.
    float failover_rate = 13;                     // Failover event rate.
    float redundancy_satisfaction_rate = 14;      // Success rate for redundancy targets.
}
