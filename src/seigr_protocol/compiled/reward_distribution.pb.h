// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: reward_distribution.proto
// Protobuf C++ Version: 5.29.2

#ifndef reward_5fdistribution_2eproto_2epb_2eh
#define reward_5fdistribution_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_reward_5fdistribution_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_reward_5fdistribution_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_reward_5fdistribution_2eproto;
namespace seigr {
namespace reward_distribution {
class AllocateRewardRequest;
struct AllocateRewardRequestDefaultTypeInternal;
extern AllocateRewardRequestDefaultTypeInternal _AllocateRewardRequest_default_instance_;
class AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse;
struct AllocateRewardRequest_AdditionalConditionsEntry_DoNotUseDefaultTypeInternal;
extern AllocateRewardRequest_AdditionalConditionsEntry_DoNotUseDefaultTypeInternal _AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse_default_instance_;
class AllocateRewardResponse;
struct AllocateRewardResponseDefaultTypeInternal;
extern AllocateRewardResponseDefaultTypeInternal _AllocateRewardResponse_default_instance_;
class DistributePoolRequest;
struct DistributePoolRequestDefaultTypeInternal;
extern DistributePoolRequestDefaultTypeInternal _DistributePoolRequest_default_instance_;
class DistributePoolResponse;
struct DistributePoolResponseDefaultTypeInternal;
extern DistributePoolResponseDefaultTypeInternal _DistributePoolResponse_default_instance_;
class DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse;
struct DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUseDefaultTypeInternal;
extern DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUseDefaultTypeInternal _DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse_default_instance_;
class EcoReportRequest;
struct EcoReportRequestDefaultTypeInternal;
extern EcoReportRequestDefaultTypeInternal _EcoReportRequest_default_instance_;
class EcoReportResponse;
struct EcoReportResponseDefaultTypeInternal;
extern EcoReportResponseDefaultTypeInternal _EcoReportResponse_default_instance_;
class EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse;
struct EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUseDefaultTypeInternal;
extern EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUseDefaultTypeInternal _EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse_default_instance_;
class GetRewardHistoryRequest;
struct GetRewardHistoryRequestDefaultTypeInternal;
extern GetRewardHistoryRequestDefaultTypeInternal _GetRewardHistoryRequest_default_instance_;
class GetRewardHistoryResponse;
struct GetRewardHistoryResponseDefaultTypeInternal;
extern GetRewardHistoryResponseDefaultTypeInternal _GetRewardHistoryResponse_default_instance_;
class RedistributionPool;
struct RedistributionPoolDefaultTypeInternal;
extern RedistributionPoolDefaultTypeInternal _RedistributionPool_default_instance_;
class RedistributionPool_DynamicThresholdsEntry_DoNotUse;
struct RedistributionPool_DynamicThresholdsEntry_DoNotUseDefaultTypeInternal;
extern RedistributionPool_DynamicThresholdsEntry_DoNotUseDefaultTypeInternal _RedistributionPool_DynamicThresholdsEntry_DoNotUse_default_instance_;
class Reward;
struct RewardDefaultTypeInternal;
extern RewardDefaultTypeInternal _Reward_default_instance_;
class RewardScalingConfig;
struct RewardScalingConfigDefaultTypeInternal;
extern RewardScalingConfigDefaultTypeInternal _RewardScalingConfig_default_instance_;
class Reward_ConditionsEntry_DoNotUse;
struct Reward_ConditionsEntry_DoNotUseDefaultTypeInternal;
extern Reward_ConditionsEntry_DoNotUseDefaultTypeInternal _Reward_ConditionsEntry_DoNotUse_default_instance_;
class Reward_DynamicParametersEntry_DoNotUse;
struct Reward_DynamicParametersEntry_DoNotUseDefaultTypeInternal;
extern Reward_DynamicParametersEntry_DoNotUseDefaultTypeInternal _Reward_DynamicParametersEntry_DoNotUse_default_instance_;
class UpdateScalingConfigRequest;
struct UpdateScalingConfigRequestDefaultTypeInternal;
extern UpdateScalingConfigRequestDefaultTypeInternal _UpdateScalingConfigRequest_default_instance_;
class UpdateScalingConfigResponse;
struct UpdateScalingConfigResponseDefaultTypeInternal;
extern UpdateScalingConfigResponseDefaultTypeInternal _UpdateScalingConfigResponse_default_instance_;
}  // namespace reward_distribution
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace reward_distribution {
enum RewardType : int {
  REWARD_TYPE_UNDEFINED = 0,
  REWARD_TYPE_CONNECTIVITY = 1,
  REWARD_TYPE_CONTENT_CONTRIBUTION = 2,
  REWARD_TYPE_VOTING_PARTICIPATION = 3,
  REWARD_TYPE_RESOURCE_EFFICIENCY = 4,
  REWARD_TYPE_COLLABORATIVE_TASK = 5,
  RewardType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RewardType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RewardType_IsValid(int value);
extern const uint32_t RewardType_internal_data_[];
constexpr RewardType RewardType_MIN = static_cast<RewardType>(0);
constexpr RewardType RewardType_MAX = static_cast<RewardType>(5);
constexpr int RewardType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
RewardType_descriptor();
template <typename T>
const std::string& RewardType_Name(T value) {
  static_assert(std::is_same<T, RewardType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RewardType_Name().");
  return RewardType_Name(static_cast<RewardType>(value));
}
template <>
inline const std::string& RewardType_Name(RewardType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RewardType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool RewardType_Parse(absl::string_view name, RewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewardType>(
      RewardType_descriptor(), name, value);
}
enum PoolStatus : int {
  POOL_STATUS_UNDEFINED = 0,
  POOL_STATUS_ACTIVE = 1,
  POOL_STATUS_INACTIVE = 2,
  POOL_STATUS_DISTRIBUTING = 3,
  POOL_STATUS_DEPLETED = 4,
  PoolStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PoolStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PoolStatus_IsValid(int value);
extern const uint32_t PoolStatus_internal_data_[];
constexpr PoolStatus PoolStatus_MIN = static_cast<PoolStatus>(0);
constexpr PoolStatus PoolStatus_MAX = static_cast<PoolStatus>(4);
constexpr int PoolStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PoolStatus_descriptor();
template <typename T>
const std::string& PoolStatus_Name(T value) {
  static_assert(std::is_same<T, PoolStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PoolStatus_Name().");
  return PoolStatus_Name(static_cast<PoolStatus>(value));
}
template <>
inline const std::string& PoolStatus_Name(PoolStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PoolStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PoolStatus_Parse(absl::string_view name, PoolStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolStatus>(
      PoolStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UpdateScalingConfigResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.UpdateScalingConfigResponse) */ {
 public:
  inline UpdateScalingConfigResponse() : UpdateScalingConfigResponse(nullptr) {}
  ~UpdateScalingConfigResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateScalingConfigResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateScalingConfigResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateScalingConfigResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateScalingConfigResponse(const UpdateScalingConfigResponse& from) : UpdateScalingConfigResponse(nullptr, from) {}
  inline UpdateScalingConfigResponse(UpdateScalingConfigResponse&& from) noexcept
      : UpdateScalingConfigResponse(nullptr, std::move(from)) {}
  inline UpdateScalingConfigResponse& operator=(const UpdateScalingConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateScalingConfigResponse& operator=(UpdateScalingConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateScalingConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateScalingConfigResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateScalingConfigResponse*>(
        &_UpdateScalingConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(UpdateScalingConfigResponse& a, UpdateScalingConfigResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateScalingConfigResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateScalingConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateScalingConfigResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateScalingConfigResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateScalingConfigResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateScalingConfigResponse& from) { UpdateScalingConfigResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateScalingConfigResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.UpdateScalingConfigResponse"; }

 protected:
  explicit UpdateScalingConfigResponse(::google::protobuf::Arena* arena);
  UpdateScalingConfigResponse(::google::protobuf::Arena* arena, const UpdateScalingConfigResponse& from);
  UpdateScalingConfigResponse(::google::protobuf::Arena* arena, UpdateScalingConfigResponse&& from) noexcept
      : UpdateScalingConfigResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.UpdateScalingConfigResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateScalingConfigResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class UpdateScalingConfigRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.UpdateScalingConfigRequest) */ {
 public:
  inline UpdateScalingConfigRequest() : UpdateScalingConfigRequest(nullptr) {}
  ~UpdateScalingConfigRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateScalingConfigRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateScalingConfigRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateScalingConfigRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateScalingConfigRequest(const UpdateScalingConfigRequest& from) : UpdateScalingConfigRequest(nullptr, from) {}
  inline UpdateScalingConfigRequest(UpdateScalingConfigRequest&& from) noexcept
      : UpdateScalingConfigRequest(nullptr, std::move(from)) {}
  inline UpdateScalingConfigRequest& operator=(const UpdateScalingConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateScalingConfigRequest& operator=(UpdateScalingConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateScalingConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateScalingConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateScalingConfigRequest*>(
        &_UpdateScalingConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UpdateScalingConfigRequest& a, UpdateScalingConfigRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateScalingConfigRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateScalingConfigRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateScalingConfigRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateScalingConfigRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateScalingConfigRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateScalingConfigRequest& from) { UpdateScalingConfigRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateScalingConfigRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.UpdateScalingConfigRequest"; }

 protected:
  explicit UpdateScalingConfigRequest(::google::protobuf::Arena* arena);
  UpdateScalingConfigRequest(::google::protobuf::Arena* arena, const UpdateScalingConfigRequest& from);
  UpdateScalingConfigRequest(::google::protobuf::Arena* arena, UpdateScalingConfigRequest&& from) noexcept
      : UpdateScalingConfigRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewScalingFactorFieldNumber = 1,
    kNewAdjustmentIntervalFieldNumber = 2,
    kMinScalingFactorFieldNumber = 3,
    kMaxScalingFactorFieldNumber = 4,
    kEcoPriorityWeightFieldNumber = 5,
  };
  // double new_scaling_factor = 1;
  void clear_new_scaling_factor() ;
  double new_scaling_factor() const;
  void set_new_scaling_factor(double value);

  private:
  double _internal_new_scaling_factor() const;
  void _internal_set_new_scaling_factor(double value);

  public:
  // uint64 new_adjustment_interval = 2;
  void clear_new_adjustment_interval() ;
  ::uint64_t new_adjustment_interval() const;
  void set_new_adjustment_interval(::uint64_t value);

  private:
  ::uint64_t _internal_new_adjustment_interval() const;
  void _internal_set_new_adjustment_interval(::uint64_t value);

  public:
  // double min_scaling_factor = 3;
  void clear_min_scaling_factor() ;
  double min_scaling_factor() const;
  void set_min_scaling_factor(double value);

  private:
  double _internal_min_scaling_factor() const;
  void _internal_set_min_scaling_factor(double value);

  public:
  // double max_scaling_factor = 4;
  void clear_max_scaling_factor() ;
  double max_scaling_factor() const;
  void set_max_scaling_factor(double value);

  private:
  double _internal_max_scaling_factor() const;
  void _internal_set_max_scaling_factor(double value);

  public:
  // double eco_priority_weight = 5;
  void clear_eco_priority_weight() ;
  double eco_priority_weight() const;
  void set_eco_priority_weight(double value);

  private:
  double _internal_eco_priority_weight() const;
  void _internal_set_eco_priority_weight(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.UpdateScalingConfigRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateScalingConfigRequest& from_msg);
    double new_scaling_factor_;
    ::uint64_t new_adjustment_interval_;
    double min_scaling_factor_;
    double max_scaling_factor_;
    double eco_priority_weight_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class RewardScalingConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.RewardScalingConfig) */ {
 public:
  inline RewardScalingConfig() : RewardScalingConfig(nullptr) {}
  ~RewardScalingConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RewardScalingConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RewardScalingConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RewardScalingConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline RewardScalingConfig(const RewardScalingConfig& from) : RewardScalingConfig(nullptr, from) {}
  inline RewardScalingConfig(RewardScalingConfig&& from) noexcept
      : RewardScalingConfig(nullptr, std::move(from)) {}
  inline RewardScalingConfig& operator=(const RewardScalingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardScalingConfig& operator=(RewardScalingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardScalingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardScalingConfig* internal_default_instance() {
    return reinterpret_cast<const RewardScalingConfig*>(
        &_RewardScalingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RewardScalingConfig& a, RewardScalingConfig& b) { a.Swap(&b); }
  inline void Swap(RewardScalingConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardScalingConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewardScalingConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RewardScalingConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RewardScalingConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RewardScalingConfig& from) { RewardScalingConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RewardScalingConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.RewardScalingConfig"; }

 protected:
  explicit RewardScalingConfig(::google::protobuf::Arena* arena);
  RewardScalingConfig(::google::protobuf::Arena* arena, const RewardScalingConfig& from);
  RewardScalingConfig(::google::protobuf::Arena* arena, RewardScalingConfig&& from) noexcept
      : RewardScalingConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScalingFactorFieldNumber = 1,
    kAdjustmentIntervalFieldNumber = 2,
    kMinScalingFactorFieldNumber = 3,
    kMaxScalingFactorFieldNumber = 4,
    kEcoPriorityWeightFieldNumber = 5,
    kMaxDistributionLimitFieldNumber = 6,
    kAdaptiveScalingEnabledFieldNumber = 7,
  };
  // double scaling_factor = 1;
  void clear_scaling_factor() ;
  double scaling_factor() const;
  void set_scaling_factor(double value);

  private:
  double _internal_scaling_factor() const;
  void _internal_set_scaling_factor(double value);

  public:
  // uint64 adjustment_interval = 2;
  void clear_adjustment_interval() ;
  ::uint64_t adjustment_interval() const;
  void set_adjustment_interval(::uint64_t value);

  private:
  ::uint64_t _internal_adjustment_interval() const;
  void _internal_set_adjustment_interval(::uint64_t value);

  public:
  // double min_scaling_factor = 3;
  void clear_min_scaling_factor() ;
  double min_scaling_factor() const;
  void set_min_scaling_factor(double value);

  private:
  double _internal_min_scaling_factor() const;
  void _internal_set_min_scaling_factor(double value);

  public:
  // double max_scaling_factor = 4;
  void clear_max_scaling_factor() ;
  double max_scaling_factor() const;
  void set_max_scaling_factor(double value);

  private:
  double _internal_max_scaling_factor() const;
  void _internal_set_max_scaling_factor(double value);

  public:
  // double eco_priority_weight = 5;
  void clear_eco_priority_weight() ;
  double eco_priority_weight() const;
  void set_eco_priority_weight(double value);

  private:
  double _internal_eco_priority_weight() const;
  void _internal_set_eco_priority_weight(double value);

  public:
  // uint64 max_distribution_limit = 6;
  void clear_max_distribution_limit() ;
  ::uint64_t max_distribution_limit() const;
  void set_max_distribution_limit(::uint64_t value);

  private:
  ::uint64_t _internal_max_distribution_limit() const;
  void _internal_set_max_distribution_limit(::uint64_t value);

  public:
  // bool adaptive_scaling_enabled = 7;
  void clear_adaptive_scaling_enabled() ;
  bool adaptive_scaling_enabled() const;
  void set_adaptive_scaling_enabled(bool value);

  private:
  bool _internal_adaptive_scaling_enabled() const;
  void _internal_set_adaptive_scaling_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.RewardScalingConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RewardScalingConfig& from_msg);
    double scaling_factor_;
    ::uint64_t adjustment_interval_;
    double min_scaling_factor_;
    double max_scaling_factor_;
    double eco_priority_weight_;
    ::uint64_t max_distribution_limit_;
    bool adaptive_scaling_enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class Reward_DynamicParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  Reward_DynamicParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Reward_DynamicParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Reward_DynamicParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Reward_DynamicParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Reward_DynamicParametersEntry_DoNotUse*>(
        &_Reward_DynamicParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Reward_ConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Reward_ConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Reward_ConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Reward_ConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Reward_ConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Reward_ConditionsEntry_DoNotUse*>(
        &_Reward_ConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RedistributionPool_DynamicThresholdsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  RedistributionPool_DynamicThresholdsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RedistributionPool_DynamicThresholdsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RedistributionPool_DynamicThresholdsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RedistributionPool_DynamicThresholdsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RedistributionPool_DynamicThresholdsEntry_DoNotUse*>(
        &_RedistributionPool_DynamicThresholdsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      79, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetRewardHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.GetRewardHistoryRequest) */ {
 public:
  inline GetRewardHistoryRequest() : GetRewardHistoryRequest(nullptr) {}
  ~GetRewardHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRewardHistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRewardHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRewardHistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRewardHistoryRequest(const GetRewardHistoryRequest& from) : GetRewardHistoryRequest(nullptr, from) {}
  inline GetRewardHistoryRequest(GetRewardHistoryRequest&& from) noexcept
      : GetRewardHistoryRequest(nullptr, std::move(from)) {}
  inline GetRewardHistoryRequest& operator=(const GetRewardHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRewardHistoryRequest& operator=(GetRewardHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRewardHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRewardHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetRewardHistoryRequest*>(
        &_GetRewardHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(GetRewardHistoryRequest& a, GetRewardHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(GetRewardHistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRewardHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRewardHistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetRewardHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRewardHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRewardHistoryRequest& from) { GetRewardHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetRewardHistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.GetRewardHistoryRequest"; }

 protected:
  explicit GetRewardHistoryRequest(::google::protobuf::Arena* arena);
  GetRewardHistoryRequest(::google::protobuf::Arena* arena, const GetRewardHistoryRequest& from);
  GetRewardHistoryRequest(::google::protobuf::Arena* arena, GetRewardHistoryRequest&& from) noexcept
      : GetRewardHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecipientIdFieldNumber = 1,
    kLimitFieldNumber = 2,
    kIncludeExpiredFieldNumber = 3,
    kOnlyEcoRewardsFieldNumber = 4,
  };
  // string recipient_id = 1;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // uint32 limit = 2;
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // bool include_expired = 3;
  void clear_include_expired() ;
  bool include_expired() const;
  void set_include_expired(bool value);

  private:
  bool _internal_include_expired() const;
  void _internal_set_include_expired(bool value);

  public:
  // bool only_eco_rewards = 4;
  void clear_only_eco_rewards() ;
  bool only_eco_rewards() const;
  void set_only_eco_rewards(bool value);

  private:
  bool _internal_only_eco_rewards() const;
  void _internal_set_only_eco_rewards(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.GetRewardHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRewardHistoryRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::uint32_t limit_;
    bool include_expired_;
    bool only_eco_rewards_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse*>(
        &_EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      81, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class EcoReportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.EcoReportRequest) */ {
 public:
  inline EcoReportRequest() : EcoReportRequest(nullptr) {}
  ~EcoReportRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EcoReportRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EcoReportRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EcoReportRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EcoReportRequest(const EcoReportRequest& from) : EcoReportRequest(nullptr, from) {}
  inline EcoReportRequest(EcoReportRequest&& from) noexcept
      : EcoReportRequest(nullptr, std::move(from)) {}
  inline EcoReportRequest& operator=(const EcoReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcoReportRequest& operator=(EcoReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcoReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcoReportRequest* internal_default_instance() {
    return reinterpret_cast<const EcoReportRequest*>(
        &_EcoReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(EcoReportRequest& a, EcoReportRequest& b) { a.Swap(&b); }
  inline void Swap(EcoReportRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcoReportRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcoReportRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EcoReportRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcoReportRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EcoReportRequest& from) { EcoReportRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EcoReportRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.EcoReportRequest"; }

 protected:
  explicit EcoReportRequest(::google::protobuf::Arena* arena);
  EcoReportRequest(::google::protobuf::Arena* arena, const EcoReportRequest& from);
  EcoReportRequest(::google::protobuf::Arena* arena, EcoReportRequest&& from) noexcept
      : EcoReportRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPeriodFieldNumber = 1,
    kIncludeDetailedBreakdownFieldNumber = 2,
  };
  // string period = 1;
  void clear_period() ;
  const std::string& period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_period(Arg_&& arg, Args_... args);
  std::string* mutable_period();
  PROTOBUF_NODISCARD std::string* release_period();
  void set_allocated_period(std::string* value);

  private:
  const std::string& _internal_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_period(
      const std::string& value);
  std::string* _internal_mutable_period();

  public:
  // bool include_detailed_breakdown = 2;
  void clear_include_detailed_breakdown() ;
  bool include_detailed_breakdown() const;
  void set_include_detailed_breakdown(bool value);

  private:
  bool _internal_include_detailed_breakdown() const;
  void _internal_set_include_detailed_breakdown(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.EcoReportRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EcoReportRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr period_;
    bool include_detailed_breakdown_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::uint64_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::uint64_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>;
  DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse*>(
        &_DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      93, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DistributePoolRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.DistributePoolRequest) */ {
 public:
  inline DistributePoolRequest() : DistributePoolRequest(nullptr) {}
  ~DistributePoolRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DistributePoolRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DistributePoolRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributePoolRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributePoolRequest(const DistributePoolRequest& from) : DistributePoolRequest(nullptr, from) {}
  inline DistributePoolRequest(DistributePoolRequest&& from) noexcept
      : DistributePoolRequest(nullptr, std::move(from)) {}
  inline DistributePoolRequest& operator=(const DistributePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributePoolRequest& operator=(DistributePoolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributePoolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributePoolRequest* internal_default_instance() {
    return reinterpret_cast<const DistributePoolRequest*>(
        &_DistributePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DistributePoolRequest& a, DistributePoolRequest& b) { a.Swap(&b); }
  inline void Swap(DistributePoolRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributePoolRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributePoolRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DistributePoolRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributePoolRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributePoolRequest& from) { DistributePoolRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DistributePoolRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.DistributePoolRequest"; }

 protected:
  explicit DistributePoolRequest(::google::protobuf::Arena* arena);
  DistributePoolRequest(::google::protobuf::Arena* arena, const DistributePoolRequest& from);
  DistributePoolRequest(::google::protobuf::Arena* arena, DistributePoolRequest&& from) noexcept
      : DistributePoolRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenaryThresholdFieldNumber = 1,
    kOverrideInactiveStatusFieldNumber = 2,
    kPrioritizeEcoFriendlyFieldNumber = 3,
  };
  // uint64 senary_threshold = 1;
  void clear_senary_threshold() ;
  ::uint64_t senary_threshold() const;
  void set_senary_threshold(::uint64_t value);

  private:
  ::uint64_t _internal_senary_threshold() const;
  void _internal_set_senary_threshold(::uint64_t value);

  public:
  // bool override_inactive_status = 2;
  void clear_override_inactive_status() ;
  bool override_inactive_status() const;
  void set_override_inactive_status(bool value);

  private:
  bool _internal_override_inactive_status() const;
  void _internal_set_override_inactive_status(bool value);

  public:
  // bool prioritize_eco_friendly = 3;
  void clear_prioritize_eco_friendly() ;
  bool prioritize_eco_friendly() const;
  void set_prioritize_eco_friendly(bool value);

  private:
  bool _internal_prioritize_eco_friendly() const;
  void _internal_set_prioritize_eco_friendly(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.DistributePoolRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributePoolRequest& from_msg);
    ::uint64_t senary_threshold_;
    bool override_inactive_status_;
    bool prioritize_eco_friendly_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class AllocateRewardResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.AllocateRewardResponse) */ {
 public:
  inline AllocateRewardResponse() : AllocateRewardResponse(nullptr) {}
  ~AllocateRewardResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AllocateRewardResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AllocateRewardResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllocateRewardResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllocateRewardResponse(const AllocateRewardResponse& from) : AllocateRewardResponse(nullptr, from) {}
  inline AllocateRewardResponse(AllocateRewardResponse&& from) noexcept
      : AllocateRewardResponse(nullptr, std::move(from)) {}
  inline AllocateRewardResponse& operator=(const AllocateRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocateRewardResponse& operator=(AllocateRewardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocateRewardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocateRewardResponse* internal_default_instance() {
    return reinterpret_cast<const AllocateRewardResponse*>(
        &_AllocateRewardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AllocateRewardResponse& a, AllocateRewardResponse& b) { a.Swap(&b); }
  inline void Swap(AllocateRewardResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocateRewardResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocateRewardResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AllocateRewardResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllocateRewardResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllocateRewardResponse& from) { AllocateRewardResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AllocateRewardResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.AllocateRewardResponse"; }

 protected:
  explicit AllocateRewardResponse(::google::protobuf::Arena* arena);
  AllocateRewardResponse(::google::protobuf::Arena* arena, const AllocateRewardResponse& from);
  AllocateRewardResponse(::google::protobuf::Arena* arena, AllocateRewardResponse&& from) noexcept
      : AllocateRewardResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kRewardIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string reward_id = 3;
  void clear_reward_id() ;
  const std::string& reward_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_id(Arg_&& arg, Args_... args);
  std::string* mutable_reward_id();
  PROTOBUF_NODISCARD std::string* release_reward_id();
  void set_allocated_reward_id(std::string* value);

  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(
      const std::string& value);
  std::string* _internal_mutable_reward_id();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.AllocateRewardResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      73, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllocateRewardResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr reward_id_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse*>(
        &_AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_reward_5fdistribution_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      90, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Reward final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.Reward) */ {
 public:
  inline Reward() : Reward(nullptr) {}
  ~Reward() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Reward* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Reward));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Reward(
      ::google::protobuf::internal::ConstantInitialized);

  inline Reward(const Reward& from) : Reward(nullptr, from) {}
  inline Reward(Reward&& from) noexcept
      : Reward(nullptr, std::move(from)) {}
  inline Reward& operator=(const Reward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reward& operator=(Reward&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reward& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reward* internal_default_instance() {
    return reinterpret_cast<const Reward*>(
        &_Reward_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Reward& a, Reward& b) { a.Swap(&b); }
  inline void Swap(Reward* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reward* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reward* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Reward>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Reward& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Reward& from) { Reward::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Reward* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.Reward"; }

 protected:
  explicit Reward(::google::protobuf::Arena* arena);
  Reward(::google::protobuf::Arena* arena, const Reward& from);
  Reward(::google::protobuf::Arena* arena, Reward&& from) noexcept
      : Reward(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConditionsFieldNumber = 8,
    kDynamicParametersFieldNumber = 11,
    kRewardIdFieldNumber = 1,
    kRecipientIdFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kExpirationFieldNumber = 7,
    kIssuedByFieldNumber = 9,
    kAmountFieldNumber = 3,
    kIntervalFieldNumber = 5,
    kRewardTypeFieldNumber = 4,
    kEcoFriendlyFlagFieldNumber = 10,
  };
  // map<string, string> conditions = 8;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;

  public:
  void clear_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_conditions();

  public:
  // map<string, double> dynamic_parameters = 11;
  int dynamic_parameters_size() const;
  private:
  int _internal_dynamic_parameters_size() const;

  public:
  void clear_dynamic_parameters() ;
  const ::google::protobuf::Map<std::string, double>& dynamic_parameters() const;
  ::google::protobuf::Map<std::string, double>* mutable_dynamic_parameters();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_dynamic_parameters() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_dynamic_parameters();

  public:
  // string reward_id = 1;
  void clear_reward_id() ;
  const std::string& reward_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_id(Arg_&& arg, Args_... args);
  std::string* mutable_reward_id();
  PROTOBUF_NODISCARD std::string* release_reward_id();
  void set_allocated_reward_id(std::string* value);

  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(
      const std::string& value);
  std::string* _internal_mutable_reward_id();

  public:
  // string recipient_id = 2;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string expiration = 7;
  void clear_expiration() ;
  const std::string& expiration() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiration(Arg_&& arg, Args_... args);
  std::string* mutable_expiration();
  PROTOBUF_NODISCARD std::string* release_expiration();
  void set_allocated_expiration(std::string* value);

  private:
  const std::string& _internal_expiration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiration(
      const std::string& value);
  std::string* _internal_mutable_expiration();

  public:
  // string issued_by = 9;
  void clear_issued_by() ;
  const std::string& issued_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_issued_by(Arg_&& arg, Args_... args);
  std::string* mutable_issued_by();
  PROTOBUF_NODISCARD std::string* release_issued_by();
  void set_allocated_issued_by(std::string* value);

  private:
  const std::string& _internal_issued_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issued_by(
      const std::string& value);
  std::string* _internal_mutable_issued_by();

  public:
  // uint64 amount = 3;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // uint64 interval = 5;
  void clear_interval() ;
  ::uint64_t interval() const;
  void set_interval(::uint64_t value);

  private:
  ::uint64_t _internal_interval() const;
  void _internal_set_interval(::uint64_t value);

  public:
  // .seigr.reward_distribution.RewardType reward_type = 4;
  void clear_reward_type() ;
  ::seigr::reward_distribution::RewardType reward_type() const;
  void set_reward_type(::seigr::reward_distribution::RewardType value);

  private:
  ::seigr::reward_distribution::RewardType _internal_reward_type() const;
  void _internal_set_reward_type(::seigr::reward_distribution::RewardType value);

  public:
  // bool eco_friendly_flag = 10;
  void clear_eco_friendly_flag() ;
  bool eco_friendly_flag() const;
  void set_eco_friendly_flag(bool value);

  private:
  bool _internal_eco_friendly_flag() const;
  void _internal_set_eco_friendly_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.Reward)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Reward& from_msg);
    ::google::protobuf::internal::MapField<Reward_ConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        conditions_;
    ::google::protobuf::internal::MapField<Reward_DynamicParametersEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        dynamic_parameters_;
    ::google::protobuf::internal::ArenaStringPtr reward_id_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr expiration_;
    ::google::protobuf::internal::ArenaStringPtr issued_by_;
    ::uint64_t amount_;
    ::uint64_t interval_;
    int reward_type_;
    bool eco_friendly_flag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class EcoReportResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.EcoReportResponse) */ {
 public:
  inline EcoReportResponse() : EcoReportResponse(nullptr) {}
  ~EcoReportResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EcoReportResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EcoReportResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EcoReportResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EcoReportResponse(const EcoReportResponse& from) : EcoReportResponse(nullptr, from) {}
  inline EcoReportResponse(EcoReportResponse&& from) noexcept
      : EcoReportResponse(nullptr, std::move(from)) {}
  inline EcoReportResponse& operator=(const EcoReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcoReportResponse& operator=(EcoReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcoReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcoReportResponse* internal_default_instance() {
    return reinterpret_cast<const EcoReportResponse*>(
        &_EcoReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(EcoReportResponse& a, EcoReportResponse& b) { a.Swap(&b); }
  inline void Swap(EcoReportResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcoReportResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcoReportResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EcoReportResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EcoReportResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EcoReportResponse& from) { EcoReportResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EcoReportResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.EcoReportResponse"; }

 protected:
  explicit EcoReportResponse(::google::protobuf::Arena* arena);
  EcoReportResponse(::google::protobuf::Arena* arena, const EcoReportResponse& from);
  EcoReportResponse(::google::protobuf::Arena* arena, EcoReportResponse&& from) noexcept
      : EcoReportResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEcoIncentivesSummaryFieldNumber = 3,
    kMessageFieldNumber = 2,
    kTotalEcoFundsDistributedFieldNumber = 4,
    kNetworkSustainabilityScoreFieldNumber = 5,
    kSuccessFieldNumber = 1,
  };
  // map<string, double> eco_incentives_summary = 3;
  int eco_incentives_summary_size() const;
  private:
  int _internal_eco_incentives_summary_size() const;

  public:
  void clear_eco_incentives_summary() ;
  const ::google::protobuf::Map<std::string, double>& eco_incentives_summary() const;
  ::google::protobuf::Map<std::string, double>* mutable_eco_incentives_summary();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_eco_incentives_summary() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_eco_incentives_summary();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // double total_eco_funds_distributed = 4;
  void clear_total_eco_funds_distributed() ;
  double total_eco_funds_distributed() const;
  void set_total_eco_funds_distributed(double value);

  private:
  double _internal_total_eco_funds_distributed() const;
  void _internal_set_total_eco_funds_distributed(double value);

  public:
  // double network_sustainability_score = 5;
  void clear_network_sustainability_score() ;
  double network_sustainability_score() const;
  void set_network_sustainability_score(double value);

  private:
  double _internal_network_sustainability_score() const;
  void _internal_set_network_sustainability_score(double value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.EcoReportResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EcoReportResponse& from_msg);
    ::google::protobuf::internal::MapField<EcoReportResponse_EcoIncentivesSummaryEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        eco_incentives_summary_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    double total_eco_funds_distributed_;
    double network_sustainability_score_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class DistributePoolResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.DistributePoolResponse) */ {
 public:
  inline DistributePoolResponse() : DistributePoolResponse(nullptr) {}
  ~DistributePoolResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DistributePoolResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DistributePoolResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributePoolResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributePoolResponse(const DistributePoolResponse& from) : DistributePoolResponse(nullptr, from) {}
  inline DistributePoolResponse(DistributePoolResponse&& from) noexcept
      : DistributePoolResponse(nullptr, std::move(from)) {}
  inline DistributePoolResponse& operator=(const DistributePoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributePoolResponse& operator=(DistributePoolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributePoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributePoolResponse* internal_default_instance() {
    return reinterpret_cast<const DistributePoolResponse*>(
        &_DistributePoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(DistributePoolResponse& a, DistributePoolResponse& b) { a.Swap(&b); }
  inline void Swap(DistributePoolResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributePoolResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributePoolResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DistributePoolResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributePoolResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributePoolResponse& from) { DistributePoolResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DistributePoolResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.DistributePoolResponse"; }

 protected:
  explicit DistributePoolResponse(::google::protobuf::Arena* arena);
  DistributePoolResponse(::google::protobuf::Arena* arena, const DistributePoolResponse& from);
  DistributePoolResponse(::google::protobuf::Arena* arena, DistributePoolResponse&& from) noexcept
      : DistributePoolResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardDistributionBreakdownFieldNumber = 4,
    kMessageFieldNumber = 3,
    kDistributedAmountFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // map<string, uint64> reward_distribution_breakdown = 4;
  int reward_distribution_breakdown_size() const;
  private:
  int _internal_reward_distribution_breakdown_size() const;

  public:
  void clear_reward_distribution_breakdown() ;
  const ::google::protobuf::Map<std::string, ::uint64_t>& reward_distribution_breakdown() const;
  ::google::protobuf::Map<std::string, ::uint64_t>* mutable_reward_distribution_breakdown();

  private:
  const ::google::protobuf::Map<std::string, ::uint64_t>& _internal_reward_distribution_breakdown() const;
  ::google::protobuf::Map<std::string, ::uint64_t>* _internal_mutable_reward_distribution_breakdown();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint64 distributed_amount = 2;
  void clear_distributed_amount() ;
  ::uint64_t distributed_amount() const;
  void set_distributed_amount(::uint64_t value);

  private:
  ::uint64_t _internal_distributed_amount() const;
  void _internal_set_distributed_amount(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.DistributePoolResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributePoolResponse& from_msg);
    ::google::protobuf::internal::MapField<DistributePoolResponse_RewardDistributionBreakdownEntry_DoNotUse, std::string, ::uint64_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>
        reward_distribution_breakdown_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint64_t distributed_amount_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class AllocateRewardRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.AllocateRewardRequest) */ {
 public:
  inline AllocateRewardRequest() : AllocateRewardRequest(nullptr) {}
  ~AllocateRewardRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AllocateRewardRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AllocateRewardRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllocateRewardRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllocateRewardRequest(const AllocateRewardRequest& from) : AllocateRewardRequest(nullptr, from) {}
  inline AllocateRewardRequest(AllocateRewardRequest&& from) noexcept
      : AllocateRewardRequest(nullptr, std::move(from)) {}
  inline AllocateRewardRequest& operator=(const AllocateRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocateRewardRequest& operator=(AllocateRewardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocateRewardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocateRewardRequest* internal_default_instance() {
    return reinterpret_cast<const AllocateRewardRequest*>(
        &_AllocateRewardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AllocateRewardRequest& a, AllocateRewardRequest& b) { a.Swap(&b); }
  inline void Swap(AllocateRewardRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocateRewardRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocateRewardRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AllocateRewardRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllocateRewardRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllocateRewardRequest& from) { AllocateRewardRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AllocateRewardRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.AllocateRewardRequest"; }

 protected:
  explicit AllocateRewardRequest(::google::protobuf::Arena* arena);
  AllocateRewardRequest(::google::protobuf::Arena* arena, const AllocateRewardRequest& from);
  AllocateRewardRequest(::google::protobuf::Arena* arena, AllocateRewardRequest&& from) noexcept
      : AllocateRewardRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdditionalConditionsFieldNumber = 4,
    kRecipientIdFieldNumber = 1,
    kAmountFieldNumber = 3,
    kRewardTypeFieldNumber = 2,
    kEcoIncentiveFieldNumber = 5,
  };
  // map<string, string> additional_conditions = 4;
  int additional_conditions_size() const;
  private:
  int _internal_additional_conditions_size() const;

  public:
  void clear_additional_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_conditions();

  public:
  // string recipient_id = 1;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // uint64 amount = 3;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // .seigr.reward_distribution.RewardType reward_type = 2;
  void clear_reward_type() ;
  ::seigr::reward_distribution::RewardType reward_type() const;
  void set_reward_type(::seigr::reward_distribution::RewardType value);

  private:
  ::seigr::reward_distribution::RewardType _internal_reward_type() const;
  void _internal_set_reward_type(::seigr::reward_distribution::RewardType value);

  public:
  // bool eco_incentive = 5;
  void clear_eco_incentive() ;
  bool eco_incentive() const;
  void set_eco_incentive(bool value);

  private:
  bool _internal_eco_incentive() const;
  void _internal_set_eco_incentive(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.AllocateRewardRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllocateRewardRequest& from_msg);
    ::google::protobuf::internal::MapField<AllocateRewardRequest_AdditionalConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_conditions_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::uint64_t amount_;
    int reward_type_;
    bool eco_incentive_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class RedistributionPool final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.RedistributionPool) */ {
 public:
  inline RedistributionPool() : RedistributionPool(nullptr) {}
  ~RedistributionPool() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RedistributionPool* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RedistributionPool));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RedistributionPool(
      ::google::protobuf::internal::ConstantInitialized);

  inline RedistributionPool(const RedistributionPool& from) : RedistributionPool(nullptr, from) {}
  inline RedistributionPool(RedistributionPool&& from) noexcept
      : RedistributionPool(nullptr, std::move(from)) {}
  inline RedistributionPool& operator=(const RedistributionPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedistributionPool& operator=(RedistributionPool&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedistributionPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedistributionPool* internal_default_instance() {
    return reinterpret_cast<const RedistributionPool*>(
        &_RedistributionPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RedistributionPool& a, RedistributionPool& b) { a.Swap(&b); }
  inline void Swap(RedistributionPool* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedistributionPool* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedistributionPool* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RedistributionPool>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RedistributionPool& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RedistributionPool& from) { RedistributionPool::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RedistributionPool* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.RedistributionPool"; }

 protected:
  explicit RedistributionPool(::google::protobuf::Arena* arena);
  RedistributionPool(::google::protobuf::Arena* arena, const RedistributionPool& from);
  RedistributionPool(::google::protobuf::Arena* arena, RedistributionPool&& from) noexcept
      : RedistributionPool(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardQueueFieldNumber = 2,
    kDynamicThresholdsFieldNumber = 5,
    kLastDistributedAtFieldNumber = 7,
    kPoolBalanceFieldNumber = 1,
    kSenaryThresholdFieldNumber = 3,
    kEcoReserveFundFieldNumber = 6,
    kStatusFieldNumber = 4,
  };
  // repeated .seigr.reward_distribution.Reward reward_queue = 2;
  int reward_queue_size() const;
  private:
  int _internal_reward_queue_size() const;

  public:
  void clear_reward_queue() ;
  ::seigr::reward_distribution::Reward* mutable_reward_queue(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* mutable_reward_queue();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& _internal_reward_queue() const;
  ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* _internal_mutable_reward_queue();
  public:
  const ::seigr::reward_distribution::Reward& reward_queue(int index) const;
  ::seigr::reward_distribution::Reward* add_reward_queue();
  const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& reward_queue() const;
  // map<string, double> dynamic_thresholds = 5;
  int dynamic_thresholds_size() const;
  private:
  int _internal_dynamic_thresholds_size() const;

  public:
  void clear_dynamic_thresholds() ;
  const ::google::protobuf::Map<std::string, double>& dynamic_thresholds() const;
  ::google::protobuf::Map<std::string, double>* mutable_dynamic_thresholds();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_dynamic_thresholds() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_dynamic_thresholds();

  public:
  // string last_distributed_at = 7;
  void clear_last_distributed_at() ;
  const std::string& last_distributed_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_distributed_at(Arg_&& arg, Args_... args);
  std::string* mutable_last_distributed_at();
  PROTOBUF_NODISCARD std::string* release_last_distributed_at();
  void set_allocated_last_distributed_at(std::string* value);

  private:
  const std::string& _internal_last_distributed_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_distributed_at(
      const std::string& value);
  std::string* _internal_mutable_last_distributed_at();

  public:
  // uint64 pool_balance = 1;
  void clear_pool_balance() ;
  ::uint64_t pool_balance() const;
  void set_pool_balance(::uint64_t value);

  private:
  ::uint64_t _internal_pool_balance() const;
  void _internal_set_pool_balance(::uint64_t value);

  public:
  // uint64 senary_threshold = 3;
  void clear_senary_threshold() ;
  ::uint64_t senary_threshold() const;
  void set_senary_threshold(::uint64_t value);

  private:
  ::uint64_t _internal_senary_threshold() const;
  void _internal_set_senary_threshold(::uint64_t value);

  public:
  // uint64 eco_reserve_fund = 6;
  void clear_eco_reserve_fund() ;
  ::uint64_t eco_reserve_fund() const;
  void set_eco_reserve_fund(::uint64_t value);

  private:
  ::uint64_t _internal_eco_reserve_fund() const;
  void _internal_set_eco_reserve_fund(::uint64_t value);

  public:
  // .seigr.reward_distribution.PoolStatus status = 4;
  void clear_status() ;
  ::seigr::reward_distribution::PoolStatus status() const;
  void set_status(::seigr::reward_distribution::PoolStatus value);

  private:
  ::seigr::reward_distribution::PoolStatus _internal_status() const;
  void _internal_set_status(::seigr::reward_distribution::PoolStatus value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.RedistributionPool)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RedistributionPool& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::reward_distribution::Reward > reward_queue_;
    ::google::protobuf::internal::MapField<RedistributionPool_DynamicThresholdsEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        dynamic_thresholds_;
    ::google::protobuf::internal::ArenaStringPtr last_distributed_at_;
    ::uint64_t pool_balance_;
    ::uint64_t senary_threshold_;
    ::uint64_t eco_reserve_fund_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};
// -------------------------------------------------------------------

class GetRewardHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.reward_distribution.GetRewardHistoryResponse) */ {
 public:
  inline GetRewardHistoryResponse() : GetRewardHistoryResponse(nullptr) {}
  ~GetRewardHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRewardHistoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRewardHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRewardHistoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRewardHistoryResponse(const GetRewardHistoryResponse& from) : GetRewardHistoryResponse(nullptr, from) {}
  inline GetRewardHistoryResponse(GetRewardHistoryResponse&& from) noexcept
      : GetRewardHistoryResponse(nullptr, std::move(from)) {}
  inline GetRewardHistoryResponse& operator=(const GetRewardHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRewardHistoryResponse& operator=(GetRewardHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRewardHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRewardHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetRewardHistoryResponse*>(
        &_GetRewardHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetRewardHistoryResponse& a, GetRewardHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(GetRewardHistoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRewardHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRewardHistoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetRewardHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRewardHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRewardHistoryResponse& from) { GetRewardHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetRewardHistoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.reward_distribution.GetRewardHistoryResponse"; }

 protected:
  explicit GetRewardHistoryResponse(::google::protobuf::Arena* arena);
  GetRewardHistoryResponse(::google::protobuf::Arena* arena, const GetRewardHistoryResponse& from);
  GetRewardHistoryResponse(::google::protobuf::Arena* arena, GetRewardHistoryResponse&& from) noexcept
      : GetRewardHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardsFieldNumber = 2,
    kRecipientIdFieldNumber = 1,
  };
  // repeated .seigr.reward_distribution.Reward rewards = 2;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;

  public:
  void clear_rewards() ;
  ::seigr::reward_distribution::Reward* mutable_rewards(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* mutable_rewards();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& _internal_rewards() const;
  ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* _internal_mutable_rewards();
  public:
  const ::seigr::reward_distribution::Reward& rewards(int index) const;
  ::seigr::reward_distribution::Reward* add_rewards();
  const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& rewards() const;
  // string recipient_id = 1;
  void clear_recipient_id() ;
  const std::string& recipient_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_id(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_id();
  PROTOBUF_NODISCARD std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* value);

  private:
  const std::string& _internal_recipient_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_id(
      const std::string& value);
  std::string* _internal_mutable_recipient_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.reward_distribution.GetRewardHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRewardHistoryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::reward_distribution::Reward > rewards_;
    ::google::protobuf::internal::ArenaStringPtr recipient_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reward_5fdistribution_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Reward

// string reward_id = 1;
inline void Reward::clear_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.ClearToEmpty();
}
inline const std::string& Reward::reward_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.reward_id)
  return _internal_reward_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reward::set_reward_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.reward_id)
}
inline std::string* Reward::mutable_reward_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reward_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.Reward.reward_id)
  return _s;
}
inline const std::string& Reward::_internal_reward_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_id_.Get();
}
inline void Reward::_internal_set_reward_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.Set(value, GetArena());
}
inline std::string* Reward::_internal_mutable_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reward_id_.Mutable( GetArena());
}
inline std::string* Reward::release_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.Reward.reward_id)
  return _impl_.reward_id_.Release();
}
inline void Reward::set_allocated_reward_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reward_id_.IsDefault()) {
    _impl_.reward_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.Reward.reward_id)
}

// string recipient_id = 2;
inline void Reward::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& Reward::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reward::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.recipient_id)
}
inline std::string* Reward::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.Reward.recipient_id)
  return _s;
}
inline const std::string& Reward::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void Reward::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* Reward::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* Reward::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.Reward.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void Reward::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.Reward.recipient_id)
}

// uint64 amount = 3;
inline void Reward::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t Reward::amount() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.amount)
  return _internal_amount();
}
inline void Reward::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.amount)
}
inline ::uint64_t Reward::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void Reward::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// .seigr.reward_distribution.RewardType reward_type = 4;
inline void Reward::clear_reward_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_type_ = 0;
}
inline ::seigr::reward_distribution::RewardType Reward::reward_type() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.reward_type)
  return _internal_reward_type();
}
inline void Reward::set_reward_type(::seigr::reward_distribution::RewardType value) {
  _internal_set_reward_type(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.reward_type)
}
inline ::seigr::reward_distribution::RewardType Reward::_internal_reward_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::reward_distribution::RewardType>(_impl_.reward_type_);
}
inline void Reward::_internal_set_reward_type(::seigr::reward_distribution::RewardType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_type_ = value;
}

// uint64 interval = 5;
inline void Reward::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = ::uint64_t{0u};
}
inline ::uint64_t Reward::interval() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.interval)
  return _internal_interval();
}
inline void Reward::set_interval(::uint64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.interval)
}
inline ::uint64_t Reward::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interval_;
}
inline void Reward::_internal_set_interval(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// string timestamp = 6;
inline void Reward::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Reward::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reward::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.timestamp)
}
inline std::string* Reward::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.Reward.timestamp)
  return _s;
}
inline const std::string& Reward::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Reward::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Reward::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Reward::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.Reward.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Reward::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.Reward.timestamp)
}

// string expiration = 7;
inline void Reward::clear_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.ClearToEmpty();
}
inline const std::string& Reward::expiration() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.expiration)
  return _internal_expiration();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reward::set_expiration(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.expiration)
}
inline std::string* Reward::mutable_expiration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.Reward.expiration)
  return _s;
}
inline const std::string& Reward::_internal_expiration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_.Get();
}
inline void Reward::_internal_set_expiration(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.Set(value, GetArena());
}
inline std::string* Reward::_internal_mutable_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiration_.Mutable( GetArena());
}
inline std::string* Reward::release_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.Reward.expiration)
  return _impl_.expiration_.Release();
}
inline void Reward::set_allocated_expiration(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiration_.IsDefault()) {
    _impl_.expiration_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.Reward.expiration)
}

// map<string, string> conditions = 8;
inline int Reward::_internal_conditions_size() const {
  return _internal_conditions().size();
}
inline int Reward::conditions_size() const {
  return _internal_conditions_size();
}
inline void Reward::clear_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Reward::_internal_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Reward::conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.Reward.conditions)
  return _internal_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* Reward::_internal_mutable_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Reward::mutable_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.Reward.conditions)
  return _internal_mutable_conditions();
}

// string issued_by = 9;
inline void Reward::clear_issued_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issued_by_.ClearToEmpty();
}
inline const std::string& Reward::issued_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.issued_by)
  return _internal_issued_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reward::set_issued_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issued_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.issued_by)
}
inline std::string* Reward::mutable_issued_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_issued_by();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.Reward.issued_by)
  return _s;
}
inline const std::string& Reward::_internal_issued_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.issued_by_.Get();
}
inline void Reward::_internal_set_issued_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issued_by_.Set(value, GetArena());
}
inline std::string* Reward::_internal_mutable_issued_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.issued_by_.Mutable( GetArena());
}
inline std::string* Reward::release_issued_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.Reward.issued_by)
  return _impl_.issued_by_.Release();
}
inline void Reward::set_allocated_issued_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.issued_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.issued_by_.IsDefault()) {
    _impl_.issued_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.Reward.issued_by)
}

// bool eco_friendly_flag = 10;
inline void Reward::clear_eco_friendly_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_flag_ = false;
}
inline bool Reward::eco_friendly_flag() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.Reward.eco_friendly_flag)
  return _internal_eco_friendly_flag();
}
inline void Reward::set_eco_friendly_flag(bool value) {
  _internal_set_eco_friendly_flag(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.Reward.eco_friendly_flag)
}
inline bool Reward::_internal_eco_friendly_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_friendly_flag_;
}
inline void Reward::_internal_set_eco_friendly_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_friendly_flag_ = value;
}

// map<string, double> dynamic_parameters = 11;
inline int Reward::_internal_dynamic_parameters_size() const {
  return _internal_dynamic_parameters().size();
}
inline int Reward::dynamic_parameters_size() const {
  return _internal_dynamic_parameters_size();
}
inline void Reward::clear_dynamic_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dynamic_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& Reward::_internal_dynamic_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dynamic_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& Reward::dynamic_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.Reward.dynamic_parameters)
  return _internal_dynamic_parameters();
}
inline ::google::protobuf::Map<std::string, double>* Reward::_internal_mutable_dynamic_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dynamic_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* Reward::mutable_dynamic_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.Reward.dynamic_parameters)
  return _internal_mutable_dynamic_parameters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RedistributionPool

// uint64 pool_balance = 1;
inline void RedistributionPool::clear_pool_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pool_balance_ = ::uint64_t{0u};
}
inline ::uint64_t RedistributionPool::pool_balance() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.pool_balance)
  return _internal_pool_balance();
}
inline void RedistributionPool::set_pool_balance(::uint64_t value) {
  _internal_set_pool_balance(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RedistributionPool.pool_balance)
}
inline ::uint64_t RedistributionPool::_internal_pool_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pool_balance_;
}
inline void RedistributionPool::_internal_set_pool_balance(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pool_balance_ = value;
}

// repeated .seigr.reward_distribution.Reward reward_queue = 2;
inline int RedistributionPool::_internal_reward_queue_size() const {
  return _internal_reward_queue().size();
}
inline int RedistributionPool::reward_queue_size() const {
  return _internal_reward_queue_size();
}
inline void RedistributionPool::clear_reward_queue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_queue_.Clear();
}
inline ::seigr::reward_distribution::Reward* RedistributionPool::mutable_reward_queue(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.RedistributionPool.reward_queue)
  return _internal_mutable_reward_queue()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* RedistributionPool::mutable_reward_queue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.reward_distribution.RedistributionPool.reward_queue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_reward_queue();
}
inline const ::seigr::reward_distribution::Reward& RedistributionPool::reward_queue(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.reward_queue)
  return _internal_reward_queue().Get(index);
}
inline ::seigr::reward_distribution::Reward* RedistributionPool::add_reward_queue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::reward_distribution::Reward* _add = _internal_mutable_reward_queue()->Add();
  // @@protoc_insertion_point(field_add:seigr.reward_distribution.RedistributionPool.reward_queue)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& RedistributionPool::reward_queue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.reward_distribution.RedistributionPool.reward_queue)
  return _internal_reward_queue();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>&
RedistributionPool::_internal_reward_queue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_queue_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>*
RedistributionPool::_internal_mutable_reward_queue() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.reward_queue_;
}

// uint64 senary_threshold = 3;
inline void RedistributionPool::clear_senary_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_threshold_ = ::uint64_t{0u};
}
inline ::uint64_t RedistributionPool::senary_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.senary_threshold)
  return _internal_senary_threshold();
}
inline void RedistributionPool::set_senary_threshold(::uint64_t value) {
  _internal_set_senary_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RedistributionPool.senary_threshold)
}
inline ::uint64_t RedistributionPool::_internal_senary_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.senary_threshold_;
}
inline void RedistributionPool::_internal_set_senary_threshold(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_threshold_ = value;
}

// .seigr.reward_distribution.PoolStatus status = 4;
inline void RedistributionPool::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::reward_distribution::PoolStatus RedistributionPool::status() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.status)
  return _internal_status();
}
inline void RedistributionPool::set_status(::seigr::reward_distribution::PoolStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RedistributionPool.status)
}
inline ::seigr::reward_distribution::PoolStatus RedistributionPool::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::reward_distribution::PoolStatus>(_impl_.status_);
}
inline void RedistributionPool::_internal_set_status(::seigr::reward_distribution::PoolStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// map<string, double> dynamic_thresholds = 5;
inline int RedistributionPool::_internal_dynamic_thresholds_size() const {
  return _internal_dynamic_thresholds().size();
}
inline int RedistributionPool::dynamic_thresholds_size() const {
  return _internal_dynamic_thresholds_size();
}
inline void RedistributionPool::clear_dynamic_thresholds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dynamic_thresholds_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& RedistributionPool::_internal_dynamic_thresholds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dynamic_thresholds_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& RedistributionPool::dynamic_thresholds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.RedistributionPool.dynamic_thresholds)
  return _internal_dynamic_thresholds();
}
inline ::google::protobuf::Map<std::string, double>* RedistributionPool::_internal_mutable_dynamic_thresholds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dynamic_thresholds_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* RedistributionPool::mutable_dynamic_thresholds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.RedistributionPool.dynamic_thresholds)
  return _internal_mutable_dynamic_thresholds();
}

// uint64 eco_reserve_fund = 6;
inline void RedistributionPool::clear_eco_reserve_fund() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_reserve_fund_ = ::uint64_t{0u};
}
inline ::uint64_t RedistributionPool::eco_reserve_fund() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.eco_reserve_fund)
  return _internal_eco_reserve_fund();
}
inline void RedistributionPool::set_eco_reserve_fund(::uint64_t value) {
  _internal_set_eco_reserve_fund(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RedistributionPool.eco_reserve_fund)
}
inline ::uint64_t RedistributionPool::_internal_eco_reserve_fund() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_reserve_fund_;
}
inline void RedistributionPool::_internal_set_eco_reserve_fund(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_reserve_fund_ = value;
}

// string last_distributed_at = 7;
inline void RedistributionPool::clear_last_distributed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_distributed_at_.ClearToEmpty();
}
inline const std::string& RedistributionPool::last_distributed_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RedistributionPool.last_distributed_at)
  return _internal_last_distributed_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RedistributionPool::set_last_distributed_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_distributed_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RedistributionPool.last_distributed_at)
}
inline std::string* RedistributionPool::mutable_last_distributed_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_distributed_at();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.RedistributionPool.last_distributed_at)
  return _s;
}
inline const std::string& RedistributionPool::_internal_last_distributed_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_distributed_at_.Get();
}
inline void RedistributionPool::_internal_set_last_distributed_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_distributed_at_.Set(value, GetArena());
}
inline std::string* RedistributionPool::_internal_mutable_last_distributed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_distributed_at_.Mutable( GetArena());
}
inline std::string* RedistributionPool::release_last_distributed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.RedistributionPool.last_distributed_at)
  return _impl_.last_distributed_at_.Release();
}
inline void RedistributionPool::set_allocated_last_distributed_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_distributed_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_distributed_at_.IsDefault()) {
    _impl_.last_distributed_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.RedistributionPool.last_distributed_at)
}

// -------------------------------------------------------------------

// RewardScalingConfig

// double scaling_factor = 1;
inline void RewardScalingConfig::clear_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scaling_factor_ = 0;
}
inline double RewardScalingConfig::scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.scaling_factor)
  return _internal_scaling_factor();
}
inline void RewardScalingConfig::set_scaling_factor(double value) {
  _internal_set_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.scaling_factor)
}
inline double RewardScalingConfig::_internal_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scaling_factor_;
}
inline void RewardScalingConfig::_internal_set_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scaling_factor_ = value;
}

// uint64 adjustment_interval = 2;
inline void RewardScalingConfig::clear_adjustment_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adjustment_interval_ = ::uint64_t{0u};
}
inline ::uint64_t RewardScalingConfig::adjustment_interval() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.adjustment_interval)
  return _internal_adjustment_interval();
}
inline void RewardScalingConfig::set_adjustment_interval(::uint64_t value) {
  _internal_set_adjustment_interval(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.adjustment_interval)
}
inline ::uint64_t RewardScalingConfig::_internal_adjustment_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adjustment_interval_;
}
inline void RewardScalingConfig::_internal_set_adjustment_interval(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adjustment_interval_ = value;
}

// double min_scaling_factor = 3;
inline void RewardScalingConfig::clear_min_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_scaling_factor_ = 0;
}
inline double RewardScalingConfig::min_scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.min_scaling_factor)
  return _internal_min_scaling_factor();
}
inline void RewardScalingConfig::set_min_scaling_factor(double value) {
  _internal_set_min_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.min_scaling_factor)
}
inline double RewardScalingConfig::_internal_min_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_scaling_factor_;
}
inline void RewardScalingConfig::_internal_set_min_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_scaling_factor_ = value;
}

// double max_scaling_factor = 4;
inline void RewardScalingConfig::clear_max_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_scaling_factor_ = 0;
}
inline double RewardScalingConfig::max_scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.max_scaling_factor)
  return _internal_max_scaling_factor();
}
inline void RewardScalingConfig::set_max_scaling_factor(double value) {
  _internal_set_max_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.max_scaling_factor)
}
inline double RewardScalingConfig::_internal_max_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_scaling_factor_;
}
inline void RewardScalingConfig::_internal_set_max_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_scaling_factor_ = value;
}

// double eco_priority_weight = 5;
inline void RewardScalingConfig::clear_eco_priority_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_priority_weight_ = 0;
}
inline double RewardScalingConfig::eco_priority_weight() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.eco_priority_weight)
  return _internal_eco_priority_weight();
}
inline void RewardScalingConfig::set_eco_priority_weight(double value) {
  _internal_set_eco_priority_weight(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.eco_priority_weight)
}
inline double RewardScalingConfig::_internal_eco_priority_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_priority_weight_;
}
inline void RewardScalingConfig::_internal_set_eco_priority_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_priority_weight_ = value;
}

// uint64 max_distribution_limit = 6;
inline void RewardScalingConfig::clear_max_distribution_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_distribution_limit_ = ::uint64_t{0u};
}
inline ::uint64_t RewardScalingConfig::max_distribution_limit() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.max_distribution_limit)
  return _internal_max_distribution_limit();
}
inline void RewardScalingConfig::set_max_distribution_limit(::uint64_t value) {
  _internal_set_max_distribution_limit(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.max_distribution_limit)
}
inline ::uint64_t RewardScalingConfig::_internal_max_distribution_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_distribution_limit_;
}
inline void RewardScalingConfig::_internal_set_max_distribution_limit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_distribution_limit_ = value;
}

// bool adaptive_scaling_enabled = 7;
inline void RewardScalingConfig::clear_adaptive_scaling_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_enabled_ = false;
}
inline bool RewardScalingConfig::adaptive_scaling_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.RewardScalingConfig.adaptive_scaling_enabled)
  return _internal_adaptive_scaling_enabled();
}
inline void RewardScalingConfig::set_adaptive_scaling_enabled(bool value) {
  _internal_set_adaptive_scaling_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.RewardScalingConfig.adaptive_scaling_enabled)
}
inline bool RewardScalingConfig::_internal_adaptive_scaling_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_scaling_enabled_;
}
inline void RewardScalingConfig::_internal_set_adaptive_scaling_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_enabled_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AllocateRewardRequest

// string recipient_id = 1;
inline void AllocateRewardRequest::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& AllocateRewardRequest::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardRequest.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllocateRewardRequest::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardRequest.recipient_id)
}
inline std::string* AllocateRewardRequest::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.AllocateRewardRequest.recipient_id)
  return _s;
}
inline const std::string& AllocateRewardRequest::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void AllocateRewardRequest::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* AllocateRewardRequest::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* AllocateRewardRequest::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.AllocateRewardRequest.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void AllocateRewardRequest::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.AllocateRewardRequest.recipient_id)
}

// .seigr.reward_distribution.RewardType reward_type = 2;
inline void AllocateRewardRequest::clear_reward_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_type_ = 0;
}
inline ::seigr::reward_distribution::RewardType AllocateRewardRequest::reward_type() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardRequest.reward_type)
  return _internal_reward_type();
}
inline void AllocateRewardRequest::set_reward_type(::seigr::reward_distribution::RewardType value) {
  _internal_set_reward_type(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardRequest.reward_type)
}
inline ::seigr::reward_distribution::RewardType AllocateRewardRequest::_internal_reward_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::reward_distribution::RewardType>(_impl_.reward_type_);
}
inline void AllocateRewardRequest::_internal_set_reward_type(::seigr::reward_distribution::RewardType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_type_ = value;
}

// uint64 amount = 3;
inline void AllocateRewardRequest::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t AllocateRewardRequest::amount() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardRequest.amount)
  return _internal_amount();
}
inline void AllocateRewardRequest::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardRequest.amount)
}
inline ::uint64_t AllocateRewardRequest::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void AllocateRewardRequest::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// map<string, string> additional_conditions = 4;
inline int AllocateRewardRequest::_internal_additional_conditions_size() const {
  return _internal_additional_conditions().size();
}
inline int AllocateRewardRequest::additional_conditions_size() const {
  return _internal_additional_conditions_size();
}
inline void AllocateRewardRequest::clear_additional_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AllocateRewardRequest::_internal_additional_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AllocateRewardRequest::additional_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.AllocateRewardRequest.additional_conditions)
  return _internal_additional_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* AllocateRewardRequest::_internal_mutable_additional_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AllocateRewardRequest::mutable_additional_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.AllocateRewardRequest.additional_conditions)
  return _internal_mutable_additional_conditions();
}

// bool eco_incentive = 5;
inline void AllocateRewardRequest::clear_eco_incentive() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_incentive_ = false;
}
inline bool AllocateRewardRequest::eco_incentive() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardRequest.eco_incentive)
  return _internal_eco_incentive();
}
inline void AllocateRewardRequest::set_eco_incentive(bool value) {
  _internal_set_eco_incentive(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardRequest.eco_incentive)
}
inline bool AllocateRewardRequest::_internal_eco_incentive() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_incentive_;
}
inline void AllocateRewardRequest::_internal_set_eco_incentive(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_incentive_ = value;
}

// -------------------------------------------------------------------

// AllocateRewardResponse

// bool success = 1;
inline void AllocateRewardResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AllocateRewardResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardResponse.success)
  return _internal_success();
}
inline void AllocateRewardResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardResponse.success)
}
inline bool AllocateRewardResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AllocateRewardResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void AllocateRewardResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AllocateRewardResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllocateRewardResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardResponse.message)
}
inline std::string* AllocateRewardResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.AllocateRewardResponse.message)
  return _s;
}
inline const std::string& AllocateRewardResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AllocateRewardResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AllocateRewardResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AllocateRewardResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.AllocateRewardResponse.message)
  return _impl_.message_.Release();
}
inline void AllocateRewardResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.AllocateRewardResponse.message)
}

// string reward_id = 3;
inline void AllocateRewardResponse::clear_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.ClearToEmpty();
}
inline const std::string& AllocateRewardResponse::reward_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.AllocateRewardResponse.reward_id)
  return _internal_reward_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllocateRewardResponse::set_reward_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.AllocateRewardResponse.reward_id)
}
inline std::string* AllocateRewardResponse::mutable_reward_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reward_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.AllocateRewardResponse.reward_id)
  return _s;
}
inline const std::string& AllocateRewardResponse::_internal_reward_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_id_.Get();
}
inline void AllocateRewardResponse::_internal_set_reward_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.Set(value, GetArena());
}
inline std::string* AllocateRewardResponse::_internal_mutable_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reward_id_.Mutable( GetArena());
}
inline std::string* AllocateRewardResponse::release_reward_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.AllocateRewardResponse.reward_id)
  return _impl_.reward_id_.Release();
}
inline void AllocateRewardResponse::set_allocated_reward_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reward_id_.IsDefault()) {
    _impl_.reward_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.AllocateRewardResponse.reward_id)
}

// -------------------------------------------------------------------

// DistributePoolRequest

// uint64 senary_threshold = 1;
inline void DistributePoolRequest::clear_senary_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_threshold_ = ::uint64_t{0u};
}
inline ::uint64_t DistributePoolRequest::senary_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolRequest.senary_threshold)
  return _internal_senary_threshold();
}
inline void DistributePoolRequest::set_senary_threshold(::uint64_t value) {
  _internal_set_senary_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolRequest.senary_threshold)
}
inline ::uint64_t DistributePoolRequest::_internal_senary_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.senary_threshold_;
}
inline void DistributePoolRequest::_internal_set_senary_threshold(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_threshold_ = value;
}

// bool override_inactive_status = 2;
inline void DistributePoolRequest::clear_override_inactive_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.override_inactive_status_ = false;
}
inline bool DistributePoolRequest::override_inactive_status() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolRequest.override_inactive_status)
  return _internal_override_inactive_status();
}
inline void DistributePoolRequest::set_override_inactive_status(bool value) {
  _internal_set_override_inactive_status(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolRequest.override_inactive_status)
}
inline bool DistributePoolRequest::_internal_override_inactive_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.override_inactive_status_;
}
inline void DistributePoolRequest::_internal_set_override_inactive_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.override_inactive_status_ = value;
}

// bool prioritize_eco_friendly = 3;
inline void DistributePoolRequest::clear_prioritize_eco_friendly() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prioritize_eco_friendly_ = false;
}
inline bool DistributePoolRequest::prioritize_eco_friendly() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolRequest.prioritize_eco_friendly)
  return _internal_prioritize_eco_friendly();
}
inline void DistributePoolRequest::set_prioritize_eco_friendly(bool value) {
  _internal_set_prioritize_eco_friendly(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolRequest.prioritize_eco_friendly)
}
inline bool DistributePoolRequest::_internal_prioritize_eco_friendly() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prioritize_eco_friendly_;
}
inline void DistributePoolRequest::_internal_set_prioritize_eco_friendly(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prioritize_eco_friendly_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DistributePoolResponse

// bool success = 1;
inline void DistributePoolResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool DistributePoolResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolResponse.success)
  return _internal_success();
}
inline void DistributePoolResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolResponse.success)
}
inline bool DistributePoolResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void DistributePoolResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// uint64 distributed_amount = 2;
inline void DistributePoolResponse::clear_distributed_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distributed_amount_ = ::uint64_t{0u};
}
inline ::uint64_t DistributePoolResponse::distributed_amount() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolResponse.distributed_amount)
  return _internal_distributed_amount();
}
inline void DistributePoolResponse::set_distributed_amount(::uint64_t value) {
  _internal_set_distributed_amount(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolResponse.distributed_amount)
}
inline ::uint64_t DistributePoolResponse::_internal_distributed_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distributed_amount_;
}
inline void DistributePoolResponse::_internal_set_distributed_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distributed_amount_ = value;
}

// string message = 3;
inline void DistributePoolResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DistributePoolResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.DistributePoolResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributePoolResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.DistributePoolResponse.message)
}
inline std::string* DistributePoolResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.DistributePoolResponse.message)
  return _s;
}
inline const std::string& DistributePoolResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void DistributePoolResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* DistributePoolResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* DistributePoolResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.DistributePoolResponse.message)
  return _impl_.message_.Release();
}
inline void DistributePoolResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.DistributePoolResponse.message)
}

// map<string, uint64> reward_distribution_breakdown = 4;
inline int DistributePoolResponse::_internal_reward_distribution_breakdown_size() const {
  return _internal_reward_distribution_breakdown().size();
}
inline int DistributePoolResponse::reward_distribution_breakdown_size() const {
  return _internal_reward_distribution_breakdown_size();
}
inline void DistributePoolResponse::clear_reward_distribution_breakdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reward_distribution_breakdown_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::uint64_t>& DistributePoolResponse::_internal_reward_distribution_breakdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_distribution_breakdown_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::uint64_t>& DistributePoolResponse::reward_distribution_breakdown() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.DistributePoolResponse.reward_distribution_breakdown)
  return _internal_reward_distribution_breakdown();
}
inline ::google::protobuf::Map<std::string, ::uint64_t>* DistributePoolResponse::_internal_mutable_reward_distribution_breakdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reward_distribution_breakdown_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::uint64_t>* DistributePoolResponse::mutable_reward_distribution_breakdown() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.DistributePoolResponse.reward_distribution_breakdown)
  return _internal_mutable_reward_distribution_breakdown();
}

// -------------------------------------------------------------------

// GetRewardHistoryRequest

// string recipient_id = 1;
inline void GetRewardHistoryRequest::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& GetRewardHistoryRequest::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryRequest.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRewardHistoryRequest::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.GetRewardHistoryRequest.recipient_id)
}
inline std::string* GetRewardHistoryRequest::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.GetRewardHistoryRequest.recipient_id)
  return _s;
}
inline const std::string& GetRewardHistoryRequest::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void GetRewardHistoryRequest::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* GetRewardHistoryRequest::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* GetRewardHistoryRequest::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.GetRewardHistoryRequest.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void GetRewardHistoryRequest::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.GetRewardHistoryRequest.recipient_id)
}

// uint32 limit = 2;
inline void GetRewardHistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0u;
}
inline ::uint32_t GetRewardHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryRequest.limit)
  return _internal_limit();
}
inline void GetRewardHistoryRequest::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.GetRewardHistoryRequest.limit)
}
inline ::uint32_t GetRewardHistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetRewardHistoryRequest::_internal_set_limit(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// bool include_expired = 3;
inline void GetRewardHistoryRequest::clear_include_expired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_expired_ = false;
}
inline bool GetRewardHistoryRequest::include_expired() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryRequest.include_expired)
  return _internal_include_expired();
}
inline void GetRewardHistoryRequest::set_include_expired(bool value) {
  _internal_set_include_expired(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.GetRewardHistoryRequest.include_expired)
}
inline bool GetRewardHistoryRequest::_internal_include_expired() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_expired_;
}
inline void GetRewardHistoryRequest::_internal_set_include_expired(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_expired_ = value;
}

// bool only_eco_rewards = 4;
inline void GetRewardHistoryRequest::clear_only_eco_rewards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_eco_rewards_ = false;
}
inline bool GetRewardHistoryRequest::only_eco_rewards() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryRequest.only_eco_rewards)
  return _internal_only_eco_rewards();
}
inline void GetRewardHistoryRequest::set_only_eco_rewards(bool value) {
  _internal_set_only_eco_rewards(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.GetRewardHistoryRequest.only_eco_rewards)
}
inline bool GetRewardHistoryRequest::_internal_only_eco_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.only_eco_rewards_;
}
inline void GetRewardHistoryRequest::_internal_set_only_eco_rewards(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_eco_rewards_ = value;
}

// -------------------------------------------------------------------

// GetRewardHistoryResponse

// string recipient_id = 1;
inline void GetRewardHistoryResponse::clear_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.ClearToEmpty();
}
inline const std::string& GetRewardHistoryResponse::recipient_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryResponse.recipient_id)
  return _internal_recipient_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRewardHistoryResponse::set_recipient_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.GetRewardHistoryResponse.recipient_id)
}
inline std::string* GetRewardHistoryResponse::mutable_recipient_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient_id();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.GetRewardHistoryResponse.recipient_id)
  return _s;
}
inline const std::string& GetRewardHistoryResponse::_internal_recipient_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_id_.Get();
}
inline void GetRewardHistoryResponse::_internal_set_recipient_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.Set(value, GetArena());
}
inline std::string* GetRewardHistoryResponse::_internal_mutable_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_id_.Mutable( GetArena());
}
inline std::string* GetRewardHistoryResponse::release_recipient_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.GetRewardHistoryResponse.recipient_id)
  return _impl_.recipient_id_.Release();
}
inline void GetRewardHistoryResponse::set_allocated_recipient_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_id_.IsDefault()) {
    _impl_.recipient_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.GetRewardHistoryResponse.recipient_id)
}

// repeated .seigr.reward_distribution.Reward rewards = 2;
inline int GetRewardHistoryResponse::_internal_rewards_size() const {
  return _internal_rewards().size();
}
inline int GetRewardHistoryResponse::rewards_size() const {
  return _internal_rewards_size();
}
inline void GetRewardHistoryResponse::clear_rewards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rewards_.Clear();
}
inline ::seigr::reward_distribution::Reward* GetRewardHistoryResponse::mutable_rewards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.GetRewardHistoryResponse.rewards)
  return _internal_mutable_rewards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>* GetRewardHistoryResponse::mutable_rewards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.reward_distribution.GetRewardHistoryResponse.rewards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rewards();
}
inline const ::seigr::reward_distribution::Reward& GetRewardHistoryResponse::rewards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.GetRewardHistoryResponse.rewards)
  return _internal_rewards().Get(index);
}
inline ::seigr::reward_distribution::Reward* GetRewardHistoryResponse::add_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::reward_distribution::Reward* _add = _internal_mutable_rewards()->Add();
  // @@protoc_insertion_point(field_add:seigr.reward_distribution.GetRewardHistoryResponse.rewards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>& GetRewardHistoryResponse::rewards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.reward_distribution.GetRewardHistoryResponse.rewards)
  return _internal_rewards();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>&
GetRewardHistoryResponse::_internal_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rewards_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::reward_distribution::Reward>*
GetRewardHistoryResponse::_internal_mutable_rewards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rewards_;
}

// -------------------------------------------------------------------

// UpdateScalingConfigRequest

// double new_scaling_factor = 1;
inline void UpdateScalingConfigRequest::clear_new_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_scaling_factor_ = 0;
}
inline double UpdateScalingConfigRequest::new_scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigRequest.new_scaling_factor)
  return _internal_new_scaling_factor();
}
inline void UpdateScalingConfigRequest::set_new_scaling_factor(double value) {
  _internal_set_new_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigRequest.new_scaling_factor)
}
inline double UpdateScalingConfigRequest::_internal_new_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_scaling_factor_;
}
inline void UpdateScalingConfigRequest::_internal_set_new_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_scaling_factor_ = value;
}

// uint64 new_adjustment_interval = 2;
inline void UpdateScalingConfigRequest::clear_new_adjustment_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_adjustment_interval_ = ::uint64_t{0u};
}
inline ::uint64_t UpdateScalingConfigRequest::new_adjustment_interval() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigRequest.new_adjustment_interval)
  return _internal_new_adjustment_interval();
}
inline void UpdateScalingConfigRequest::set_new_adjustment_interval(::uint64_t value) {
  _internal_set_new_adjustment_interval(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigRequest.new_adjustment_interval)
}
inline ::uint64_t UpdateScalingConfigRequest::_internal_new_adjustment_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_adjustment_interval_;
}
inline void UpdateScalingConfigRequest::_internal_set_new_adjustment_interval(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_adjustment_interval_ = value;
}

// double min_scaling_factor = 3;
inline void UpdateScalingConfigRequest::clear_min_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_scaling_factor_ = 0;
}
inline double UpdateScalingConfigRequest::min_scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigRequest.min_scaling_factor)
  return _internal_min_scaling_factor();
}
inline void UpdateScalingConfigRequest::set_min_scaling_factor(double value) {
  _internal_set_min_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigRequest.min_scaling_factor)
}
inline double UpdateScalingConfigRequest::_internal_min_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_scaling_factor_;
}
inline void UpdateScalingConfigRequest::_internal_set_min_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_scaling_factor_ = value;
}

// double max_scaling_factor = 4;
inline void UpdateScalingConfigRequest::clear_max_scaling_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_scaling_factor_ = 0;
}
inline double UpdateScalingConfigRequest::max_scaling_factor() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigRequest.max_scaling_factor)
  return _internal_max_scaling_factor();
}
inline void UpdateScalingConfigRequest::set_max_scaling_factor(double value) {
  _internal_set_max_scaling_factor(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigRequest.max_scaling_factor)
}
inline double UpdateScalingConfigRequest::_internal_max_scaling_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_scaling_factor_;
}
inline void UpdateScalingConfigRequest::_internal_set_max_scaling_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_scaling_factor_ = value;
}

// double eco_priority_weight = 5;
inline void UpdateScalingConfigRequest::clear_eco_priority_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_priority_weight_ = 0;
}
inline double UpdateScalingConfigRequest::eco_priority_weight() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigRequest.eco_priority_weight)
  return _internal_eco_priority_weight();
}
inline void UpdateScalingConfigRequest::set_eco_priority_weight(double value) {
  _internal_set_eco_priority_weight(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigRequest.eco_priority_weight)
}
inline double UpdateScalingConfigRequest::_internal_eco_priority_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_priority_weight_;
}
inline void UpdateScalingConfigRequest::_internal_set_eco_priority_weight(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_priority_weight_ = value;
}

// -------------------------------------------------------------------

// UpdateScalingConfigResponse

// bool success = 1;
inline void UpdateScalingConfigResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UpdateScalingConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigResponse.success)
  return _internal_success();
}
inline void UpdateScalingConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigResponse.success)
}
inline bool UpdateScalingConfigResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UpdateScalingConfigResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void UpdateScalingConfigResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateScalingConfigResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.UpdateScalingConfigResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateScalingConfigResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.UpdateScalingConfigResponse.message)
}
inline std::string* UpdateScalingConfigResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.UpdateScalingConfigResponse.message)
  return _s;
}
inline const std::string& UpdateScalingConfigResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UpdateScalingConfigResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UpdateScalingConfigResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UpdateScalingConfigResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.UpdateScalingConfigResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateScalingConfigResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.UpdateScalingConfigResponse.message)
}

// -------------------------------------------------------------------

// EcoReportRequest

// string period = 1;
inline void EcoReportRequest::clear_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_.ClearToEmpty();
}
inline const std::string& EcoReportRequest::period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportRequest.period)
  return _internal_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcoReportRequest::set_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportRequest.period)
}
inline std::string* EcoReportRequest::mutable_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_period();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.EcoReportRequest.period)
  return _s;
}
inline const std::string& EcoReportRequest::_internal_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.period_.Get();
}
inline void EcoReportRequest::_internal_set_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_.Set(value, GetArena());
}
inline std::string* EcoReportRequest::_internal_mutable_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.period_.Mutable( GetArena());
}
inline std::string* EcoReportRequest::release_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.EcoReportRequest.period)
  return _impl_.period_.Release();
}
inline void EcoReportRequest::set_allocated_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.period_.IsDefault()) {
    _impl_.period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.EcoReportRequest.period)
}

// bool include_detailed_breakdown = 2;
inline void EcoReportRequest::clear_include_detailed_breakdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_detailed_breakdown_ = false;
}
inline bool EcoReportRequest::include_detailed_breakdown() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportRequest.include_detailed_breakdown)
  return _internal_include_detailed_breakdown();
}
inline void EcoReportRequest::set_include_detailed_breakdown(bool value) {
  _internal_set_include_detailed_breakdown(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportRequest.include_detailed_breakdown)
}
inline bool EcoReportRequest::_internal_include_detailed_breakdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_detailed_breakdown_;
}
inline void EcoReportRequest::_internal_set_include_detailed_breakdown(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_detailed_breakdown_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EcoReportResponse

// bool success = 1;
inline void EcoReportResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool EcoReportResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportResponse.success)
  return _internal_success();
}
inline void EcoReportResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportResponse.success)
}
inline bool EcoReportResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void EcoReportResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void EcoReportResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EcoReportResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcoReportResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportResponse.message)
}
inline std::string* EcoReportResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.reward_distribution.EcoReportResponse.message)
  return _s;
}
inline const std::string& EcoReportResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void EcoReportResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* EcoReportResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* EcoReportResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.reward_distribution.EcoReportResponse.message)
  return _impl_.message_.Release();
}
inline void EcoReportResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.reward_distribution.EcoReportResponse.message)
}

// map<string, double> eco_incentives_summary = 3;
inline int EcoReportResponse::_internal_eco_incentives_summary_size() const {
  return _internal_eco_incentives_summary().size();
}
inline int EcoReportResponse::eco_incentives_summary_size() const {
  return _internal_eco_incentives_summary_size();
}
inline void EcoReportResponse::clear_eco_incentives_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.eco_incentives_summary_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& EcoReportResponse::_internal_eco_incentives_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.eco_incentives_summary_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& EcoReportResponse::eco_incentives_summary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.reward_distribution.EcoReportResponse.eco_incentives_summary)
  return _internal_eco_incentives_summary();
}
inline ::google::protobuf::Map<std::string, double>* EcoReportResponse::_internal_mutable_eco_incentives_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.eco_incentives_summary_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* EcoReportResponse::mutable_eco_incentives_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.reward_distribution.EcoReportResponse.eco_incentives_summary)
  return _internal_mutable_eco_incentives_summary();
}

// double total_eco_funds_distributed = 4;
inline void EcoReportResponse::clear_total_eco_funds_distributed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_eco_funds_distributed_ = 0;
}
inline double EcoReportResponse::total_eco_funds_distributed() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportResponse.total_eco_funds_distributed)
  return _internal_total_eco_funds_distributed();
}
inline void EcoReportResponse::set_total_eco_funds_distributed(double value) {
  _internal_set_total_eco_funds_distributed(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportResponse.total_eco_funds_distributed)
}
inline double EcoReportResponse::_internal_total_eco_funds_distributed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_eco_funds_distributed_;
}
inline void EcoReportResponse::_internal_set_total_eco_funds_distributed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_eco_funds_distributed_ = value;
}

// double network_sustainability_score = 5;
inline void EcoReportResponse::clear_network_sustainability_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_sustainability_score_ = 0;
}
inline double EcoReportResponse::network_sustainability_score() const {
  // @@protoc_insertion_point(field_get:seigr.reward_distribution.EcoReportResponse.network_sustainability_score)
  return _internal_network_sustainability_score();
}
inline void EcoReportResponse::set_network_sustainability_score(double value) {
  _internal_set_network_sustainability_score(value);
  // @@protoc_insertion_point(field_set:seigr.reward_distribution.EcoReportResponse.network_sustainability_score)
}
inline double EcoReportResponse::_internal_network_sustainability_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_sustainability_score_;
}
inline void EcoReportResponse::_internal_set_network_sustainability_score(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_sustainability_score_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace reward_distribution
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::reward_distribution::RewardType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::reward_distribution::RewardType>() {
  return ::seigr::reward_distribution::RewardType_descriptor();
}
template <>
struct is_proto_enum<::seigr::reward_distribution::PoolStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::reward_distribution::PoolStatus>() {
  return ::seigr::reward_distribution::PoolStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // reward_5fdistribution_2eproto_2epb_2eh
