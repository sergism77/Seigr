// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: audit_logging.proto
// Protobuf C++ Version: 5.29.2

#ifndef audit_5flogging_2eproto_2epb_2eh
#define audit_5flogging_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_audit_5flogging_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_audit_5flogging_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_audit_5flogging_2eproto;
namespace seigr {
namespace audit {
class AuditLog;
struct AuditLogDefaultTypeInternal;
extern AuditLogDefaultTypeInternal _AuditLog_default_instance_;
class AuditLogEntry;
struct AuditLogEntryDefaultTypeInternal;
extern AuditLogEntryDefaultTypeInternal _AuditLogEntry_default_instance_;
class AuditLogEntry_MetadataEntry_DoNotUse;
struct AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal _AuditLogEntry_MetadataEntry_DoNotUse_default_instance_;
class AuditLogQuery;
struct AuditLogQueryDefaultTypeInternal;
extern AuditLogQueryDefaultTypeInternal _AuditLogQuery_default_instance_;
class AuditLogQuery_AdditionalFiltersEntry_DoNotUse;
struct AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal;
extern AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal _AuditLogQuery_AdditionalFiltersEntry_DoNotUse_default_instance_;
class AuditLogStats;
struct AuditLogStatsDefaultTypeInternal;
extern AuditLogStatsDefaultTypeInternal _AuditLogStats_default_instance_;
class AuditLogStats_CategoryCountsEntry_DoNotUse;
struct AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal;
extern AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal _AuditLogStats_CategoryCountsEntry_DoNotUse_default_instance_;
class AuditLogStats_CategoryRatiosEntry_DoNotUse;
struct AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal;
extern AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal _AuditLogStats_CategoryRatiosEntry_DoNotUse_default_instance_;
class AuditLogStats_UserActionCountsEntry_DoNotUse;
struct AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal;
extern AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal _AuditLogStats_UserActionCountsEntry_DoNotUse_default_instance_;
class AuditLog_MetadataEntry_DoNotUse;
struct AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal _AuditLog_MetadataEntry_DoNotUse_default_instance_;
class AuditReport;
struct AuditReportDefaultTypeInternal;
extern AuditReportDefaultTypeInternal _AuditReport_default_instance_;
class AuditReport_MetadataEntry_DoNotUse;
struct AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal _AuditReport_MetadataEntry_DoNotUse_default_instance_;
}  // namespace audit
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace audit {
enum LogCategory : int {
  LOG_CATEGORY_UNDEFINED = 0,
  LOG_CATEGORY_SECURITY = 1,
  LOG_CATEGORY_DATA_ACCESS = 2,
  LOG_CATEGORY_SYSTEM_OPERATION = 3,
  LOG_CATEGORY_USER_ACTION = 4,
  LOG_CATEGORY_ERROR_EVENT = 5,
  LOG_CATEGORY_PERFORMANCE = 6,
  LOG_CATEGORY_COMPLIANCE = 7,
  LogCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogCategory_IsValid(int value);
extern const uint32_t LogCategory_internal_data_[];
constexpr LogCategory LogCategory_MIN = static_cast<LogCategory>(0);
constexpr LogCategory LogCategory_MAX = static_cast<LogCategory>(7);
constexpr int LogCategory_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
LogCategory_descriptor();
template <typename T>
const std::string& LogCategory_Name(T value) {
  static_assert(std::is_same<T, LogCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogCategory_Name().");
  return LogCategory_Name(static_cast<LogCategory>(value));
}
template <>
inline const std::string& LogCategory_Name(LogCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogCategory_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool LogCategory_Parse(absl::string_view name, LogCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogCategory>(
      LogCategory_descriptor(), name, value);
}
enum LogLevel : int {
  LOG_LEVEL_UNDEFINED = 0,
  LOG_LEVEL_INFO = 1,
  LOG_LEVEL_WARN = 2,
  LOG_LEVEL_ERROR = 3,
  LOG_LEVEL_DEBUG = 4,
  LOG_LEVEL_CRITICAL = 5,
  LOG_LEVEL_ALERT = 6,
  LOG_LEVEL_FATAL = 7,
  LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogLevel_IsValid(int value);
extern const uint32_t LogLevel_internal_data_[];
constexpr LogLevel LogLevel_MIN = static_cast<LogLevel>(0);
constexpr LogLevel LogLevel_MAX = static_cast<LogLevel>(7);
constexpr int LogLevel_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
LogLevel_descriptor();
template <typename T>
const std::string& LogLevel_Name(T value) {
  static_assert(std::is_same<T, LogLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogLevel_Name().");
  return LogLevel_Name(static_cast<LogLevel>(value));
}
template <>
inline const std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogLevel_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool LogLevel_Parse(absl::string_view name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
      LogLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AuditReport_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditReport_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditReport_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditReport_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditReport_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditReport_MetadataEntry_DoNotUse*>(
        &_AuditReport_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogStats_UserActionCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  AuditLogStats_UserActionCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogStats_UserActionCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLogStats_UserActionCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLogStats_UserActionCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLogStats_UserActionCountsEntry_DoNotUse*>(
        &_AuditLogStats_UserActionCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogStats_CategoryRatiosEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  AuditLogStats_CategoryRatiosEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogStats_CategoryRatiosEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLogStats_CategoryRatiosEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLogStats_CategoryRatiosEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLogStats_CategoryRatiosEntry_DoNotUse*>(
        &_AuditLogStats_CategoryRatiosEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogStats_CategoryCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  AuditLogStats_CategoryCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogStats_CategoryCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLogStats_CategoryCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLogStats_CategoryCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLogStats_CategoryCountsEntry_DoNotUse*>(
        &_AuditLogStats_CategoryCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogQuery_AdditionalFiltersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditLogQuery_AdditionalFiltersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogQuery_AdditionalFiltersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLogQuery_AdditionalFiltersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLogQuery_AdditionalFiltersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLogQuery_AdditionalFiltersEntry_DoNotUse*>(
        &_AuditLogQuery_AdditionalFiltersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogEntry_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditLogEntry_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogEntry_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLogEntry_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLogEntry_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLogEntry_MetadataEntry_DoNotUse*>(
        &_AuditLogEntry_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AuditLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AuditLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AuditLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AuditLog_MetadataEntry_DoNotUse*>(
        &_AuditLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_audit_5flogging_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AuditLogStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditLogStats) */ {
 public:
  inline AuditLogStats() : AuditLogStats(nullptr) {}
  ~AuditLogStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditLogStats* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditLogStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditLogStats(const AuditLogStats& from) : AuditLogStats(nullptr, from) {}
  inline AuditLogStats(AuditLogStats&& from) noexcept
      : AuditLogStats(nullptr, std::move(from)) {}
  inline AuditLogStats& operator=(const AuditLogStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLogStats& operator=(AuditLogStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditLogStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditLogStats* internal_default_instance() {
    return reinterpret_cast<const AuditLogStats*>(
        &_AuditLogStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(AuditLogStats& a, AuditLogStats& b) { a.Swap(&b); }
  inline void Swap(AuditLogStats* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLogStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditLogStats* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditLogStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditLogStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditLogStats& from) { AuditLogStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditLogStats* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditLogStats"; }

 protected:
  explicit AuditLogStats(::google::protobuf::Arena* arena);
  AuditLogStats(::google::protobuf::Arena* arena, const AuditLogStats& from);
  AuditLogStats(::google::protobuf::Arena* arena, AuditLogStats&& from) noexcept
      : AuditLogStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCategoryCountsFieldNumber = 5,
    kUserActionCountsFieldNumber = 6,
    kCategoryRatiosFieldNumber = 13,
    kLastEntryTimestampFieldNumber = 7,
    kSummaryPeriodFieldNumber = 8,
    kMostActiveUserIdFieldNumber = 14,
    kMostFrequentActionFieldNumber = 15,
    kTotalEntriesFieldNumber = 1,
    kCriticalCountFieldNumber = 2,
    kErrorCountFieldNumber = 3,
    kWarningCountFieldNumber = 4,
    kCriticalEventRatioFieldNumber = 10,
    kAlertCountFieldNumber = 9,
    kEscalationThresholdFieldNumber = 11,
    kErrorToWarningRatioFieldNumber = 12,
  };
  // map<string, int32> category_counts = 5;
  int category_counts_size() const;
  private:
  int _internal_category_counts_size() const;

  public:
  void clear_category_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& category_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_category_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_category_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_category_counts();

  public:
  // map<string, int32> user_action_counts = 6;
  int user_action_counts_size() const;
  private:
  int _internal_user_action_counts_size() const;

  public:
  void clear_user_action_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& user_action_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_user_action_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_user_action_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_user_action_counts();

  public:
  // map<string, double> category_ratios = 13;
  int category_ratios_size() const;
  private:
  int _internal_category_ratios_size() const;

  public:
  void clear_category_ratios() ;
  const ::google::protobuf::Map<std::string, double>& category_ratios() const;
  ::google::protobuf::Map<std::string, double>* mutable_category_ratios();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_category_ratios() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_category_ratios();

  public:
  // string last_entry_timestamp = 7;
  void clear_last_entry_timestamp() ;
  const std::string& last_entry_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_entry_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_entry_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_entry_timestamp();
  void set_allocated_last_entry_timestamp(std::string* value);

  private:
  const std::string& _internal_last_entry_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_entry_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_entry_timestamp();

  public:
  // string summary_period = 8;
  void clear_summary_period() ;
  const std::string& summary_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary_period(Arg_&& arg, Args_... args);
  std::string* mutable_summary_period();
  PROTOBUF_NODISCARD std::string* release_summary_period();
  void set_allocated_summary_period(std::string* value);

  private:
  const std::string& _internal_summary_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary_period(
      const std::string& value);
  std::string* _internal_mutable_summary_period();

  public:
  // string most_active_user_id = 14;
  void clear_most_active_user_id() ;
  const std::string& most_active_user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_most_active_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_most_active_user_id();
  PROTOBUF_NODISCARD std::string* release_most_active_user_id();
  void set_allocated_most_active_user_id(std::string* value);

  private:
  const std::string& _internal_most_active_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_most_active_user_id(
      const std::string& value);
  std::string* _internal_mutable_most_active_user_id();

  public:
  // string most_frequent_action = 15;
  void clear_most_frequent_action() ;
  const std::string& most_frequent_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_most_frequent_action(Arg_&& arg, Args_... args);
  std::string* mutable_most_frequent_action();
  PROTOBUF_NODISCARD std::string* release_most_frequent_action();
  void set_allocated_most_frequent_action(std::string* value);

  private:
  const std::string& _internal_most_frequent_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_most_frequent_action(
      const std::string& value);
  std::string* _internal_mutable_most_frequent_action();

  public:
  // int32 total_entries = 1;
  void clear_total_entries() ;
  ::int32_t total_entries() const;
  void set_total_entries(::int32_t value);

  private:
  ::int32_t _internal_total_entries() const;
  void _internal_set_total_entries(::int32_t value);

  public:
  // int32 critical_count = 2;
  void clear_critical_count() ;
  ::int32_t critical_count() const;
  void set_critical_count(::int32_t value);

  private:
  ::int32_t _internal_critical_count() const;
  void _internal_set_critical_count(::int32_t value);

  public:
  // int32 error_count = 3;
  void clear_error_count() ;
  ::int32_t error_count() const;
  void set_error_count(::int32_t value);

  private:
  ::int32_t _internal_error_count() const;
  void _internal_set_error_count(::int32_t value);

  public:
  // int32 warning_count = 4;
  void clear_warning_count() ;
  ::int32_t warning_count() const;
  void set_warning_count(::int32_t value);

  private:
  ::int32_t _internal_warning_count() const;
  void _internal_set_warning_count(::int32_t value);

  public:
  // double critical_event_ratio = 10;
  void clear_critical_event_ratio() ;
  double critical_event_ratio() const;
  void set_critical_event_ratio(double value);

  private:
  double _internal_critical_event_ratio() const;
  void _internal_set_critical_event_ratio(double value);

  public:
  // int32 alert_count = 9;
  void clear_alert_count() ;
  ::int32_t alert_count() const;
  void set_alert_count(::int32_t value);

  private:
  ::int32_t _internal_alert_count() const;
  void _internal_set_alert_count(::int32_t value);

  public:
  // int32 escalation_threshold = 11;
  void clear_escalation_threshold() ;
  ::int32_t escalation_threshold() const;
  void set_escalation_threshold(::int32_t value);

  private:
  ::int32_t _internal_escalation_threshold() const;
  void _internal_set_escalation_threshold(::int32_t value);

  public:
  // double error_to_warning_ratio = 12;
  void clear_error_to_warning_ratio() ;
  double error_to_warning_ratio() const;
  void set_error_to_warning_ratio(double value);

  private:
  double _internal_error_to_warning_ratio() const;
  void _internal_set_error_to_warning_ratio(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditLogStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 3,
      163, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditLogStats& from_msg);
    ::google::protobuf::internal::MapField<AuditLogStats_CategoryCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        category_counts_;
    ::google::protobuf::internal::MapField<AuditLogStats_UserActionCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        user_action_counts_;
    ::google::protobuf::internal::MapField<AuditLogStats_CategoryRatiosEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        category_ratios_;
    ::google::protobuf::internal::ArenaStringPtr last_entry_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr summary_period_;
    ::google::protobuf::internal::ArenaStringPtr most_active_user_id_;
    ::google::protobuf::internal::ArenaStringPtr most_frequent_action_;
    ::int32_t total_entries_;
    ::int32_t critical_count_;
    ::int32_t error_count_;
    ::int32_t warning_count_;
    double critical_event_ratio_;
    ::int32_t alert_count_;
    ::int32_t escalation_threshold_;
    double error_to_warning_ratio_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_5flogging_2eproto;
};
// -------------------------------------------------------------------

class AuditLogQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditLogQuery) */ {
 public:
  inline AuditLogQuery() : AuditLogQuery(nullptr) {}
  ~AuditLogQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditLogQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditLogQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditLogQuery(const AuditLogQuery& from) : AuditLogQuery(nullptr, from) {}
  inline AuditLogQuery(AuditLogQuery&& from) noexcept
      : AuditLogQuery(nullptr, std::move(from)) {}
  inline AuditLogQuery& operator=(const AuditLogQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLogQuery& operator=(AuditLogQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditLogQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditLogQuery* internal_default_instance() {
    return reinterpret_cast<const AuditLogQuery*>(
        &_AuditLogQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AuditLogQuery& a, AuditLogQuery& b) { a.Swap(&b); }
  inline void Swap(AuditLogQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLogQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditLogQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditLogQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditLogQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditLogQuery& from) { AuditLogQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditLogQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditLogQuery"; }

 protected:
  explicit AuditLogQuery(::google::protobuf::Arena* arena);
  AuditLogQuery(::google::protobuf::Arena* arena, const AuditLogQuery& from);
  AuditLogQuery(::google::protobuf::Arena* arena, AuditLogQuery&& from) noexcept
      : AuditLogQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdsFieldNumber = 1,
    kCategoriesFieldNumber = 2,
    kLogLevelsFieldNumber = 3,
    kTagsFieldNumber = 6,
    kActionsFieldNumber = 7,
    kAdditionalFiltersFieldNumber = 8,
    kDateRangeStartFieldNumber = 4,
    kDateRangeEndFieldNumber = 5,
    kTimeOfDayStartFieldNumber = 9,
    kTimeOfDayEndFieldNumber = 10,
    kEnablePatternDetectionFieldNumber = 11,
    kIncludeSessionDataFieldNumber = 12,
  };
  // repeated string user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;

  public:
  void clear_user_ids() ;
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_ids(int index, Arg_&& value, Args_... args);
  std::string* add_user_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_user_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& user_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_user_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_user_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_user_ids();

  public:
  // repeated .seigr.audit.LogCategory categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  public:
  ::seigr::audit::LogCategory categories(int index) const;
  void set_categories(int index, ::seigr::audit::LogCategory value);
  void add_categories(::seigr::audit::LogCategory value);
  const ::google::protobuf::RepeatedField<int>& categories() const;
  ::google::protobuf::RepeatedField<int>* mutable_categories();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_categories() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_categories();

  public:
  // repeated .seigr.audit.LogLevel log_levels = 3;
  int log_levels_size() const;
  private:
  int _internal_log_levels_size() const;

  public:
  void clear_log_levels() ;
  public:
  ::seigr::audit::LogLevel log_levels(int index) const;
  void set_log_levels(int index, ::seigr::audit::LogLevel value);
  void add_log_levels(::seigr::audit::LogLevel value);
  const ::google::protobuf::RepeatedField<int>& log_levels() const;
  ::google::protobuf::RepeatedField<int>* mutable_log_levels();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_log_levels() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_log_levels();

  public:
  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // repeated string actions = 7;
  int actions_size() const;
  private:
  int _internal_actions_size() const;

  public:
  void clear_actions() ;
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actions(int index, Arg_&& value, Args_... args);
  std::string* add_actions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_actions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_actions();

  public:
  // map<string, string> additional_filters = 8;
  int additional_filters_size() const;
  private:
  int _internal_additional_filters_size() const;

  public:
  void clear_additional_filters() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_filters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_filters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_filters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_filters();

  public:
  // string date_range_start = 4;
  void clear_date_range_start() ;
  const std::string& date_range_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_start(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_start();
  PROTOBUF_NODISCARD std::string* release_date_range_start();
  void set_allocated_date_range_start(std::string* value);

  private:
  const std::string& _internal_date_range_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_start(
      const std::string& value);
  std::string* _internal_mutable_date_range_start();

  public:
  // string date_range_end = 5;
  void clear_date_range_end() ;
  const std::string& date_range_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_end(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_end();
  PROTOBUF_NODISCARD std::string* release_date_range_end();
  void set_allocated_date_range_end(std::string* value);

  private:
  const std::string& _internal_date_range_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_end(
      const std::string& value);
  std::string* _internal_mutable_date_range_end();

  public:
  // string time_of_day_start = 9;
  void clear_time_of_day_start() ;
  const std::string& time_of_day_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_of_day_start(Arg_&& arg, Args_... args);
  std::string* mutable_time_of_day_start();
  PROTOBUF_NODISCARD std::string* release_time_of_day_start();
  void set_allocated_time_of_day_start(std::string* value);

  private:
  const std::string& _internal_time_of_day_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_of_day_start(
      const std::string& value);
  std::string* _internal_mutable_time_of_day_start();

  public:
  // string time_of_day_end = 10;
  void clear_time_of_day_end() ;
  const std::string& time_of_day_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_of_day_end(Arg_&& arg, Args_... args);
  std::string* mutable_time_of_day_end();
  PROTOBUF_NODISCARD std::string* release_time_of_day_end();
  void set_allocated_time_of_day_end(std::string* value);

  private:
  const std::string& _internal_time_of_day_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_of_day_end(
      const std::string& value);
  std::string* _internal_mutable_time_of_day_end();

  public:
  // bool enable_pattern_detection = 11;
  void clear_enable_pattern_detection() ;
  bool enable_pattern_detection() const;
  void set_enable_pattern_detection(bool value);

  private:
  bool _internal_enable_pattern_detection() const;
  void _internal_set_enable_pattern_detection(bool value);

  public:
  // bool include_session_data = 12;
  void clear_include_session_data() ;
  bool include_session_data() const;
  void set_include_session_data(bool value);

  private:
  bool _internal_include_session_data() const;
  void _internal_set_include_session_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditLogQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 1,
      141, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditLogQuery& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> user_ids_;
    ::google::protobuf::RepeatedField<int> categories_;
    ::google::protobuf::internal::CachedSize _categories_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> log_levels_;
    ::google::protobuf::internal::CachedSize _log_levels_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::RepeatedPtrField<std::string> actions_;
    ::google::protobuf::internal::MapField<AuditLogQuery_AdditionalFiltersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_filters_;
    ::google::protobuf::internal::ArenaStringPtr date_range_start_;
    ::google::protobuf::internal::ArenaStringPtr date_range_end_;
    ::google::protobuf::internal::ArenaStringPtr time_of_day_start_;
    ::google::protobuf::internal::ArenaStringPtr time_of_day_end_;
    bool enable_pattern_detection_;
    bool include_session_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_5flogging_2eproto;
};
// -------------------------------------------------------------------

class AuditLogEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditLogEntry) */ {
 public:
  inline AuditLogEntry() : AuditLogEntry(nullptr) {}
  ~AuditLogEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditLogEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditLogEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLogEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditLogEntry(const AuditLogEntry& from) : AuditLogEntry(nullptr, from) {}
  inline AuditLogEntry(AuditLogEntry&& from) noexcept
      : AuditLogEntry(nullptr, std::move(from)) {}
  inline AuditLogEntry& operator=(const AuditLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLogEntry& operator=(AuditLogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditLogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditLogEntry* internal_default_instance() {
    return reinterpret_cast<const AuditLogEntry*>(
        &_AuditLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AuditLogEntry& a, AuditLogEntry& b) { a.Swap(&b); }
  inline void Swap(AuditLogEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLogEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditLogEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditLogEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditLogEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditLogEntry& from) { AuditLogEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditLogEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditLogEntry"; }

 protected:
  explicit AuditLogEntry(::google::protobuf::Arena* arena);
  AuditLogEntry(::google::protobuf::Arena* arena, const AuditLogEntry& from);
  AuditLogEntry(::google::protobuf::Arena* arena, AuditLogEntry&& from) noexcept
      : AuditLogEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kTagsFieldNumber = 12,
    kLogIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kRoleFieldNumber = 3,
    kActionFieldNumber = 4,
    kTimestampFieldNumber = 7,
    kComponentFieldNumber = 10,
    kActionDetailsFieldNumber = 11,
    kEscalationPolicyFieldNumber = 13,
    kSessionIdFieldNumber = 14,
    kLocationFieldNumber = 15,
    kOriginatingIpFieldNumber = 18,
    kLogLevelFieldNumber = 5,
    kCategoryFieldNumber = 6,
    kRequiresAttentionFieldNumber = 9,
    kMfaVerifiedFieldNumber = 17,
    kSessionDurationSecondsFieldNumber = 16,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string tags = 12;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string role = 3;
  void clear_role() ;
  const std::string& role() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* value);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // string action = 4;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string timestamp = 7;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string component = 10;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // string action_details = 11;
  void clear_action_details() ;
  const std::string& action_details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_details(Arg_&& arg, Args_... args);
  std::string* mutable_action_details();
  PROTOBUF_NODISCARD std::string* release_action_details();
  void set_allocated_action_details(std::string* value);

  private:
  const std::string& _internal_action_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_details(
      const std::string& value);
  std::string* _internal_mutable_action_details();

  public:
  // string escalation_policy = 13;
  void clear_escalation_policy() ;
  const std::string& escalation_policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_policy(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_policy();
  PROTOBUF_NODISCARD std::string* release_escalation_policy();
  void set_allocated_escalation_policy(std::string* value);

  private:
  const std::string& _internal_escalation_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_policy(
      const std::string& value);
  std::string* _internal_mutable_escalation_policy();

  public:
  // string session_id = 14;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string location = 15;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string originating_ip = 18;
  void clear_originating_ip() ;
  const std::string& originating_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originating_ip(Arg_&& arg, Args_... args);
  std::string* mutable_originating_ip();
  PROTOBUF_NODISCARD std::string* release_originating_ip();
  void set_allocated_originating_ip(std::string* value);

  private:
  const std::string& _internal_originating_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originating_ip(
      const std::string& value);
  std::string* _internal_mutable_originating_ip();

  public:
  // .seigr.audit.LogLevel log_level = 5;
  void clear_log_level() ;
  ::seigr::audit::LogLevel log_level() const;
  void set_log_level(::seigr::audit::LogLevel value);

  private:
  ::seigr::audit::LogLevel _internal_log_level() const;
  void _internal_set_log_level(::seigr::audit::LogLevel value);

  public:
  // .seigr.audit.LogCategory category = 6;
  void clear_category() ;
  ::seigr::audit::LogCategory category() const;
  void set_category(::seigr::audit::LogCategory value);

  private:
  ::seigr::audit::LogCategory _internal_category() const;
  void _internal_set_category(::seigr::audit::LogCategory value);

  public:
  // bool requires_attention = 9;
  void clear_requires_attention() ;
  bool requires_attention() const;
  void set_requires_attention(bool value);

  private:
  bool _internal_requires_attention() const;
  void _internal_set_requires_attention(bool value);

  public:
  // bool mfa_verified = 17;
  void clear_mfa_verified() ;
  bool mfa_verified() const;
  void set_mfa_verified(bool value);

  private:
  bool _internal_mfa_verified() const;
  void _internal_set_mfa_verified(bool value);

  public:
  // int32 session_duration_seconds = 16;
  void clear_session_duration_seconds() ;
  ::int32_t session_duration_seconds() const;
  void set_session_duration_seconds(::int32_t value);

  private:
  ::int32_t _internal_session_duration_seconds() const;
  void _internal_set_session_duration_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditLogEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 1,
      166, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditLogEntry& from_msg);
    ::google::protobuf::internal::MapField<AuditLogEntry_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr role_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr component_;
    ::google::protobuf::internal::ArenaStringPtr action_details_;
    ::google::protobuf::internal::ArenaStringPtr escalation_policy_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr originating_ip_;
    int log_level_;
    int category_;
    bool requires_attention_;
    bool mfa_verified_;
    ::int32_t session_duration_seconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_5flogging_2eproto;
};
// -------------------------------------------------------------------

class AuditReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditReport) */ {
 public:
  inline AuditReport() : AuditReport(nullptr) {}
  ~AuditReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditReport(const AuditReport& from) : AuditReport(nullptr, from) {}
  inline AuditReport(AuditReport&& from) noexcept
      : AuditReport(nullptr, std::move(from)) {}
  inline AuditReport& operator=(const AuditReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditReport& operator=(AuditReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditReport* internal_default_instance() {
    return reinterpret_cast<const AuditReport*>(
        &_AuditReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AuditReport& a, AuditReport& b) { a.Swap(&b); }
  inline void Swap(AuditReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditReport& from) { AuditReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditReport"; }

 protected:
  explicit AuditReport(::google::protobuf::Arena* arena);
  AuditReport(::google::protobuf::Arena* arena, const AuditReport& from);
  AuditReport(::google::protobuf::Arena* arena, AuditReport&& from) noexcept
      : AuditReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 2,
    kMetadataFieldNumber = 6,
    kRelatedReportsFieldNumber = 8,
    kReportIdFieldNumber = 1,
    kGeneratedByFieldNumber = 4,
    kGeneratedAtFieldNumber = 5,
    kSummaryFieldNumber = 7,
    kStatisticsFieldNumber = 3,
  };
  // repeated .seigr.audit.AuditLogEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::seigr::audit::AuditLogEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* _internal_mutable_entries();
  public:
  const ::seigr::audit::AuditLogEntry& entries(int index) const;
  ::seigr::audit::AuditLogEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& entries() const;
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string related_reports = 8;
  int related_reports_size() const;
  private:
  int _internal_related_reports_size() const;

  public:
  void clear_related_reports() ;
  const std::string& related_reports(int index) const;
  std::string* mutable_related_reports(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_related_reports(int index, Arg_&& value, Args_... args);
  std::string* add_related_reports();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_related_reports(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& related_reports() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_related_reports();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_related_reports() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_related_reports();

  public:
  // string report_id = 1;
  void clear_report_id() ;
  const std::string& report_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_report_id(Arg_&& arg, Args_... args);
  std::string* mutable_report_id();
  PROTOBUF_NODISCARD std::string* release_report_id();
  void set_allocated_report_id(std::string* value);

  private:
  const std::string& _internal_report_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_id(
      const std::string& value);
  std::string* _internal_mutable_report_id();

  public:
  // string generated_by = 4;
  void clear_generated_by() ;
  const std::string& generated_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generated_by(Arg_&& arg, Args_... args);
  std::string* mutable_generated_by();
  PROTOBUF_NODISCARD std::string* release_generated_by();
  void set_allocated_generated_by(std::string* value);

  private:
  const std::string& _internal_generated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generated_by(
      const std::string& value);
  std::string* _internal_mutable_generated_by();

  public:
  // string generated_at = 5;
  void clear_generated_at() ;
  const std::string& generated_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generated_at(Arg_&& arg, Args_... args);
  std::string* mutable_generated_at();
  PROTOBUF_NODISCARD std::string* release_generated_at();
  void set_allocated_generated_at(std::string* value);

  private:
  const std::string& _internal_generated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generated_at(
      const std::string& value);
  std::string* _internal_mutable_generated_at();

  public:
  // string summary = 7;
  void clear_summary() ;
  const std::string& summary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* value);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // .seigr.audit.AuditLogStats statistics = 3;
  bool has_statistics() const;
  void clear_statistics() ;
  const ::seigr::audit::AuditLogStats& statistics() const;
  PROTOBUF_NODISCARD ::seigr::audit::AuditLogStats* release_statistics();
  ::seigr::audit::AuditLogStats* mutable_statistics();
  void set_allocated_statistics(::seigr::audit::AuditLogStats* value);
  void unsafe_arena_set_allocated_statistics(::seigr::audit::AuditLogStats* value);
  ::seigr::audit::AuditLogStats* unsafe_arena_release_statistics();

  private:
  const ::seigr::audit::AuditLogStats& _internal_statistics() const;
  ::seigr::audit::AuditLogStats* _internal_mutable_statistics();

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditReport& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seigr::audit::AuditLogEntry > entries_;
    ::google::protobuf::internal::MapField<AuditReport_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> related_reports_;
    ::google::protobuf::internal::ArenaStringPtr report_id_;
    ::google::protobuf::internal::ArenaStringPtr generated_by_;
    ::google::protobuf::internal::ArenaStringPtr generated_at_;
    ::google::protobuf::internal::ArenaStringPtr summary_;
    ::seigr::audit::AuditLogStats* statistics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_5flogging_2eproto;
};
// -------------------------------------------------------------------

class AuditLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.audit.AuditLog) */ {
 public:
  inline AuditLog() : AuditLog(nullptr) {}
  ~AuditLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuditLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuditLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuditLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuditLog(const AuditLog& from) : AuditLog(nullptr, from) {}
  inline AuditLog(AuditLog&& from) noexcept
      : AuditLog(nullptr, std::move(from)) {}
  inline AuditLog& operator=(const AuditLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLog& operator=(AuditLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuditLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuditLog* internal_default_instance() {
    return reinterpret_cast<const AuditLog*>(
        &_AuditLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AuditLog& a, AuditLog& b) { a.Swap(&b); }
  inline void Swap(AuditLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuditLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuditLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuditLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuditLog& from) { AuditLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuditLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.audit.AuditLog"; }

 protected:
  explicit AuditLog(::google::protobuf::Arena* arena);
  AuditLog(::google::protobuf::Arena* arena, const AuditLog& from);
  AuditLog(::google::protobuf::Arena* arena, AuditLog&& from) noexcept
      : AuditLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 1,
    kMetadataFieldNumber = 5,
    kSourceSystemFieldNumber = 2,
    kLogVersionFieldNumber = 3,
    kLogDateFieldNumber = 4,
    kComparisonIdFieldNumber = 6,
    kLogOwnerFieldNumber = 8,
    kIntegrityVerifiedFieldNumber = 7,
  };
  // repeated .seigr.audit.AuditLogEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::seigr::audit::AuditLogEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* _internal_mutable_entries();
  public:
  const ::seigr::audit::AuditLogEntry& entries(int index) const;
  ::seigr::audit::AuditLogEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& entries() const;
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string source_system = 2;
  void clear_source_system() ;
  const std::string& source_system() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_system(Arg_&& arg, Args_... args);
  std::string* mutable_source_system();
  PROTOBUF_NODISCARD std::string* release_source_system();
  void set_allocated_source_system(std::string* value);

  private:
  const std::string& _internal_source_system() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_system(
      const std::string& value);
  std::string* _internal_mutable_source_system();

  public:
  // string log_version = 3;
  void clear_log_version() ;
  const std::string& log_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_version(Arg_&& arg, Args_... args);
  std::string* mutable_log_version();
  PROTOBUF_NODISCARD std::string* release_log_version();
  void set_allocated_log_version(std::string* value);

  private:
  const std::string& _internal_log_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_version(
      const std::string& value);
  std::string* _internal_mutable_log_version();

  public:
  // string log_date = 4;
  void clear_log_date() ;
  const std::string& log_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_date(Arg_&& arg, Args_... args);
  std::string* mutable_log_date();
  PROTOBUF_NODISCARD std::string* release_log_date();
  void set_allocated_log_date(std::string* value);

  private:
  const std::string& _internal_log_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_date(
      const std::string& value);
  std::string* _internal_mutable_log_date();

  public:
  // string comparison_id = 6;
  void clear_comparison_id() ;
  const std::string& comparison_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comparison_id(Arg_&& arg, Args_... args);
  std::string* mutable_comparison_id();
  PROTOBUF_NODISCARD std::string* release_comparison_id();
  void set_allocated_comparison_id(std::string* value);

  private:
  const std::string& _internal_comparison_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comparison_id(
      const std::string& value);
  std::string* _internal_mutable_comparison_id();

  public:
  // string log_owner = 8;
  void clear_log_owner() ;
  const std::string& log_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_owner(Arg_&& arg, Args_... args);
  std::string* mutable_log_owner();
  PROTOBUF_NODISCARD std::string* release_log_owner();
  void set_allocated_log_owner(std::string* value);

  private:
  const std::string& _internal_log_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_owner(
      const std::string& value);
  std::string* _internal_mutable_log_owner();

  public:
  // bool integrity_verified = 7;
  void clear_integrity_verified() ;
  bool integrity_verified() const;
  void set_integrity_verified(bool value);

  private:
  bool _internal_integrity_verified() const;
  void _internal_set_integrity_verified(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.audit.AuditLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      99, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuditLog& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::audit::AuditLogEntry > entries_;
    ::google::protobuf::internal::MapField<AuditLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr source_system_;
    ::google::protobuf::internal::ArenaStringPtr log_version_;
    ::google::protobuf::internal::ArenaStringPtr log_date_;
    ::google::protobuf::internal::ArenaStringPtr comparison_id_;
    ::google::protobuf::internal::ArenaStringPtr log_owner_;
    bool integrity_verified_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audit_5flogging_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditLogEntry

// string log_id = 1;
inline void AuditLogEntry::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.log_id)
}
inline std::string* AuditLogEntry::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.log_id)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void AuditLogEntry::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.log_id)
  return _impl_.log_id_.Release();
}
inline void AuditLogEntry::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.log_id)
}

// string user_id = 2;
inline void AuditLogEntry::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.user_id)
}
inline std::string* AuditLogEntry::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.user_id)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void AuditLogEntry::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.user_id)
  return _impl_.user_id_.Release();
}
inline void AuditLogEntry::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.user_id)
}

// string role = 3;
inline void AuditLogEntry::clear_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::role() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_role(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.role)
}
inline std::string* AuditLogEntry::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.role)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_role() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.role_.Get();
}
inline void AuditLogEntry::_internal_set_role(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.role_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.role)
  return _impl_.role_.Release();
}
inline void AuditLogEntry::set_allocated_role(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.role)
}

// string action = 4;
inline void AuditLogEntry::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.action)
}
inline std::string* AuditLogEntry::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.action)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void AuditLogEntry::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.action)
  return _impl_.action_.Release();
}
inline void AuditLogEntry::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.action)
}

// .seigr.audit.LogLevel log_level = 5;
inline void AuditLogEntry::clear_log_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = 0;
}
inline ::seigr::audit::LogLevel AuditLogEntry::log_level() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.log_level)
  return _internal_log_level();
}
inline void AuditLogEntry::set_log_level(::seigr::audit::LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.log_level)
}
inline ::seigr::audit::LogLevel AuditLogEntry::_internal_log_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::audit::LogLevel>(_impl_.log_level_);
}
inline void AuditLogEntry::_internal_set_log_level(::seigr::audit::LogLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = value;
}

// .seigr.audit.LogCategory category = 6;
inline void AuditLogEntry::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::seigr::audit::LogCategory AuditLogEntry::category() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.category)
  return _internal_category();
}
inline void AuditLogEntry::set_category(::seigr::audit::LogCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.category)
}
inline ::seigr::audit::LogCategory AuditLogEntry::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::audit::LogCategory>(_impl_.category_);
}
inline void AuditLogEntry::_internal_set_category(::seigr::audit::LogCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// string timestamp = 7;
inline void AuditLogEntry::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.timestamp)
}
inline std::string* AuditLogEntry::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.timestamp)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void AuditLogEntry::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.timestamp)
  return _impl_.timestamp_.Release();
}
inline void AuditLogEntry::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.timestamp)
}

// map<string, string> metadata = 8;
inline int AuditLogEntry::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AuditLogEntry::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuditLogEntry::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLogEntry::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLogEntry::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLogEntry.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLogEntry::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLogEntry::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLogEntry.metadata)
  return _internal_mutable_metadata();
}

// bool requires_attention = 9;
inline void AuditLogEntry::clear_requires_attention() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_attention_ = false;
}
inline bool AuditLogEntry::requires_attention() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.requires_attention)
  return _internal_requires_attention();
}
inline void AuditLogEntry::set_requires_attention(bool value) {
  _internal_set_requires_attention(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.requires_attention)
}
inline bool AuditLogEntry::_internal_requires_attention() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_attention_;
}
inline void AuditLogEntry::_internal_set_requires_attention(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_attention_ = value;
}

// string component = 10;
inline void AuditLogEntry::clear_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_component(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.component)
}
inline std::string* AuditLogEntry::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.component)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_component() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.component_.Get();
}
inline void AuditLogEntry::_internal_set_component(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.component)
  return _impl_.component_.Release();
}
inline void AuditLogEntry::set_allocated_component(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.component_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.component_.IsDefault()) {
    _impl_.component_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.component)
}

// string action_details = 11;
inline void AuditLogEntry::clear_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_details_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::action_details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.action_details)
  return _internal_action_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_action_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.action_details)
}
inline std::string* AuditLogEntry::mutable_action_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_details();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.action_details)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_action_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_details_.Get();
}
inline void AuditLogEntry::_internal_set_action_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_details_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_details_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.action_details)
  return _impl_.action_details_.Release();
}
inline void AuditLogEntry::set_allocated_action_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_details_.IsDefault()) {
    _impl_.action_details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.action_details)
}

// repeated string tags = 12;
inline int AuditLogEntry::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int AuditLogEntry::tags_size() const {
  return _internal_tags_size();
}
inline void AuditLogEntry::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* AuditLogEntry::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.audit.AuditLogEntry.tags)
  return _s;
}
inline const std::string& AuditLogEntry::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.tags)
  return _internal_tags().Get(index);
}
inline std::string* AuditLogEntry::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuditLogEntry::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.tags)
}
template <typename Arg_, typename... Args_>
inline void AuditLogEntry::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogEntry.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogEntry::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogEntry.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogEntry::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogEntry.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogEntry::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogEntry::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// string escalation_policy = 13;
inline void AuditLogEntry::clear_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::escalation_policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.escalation_policy)
  return _internal_escalation_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_escalation_policy(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.escalation_policy)
}
inline std::string* AuditLogEntry::mutable_escalation_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_policy();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.escalation_policy)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_escalation_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_policy_.Get();
}
inline void AuditLogEntry::_internal_set_escalation_policy(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_policy_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_escalation_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.escalation_policy)
  return _impl_.escalation_policy_.Release();
}
inline void AuditLogEntry::set_allocated_escalation_policy(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_policy_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_policy_.IsDefault()) {
    _impl_.escalation_policy_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.escalation_policy)
}

// string session_id = 14;
inline void AuditLogEntry::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.session_id)
}
inline std::string* AuditLogEntry::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.session_id)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void AuditLogEntry::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.session_id)
  return _impl_.session_id_.Release();
}
inline void AuditLogEntry::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.session_id)
}

// string location = 15;
inline void AuditLogEntry::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.location)
}
inline std::string* AuditLogEntry::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.location)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void AuditLogEntry::_internal_set_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.location)
  return _impl_.location_.Release();
}
inline void AuditLogEntry::set_allocated_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.location)
}

// int32 session_duration_seconds = 16;
inline void AuditLogEntry::clear_session_duration_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_duration_seconds_ = 0;
}
inline ::int32_t AuditLogEntry::session_duration_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.session_duration_seconds)
  return _internal_session_duration_seconds();
}
inline void AuditLogEntry::set_session_duration_seconds(::int32_t value) {
  _internal_set_session_duration_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.session_duration_seconds)
}
inline ::int32_t AuditLogEntry::_internal_session_duration_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_duration_seconds_;
}
inline void AuditLogEntry::_internal_set_session_duration_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_duration_seconds_ = value;
}

// bool mfa_verified = 17;
inline void AuditLogEntry::clear_mfa_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mfa_verified_ = false;
}
inline bool AuditLogEntry::mfa_verified() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.mfa_verified)
  return _internal_mfa_verified();
}
inline void AuditLogEntry::set_mfa_verified(bool value) {
  _internal_set_mfa_verified(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.mfa_verified)
}
inline bool AuditLogEntry::_internal_mfa_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mfa_verified_;
}
inline void AuditLogEntry::_internal_set_mfa_verified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mfa_verified_ = value;
}

// string originating_ip = 18;
inline void AuditLogEntry::clear_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.ClearToEmpty();
}
inline const std::string& AuditLogEntry::originating_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogEntry.originating_ip)
  return _internal_originating_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogEntry::set_originating_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogEntry.originating_ip)
}
inline std::string* AuditLogEntry::mutable_originating_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originating_ip();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogEntry.originating_ip)
  return _s;
}
inline const std::string& AuditLogEntry::_internal_originating_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.originating_ip_.Get();
}
inline void AuditLogEntry::_internal_set_originating_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.Set(value, GetArena());
}
inline std::string* AuditLogEntry::_internal_mutable_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.originating_ip_.Mutable( GetArena());
}
inline std::string* AuditLogEntry::release_originating_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogEntry.originating_ip)
  return _impl_.originating_ip_.Release();
}
inline void AuditLogEntry::set_allocated_originating_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.originating_ip_.IsDefault()) {
    _impl_.originating_ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogEntry.originating_ip)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditLog

// repeated .seigr.audit.AuditLogEntry entries = 1;
inline int AuditLog::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AuditLog::entries_size() const {
  return _internal_entries_size();
}
inline void AuditLog::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::seigr::audit::AuditLogEntry* AuditLog::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* AuditLog::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLog.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::seigr::audit::AuditLogEntry& AuditLog::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.entries)
  return _internal_entries().Get(index);
}
inline ::seigr::audit::AuditLogEntry* AuditLog::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::audit::AuditLogEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLog.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& AuditLog::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLog.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>&
AuditLog::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>*
AuditLog::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// string source_system = 2;
inline void AuditLog::clear_source_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_system_.ClearToEmpty();
}
inline const std::string& AuditLog::source_system() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.source_system)
  return _internal_source_system();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLog::set_source_system(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_system_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.source_system)
}
inline std::string* AuditLog::mutable_source_system() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_system();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.source_system)
  return _s;
}
inline const std::string& AuditLog::_internal_source_system() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_system_.Get();
}
inline void AuditLog::_internal_set_source_system(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_system_.Set(value, GetArena());
}
inline std::string* AuditLog::_internal_mutable_source_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_system_.Mutable( GetArena());
}
inline std::string* AuditLog::release_source_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLog.source_system)
  return _impl_.source_system_.Release();
}
inline void AuditLog::set_allocated_source_system(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_system_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_system_.IsDefault()) {
    _impl_.source_system_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLog.source_system)
}

// string log_version = 3;
inline void AuditLog::clear_log_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_version_.ClearToEmpty();
}
inline const std::string& AuditLog::log_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.log_version)
  return _internal_log_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLog::set_log_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.log_version)
}
inline std::string* AuditLog::mutable_log_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_version();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.log_version)
  return _s;
}
inline const std::string& AuditLog::_internal_log_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_version_.Get();
}
inline void AuditLog::_internal_set_log_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_version_.Set(value, GetArena());
}
inline std::string* AuditLog::_internal_mutable_log_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_version_.Mutable( GetArena());
}
inline std::string* AuditLog::release_log_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLog.log_version)
  return _impl_.log_version_.Release();
}
inline void AuditLog::set_allocated_log_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_version_.IsDefault()) {
    _impl_.log_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLog.log_version)
}

// string log_date = 4;
inline void AuditLog::clear_log_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_date_.ClearToEmpty();
}
inline const std::string& AuditLog::log_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.log_date)
  return _internal_log_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLog::set_log_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.log_date)
}
inline std::string* AuditLog::mutable_log_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_date();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.log_date)
  return _s;
}
inline const std::string& AuditLog::_internal_log_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_date_.Get();
}
inline void AuditLog::_internal_set_log_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_date_.Set(value, GetArena());
}
inline std::string* AuditLog::_internal_mutable_log_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_date_.Mutable( GetArena());
}
inline std::string* AuditLog::release_log_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLog.log_date)
  return _impl_.log_date_.Release();
}
inline void AuditLog::set_allocated_log_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_date_.IsDefault()) {
    _impl_.log_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLog.log_date)
}

// map<string, string> metadata = 5;
inline int AuditLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AuditLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuditLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLog.metadata)
  return _internal_mutable_metadata();
}

// string comparison_id = 6;
inline void AuditLog::clear_comparison_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_id_.ClearToEmpty();
}
inline const std::string& AuditLog::comparison_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.comparison_id)
  return _internal_comparison_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLog::set_comparison_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.comparison_id)
}
inline std::string* AuditLog::mutable_comparison_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_comparison_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.comparison_id)
  return _s;
}
inline const std::string& AuditLog::_internal_comparison_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.comparison_id_.Get();
}
inline void AuditLog::_internal_set_comparison_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_id_.Set(value, GetArena());
}
inline std::string* AuditLog::_internal_mutable_comparison_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.comparison_id_.Mutable( GetArena());
}
inline std::string* AuditLog::release_comparison_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLog.comparison_id)
  return _impl_.comparison_id_.Release();
}
inline void AuditLog::set_allocated_comparison_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.comparison_id_.IsDefault()) {
    _impl_.comparison_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLog.comparison_id)
}

// bool integrity_verified = 7;
inline void AuditLog::clear_integrity_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verified_ = false;
}
inline bool AuditLog::integrity_verified() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.integrity_verified)
  return _internal_integrity_verified();
}
inline void AuditLog::set_integrity_verified(bool value) {
  _internal_set_integrity_verified(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.integrity_verified)
}
inline bool AuditLog::_internal_integrity_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integrity_verified_;
}
inline void AuditLog::_internal_set_integrity_verified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integrity_verified_ = value;
}

// string log_owner = 8;
inline void AuditLog::clear_log_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_owner_.ClearToEmpty();
}
inline const std::string& AuditLog::log_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLog.log_owner)
  return _internal_log_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLog::set_log_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLog.log_owner)
}
inline std::string* AuditLog::mutable_log_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_owner();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLog.log_owner)
  return _s;
}
inline const std::string& AuditLog::_internal_log_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_owner_.Get();
}
inline void AuditLog::_internal_set_log_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_owner_.Set(value, GetArena());
}
inline std::string* AuditLog::_internal_mutable_log_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_owner_.Mutable( GetArena());
}
inline std::string* AuditLog::release_log_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLog.log_owner)
  return _impl_.log_owner_.Release();
}
inline void AuditLog::set_allocated_log_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_owner_.IsDefault()) {
    _impl_.log_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLog.log_owner)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditLogQuery

// repeated string user_ids = 1;
inline int AuditLogQuery::_internal_user_ids_size() const {
  return _internal_user_ids().size();
}
inline int AuditLogQuery::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void AuditLogQuery::clear_user_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_ids_.Clear();
}
inline std::string* AuditLogQuery::add_user_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_user_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.audit.AuditLogQuery.user_ids)
  return _s;
}
inline const std::string& AuditLogQuery::user_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.user_ids)
  return _internal_user_ids().Get(index);
}
inline std::string* AuditLogQuery::mutable_user_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.user_ids)
  return _internal_mutable_user_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::set_user_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_user_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.user_ids)
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::add_user_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_user_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogQuery.user_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::user_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogQuery.user_ids)
  return _internal_user_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::mutable_user_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogQuery.user_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_user_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::_internal_user_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::_internal_mutable_user_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.user_ids_;
}

// repeated .seigr.audit.LogCategory categories = 2;
inline int AuditLogQuery::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int AuditLogQuery::categories_size() const {
  return _internal_categories_size();
}
inline void AuditLogQuery::clear_categories() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.categories_.Clear();
}
inline ::seigr::audit::LogCategory AuditLogQuery::categories(int index) const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.categories)
  return static_cast<::seigr::audit::LogCategory>(_internal_categories().Get(index));
}
inline void AuditLogQuery::set_categories(int index, ::seigr::audit::LogCategory value) {
  _internal_mutable_categories()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.categories)
}
inline void AuditLogQuery::add_categories(::seigr::audit::LogCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_categories()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogQuery.categories)
}
inline const ::google::protobuf::RepeatedField<int>& AuditLogQuery::categories() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogQuery.categories)
  return _internal_categories();
}
inline ::google::protobuf::RepeatedField<int>* AuditLogQuery::mutable_categories()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogQuery.categories)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_categories();
}
inline const ::google::protobuf::RepeatedField<int>& AuditLogQuery::_internal_categories()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.categories_;
}
inline ::google::protobuf::RepeatedField<int>* AuditLogQuery::_internal_mutable_categories() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.categories_;
}

// repeated .seigr.audit.LogLevel log_levels = 3;
inline int AuditLogQuery::_internal_log_levels_size() const {
  return _internal_log_levels().size();
}
inline int AuditLogQuery::log_levels_size() const {
  return _internal_log_levels_size();
}
inline void AuditLogQuery::clear_log_levels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_levels_.Clear();
}
inline ::seigr::audit::LogLevel AuditLogQuery::log_levels(int index) const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.log_levels)
  return static_cast<::seigr::audit::LogLevel>(_internal_log_levels().Get(index));
}
inline void AuditLogQuery::set_log_levels(int index, ::seigr::audit::LogLevel value) {
  _internal_mutable_log_levels()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.log_levels)
}
inline void AuditLogQuery::add_log_levels(::seigr::audit::LogLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_log_levels()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogQuery.log_levels)
}
inline const ::google::protobuf::RepeatedField<int>& AuditLogQuery::log_levels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogQuery.log_levels)
  return _internal_log_levels();
}
inline ::google::protobuf::RepeatedField<int>* AuditLogQuery::mutable_log_levels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogQuery.log_levels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_log_levels();
}
inline const ::google::protobuf::RepeatedField<int>& AuditLogQuery::_internal_log_levels()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_levels_;
}
inline ::google::protobuf::RepeatedField<int>* AuditLogQuery::_internal_mutable_log_levels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.log_levels_;
}

// string date_range_start = 4;
inline void AuditLogQuery::clear_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.ClearToEmpty();
}
inline const std::string& AuditLogQuery::date_range_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.date_range_start)
  return _internal_date_range_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogQuery::set_date_range_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.date_range_start)
}
inline std::string* AuditLogQuery::mutable_date_range_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_start();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.date_range_start)
  return _s;
}
inline const std::string& AuditLogQuery::_internal_date_range_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_start_.Get();
}
inline void AuditLogQuery::_internal_set_date_range_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(value, GetArena());
}
inline std::string* AuditLogQuery::_internal_mutable_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_start_.Mutable( GetArena());
}
inline std::string* AuditLogQuery::release_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogQuery.date_range_start)
  return _impl_.date_range_start_.Release();
}
inline void AuditLogQuery::set_allocated_date_range_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_start_.IsDefault()) {
    _impl_.date_range_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogQuery.date_range_start)
}

// string date_range_end = 5;
inline void AuditLogQuery::clear_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.ClearToEmpty();
}
inline const std::string& AuditLogQuery::date_range_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.date_range_end)
  return _internal_date_range_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogQuery::set_date_range_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.date_range_end)
}
inline std::string* AuditLogQuery::mutable_date_range_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_end();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.date_range_end)
  return _s;
}
inline const std::string& AuditLogQuery::_internal_date_range_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_end_.Get();
}
inline void AuditLogQuery::_internal_set_date_range_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(value, GetArena());
}
inline std::string* AuditLogQuery::_internal_mutable_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_end_.Mutable( GetArena());
}
inline std::string* AuditLogQuery::release_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogQuery.date_range_end)
  return _impl_.date_range_end_.Release();
}
inline void AuditLogQuery::set_allocated_date_range_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_end_.IsDefault()) {
    _impl_.date_range_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogQuery.date_range_end)
}

// repeated string tags = 6;
inline int AuditLogQuery::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int AuditLogQuery::tags_size() const {
  return _internal_tags_size();
}
inline void AuditLogQuery::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* AuditLogQuery::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.audit.AuditLogQuery.tags)
  return _s;
}
inline const std::string& AuditLogQuery::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.tags)
  return _internal_tags().Get(index);
}
inline std::string* AuditLogQuery::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.tags)
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogQuery.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogQuery.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogQuery.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// repeated string actions = 7;
inline int AuditLogQuery::_internal_actions_size() const {
  return _internal_actions().size();
}
inline int AuditLogQuery::actions_size() const {
  return _internal_actions_size();
}
inline void AuditLogQuery::clear_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actions_.Clear();
}
inline std::string* AuditLogQuery::add_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_actions()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.audit.AuditLogQuery.actions)
  return _s;
}
inline const std::string& AuditLogQuery::actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.actions)
  return _internal_actions().Get(index);
}
inline std::string* AuditLogQuery::mutable_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.actions)
  return _internal_mutable_actions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::set_actions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_actions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.actions)
}
template <typename Arg_, typename... Args_>
inline void AuditLogQuery::add_actions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_actions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.audit.AuditLogQuery.actions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::actions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditLogQuery.actions)
  return _internal_actions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::mutable_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditLogQuery.actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditLogQuery::_internal_actions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditLogQuery::_internal_mutable_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actions_;
}

// map<string, string> additional_filters = 8;
inline int AuditLogQuery::_internal_additional_filters_size() const {
  return _internal_additional_filters().size();
}
inline int AuditLogQuery::additional_filters_size() const {
  return _internal_additional_filters_size();
}
inline void AuditLogQuery::clear_additional_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_filters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLogQuery::_internal_additional_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_filters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditLogQuery::additional_filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLogQuery.additional_filters)
  return _internal_additional_filters();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLogQuery::_internal_mutable_additional_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_filters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditLogQuery::mutable_additional_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLogQuery.additional_filters)
  return _internal_mutable_additional_filters();
}

// string time_of_day_start = 9;
inline void AuditLogQuery::clear_time_of_day_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_start_.ClearToEmpty();
}
inline const std::string& AuditLogQuery::time_of_day_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.time_of_day_start)
  return _internal_time_of_day_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogQuery::set_time_of_day_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.time_of_day_start)
}
inline std::string* AuditLogQuery::mutable_time_of_day_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_of_day_start();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.time_of_day_start)
  return _s;
}
inline const std::string& AuditLogQuery::_internal_time_of_day_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_of_day_start_.Get();
}
inline void AuditLogQuery::_internal_set_time_of_day_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_start_.Set(value, GetArena());
}
inline std::string* AuditLogQuery::_internal_mutable_time_of_day_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_of_day_start_.Mutable( GetArena());
}
inline std::string* AuditLogQuery::release_time_of_day_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogQuery.time_of_day_start)
  return _impl_.time_of_day_start_.Release();
}
inline void AuditLogQuery::set_allocated_time_of_day_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_of_day_start_.IsDefault()) {
    _impl_.time_of_day_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogQuery.time_of_day_start)
}

// string time_of_day_end = 10;
inline void AuditLogQuery::clear_time_of_day_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_end_.ClearToEmpty();
}
inline const std::string& AuditLogQuery::time_of_day_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.time_of_day_end)
  return _internal_time_of_day_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogQuery::set_time_of_day_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.time_of_day_end)
}
inline std::string* AuditLogQuery::mutable_time_of_day_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time_of_day_end();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogQuery.time_of_day_end)
  return _s;
}
inline const std::string& AuditLogQuery::_internal_time_of_day_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_of_day_end_.Get();
}
inline void AuditLogQuery::_internal_set_time_of_day_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_end_.Set(value, GetArena());
}
inline std::string* AuditLogQuery::_internal_mutable_time_of_day_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_of_day_end_.Mutable( GetArena());
}
inline std::string* AuditLogQuery::release_time_of_day_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogQuery.time_of_day_end)
  return _impl_.time_of_day_end_.Release();
}
inline void AuditLogQuery::set_allocated_time_of_day_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_of_day_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_of_day_end_.IsDefault()) {
    _impl_.time_of_day_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogQuery.time_of_day_end)
}

// bool enable_pattern_detection = 11;
inline void AuditLogQuery::clear_enable_pattern_detection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_pattern_detection_ = false;
}
inline bool AuditLogQuery::enable_pattern_detection() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.enable_pattern_detection)
  return _internal_enable_pattern_detection();
}
inline void AuditLogQuery::set_enable_pattern_detection(bool value) {
  _internal_set_enable_pattern_detection(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.enable_pattern_detection)
}
inline bool AuditLogQuery::_internal_enable_pattern_detection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_pattern_detection_;
}
inline void AuditLogQuery::_internal_set_enable_pattern_detection(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_pattern_detection_ = value;
}

// bool include_session_data = 12;
inline void AuditLogQuery::clear_include_session_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_session_data_ = false;
}
inline bool AuditLogQuery::include_session_data() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogQuery.include_session_data)
  return _internal_include_session_data();
}
inline void AuditLogQuery::set_include_session_data(bool value) {
  _internal_set_include_session_data(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogQuery.include_session_data)
}
inline bool AuditLogQuery::_internal_include_session_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_session_data_;
}
inline void AuditLogQuery::_internal_set_include_session_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_session_data_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditLogStats

// int32 total_entries = 1;
inline void AuditLogStats::clear_total_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_entries_ = 0;
}
inline ::int32_t AuditLogStats::total_entries() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.total_entries)
  return _internal_total_entries();
}
inline void AuditLogStats::set_total_entries(::int32_t value) {
  _internal_set_total_entries(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.total_entries)
}
inline ::int32_t AuditLogStats::_internal_total_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_entries_;
}
inline void AuditLogStats::_internal_set_total_entries(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_entries_ = value;
}

// int32 critical_count = 2;
inline void AuditLogStats::clear_critical_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_count_ = 0;
}
inline ::int32_t AuditLogStats::critical_count() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.critical_count)
  return _internal_critical_count();
}
inline void AuditLogStats::set_critical_count(::int32_t value) {
  _internal_set_critical_count(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.critical_count)
}
inline ::int32_t AuditLogStats::_internal_critical_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.critical_count_;
}
inline void AuditLogStats::_internal_set_critical_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_count_ = value;
}

// int32 error_count = 3;
inline void AuditLogStats::clear_error_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_count_ = 0;
}
inline ::int32_t AuditLogStats::error_count() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.error_count)
  return _internal_error_count();
}
inline void AuditLogStats::set_error_count(::int32_t value) {
  _internal_set_error_count(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.error_count)
}
inline ::int32_t AuditLogStats::_internal_error_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_count_;
}
inline void AuditLogStats::_internal_set_error_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_count_ = value;
}

// int32 warning_count = 4;
inline void AuditLogStats::clear_warning_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_count_ = 0;
}
inline ::int32_t AuditLogStats::warning_count() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.warning_count)
  return _internal_warning_count();
}
inline void AuditLogStats::set_warning_count(::int32_t value) {
  _internal_set_warning_count(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.warning_count)
}
inline ::int32_t AuditLogStats::_internal_warning_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warning_count_;
}
inline void AuditLogStats::_internal_set_warning_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_count_ = value;
}

// map<string, int32> category_counts = 5;
inline int AuditLogStats::_internal_category_counts_size() const {
  return _internal_category_counts().size();
}
inline int AuditLogStats::category_counts_size() const {
  return _internal_category_counts_size();
}
inline void AuditLogStats::clear_category_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& AuditLogStats::_internal_category_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& AuditLogStats::category_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLogStats.category_counts)
  return _internal_category_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* AuditLogStats::_internal_mutable_category_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.category_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* AuditLogStats::mutable_category_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLogStats.category_counts)
  return _internal_mutable_category_counts();
}

// map<string, int32> user_action_counts = 6;
inline int AuditLogStats::_internal_user_action_counts_size() const {
  return _internal_user_action_counts().size();
}
inline int AuditLogStats::user_action_counts_size() const {
  return _internal_user_action_counts_size();
}
inline void AuditLogStats::clear_user_action_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_action_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& AuditLogStats::_internal_user_action_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_action_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& AuditLogStats::user_action_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLogStats.user_action_counts)
  return _internal_user_action_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* AuditLogStats::_internal_mutable_user_action_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_action_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* AuditLogStats::mutable_user_action_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLogStats.user_action_counts)
  return _internal_mutable_user_action_counts();
}

// string last_entry_timestamp = 7;
inline void AuditLogStats::clear_last_entry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_entry_timestamp_.ClearToEmpty();
}
inline const std::string& AuditLogStats::last_entry_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.last_entry_timestamp)
  return _internal_last_entry_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogStats::set_last_entry_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_entry_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.last_entry_timestamp)
}
inline std::string* AuditLogStats::mutable_last_entry_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_entry_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogStats.last_entry_timestamp)
  return _s;
}
inline const std::string& AuditLogStats::_internal_last_entry_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_entry_timestamp_.Get();
}
inline void AuditLogStats::_internal_set_last_entry_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_entry_timestamp_.Set(value, GetArena());
}
inline std::string* AuditLogStats::_internal_mutable_last_entry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_entry_timestamp_.Mutable( GetArena());
}
inline std::string* AuditLogStats::release_last_entry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogStats.last_entry_timestamp)
  return _impl_.last_entry_timestamp_.Release();
}
inline void AuditLogStats::set_allocated_last_entry_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_entry_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_entry_timestamp_.IsDefault()) {
    _impl_.last_entry_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogStats.last_entry_timestamp)
}

// string summary_period = 8;
inline void AuditLogStats::clear_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.ClearToEmpty();
}
inline const std::string& AuditLogStats::summary_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.summary_period)
  return _internal_summary_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogStats::set_summary_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.summary_period)
}
inline std::string* AuditLogStats::mutable_summary_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary_period();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogStats.summary_period)
  return _s;
}
inline const std::string& AuditLogStats::_internal_summary_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_period_.Get();
}
inline void AuditLogStats::_internal_set_summary_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.Set(value, GetArena());
}
inline std::string* AuditLogStats::_internal_mutable_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_period_.Mutable( GetArena());
}
inline std::string* AuditLogStats::release_summary_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogStats.summary_period)
  return _impl_.summary_period_.Release();
}
inline void AuditLogStats::set_allocated_summary_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_period_.IsDefault()) {
    _impl_.summary_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogStats.summary_period)
}

// int32 alert_count = 9;
inline void AuditLogStats::clear_alert_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_count_ = 0;
}
inline ::int32_t AuditLogStats::alert_count() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.alert_count)
  return _internal_alert_count();
}
inline void AuditLogStats::set_alert_count(::int32_t value) {
  _internal_set_alert_count(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.alert_count)
}
inline ::int32_t AuditLogStats::_internal_alert_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_count_;
}
inline void AuditLogStats::_internal_set_alert_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_count_ = value;
}

// double critical_event_ratio = 10;
inline void AuditLogStats::clear_critical_event_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_event_ratio_ = 0;
}
inline double AuditLogStats::critical_event_ratio() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.critical_event_ratio)
  return _internal_critical_event_ratio();
}
inline void AuditLogStats::set_critical_event_ratio(double value) {
  _internal_set_critical_event_ratio(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.critical_event_ratio)
}
inline double AuditLogStats::_internal_critical_event_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.critical_event_ratio_;
}
inline void AuditLogStats::_internal_set_critical_event_ratio(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.critical_event_ratio_ = value;
}

// int32 escalation_threshold = 11;
inline void AuditLogStats::clear_escalation_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_threshold_ = 0;
}
inline ::int32_t AuditLogStats::escalation_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.escalation_threshold)
  return _internal_escalation_threshold();
}
inline void AuditLogStats::set_escalation_threshold(::int32_t value) {
  _internal_set_escalation_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.escalation_threshold)
}
inline ::int32_t AuditLogStats::_internal_escalation_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_threshold_;
}
inline void AuditLogStats::_internal_set_escalation_threshold(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_threshold_ = value;
}

// double error_to_warning_ratio = 12;
inline void AuditLogStats::clear_error_to_warning_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_to_warning_ratio_ = 0;
}
inline double AuditLogStats::error_to_warning_ratio() const {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.error_to_warning_ratio)
  return _internal_error_to_warning_ratio();
}
inline void AuditLogStats::set_error_to_warning_ratio(double value) {
  _internal_set_error_to_warning_ratio(value);
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.error_to_warning_ratio)
}
inline double AuditLogStats::_internal_error_to_warning_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_to_warning_ratio_;
}
inline void AuditLogStats::_internal_set_error_to_warning_ratio(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_to_warning_ratio_ = value;
}

// map<string, double> category_ratios = 13;
inline int AuditLogStats::_internal_category_ratios_size() const {
  return _internal_category_ratios().size();
}
inline int AuditLogStats::category_ratios_size() const {
  return _internal_category_ratios_size();
}
inline void AuditLogStats::clear_category_ratios() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ratios_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& AuditLogStats::_internal_category_ratios() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_ratios_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& AuditLogStats::category_ratios() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditLogStats.category_ratios)
  return _internal_category_ratios();
}
inline ::google::protobuf::Map<std::string, double>* AuditLogStats::_internal_mutable_category_ratios() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.category_ratios_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* AuditLogStats::mutable_category_ratios() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditLogStats.category_ratios)
  return _internal_mutable_category_ratios();
}

// string most_active_user_id = 14;
inline void AuditLogStats::clear_most_active_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_active_user_id_.ClearToEmpty();
}
inline const std::string& AuditLogStats::most_active_user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.most_active_user_id)
  return _internal_most_active_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogStats::set_most_active_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_active_user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.most_active_user_id)
}
inline std::string* AuditLogStats::mutable_most_active_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_most_active_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogStats.most_active_user_id)
  return _s;
}
inline const std::string& AuditLogStats::_internal_most_active_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.most_active_user_id_.Get();
}
inline void AuditLogStats::_internal_set_most_active_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_active_user_id_.Set(value, GetArena());
}
inline std::string* AuditLogStats::_internal_mutable_most_active_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.most_active_user_id_.Mutable( GetArena());
}
inline std::string* AuditLogStats::release_most_active_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogStats.most_active_user_id)
  return _impl_.most_active_user_id_.Release();
}
inline void AuditLogStats::set_allocated_most_active_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_active_user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.most_active_user_id_.IsDefault()) {
    _impl_.most_active_user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogStats.most_active_user_id)
}

// string most_frequent_action = 15;
inline void AuditLogStats::clear_most_frequent_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_frequent_action_.ClearToEmpty();
}
inline const std::string& AuditLogStats::most_frequent_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditLogStats.most_frequent_action)
  return _internal_most_frequent_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditLogStats::set_most_frequent_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_frequent_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditLogStats.most_frequent_action)
}
inline std::string* AuditLogStats::mutable_most_frequent_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_most_frequent_action();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditLogStats.most_frequent_action)
  return _s;
}
inline const std::string& AuditLogStats::_internal_most_frequent_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.most_frequent_action_.Get();
}
inline void AuditLogStats::_internal_set_most_frequent_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_frequent_action_.Set(value, GetArena());
}
inline std::string* AuditLogStats::_internal_mutable_most_frequent_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.most_frequent_action_.Mutable( GetArena());
}
inline std::string* AuditLogStats::release_most_frequent_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditLogStats.most_frequent_action)
  return _impl_.most_frequent_action_.Release();
}
inline void AuditLogStats::set_allocated_most_frequent_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.most_frequent_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.most_frequent_action_.IsDefault()) {
    _impl_.most_frequent_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditLogStats.most_frequent_action)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuditReport

// string report_id = 1;
inline void AuditReport::clear_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.ClearToEmpty();
}
inline const std::string& AuditReport::report_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.report_id)
  return _internal_report_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditReport::set_report_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditReport.report_id)
}
inline std::string* AuditReport::mutable_report_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_report_id();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.report_id)
  return _s;
}
inline const std::string& AuditReport::_internal_report_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.report_id_.Get();
}
inline void AuditReport::_internal_set_report_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.Set(value, GetArena());
}
inline std::string* AuditReport::_internal_mutable_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.report_id_.Mutable( GetArena());
}
inline std::string* AuditReport::release_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditReport.report_id)
  return _impl_.report_id_.Release();
}
inline void AuditReport::set_allocated_report_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.report_id_.IsDefault()) {
    _impl_.report_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditReport.report_id)
}

// repeated .seigr.audit.AuditLogEntry entries = 2;
inline int AuditReport::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AuditReport::entries_size() const {
  return _internal_entries_size();
}
inline void AuditReport::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::seigr::audit::AuditLogEntry* AuditReport::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>* AuditReport::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditReport.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::seigr::audit::AuditLogEntry& AuditReport::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.entries)
  return _internal_entries().Get(index);
}
inline ::seigr::audit::AuditLogEntry* AuditReport::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::audit::AuditLogEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:seigr.audit.AuditReport.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>& AuditReport::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditReport.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>&
AuditReport::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::audit::AuditLogEntry>*
AuditReport::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// .seigr.audit.AuditLogStats statistics = 3;
inline bool AuditReport::has_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statistics_ != nullptr);
  return value;
}
inline void AuditReport::clear_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statistics_ != nullptr) _impl_.statistics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::audit::AuditLogStats& AuditReport::_internal_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::audit::AuditLogStats* p = _impl_.statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::audit::AuditLogStats&>(::seigr::audit::_AuditLogStats_default_instance_);
}
inline const ::seigr::audit::AuditLogStats& AuditReport::statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.statistics)
  return _internal_statistics();
}
inline void AuditReport::unsafe_arena_set_allocated_statistics(::seigr::audit::AuditLogStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statistics_);
  }
  _impl_.statistics_ = reinterpret_cast<::seigr::audit::AuditLogStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.audit.AuditReport.statistics)
}
inline ::seigr::audit::AuditLogStats* AuditReport::release_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::audit::AuditLogStats* released = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::audit::AuditLogStats* AuditReport::unsafe_arena_release_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditReport.statistics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::audit::AuditLogStats* temp = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
  return temp;
}
inline ::seigr::audit::AuditLogStats* AuditReport::_internal_mutable_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statistics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::audit::AuditLogStats>(GetArena());
    _impl_.statistics_ = reinterpret_cast<::seigr::audit::AuditLogStats*>(p);
  }
  return _impl_.statistics_;
}
inline ::seigr::audit::AuditLogStats* AuditReport::mutable_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::audit::AuditLogStats* _msg = _internal_mutable_statistics();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.statistics)
  return _msg;
}
inline void AuditReport::set_allocated_statistics(::seigr::audit::AuditLogStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.statistics_ = reinterpret_cast<::seigr::audit::AuditLogStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditReport.statistics)
}

// string generated_by = 4;
inline void AuditReport::clear_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.ClearToEmpty();
}
inline const std::string& AuditReport::generated_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.generated_by)
  return _internal_generated_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditReport::set_generated_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditReport.generated_by)
}
inline std::string* AuditReport::mutable_generated_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generated_by();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.generated_by)
  return _s;
}
inline const std::string& AuditReport::_internal_generated_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_by_.Get();
}
inline void AuditReport::_internal_set_generated_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.Set(value, GetArena());
}
inline std::string* AuditReport::_internal_mutable_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.generated_by_.Mutable( GetArena());
}
inline std::string* AuditReport::release_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditReport.generated_by)
  return _impl_.generated_by_.Release();
}
inline void AuditReport::set_allocated_generated_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generated_by_.IsDefault()) {
    _impl_.generated_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditReport.generated_by)
}

// string generated_at = 5;
inline void AuditReport::clear_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.ClearToEmpty();
}
inline const std::string& AuditReport::generated_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.generated_at)
  return _internal_generated_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditReport::set_generated_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditReport.generated_at)
}
inline std::string* AuditReport::mutable_generated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generated_at();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.generated_at)
  return _s;
}
inline const std::string& AuditReport::_internal_generated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_at_.Get();
}
inline void AuditReport::_internal_set_generated_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.Set(value, GetArena());
}
inline std::string* AuditReport::_internal_mutable_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.generated_at_.Mutable( GetArena());
}
inline std::string* AuditReport::release_generated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditReport.generated_at)
  return _impl_.generated_at_.Release();
}
inline void AuditReport::set_allocated_generated_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generated_at_.IsDefault()) {
    _impl_.generated_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditReport.generated_at)
}

// map<string, string> metadata = 6;
inline int AuditReport::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AuditReport::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuditReport::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditReport::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AuditReport::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.audit.AuditReport.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditReport::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AuditReport::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.audit.AuditReport.metadata)
  return _internal_mutable_metadata();
}

// string summary = 7;
inline void AuditReport::clear_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& AuditReport::summary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuditReport::set_summary(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.audit.AuditReport.summary)
}
inline std::string* AuditReport::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.summary)
  return _s;
}
inline const std::string& AuditReport::_internal_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_.Get();
}
inline void AuditReport::_internal_set_summary(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(value, GetArena());
}
inline std::string* AuditReport::_internal_mutable_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_.Mutable( GetArena());
}
inline std::string* AuditReport::release_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.audit.AuditReport.summary)
  return _impl_.summary_.Release();
}
inline void AuditReport::set_allocated_summary(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.audit.AuditReport.summary)
}

// repeated string related_reports = 8;
inline int AuditReport::_internal_related_reports_size() const {
  return _internal_related_reports().size();
}
inline int AuditReport::related_reports_size() const {
  return _internal_related_reports_size();
}
inline void AuditReport::clear_related_reports() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_reports_.Clear();
}
inline std::string* AuditReport::add_related_reports() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_related_reports()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.audit.AuditReport.related_reports)
  return _s;
}
inline const std::string& AuditReport::related_reports(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.audit.AuditReport.related_reports)
  return _internal_related_reports().Get(index);
}
inline std::string* AuditReport::mutable_related_reports(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.audit.AuditReport.related_reports)
  return _internal_mutable_related_reports()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuditReport::set_related_reports(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_related_reports()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.audit.AuditReport.related_reports)
}
template <typename Arg_, typename... Args_>
inline void AuditReport::add_related_reports(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_related_reports(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.audit.AuditReport.related_reports)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditReport::related_reports() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.audit.AuditReport.related_reports)
  return _internal_related_reports();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditReport::mutable_related_reports() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.audit.AuditReport.related_reports)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_related_reports();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuditReport::_internal_related_reports() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.related_reports_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuditReport::_internal_mutable_related_reports() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.related_reports_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace audit
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::audit::LogCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::audit::LogCategory>() {
  return ::seigr::audit::LogCategory_descriptor();
}
template <>
struct is_proto_enum<::seigr::audit::LogLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::audit::LogLevel>() {
  return ::seigr::audit::LogLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // audit_5flogging_2eproto_2epb_2eh
