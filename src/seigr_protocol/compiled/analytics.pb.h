// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: analytics.proto
// Protobuf C++ Version: 5.29.2

#ifndef analytics_2eproto_2epb_2eh
#define analytics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "alerting.pb.h"
#include "ai_analysis.pb.h"
#include "event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_analytics_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_analytics_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_analytics_2eproto;
namespace seigr {
namespace analytics {
class AnalyticsAlertThreshold;
struct AnalyticsAlertThresholdDefaultTypeInternal;
extern AnalyticsAlertThresholdDefaultTypeInternal _AnalyticsAlertThreshold_default_instance_;
class AnalyticsAlertThreshold_MetadataEntry_DoNotUse;
struct AnalyticsAlertThreshold_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsAlertThreshold_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsAlertThreshold_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsInsight;
struct AnalyticsInsightDefaultTypeInternal;
extern AnalyticsInsightDefaultTypeInternal _AnalyticsInsight_default_instance_;
class AnalyticsInsight_MetadataEntry_DoNotUse;
struct AnalyticsInsight_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsInsight_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsInsight_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsReport;
struct AnalyticsReportDefaultTypeInternal;
extern AnalyticsReportDefaultTypeInternal _AnalyticsReport_default_instance_;
class AnalyticsReport_MetadataEntry_DoNotUse;
struct AnalyticsReport_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsReport_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsReport_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsSettings;
struct AnalyticsSettingsDefaultTypeInternal;
extern AnalyticsSettingsDefaultTypeInternal _AnalyticsSettings_default_instance_;
class AnalyticsSettings_MetadataEntry_DoNotUse;
struct AnalyticsSettings_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsSettings_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsSettings_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsSummary;
struct AnalyticsSummaryDefaultTypeInternal;
extern AnalyticsSummaryDefaultTypeInternal _AnalyticsSummary_default_instance_;
class AnalyticsSummary_ForecastValuesEntry_DoNotUse;
struct AnalyticsSummary_ForecastValuesEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsSummary_ForecastValuesEntry_DoNotUseDefaultTypeInternal _AnalyticsSummary_ForecastValuesEntry_DoNotUse_default_instance_;
class AnalyticsSummary_MetadataEntry_DoNotUse;
struct AnalyticsSummary_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsSummary_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsSummary_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsWorkflowConfig;
struct AnalyticsWorkflowConfigDefaultTypeInternal;
extern AnalyticsWorkflowConfigDefaultTypeInternal _AnalyticsWorkflowConfig_default_instance_;
class AnalyticsWorkflowConfig_MetadataEntry_DoNotUse;
struct AnalyticsWorkflowConfig_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsWorkflowConfig_MetadataEntry_DoNotUseDefaultTypeInternal _AnalyticsWorkflowConfig_MetadataEntry_DoNotUse_default_instance_;
class AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse;
struct AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUseDefaultTypeInternal;
extern AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUseDefaultTypeInternal _AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse_default_instance_;
class DataMetric;
struct DataMetricDefaultTypeInternal;
extern DataMetricDefaultTypeInternal _DataMetric_default_instance_;
class DataMetric_MetadataEntry_DoNotUse;
struct DataMetric_MetadataEntry_DoNotUseDefaultTypeInternal;
extern DataMetric_MetadataEntry_DoNotUseDefaultTypeInternal _DataMetric_MetadataEntry_DoNotUse_default_instance_;
}  // namespace analytics
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace analytics {
enum MetricCategory : int {
  METRIC_CATEGORY_UNDEFINED = 0,
  METRIC_CATEGORY_PERFORMANCE = 1,
  METRIC_CATEGORY_SECURITY = 2,
  METRIC_CATEGORY_USAGE = 3,
  METRIC_CATEGORY_RELIABILITY = 4,
  METRIC_CATEGORY_CUSTOM = 5,
  MetricCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MetricCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MetricCategory_IsValid(int value);
extern const uint32_t MetricCategory_internal_data_[];
constexpr MetricCategory MetricCategory_MIN = static_cast<MetricCategory>(0);
constexpr MetricCategory MetricCategory_MAX = static_cast<MetricCategory>(5);
constexpr int MetricCategory_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MetricCategory_descriptor();
template <typename T>
const std::string& MetricCategory_Name(T value) {
  static_assert(std::is_same<T, MetricCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MetricCategory_Name().");
  return MetricCategory_Name(static_cast<MetricCategory>(value));
}
template <>
inline const std::string& MetricCategory_Name(MetricCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MetricCategory_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MetricCategory_Parse(absl::string_view name, MetricCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetricCategory>(
      MetricCategory_descriptor(), name, value);
}
enum MetricType : int {
  METRIC_TYPE_UNDEFINED = 0,
  METRIC_TYPE_AVERAGE = 1,
  METRIC_TYPE_MAXIMUM = 2,
  METRIC_TYPE_MINIMUM = 3,
  METRIC_TYPE_MEDIAN = 4,
  METRIC_TYPE_SUM = 5,
  MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MetricType_IsValid(int value);
extern const uint32_t MetricType_internal_data_[];
constexpr MetricType MetricType_MIN = static_cast<MetricType>(0);
constexpr MetricType MetricType_MAX = static_cast<MetricType>(5);
constexpr int MetricType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MetricType_descriptor();
template <typename T>
const std::string& MetricType_Name(T value) {
  static_assert(std::is_same<T, MetricType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MetricType_Name().");
  return MetricType_Name(static_cast<MetricType>(value));
}
template <>
inline const std::string& MetricType_Name(MetricType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MetricType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MetricType_Parse(absl::string_view name, MetricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetricType>(
      MetricType_descriptor(), name, value);
}
enum AggregationMethod : int {
  AGGREGATION_METHOD_UNDEFINED = 0,
  AGGREGATE_SUM = 1,
  AGGREGATE_AVERAGE = 2,
  AGGREGATE_COUNT = 3,
  AGGREGATE_MAX = 4,
  AGGREGATE_MIN = 5,
  AggregationMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregationMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregationMethod_IsValid(int value);
extern const uint32_t AggregationMethod_internal_data_[];
constexpr AggregationMethod AggregationMethod_MIN = static_cast<AggregationMethod>(0);
constexpr AggregationMethod AggregationMethod_MAX = static_cast<AggregationMethod>(5);
constexpr int AggregationMethod_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
AggregationMethod_descriptor();
template <typename T>
const std::string& AggregationMethod_Name(T value) {
  static_assert(std::is_same<T, AggregationMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationMethod_Name().");
  return AggregationMethod_Name(static_cast<AggregationMethod>(value));
}
template <>
inline const std::string& AggregationMethod_Name(AggregationMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AggregationMethod_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool AggregationMethod_Parse(absl::string_view name, AggregationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AggregationMethod>(
      AggregationMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class DataMetric_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DataMetric_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataMetric_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DataMetric_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DataMetric_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DataMetric_MetadataEntry_DoNotUse*>(
        &_DataMetric_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse*>(
        &_AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsWorkflowConfig_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsWorkflowConfig_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsWorkflowConfig_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsWorkflowConfig_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsWorkflowConfig_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsWorkflowConfig_MetadataEntry_DoNotUse*>(
        &_AnalyticsWorkflowConfig_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsSummary_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsSummary_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsSummary_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsSummary_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsSummary_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsSummary_MetadataEntry_DoNotUse*>(
        &_AnalyticsSummary_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsSummary_ForecastValuesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  AnalyticsSummary_ForecastValuesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsSummary_ForecastValuesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsSummary_ForecastValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsSummary_ForecastValuesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsSummary_ForecastValuesEntry_DoNotUse*>(
        &_AnalyticsSummary_ForecastValuesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsSettings_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsSettings_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsSettings_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsSettings_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsSettings_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsSettings_MetadataEntry_DoNotUse*>(
        &_AnalyticsSettings_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsReport_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsReport_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsReport_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsReport_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsReport_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsReport_MetadataEntry_DoNotUse*>(
        &_AnalyticsReport_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsInsight_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsInsight_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsInsight_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsInsight_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsInsight_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsInsight_MetadataEntry_DoNotUse*>(
        &_AnalyticsInsight_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AnalyticsAlertThreshold_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AnalyticsAlertThreshold_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsAlertThreshold_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnalyticsAlertThreshold_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnalyticsAlertThreshold_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnalyticsAlertThreshold_MetadataEntry_DoNotUse*>(
        &_AnalyticsAlertThreshold_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_analytics_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DataMetric final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.DataMetric) */ {
 public:
  inline DataMetric() : DataMetric(nullptr) {}
  ~DataMetric() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataMetric* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataMetric));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataMetric(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataMetric(const DataMetric& from) : DataMetric(nullptr, from) {}
  inline DataMetric(DataMetric&& from) noexcept
      : DataMetric(nullptr, std::move(from)) {}
  inline DataMetric& operator=(const DataMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMetric& operator=(DataMetric&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMetric* internal_default_instance() {
    return reinterpret_cast<const DataMetric*>(
        &_DataMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DataMetric& a, DataMetric& b) { a.Swap(&b); }
  inline void Swap(DataMetric* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMetric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMetric* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataMetric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataMetric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataMetric& from) { DataMetric::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataMetric* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.DataMetric"; }

 protected:
  explicit DataMetric(::google::protobuf::Arena* arena);
  DataMetric(::google::protobuf::Arena* arena, const DataMetric& from);
  DataMetric(::google::protobuf::Arena* arena, DataMetric&& from) noexcept
      : DataMetric(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 10,
    kMetricIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kUnitFieldNumber = 6,
    kRecordedAtFieldNumber = 7,
    kSourceComponentFieldNumber = 9,
    kMetricTypeFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kValueFieldNumber = 5,
    kForecastedValueFieldNumber = 11,
    kAggregationMethodFieldNumber = 8,
  };
  // map<string, string> metadata = 10;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string metric_id = 1;
  void clear_metric_id() ;
  const std::string& metric_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metric_id(Arg_&& arg, Args_... args);
  std::string* mutable_metric_id();
  PROTOBUF_NODISCARD std::string* release_metric_id();
  void set_allocated_metric_id(std::string* value);

  private:
  const std::string& _internal_metric_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_id(
      const std::string& value);
  std::string* _internal_mutable_metric_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string unit = 6;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* value);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // string recorded_at = 7;
  void clear_recorded_at() ;
  const std::string& recorded_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recorded_at(Arg_&& arg, Args_... args);
  std::string* mutable_recorded_at();
  PROTOBUF_NODISCARD std::string* release_recorded_at();
  void set_allocated_recorded_at(std::string* value);

  private:
  const std::string& _internal_recorded_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recorded_at(
      const std::string& value);
  std::string* _internal_mutable_recorded_at();

  public:
  // string source_component = 9;
  void clear_source_component() ;
  const std::string& source_component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_component(Arg_&& arg, Args_... args);
  std::string* mutable_source_component();
  PROTOBUF_NODISCARD std::string* release_source_component();
  void set_allocated_source_component(std::string* value);

  private:
  const std::string& _internal_source_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_component(
      const std::string& value);
  std::string* _internal_mutable_source_component();

  public:
  // .seigr.analytics.MetricType metric_type = 3;
  void clear_metric_type() ;
  ::seigr::analytics::MetricType metric_type() const;
  void set_metric_type(::seigr::analytics::MetricType value);

  private:
  ::seigr::analytics::MetricType _internal_metric_type() const;
  void _internal_set_metric_type(::seigr::analytics::MetricType value);

  public:
  // .seigr.analytics.MetricCategory category = 4;
  void clear_category() ;
  ::seigr::analytics::MetricCategory category() const;
  void set_category(::seigr::analytics::MetricCategory value);

  private:
  ::seigr::analytics::MetricCategory _internal_category() const;
  void _internal_set_category(::seigr::analytics::MetricCategory value);

  public:
  // double value = 5;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // double forecasted_value = 11;
  void clear_forecasted_value() ;
  double forecasted_value() const;
  void set_forecasted_value(double value);

  private:
  double _internal_forecasted_value() const;
  void _internal_set_forecasted_value(double value);

  public:
  // .seigr.analytics.AggregationMethod aggregation_method = 8;
  void clear_aggregation_method() ;
  ::seigr::analytics::AggregationMethod aggregation_method() const;
  void set_aggregation_method(::seigr::analytics::AggregationMethod value);

  private:
  ::seigr::analytics::AggregationMethod _internal_aggregation_method() const;
  void _internal_set_aggregation_method(::seigr::analytics::AggregationMethod value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.DataMetric)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      95, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataMetric& from_msg);
    ::google::protobuf::internal::MapField<DataMetric_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr metric_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    ::google::protobuf::internal::ArenaStringPtr recorded_at_;
    ::google::protobuf::internal::ArenaStringPtr source_component_;
    int metric_type_;
    int category_;
    double value_;
    double forecasted_value_;
    int aggregation_method_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsWorkflowConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsWorkflowConfig) */ {
 public:
  inline AnalyticsWorkflowConfig() : AnalyticsWorkflowConfig(nullptr) {}
  ~AnalyticsWorkflowConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsWorkflowConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsWorkflowConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsWorkflowConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsWorkflowConfig(const AnalyticsWorkflowConfig& from) : AnalyticsWorkflowConfig(nullptr, from) {}
  inline AnalyticsWorkflowConfig(AnalyticsWorkflowConfig&& from) noexcept
      : AnalyticsWorkflowConfig(nullptr, std::move(from)) {}
  inline AnalyticsWorkflowConfig& operator=(const AnalyticsWorkflowConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsWorkflowConfig& operator=(AnalyticsWorkflowConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsWorkflowConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsWorkflowConfig* internal_default_instance() {
    return reinterpret_cast<const AnalyticsWorkflowConfig*>(
        &_AnalyticsWorkflowConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AnalyticsWorkflowConfig& a, AnalyticsWorkflowConfig& b) { a.Swap(&b); }
  inline void Swap(AnalyticsWorkflowConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsWorkflowConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsWorkflowConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsWorkflowConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsWorkflowConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsWorkflowConfig& from) { AnalyticsWorkflowConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsWorkflowConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsWorkflowConfig"; }

 protected:
  explicit AnalyticsWorkflowConfig(::google::protobuf::Arena* arena);
  AnalyticsWorkflowConfig(::google::protobuf::Arena* arena, const AnalyticsWorkflowConfig& from);
  AnalyticsWorkflowConfig(::google::protobuf::Arena* arena, AnalyticsWorkflowConfig&& from) noexcept
      : AnalyticsWorkflowConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricIdsFieldNumber = 2,
    kMetadataFieldNumber = 8,
    kModelParametersFieldNumber = 9,
    kWorkflowIdFieldNumber = 1,
    kCreatedByFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kModelTypeFieldNumber = 3,
    kEvaluationIntervalSecondsFieldNumber = 4,
    kEnableForecastingFieldNumber = 5,
  };
  // repeated string metric_ids = 2;
  int metric_ids_size() const;
  private:
  int _internal_metric_ids_size() const;

  public:
  void clear_metric_ids() ;
  const std::string& metric_ids(int index) const;
  std::string* mutable_metric_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metric_ids(int index, Arg_&& value, Args_... args);
  std::string* add_metric_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_metric_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& metric_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_metric_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_metric_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_metric_ids();

  public:
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // map<string, string> model_parameters = 9;
  int model_parameters_size() const;
  private:
  int _internal_model_parameters_size() const;

  public:
  void clear_model_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& model_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_model_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_model_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_model_parameters();

  public:
  // string workflow_id = 1;
  void clear_workflow_id() ;
  const std::string& workflow_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workflow_id(Arg_&& arg, Args_... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* value);

  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(
      const std::string& value);
  std::string* _internal_mutable_workflow_id();

  public:
  // string created_by = 6;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 7;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // .seigr.ai_analysis.ModelType model_type = 3;
  void clear_model_type() ;
  ::seigr::ai_analysis::ModelType model_type() const;
  void set_model_type(::seigr::ai_analysis::ModelType value);

  private:
  ::seigr::ai_analysis::ModelType _internal_model_type() const;
  void _internal_set_model_type(::seigr::ai_analysis::ModelType value);

  public:
  // int32 evaluation_interval_seconds = 4;
  void clear_evaluation_interval_seconds() ;
  ::int32_t evaluation_interval_seconds() const;
  void set_evaluation_interval_seconds(::int32_t value);

  private:
  ::int32_t _internal_evaluation_interval_seconds() const;
  void _internal_set_evaluation_interval_seconds(::int32_t value);

  public:
  // bool enable_forecasting = 5;
  void clear_enable_forecasting() ;
  bool enable_forecasting() const;
  void set_enable_forecasting(bool value);

  private:
  bool _internal_enable_forecasting() const;
  void _internal_set_enable_forecasting(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsWorkflowConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 2,
      121, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsWorkflowConfig& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> metric_ids_;
    ::google::protobuf::internal::MapField<AnalyticsWorkflowConfig_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::MapField<AnalyticsWorkflowConfig_ModelParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        model_parameters_;
    ::google::protobuf::internal::ArenaStringPtr workflow_id_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    int model_type_;
    ::int32_t evaluation_interval_seconds_;
    bool enable_forecasting_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsSummary) */ {
 public:
  inline AnalyticsSummary() : AnalyticsSummary(nullptr) {}
  ~AnalyticsSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsSummary* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsSummary(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsSummary(const AnalyticsSummary& from) : AnalyticsSummary(nullptr, from) {}
  inline AnalyticsSummary(AnalyticsSummary&& from) noexcept
      : AnalyticsSummary(nullptr, std::move(from)) {}
  inline AnalyticsSummary& operator=(const AnalyticsSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsSummary& operator=(AnalyticsSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsSummary* internal_default_instance() {
    return reinterpret_cast<const AnalyticsSummary*>(
        &_AnalyticsSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(AnalyticsSummary& a, AnalyticsSummary& b) { a.Swap(&b); }
  inline void Swap(AnalyticsSummary* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsSummary* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsSummary& from) { AnalyticsSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsSummary* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsSummary"; }

 protected:
  explicit AnalyticsSummary(::google::protobuf::Arena* arena);
  AnalyticsSummary(::google::protobuf::Arena* arena, const AnalyticsSummary& from);
  AnalyticsSummary(::google::protobuf::Arena* arena, AnalyticsSummary&& from) noexcept
      : AnalyticsSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kForecastValuesFieldNumber = 7,
    kMetadataFieldNumber = 10,
    kSummaryIdFieldNumber = 1,
    kTrendFieldNumber = 8,
    kPeriodCoveredFieldNumber = 9,
    kAverageValueFieldNumber = 3,
    kMaxValueFieldNumber = 4,
    kMinValueFieldNumber = 5,
    kStandardDeviationFieldNumber = 6,
    kCategoryFieldNumber = 2,
  };
  // map<string, double> forecast_values = 7;
  int forecast_values_size() const;
  private:
  int _internal_forecast_values_size() const;

  public:
  void clear_forecast_values() ;
  const ::google::protobuf::Map<std::string, double>& forecast_values() const;
  ::google::protobuf::Map<std::string, double>* mutable_forecast_values();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_forecast_values() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_forecast_values();

  public:
  // map<string, string> metadata = 10;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string summary_id = 1;
  void clear_summary_id() ;
  const std::string& summary_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary_id(Arg_&& arg, Args_... args);
  std::string* mutable_summary_id();
  PROTOBUF_NODISCARD std::string* release_summary_id();
  void set_allocated_summary_id(std::string* value);

  private:
  const std::string& _internal_summary_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary_id(
      const std::string& value);
  std::string* _internal_mutable_summary_id();

  public:
  // string trend = 8;
  void clear_trend() ;
  const std::string& trend() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trend(Arg_&& arg, Args_... args);
  std::string* mutable_trend();
  PROTOBUF_NODISCARD std::string* release_trend();
  void set_allocated_trend(std::string* value);

  private:
  const std::string& _internal_trend() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trend(
      const std::string& value);
  std::string* _internal_mutable_trend();

  public:
  // string period_covered = 9;
  void clear_period_covered() ;
  const std::string& period_covered() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_period_covered(Arg_&& arg, Args_... args);
  std::string* mutable_period_covered();
  PROTOBUF_NODISCARD std::string* release_period_covered();
  void set_allocated_period_covered(std::string* value);

  private:
  const std::string& _internal_period_covered() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_period_covered(
      const std::string& value);
  std::string* _internal_mutable_period_covered();

  public:
  // double average_value = 3;
  void clear_average_value() ;
  double average_value() const;
  void set_average_value(double value);

  private:
  double _internal_average_value() const;
  void _internal_set_average_value(double value);

  public:
  // double max_value = 4;
  void clear_max_value() ;
  double max_value() const;
  void set_max_value(double value);

  private:
  double _internal_max_value() const;
  void _internal_set_max_value(double value);

  public:
  // double min_value = 5;
  void clear_min_value() ;
  double min_value() const;
  void set_min_value(double value);

  private:
  double _internal_min_value() const;
  void _internal_set_min_value(double value);

  public:
  // double standard_deviation = 6;
  void clear_standard_deviation() ;
  double standard_deviation() const;
  void set_standard_deviation(double value);

  private:
  double _internal_standard_deviation() const;
  void _internal_set_standard_deviation(double value);

  public:
  // .seigr.analytics.MetricCategory category = 2;
  void clear_category() ;
  ::seigr::analytics::MetricCategory category() const;
  void set_category(::seigr::analytics::MetricCategory value);

  private:
  ::seigr::analytics::MetricCategory _internal_category() const;
  void _internal_set_category(::seigr::analytics::MetricCategory value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsSummary& from_msg);
    ::google::protobuf::internal::MapField<AnalyticsSummary_ForecastValuesEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        forecast_values_;
    ::google::protobuf::internal::MapField<AnalyticsSummary_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr summary_id_;
    ::google::protobuf::internal::ArenaStringPtr trend_;
    ::google::protobuf::internal::ArenaStringPtr period_covered_;
    double average_value_;
    double max_value_;
    double min_value_;
    double standard_deviation_;
    int category_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsInsight final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsInsight) */ {
 public:
  inline AnalyticsInsight() : AnalyticsInsight(nullptr) {}
  ~AnalyticsInsight() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsInsight* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsInsight));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsInsight(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsInsight(const AnalyticsInsight& from) : AnalyticsInsight(nullptr, from) {}
  inline AnalyticsInsight(AnalyticsInsight&& from) noexcept
      : AnalyticsInsight(nullptr, std::move(from)) {}
  inline AnalyticsInsight& operator=(const AnalyticsInsight& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsInsight& operator=(AnalyticsInsight&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsInsight& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsInsight* internal_default_instance() {
    return reinterpret_cast<const AnalyticsInsight*>(
        &_AnalyticsInsight_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AnalyticsInsight& a, AnalyticsInsight& b) { a.Swap(&b); }
  inline void Swap(AnalyticsInsight* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsInsight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsInsight* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsInsight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsInsight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsInsight& from) { AnalyticsInsight::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsInsight* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsInsight"; }

 protected:
  explicit AnalyticsInsight(::google::protobuf::Arena* arena);
  AnalyticsInsight(::google::protobuf::Arena* arena, const AnalyticsInsight& from);
  AnalyticsInsight(::google::protobuf::Arena* arena, AnalyticsInsight&& from) noexcept
      : AnalyticsInsight(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kInsightIdFieldNumber = 1,
    kMetricIdFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kContextFieldNumber = 10,
    kInsightValueFieldNumber = 4,
    kEscalationLevelFieldNumber = 6,
    kIsAnomalyFieldNumber = 8,
    kIsRecurringFieldNumber = 9,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string insight_id = 1;
  void clear_insight_id() ;
  const std::string& insight_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_insight_id(Arg_&& arg, Args_... args);
  std::string* mutable_insight_id();
  PROTOBUF_NODISCARD std::string* release_insight_id();
  void set_allocated_insight_id(std::string* value);

  private:
  const std::string& _internal_insight_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insight_id(
      const std::string& value);
  std::string* _internal_mutable_insight_id();

  public:
  // string metric_id = 2;
  void clear_metric_id() ;
  const std::string& metric_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metric_id(Arg_&& arg, Args_... args);
  std::string* mutable_metric_id();
  PROTOBUF_NODISCARD std::string* release_metric_id();
  void set_allocated_metric_id(std::string* value);

  private:
  const std::string& _internal_metric_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_id(
      const std::string& value);
  std::string* _internal_mutable_metric_id();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string context = 10;
  void clear_context() ;
  const std::string& context() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* value);

  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(
      const std::string& value);
  std::string* _internal_mutable_context();

  public:
  // double insight_value = 4;
  void clear_insight_value() ;
  double insight_value() const;
  void set_insight_value(double value);

  private:
  double _internal_insight_value() const;
  void _internal_set_insight_value(double value);

  public:
  // .seigr.event.EscalationLevel escalation_level = 6;
  void clear_escalation_level() ;
  ::seigr::event::EscalationLevel escalation_level() const;
  void set_escalation_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_escalation_level() const;
  void _internal_set_escalation_level(::seigr::event::EscalationLevel value);

  public:
  // bool is_anomaly = 8;
  void clear_is_anomaly() ;
  bool is_anomaly() const;
  void set_is_anomaly(bool value);

  private:
  bool _internal_is_anomaly() const;
  void _internal_set_is_anomaly(bool value);

  public:
  // bool is_recurring = 9;
  void clear_is_recurring() ;
  bool is_recurring() const;
  void set_is_recurring(bool value);

  private:
  bool _internal_is_recurring() const;
  void _internal_set_is_recurring(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsInsight)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsInsight& from_msg);
    ::google::protobuf::internal::MapField<AnalyticsInsight_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr insight_id_;
    ::google::protobuf::internal::ArenaStringPtr metric_id_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    double insight_value_;
    int escalation_level_;
    bool is_anomaly_;
    bool is_recurring_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsAlertThreshold final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsAlertThreshold) */ {
 public:
  inline AnalyticsAlertThreshold() : AnalyticsAlertThreshold(nullptr) {}
  ~AnalyticsAlertThreshold() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsAlertThreshold* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsAlertThreshold));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsAlertThreshold(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsAlertThreshold(const AnalyticsAlertThreshold& from) : AnalyticsAlertThreshold(nullptr, from) {}
  inline AnalyticsAlertThreshold(AnalyticsAlertThreshold&& from) noexcept
      : AnalyticsAlertThreshold(nullptr, std::move(from)) {}
  inline AnalyticsAlertThreshold& operator=(const AnalyticsAlertThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsAlertThreshold& operator=(AnalyticsAlertThreshold&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsAlertThreshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsAlertThreshold* internal_default_instance() {
    return reinterpret_cast<const AnalyticsAlertThreshold*>(
        &_AnalyticsAlertThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AnalyticsAlertThreshold& a, AnalyticsAlertThreshold& b) { a.Swap(&b); }
  inline void Swap(AnalyticsAlertThreshold* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsAlertThreshold* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsAlertThreshold* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsAlertThreshold>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsAlertThreshold& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsAlertThreshold& from) { AnalyticsAlertThreshold::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsAlertThreshold* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsAlertThreshold"; }

 protected:
  explicit AnalyticsAlertThreshold(::google::protobuf::Arena* arena);
  AnalyticsAlertThreshold(::google::protobuf::Arena* arena, const AnalyticsAlertThreshold& from);
  AnalyticsAlertThreshold(::google::protobuf::Arena* arena, AnalyticsAlertThreshold&& from) noexcept
      : AnalyticsAlertThreshold(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotificationChannelsFieldNumber = 7,
    kMetadataFieldNumber = 8,
    kThresholdIdFieldNumber = 1,
    kConditionFieldNumber = 6,
    kActionOnBreachFieldNumber = 9,
    kThresholdValueFieldNumber = 3,
    kCategoryFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kEscalationLevelFieldNumber = 5,
    kRestrictToBusinessHoursFieldNumber = 10,
  };
  // repeated string notification_channels = 7;
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;

  public:
  void clear_notification_channels() ;
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notification_channels(int index, Arg_&& value, Args_... args);
  std::string* add_notification_channels();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_notification_channels(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& notification_channels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_notification_channels();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_notification_channels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_notification_channels();

  public:
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string threshold_id = 1;
  void clear_threshold_id() ;
  const std::string& threshold_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threshold_id(Arg_&& arg, Args_... args);
  std::string* mutable_threshold_id();
  PROTOBUF_NODISCARD std::string* release_threshold_id();
  void set_allocated_threshold_id(std::string* value);

  private:
  const std::string& _internal_threshold_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threshold_id(
      const std::string& value);
  std::string* _internal_mutable_threshold_id();

  public:
  // string condition = 6;
  void clear_condition() ;
  const std::string& condition() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_condition(Arg_&& arg, Args_... args);
  std::string* mutable_condition();
  PROTOBUF_NODISCARD std::string* release_condition();
  void set_allocated_condition(std::string* value);

  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(
      const std::string& value);
  std::string* _internal_mutable_condition();

  public:
  // string action_on_breach = 9;
  void clear_action_on_breach() ;
  const std::string& action_on_breach() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_on_breach(Arg_&& arg, Args_... args);
  std::string* mutable_action_on_breach();
  PROTOBUF_NODISCARD std::string* release_action_on_breach();
  void set_allocated_action_on_breach(std::string* value);

  private:
  const std::string& _internal_action_on_breach() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_on_breach(
      const std::string& value);
  std::string* _internal_mutable_action_on_breach();

  public:
  // double threshold_value = 3;
  void clear_threshold_value() ;
  double threshold_value() const;
  void set_threshold_value(double value);

  private:
  double _internal_threshold_value() const;
  void _internal_set_threshold_value(double value);

  public:
  // .seigr.analytics.MetricCategory category = 2;
  void clear_category() ;
  ::seigr::analytics::MetricCategory category() const;
  void set_category(::seigr::analytics::MetricCategory value);

  private:
  ::seigr::analytics::MetricCategory _internal_category() const;
  void _internal_set_category(::seigr::analytics::MetricCategory value);

  public:
  // .seigr.alerting.AlertSeverity severity = 4;
  void clear_severity() ;
  ::seigr::alerting::AlertSeverity severity() const;
  void set_severity(::seigr::alerting::AlertSeverity value);

  private:
  ::seigr::alerting::AlertSeverity _internal_severity() const;
  void _internal_set_severity(::seigr::alerting::AlertSeverity value);

  public:
  // .seigr.event.EscalationLevel escalation_level = 5;
  void clear_escalation_level() ;
  ::seigr::event::EscalationLevel escalation_level() const;
  void set_escalation_level(::seigr::event::EscalationLevel value);

  private:
  ::seigr::event::EscalationLevel _internal_escalation_level() const;
  void _internal_set_escalation_level(::seigr::event::EscalationLevel value);

  public:
  // bool restrict_to_business_hours = 10;
  void clear_restrict_to_business_hours() ;
  bool restrict_to_business_hours() const;
  void set_restrict_to_business_hours(bool value);

  private:
  bool _internal_restrict_to_business_hours() const;
  void _internal_set_restrict_to_business_hours(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsAlertThreshold)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      122, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsAlertThreshold& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> notification_channels_;
    ::google::protobuf::internal::MapField<AnalyticsAlertThreshold_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr threshold_id_;
    ::google::protobuf::internal::ArenaStringPtr condition_;
    ::google::protobuf::internal::ArenaStringPtr action_on_breach_;
    double threshold_value_;
    int category_;
    int severity_;
    int escalation_level_;
    bool restrict_to_business_hours_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsSettings) */ {
 public:
  inline AnalyticsSettings() : AnalyticsSettings(nullptr) {}
  ~AnalyticsSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsSettings(const AnalyticsSettings& from) : AnalyticsSettings(nullptr, from) {}
  inline AnalyticsSettings(AnalyticsSettings&& from) noexcept
      : AnalyticsSettings(nullptr, std::move(from)) {}
  inline AnalyticsSettings& operator=(const AnalyticsSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsSettings& operator=(AnalyticsSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsSettings* internal_default_instance() {
    return reinterpret_cast<const AnalyticsSettings*>(
        &_AnalyticsSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(AnalyticsSettings& a, AnalyticsSettings& b) { a.Swap(&b); }
  inline void Swap(AnalyticsSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsSettings& from) { AnalyticsSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsSettings"; }

 protected:
  explicit AnalyticsSettings(::google::protobuf::Arena* arena);
  AnalyticsSettings(::google::protobuf::Arena* arena, const AnalyticsSettings& from);
  AnalyticsSettings(::google::protobuf::Arena* arena, AnalyticsSettings&& from) noexcept
      : AnalyticsSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThresholdsFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kAggregationIntervalSecondsFieldNumber = 1,
    kDataRetentionDaysFieldNumber = 2,
    kRealTimeAlertingEnabledFieldNumber = 3,
    kAlertEvaluationIntervalFieldNumber = 4,
  };
  // repeated .seigr.analytics.AnalyticsAlertThreshold thresholds = 5;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;

  public:
  void clear_thresholds() ;
  ::seigr::analytics::AnalyticsAlertThreshold* mutable_thresholds(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>* mutable_thresholds();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>& _internal_thresholds() const;
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>* _internal_mutable_thresholds();
  public:
  const ::seigr::analytics::AnalyticsAlertThreshold& thresholds(int index) const;
  ::seigr::analytics::AnalyticsAlertThreshold* add_thresholds();
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>& thresholds() const;
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // int32 aggregation_interval_seconds = 1;
  void clear_aggregation_interval_seconds() ;
  ::int32_t aggregation_interval_seconds() const;
  void set_aggregation_interval_seconds(::int32_t value);

  private:
  ::int32_t _internal_aggregation_interval_seconds() const;
  void _internal_set_aggregation_interval_seconds(::int32_t value);

  public:
  // int32 data_retention_days = 2;
  void clear_data_retention_days() ;
  ::int32_t data_retention_days() const;
  void set_data_retention_days(::int32_t value);

  private:
  ::int32_t _internal_data_retention_days() const;
  void _internal_set_data_retention_days(::int32_t value);

  public:
  // bool real_time_alerting_enabled = 3;
  void clear_real_time_alerting_enabled() ;
  bool real_time_alerting_enabled() const;
  void set_real_time_alerting_enabled(bool value);

  private:
  bool _internal_real_time_alerting_enabled() const;
  void _internal_set_real_time_alerting_enabled(bool value);

  public:
  // int32 alert_evaluation_interval = 4;
  void clear_alert_evaluation_interval() ;
  ::int32_t alert_evaluation_interval() const;
  void set_alert_evaluation_interval(::int32_t value);

  private:
  ::int32_t _internal_alert_evaluation_interval() const;
  void _internal_set_alert_evaluation_interval(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsSettings& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::analytics::AnalyticsAlertThreshold > thresholds_;
    ::google::protobuf::internal::MapField<AnalyticsSettings_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::int32_t aggregation_interval_seconds_;
    ::int32_t data_retention_days_;
    bool real_time_alerting_enabled_;
    ::int32_t alert_evaluation_interval_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};
// -------------------------------------------------------------------

class AnalyticsReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.analytics.AnalyticsReport) */ {
 public:
  inline AnalyticsReport() : AnalyticsReport(nullptr) {}
  ~AnalyticsReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AnalyticsReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AnalyticsReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnalyticsReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnalyticsReport(const AnalyticsReport& from) : AnalyticsReport(nullptr, from) {}
  inline AnalyticsReport(AnalyticsReport&& from) noexcept
      : AnalyticsReport(nullptr, std::move(from)) {}
  inline AnalyticsReport& operator=(const AnalyticsReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalyticsReport& operator=(AnalyticsReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalyticsReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalyticsReport* internal_default_instance() {
    return reinterpret_cast<const AnalyticsReport*>(
        &_AnalyticsReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(AnalyticsReport& a, AnalyticsReport& b) { a.Swap(&b); }
  inline void Swap(AnalyticsReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalyticsReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalyticsReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AnalyticsReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalyticsReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnalyticsReport& from) { AnalyticsReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AnalyticsReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.analytics.AnalyticsReport"; }

 protected:
  explicit AnalyticsReport(::google::protobuf::Arena* arena);
  AnalyticsReport(::google::protobuf::Arena* arena, const AnalyticsReport& from);
  AnalyticsReport(::google::protobuf::Arena* arena, AnalyticsReport&& from) noexcept
      : AnalyticsReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricsFieldNumber = 3,
    kInsightsFieldNumber = 4,
    kMetadataFieldNumber = 7,
    kComparisonReportIdsFieldNumber = 8,
    kReportIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kGeneratedByFieldNumber = 5,
    kTimestampFieldNumber = 6,
  };
  // repeated .seigr.analytics.DataMetric metrics = 3;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  ::seigr::analytics::DataMetric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>* mutable_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>& _internal_metrics() const;
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>* _internal_mutable_metrics();
  public:
  const ::seigr::analytics::DataMetric& metrics(int index) const;
  ::seigr::analytics::DataMetric* add_metrics();
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>& metrics() const;
  // repeated .seigr.analytics.AnalyticsInsight insights = 4;
  int insights_size() const;
  private:
  int _internal_insights_size() const;

  public:
  void clear_insights() ;
  ::seigr::analytics::AnalyticsInsight* mutable_insights(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>* mutable_insights();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>& _internal_insights() const;
  ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>* _internal_mutable_insights();
  public:
  const ::seigr::analytics::AnalyticsInsight& insights(int index) const;
  ::seigr::analytics::AnalyticsInsight* add_insights();
  const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>& insights() const;
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string comparison_report_ids = 8;
  int comparison_report_ids_size() const;
  private:
  int _internal_comparison_report_ids_size() const;

  public:
  void clear_comparison_report_ids() ;
  const std::string& comparison_report_ids(int index) const;
  std::string* mutable_comparison_report_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comparison_report_ids(int index, Arg_&& value, Args_... args);
  std::string* add_comparison_report_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_comparison_report_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& comparison_report_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_comparison_report_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_comparison_report_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_comparison_report_ids();

  public:
  // string report_id = 1;
  void clear_report_id() ;
  const std::string& report_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_report_id(Arg_&& arg, Args_... args);
  std::string* mutable_report_id();
  PROTOBUF_NODISCARD std::string* release_report_id();
  void set_allocated_report_id(std::string* value);

  private:
  const std::string& _internal_report_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_id(
      const std::string& value);
  std::string* _internal_mutable_report_id();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string generated_by = 5;
  void clear_generated_by() ;
  const std::string& generated_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generated_by(Arg_&& arg, Args_... args);
  std::string* mutable_generated_by();
  PROTOBUF_NODISCARD std::string* release_generated_by();
  void set_allocated_generated_by(std::string* value);

  private:
  const std::string& _internal_generated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generated_by(
      const std::string& value);
  std::string* _internal_mutable_generated_by();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.analytics.AnalyticsReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      112, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AnalyticsReport& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::analytics::DataMetric > metrics_;
    ::google::protobuf::RepeatedPtrField< ::seigr::analytics::AnalyticsInsight > insights_;
    ::google::protobuf::internal::MapField<AnalyticsReport_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> comparison_report_ids_;
    ::google::protobuf::internal::ArenaStringPtr report_id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr generated_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_analytics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsWorkflowConfig

// string workflow_id = 1;
inline void AnalyticsWorkflowConfig::clear_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.ClearToEmpty();
}
inline const std::string& AnalyticsWorkflowConfig::workflow_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.workflow_id)
  return _internal_workflow_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsWorkflowConfig::set_workflow_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.workflow_id)
}
inline std::string* AnalyticsWorkflowConfig::mutable_workflow_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsWorkflowConfig.workflow_id)
  return _s;
}
inline const std::string& AnalyticsWorkflowConfig::_internal_workflow_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.workflow_id_.Get();
}
inline void AnalyticsWorkflowConfig::_internal_set_workflow_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.Set(value, GetArena());
}
inline std::string* AnalyticsWorkflowConfig::_internal_mutable_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.workflow_id_.Mutable( GetArena());
}
inline std::string* AnalyticsWorkflowConfig::release_workflow_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsWorkflowConfig.workflow_id)
  return _impl_.workflow_id_.Release();
}
inline void AnalyticsWorkflowConfig::set_allocated_workflow_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workflow_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.workflow_id_.IsDefault()) {
    _impl_.workflow_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsWorkflowConfig.workflow_id)
}

// repeated string metric_ids = 2;
inline int AnalyticsWorkflowConfig::_internal_metric_ids_size() const {
  return _internal_metric_ids().size();
}
inline int AnalyticsWorkflowConfig::metric_ids_size() const {
  return _internal_metric_ids_size();
}
inline void AnalyticsWorkflowConfig::clear_metric_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_ids_.Clear();
}
inline std::string* AnalyticsWorkflowConfig::add_metric_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_metric_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
  return _s;
}
inline const std::string& AnalyticsWorkflowConfig::metric_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
  return _internal_metric_ids().Get(index);
}
inline std::string* AnalyticsWorkflowConfig::mutable_metric_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
  return _internal_mutable_metric_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AnalyticsWorkflowConfig::set_metric_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_metric_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
}
template <typename Arg_, typename... Args_>
inline void AnalyticsWorkflowConfig::add_metric_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_metric_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsWorkflowConfig::metric_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
  return _internal_metric_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsWorkflowConfig::mutable_metric_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsWorkflowConfig.metric_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metric_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsWorkflowConfig::_internal_metric_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsWorkflowConfig::_internal_mutable_metric_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metric_ids_;
}

// .seigr.ai_analysis.ModelType model_type = 3;
inline void AnalyticsWorkflowConfig::clear_model_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_type_ = 0;
}
inline ::seigr::ai_analysis::ModelType AnalyticsWorkflowConfig::model_type() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.model_type)
  return _internal_model_type();
}
inline void AnalyticsWorkflowConfig::set_model_type(::seigr::ai_analysis::ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.model_type)
}
inline ::seigr::ai_analysis::ModelType AnalyticsWorkflowConfig::_internal_model_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::ai_analysis::ModelType>(_impl_.model_type_);
}
inline void AnalyticsWorkflowConfig::_internal_set_model_type(::seigr::ai_analysis::ModelType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_type_ = value;
}

// int32 evaluation_interval_seconds = 4;
inline void AnalyticsWorkflowConfig::clear_evaluation_interval_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluation_interval_seconds_ = 0;
}
inline ::int32_t AnalyticsWorkflowConfig::evaluation_interval_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.evaluation_interval_seconds)
  return _internal_evaluation_interval_seconds();
}
inline void AnalyticsWorkflowConfig::set_evaluation_interval_seconds(::int32_t value) {
  _internal_set_evaluation_interval_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.evaluation_interval_seconds)
}
inline ::int32_t AnalyticsWorkflowConfig::_internal_evaluation_interval_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evaluation_interval_seconds_;
}
inline void AnalyticsWorkflowConfig::_internal_set_evaluation_interval_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evaluation_interval_seconds_ = value;
}

// bool enable_forecasting = 5;
inline void AnalyticsWorkflowConfig::clear_enable_forecasting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_forecasting_ = false;
}
inline bool AnalyticsWorkflowConfig::enable_forecasting() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.enable_forecasting)
  return _internal_enable_forecasting();
}
inline void AnalyticsWorkflowConfig::set_enable_forecasting(bool value) {
  _internal_set_enable_forecasting(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.enable_forecasting)
}
inline bool AnalyticsWorkflowConfig::_internal_enable_forecasting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_forecasting_;
}
inline void AnalyticsWorkflowConfig::_internal_set_enable_forecasting(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_forecasting_ = value;
}

// string created_by = 6;
inline void AnalyticsWorkflowConfig::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& AnalyticsWorkflowConfig::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsWorkflowConfig::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.created_by)
}
inline std::string* AnalyticsWorkflowConfig::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsWorkflowConfig.created_by)
  return _s;
}
inline const std::string& AnalyticsWorkflowConfig::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void AnalyticsWorkflowConfig::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* AnalyticsWorkflowConfig::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* AnalyticsWorkflowConfig::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsWorkflowConfig.created_by)
  return _impl_.created_by_.Release();
}
inline void AnalyticsWorkflowConfig::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsWorkflowConfig.created_by)
}

// string created_at = 7;
inline void AnalyticsWorkflowConfig::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& AnalyticsWorkflowConfig::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsWorkflowConfig.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsWorkflowConfig::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsWorkflowConfig.created_at)
}
inline std::string* AnalyticsWorkflowConfig::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsWorkflowConfig.created_at)
  return _s;
}
inline const std::string& AnalyticsWorkflowConfig::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void AnalyticsWorkflowConfig::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* AnalyticsWorkflowConfig::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* AnalyticsWorkflowConfig::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsWorkflowConfig.created_at)
  return _impl_.created_at_.Release();
}
inline void AnalyticsWorkflowConfig::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsWorkflowConfig.created_at)
}

// map<string, string> metadata = 8;
inline int AnalyticsWorkflowConfig::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsWorkflowConfig::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsWorkflowConfig::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsWorkflowConfig::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsWorkflowConfig::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsWorkflowConfig.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsWorkflowConfig::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsWorkflowConfig::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsWorkflowConfig.metadata)
  return _internal_mutable_metadata();
}

// map<string, string> model_parameters = 9;
inline int AnalyticsWorkflowConfig::_internal_model_parameters_size() const {
  return _internal_model_parameters().size();
}
inline int AnalyticsWorkflowConfig::model_parameters_size() const {
  return _internal_model_parameters_size();
}
inline void AnalyticsWorkflowConfig::clear_model_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsWorkflowConfig::_internal_model_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsWorkflowConfig::model_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsWorkflowConfig.model_parameters)
  return _internal_model_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsWorkflowConfig::_internal_mutable_model_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsWorkflowConfig::mutable_model_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsWorkflowConfig.model_parameters)
  return _internal_mutable_model_parameters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsInsight

// string insight_id = 1;
inline void AnalyticsInsight::clear_insight_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_id_.ClearToEmpty();
}
inline const std::string& AnalyticsInsight::insight_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.insight_id)
  return _internal_insight_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsInsight::set_insight_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.insight_id)
}
inline std::string* AnalyticsInsight::mutable_insight_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_insight_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsInsight.insight_id)
  return _s;
}
inline const std::string& AnalyticsInsight::_internal_insight_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.insight_id_.Get();
}
inline void AnalyticsInsight::_internal_set_insight_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_id_.Set(value, GetArena());
}
inline std::string* AnalyticsInsight::_internal_mutable_insight_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.insight_id_.Mutable( GetArena());
}
inline std::string* AnalyticsInsight::release_insight_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsInsight.insight_id)
  return _impl_.insight_id_.Release();
}
inline void AnalyticsInsight::set_allocated_insight_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.insight_id_.IsDefault()) {
    _impl_.insight_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsInsight.insight_id)
}

// string metric_id = 2;
inline void AnalyticsInsight::clear_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.ClearToEmpty();
}
inline const std::string& AnalyticsInsight::metric_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.metric_id)
  return _internal_metric_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsInsight::set_metric_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.metric_id)
}
inline std::string* AnalyticsInsight::mutable_metric_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metric_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsInsight.metric_id)
  return _s;
}
inline const std::string& AnalyticsInsight::_internal_metric_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_id_.Get();
}
inline void AnalyticsInsight::_internal_set_metric_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.Set(value, GetArena());
}
inline std::string* AnalyticsInsight::_internal_mutable_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metric_id_.Mutable( GetArena());
}
inline std::string* AnalyticsInsight::release_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsInsight.metric_id)
  return _impl_.metric_id_.Release();
}
inline void AnalyticsInsight::set_allocated_metric_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metric_id_.IsDefault()) {
    _impl_.metric_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsInsight.metric_id)
}

// string description = 3;
inline void AnalyticsInsight::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AnalyticsInsight::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsInsight::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.description)
}
inline std::string* AnalyticsInsight::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsInsight.description)
  return _s;
}
inline const std::string& AnalyticsInsight::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void AnalyticsInsight::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* AnalyticsInsight::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* AnalyticsInsight::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsInsight.description)
  return _impl_.description_.Release();
}
inline void AnalyticsInsight::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsInsight.description)
}

// double insight_value = 4;
inline void AnalyticsInsight::clear_insight_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_value_ = 0;
}
inline double AnalyticsInsight::insight_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.insight_value)
  return _internal_insight_value();
}
inline void AnalyticsInsight::set_insight_value(double value) {
  _internal_set_insight_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.insight_value)
}
inline double AnalyticsInsight::_internal_insight_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.insight_value_;
}
inline void AnalyticsInsight::_internal_set_insight_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insight_value_ = value;
}

// string timestamp = 5;
inline void AnalyticsInsight::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& AnalyticsInsight::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsInsight::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.timestamp)
}
inline std::string* AnalyticsInsight::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsInsight.timestamp)
  return _s;
}
inline const std::string& AnalyticsInsight::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void AnalyticsInsight::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* AnalyticsInsight::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* AnalyticsInsight::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsInsight.timestamp)
  return _impl_.timestamp_.Release();
}
inline void AnalyticsInsight::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsInsight.timestamp)
}

// .seigr.event.EscalationLevel escalation_level = 6;
inline void AnalyticsInsight::clear_escalation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = 0;
}
inline ::seigr::event::EscalationLevel AnalyticsInsight::escalation_level() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.escalation_level)
  return _internal_escalation_level();
}
inline void AnalyticsInsight::set_escalation_level(::seigr::event::EscalationLevel value) {
  _internal_set_escalation_level(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.escalation_level)
}
inline ::seigr::event::EscalationLevel AnalyticsInsight::_internal_escalation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.escalation_level_);
}
inline void AnalyticsInsight::_internal_set_escalation_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = value;
}

// map<string, string> metadata = 7;
inline int AnalyticsInsight::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsInsight::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsInsight::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsInsight::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsInsight::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsInsight.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsInsight::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsInsight::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsInsight.metadata)
  return _internal_mutable_metadata();
}

// bool is_anomaly = 8;
inline void AnalyticsInsight::clear_is_anomaly() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_anomaly_ = false;
}
inline bool AnalyticsInsight::is_anomaly() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.is_anomaly)
  return _internal_is_anomaly();
}
inline void AnalyticsInsight::set_is_anomaly(bool value) {
  _internal_set_is_anomaly(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.is_anomaly)
}
inline bool AnalyticsInsight::_internal_is_anomaly() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_anomaly_;
}
inline void AnalyticsInsight::_internal_set_is_anomaly(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_anomaly_ = value;
}

// bool is_recurring = 9;
inline void AnalyticsInsight::clear_is_recurring() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_recurring_ = false;
}
inline bool AnalyticsInsight::is_recurring() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.is_recurring)
  return _internal_is_recurring();
}
inline void AnalyticsInsight::set_is_recurring(bool value) {
  _internal_set_is_recurring(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.is_recurring)
}
inline bool AnalyticsInsight::_internal_is_recurring() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_recurring_;
}
inline void AnalyticsInsight::_internal_set_is_recurring(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_recurring_ = value;
}

// string context = 10;
inline void AnalyticsInsight::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
}
inline const std::string& AnalyticsInsight::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsInsight.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsInsight::set_context(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsInsight.context)
}
inline std::string* AnalyticsInsight::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsInsight.context)
  return _s;
}
inline const std::string& AnalyticsInsight::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void AnalyticsInsight::_internal_set_context(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(value, GetArena());
}
inline std::string* AnalyticsInsight::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_.Mutable( GetArena());
}
inline std::string* AnalyticsInsight::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsInsight.context)
  return _impl_.context_.Release();
}
inline void AnalyticsInsight::set_allocated_context(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsInsight.context)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataMetric

// string metric_id = 1;
inline void DataMetric::clear_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.ClearToEmpty();
}
inline const std::string& DataMetric::metric_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.metric_id)
  return _internal_metric_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataMetric::set_metric_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.metric_id)
}
inline std::string* DataMetric::mutable_metric_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metric_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.DataMetric.metric_id)
  return _s;
}
inline const std::string& DataMetric::_internal_metric_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metric_id_.Get();
}
inline void DataMetric::_internal_set_metric_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.Set(value, GetArena());
}
inline std::string* DataMetric::_internal_mutable_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metric_id_.Mutable( GetArena());
}
inline std::string* DataMetric::release_metric_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.DataMetric.metric_id)
  return _impl_.metric_id_.Release();
}
inline void DataMetric::set_allocated_metric_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metric_id_.IsDefault()) {
    _impl_.metric_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.DataMetric.metric_id)
}

// string name = 2;
inline void DataMetric::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataMetric::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataMetric::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.name)
}
inline std::string* DataMetric::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.DataMetric.name)
  return _s;
}
inline const std::string& DataMetric::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DataMetric::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DataMetric::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DataMetric::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.DataMetric.name)
  return _impl_.name_.Release();
}
inline void DataMetric::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.DataMetric.name)
}

// .seigr.analytics.MetricType metric_type = 3;
inline void DataMetric::clear_metric_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_type_ = 0;
}
inline ::seigr::analytics::MetricType DataMetric::metric_type() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.metric_type)
  return _internal_metric_type();
}
inline void DataMetric::set_metric_type(::seigr::analytics::MetricType value) {
  _internal_set_metric_type(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.metric_type)
}
inline ::seigr::analytics::MetricType DataMetric::_internal_metric_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::analytics::MetricType>(_impl_.metric_type_);
}
inline void DataMetric::_internal_set_metric_type(::seigr::analytics::MetricType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metric_type_ = value;
}

// .seigr.analytics.MetricCategory category = 4;
inline void DataMetric::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::seigr::analytics::MetricCategory DataMetric::category() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.category)
  return _internal_category();
}
inline void DataMetric::set_category(::seigr::analytics::MetricCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.category)
}
inline ::seigr::analytics::MetricCategory DataMetric::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::analytics::MetricCategory>(_impl_.category_);
}
inline void DataMetric::_internal_set_category(::seigr::analytics::MetricCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// double value = 5;
inline void DataMetric::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double DataMetric::value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.value)
  return _internal_value();
}
inline void DataMetric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.value)
}
inline double DataMetric::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void DataMetric::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// string unit = 6;
inline void DataMetric::clear_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& DataMetric::unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataMetric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.unit)
}
inline std::string* DataMetric::mutable_unit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.DataMetric.unit)
  return _s;
}
inline const std::string& DataMetric::_internal_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unit_.Get();
}
inline void DataMetric::_internal_set_unit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.Set(value, GetArena());
}
inline std::string* DataMetric::_internal_mutable_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.unit_.Mutable( GetArena());
}
inline std::string* DataMetric::release_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.DataMetric.unit)
  return _impl_.unit_.Release();
}
inline void DataMetric::set_allocated_unit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.unit_.IsDefault()) {
    _impl_.unit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.DataMetric.unit)
}

// string recorded_at = 7;
inline void DataMetric::clear_recorded_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorded_at_.ClearToEmpty();
}
inline const std::string& DataMetric::recorded_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.recorded_at)
  return _internal_recorded_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataMetric::set_recorded_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorded_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.recorded_at)
}
inline std::string* DataMetric::mutable_recorded_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recorded_at();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.DataMetric.recorded_at)
  return _s;
}
inline const std::string& DataMetric::_internal_recorded_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recorded_at_.Get();
}
inline void DataMetric::_internal_set_recorded_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorded_at_.Set(value, GetArena());
}
inline std::string* DataMetric::_internal_mutable_recorded_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recorded_at_.Mutable( GetArena());
}
inline std::string* DataMetric::release_recorded_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.DataMetric.recorded_at)
  return _impl_.recorded_at_.Release();
}
inline void DataMetric::set_allocated_recorded_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorded_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recorded_at_.IsDefault()) {
    _impl_.recorded_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.DataMetric.recorded_at)
}

// .seigr.analytics.AggregationMethod aggregation_method = 8;
inline void DataMetric::clear_aggregation_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregation_method_ = 0;
}
inline ::seigr::analytics::AggregationMethod DataMetric::aggregation_method() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.aggregation_method)
  return _internal_aggregation_method();
}
inline void DataMetric::set_aggregation_method(::seigr::analytics::AggregationMethod value) {
  _internal_set_aggregation_method(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.aggregation_method)
}
inline ::seigr::analytics::AggregationMethod DataMetric::_internal_aggregation_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::analytics::AggregationMethod>(_impl_.aggregation_method_);
}
inline void DataMetric::_internal_set_aggregation_method(::seigr::analytics::AggregationMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregation_method_ = value;
}

// string source_component = 9;
inline void DataMetric::clear_source_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_component_.ClearToEmpty();
}
inline const std::string& DataMetric::source_component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.source_component)
  return _internal_source_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataMetric::set_source_component(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.source_component)
}
inline std::string* DataMetric::mutable_source_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_component();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.DataMetric.source_component)
  return _s;
}
inline const std::string& DataMetric::_internal_source_component() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_component_.Get();
}
inline void DataMetric::_internal_set_source_component(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_component_.Set(value, GetArena());
}
inline std::string* DataMetric::_internal_mutable_source_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_component_.Mutable( GetArena());
}
inline std::string* DataMetric::release_source_component() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.DataMetric.source_component)
  return _impl_.source_component_.Release();
}
inline void DataMetric::set_allocated_source_component(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_component_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_component_.IsDefault()) {
    _impl_.source_component_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.DataMetric.source_component)
}

// map<string, string> metadata = 10;
inline int DataMetric::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int DataMetric::metadata_size() const {
  return _internal_metadata_size();
}
inline void DataMetric::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataMetric::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataMetric::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.DataMetric.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* DataMetric::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* DataMetric::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.DataMetric.metadata)
  return _internal_mutable_metadata();
}

// double forecasted_value = 11;
inline void DataMetric::clear_forecasted_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecasted_value_ = 0;
}
inline double DataMetric::forecasted_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.DataMetric.forecasted_value)
  return _internal_forecasted_value();
}
inline void DataMetric::set_forecasted_value(double value) {
  _internal_set_forecasted_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.DataMetric.forecasted_value)
}
inline double DataMetric::_internal_forecasted_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecasted_value_;
}
inline void DataMetric::_internal_set_forecasted_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecasted_value_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsAlertThreshold

// string threshold_id = 1;
inline void AnalyticsAlertThreshold::clear_threshold_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_id_.ClearToEmpty();
}
inline const std::string& AnalyticsAlertThreshold::threshold_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.threshold_id)
  return _internal_threshold_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsAlertThreshold::set_threshold_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.threshold_id)
}
inline std::string* AnalyticsAlertThreshold::mutable_threshold_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_threshold_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsAlertThreshold.threshold_id)
  return _s;
}
inline const std::string& AnalyticsAlertThreshold::_internal_threshold_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_id_.Get();
}
inline void AnalyticsAlertThreshold::_internal_set_threshold_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_id_.Set(value, GetArena());
}
inline std::string* AnalyticsAlertThreshold::_internal_mutable_threshold_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.threshold_id_.Mutable( GetArena());
}
inline std::string* AnalyticsAlertThreshold::release_threshold_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsAlertThreshold.threshold_id)
  return _impl_.threshold_id_.Release();
}
inline void AnalyticsAlertThreshold::set_allocated_threshold_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.threshold_id_.IsDefault()) {
    _impl_.threshold_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsAlertThreshold.threshold_id)
}

// .seigr.analytics.MetricCategory category = 2;
inline void AnalyticsAlertThreshold::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::seigr::analytics::MetricCategory AnalyticsAlertThreshold::category() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.category)
  return _internal_category();
}
inline void AnalyticsAlertThreshold::set_category(::seigr::analytics::MetricCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.category)
}
inline ::seigr::analytics::MetricCategory AnalyticsAlertThreshold::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::analytics::MetricCategory>(_impl_.category_);
}
inline void AnalyticsAlertThreshold::_internal_set_category(::seigr::analytics::MetricCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// double threshold_value = 3;
inline void AnalyticsAlertThreshold::clear_threshold_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_value_ = 0;
}
inline double AnalyticsAlertThreshold::threshold_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.threshold_value)
  return _internal_threshold_value();
}
inline void AnalyticsAlertThreshold::set_threshold_value(double value) {
  _internal_set_threshold_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.threshold_value)
}
inline double AnalyticsAlertThreshold::_internal_threshold_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_value_;
}
inline void AnalyticsAlertThreshold::_internal_set_threshold_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_value_ = value;
}

// .seigr.alerting.AlertSeverity severity = 4;
inline void AnalyticsAlertThreshold::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = 0;
}
inline ::seigr::alerting::AlertSeverity AnalyticsAlertThreshold::severity() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.severity)
  return _internal_severity();
}
inline void AnalyticsAlertThreshold::set_severity(::seigr::alerting::AlertSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.severity)
}
inline ::seigr::alerting::AlertSeverity AnalyticsAlertThreshold::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::alerting::AlertSeverity>(_impl_.severity_);
}
inline void AnalyticsAlertThreshold::_internal_set_severity(::seigr::alerting::AlertSeverity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = value;
}

// .seigr.event.EscalationLevel escalation_level = 5;
inline void AnalyticsAlertThreshold::clear_escalation_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = 0;
}
inline ::seigr::event::EscalationLevel AnalyticsAlertThreshold::escalation_level() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.escalation_level)
  return _internal_escalation_level();
}
inline void AnalyticsAlertThreshold::set_escalation_level(::seigr::event::EscalationLevel value) {
  _internal_set_escalation_level(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.escalation_level)
}
inline ::seigr::event::EscalationLevel AnalyticsAlertThreshold::_internal_escalation_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::event::EscalationLevel>(_impl_.escalation_level_);
}
inline void AnalyticsAlertThreshold::_internal_set_escalation_level(::seigr::event::EscalationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_level_ = value;
}

// string condition = 6;
inline void AnalyticsAlertThreshold::clear_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_.ClearToEmpty();
}
inline const std::string& AnalyticsAlertThreshold::condition() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.condition)
  return _internal_condition();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsAlertThreshold::set_condition(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.condition)
}
inline std::string* AnalyticsAlertThreshold::mutable_condition() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsAlertThreshold.condition)
  return _s;
}
inline const std::string& AnalyticsAlertThreshold::_internal_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition_.Get();
}
inline void AnalyticsAlertThreshold::_internal_set_condition(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_.Set(value, GetArena());
}
inline std::string* AnalyticsAlertThreshold::_internal_mutable_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.condition_.Mutable( GetArena());
}
inline std::string* AnalyticsAlertThreshold::release_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsAlertThreshold.condition)
  return _impl_.condition_.Release();
}
inline void AnalyticsAlertThreshold::set_allocated_condition(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.condition_.IsDefault()) {
    _impl_.condition_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsAlertThreshold.condition)
}

// repeated string notification_channels = 7;
inline int AnalyticsAlertThreshold::_internal_notification_channels_size() const {
  return _internal_notification_channels().size();
}
inline int AnalyticsAlertThreshold::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void AnalyticsAlertThreshold::clear_notification_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_channels_.Clear();
}
inline std::string* AnalyticsAlertThreshold::add_notification_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_notification_channels()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
  return _s;
}
inline const std::string& AnalyticsAlertThreshold::notification_channels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
  return _internal_notification_channels().Get(index);
}
inline std::string* AnalyticsAlertThreshold::mutable_notification_channels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
  return _internal_mutable_notification_channels()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AnalyticsAlertThreshold::set_notification_channels(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_notification_channels()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
}
template <typename Arg_, typename... Args_>
inline void AnalyticsAlertThreshold::add_notification_channels(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_notification_channels(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsAlertThreshold::notification_channels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
  return _internal_notification_channels();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsAlertThreshold::mutable_notification_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsAlertThreshold.notification_channels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_notification_channels();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsAlertThreshold::_internal_notification_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_channels_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsAlertThreshold::_internal_mutable_notification_channels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.notification_channels_;
}

// map<string, string> metadata = 8;
inline int AnalyticsAlertThreshold::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsAlertThreshold::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsAlertThreshold::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsAlertThreshold::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsAlertThreshold::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsAlertThreshold.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsAlertThreshold::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsAlertThreshold::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsAlertThreshold.metadata)
  return _internal_mutable_metadata();
}

// string action_on_breach = 9;
inline void AnalyticsAlertThreshold::clear_action_on_breach() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_on_breach_.ClearToEmpty();
}
inline const std::string& AnalyticsAlertThreshold::action_on_breach() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.action_on_breach)
  return _internal_action_on_breach();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsAlertThreshold::set_action_on_breach(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_on_breach_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.action_on_breach)
}
inline std::string* AnalyticsAlertThreshold::mutable_action_on_breach() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_on_breach();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsAlertThreshold.action_on_breach)
  return _s;
}
inline const std::string& AnalyticsAlertThreshold::_internal_action_on_breach() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_on_breach_.Get();
}
inline void AnalyticsAlertThreshold::_internal_set_action_on_breach(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_on_breach_.Set(value, GetArena());
}
inline std::string* AnalyticsAlertThreshold::_internal_mutable_action_on_breach() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_on_breach_.Mutable( GetArena());
}
inline std::string* AnalyticsAlertThreshold::release_action_on_breach() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsAlertThreshold.action_on_breach)
  return _impl_.action_on_breach_.Release();
}
inline void AnalyticsAlertThreshold::set_allocated_action_on_breach(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_on_breach_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_on_breach_.IsDefault()) {
    _impl_.action_on_breach_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsAlertThreshold.action_on_breach)
}

// bool restrict_to_business_hours = 10;
inline void AnalyticsAlertThreshold::clear_restrict_to_business_hours() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restrict_to_business_hours_ = false;
}
inline bool AnalyticsAlertThreshold::restrict_to_business_hours() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsAlertThreshold.restrict_to_business_hours)
  return _internal_restrict_to_business_hours();
}
inline void AnalyticsAlertThreshold::set_restrict_to_business_hours(bool value) {
  _internal_set_restrict_to_business_hours(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsAlertThreshold.restrict_to_business_hours)
}
inline bool AnalyticsAlertThreshold::_internal_restrict_to_business_hours() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.restrict_to_business_hours_;
}
inline void AnalyticsAlertThreshold::_internal_set_restrict_to_business_hours(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.restrict_to_business_hours_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsSettings

// int32 aggregation_interval_seconds = 1;
inline void AnalyticsSettings::clear_aggregation_interval_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregation_interval_seconds_ = 0;
}
inline ::int32_t AnalyticsSettings::aggregation_interval_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSettings.aggregation_interval_seconds)
  return _internal_aggregation_interval_seconds();
}
inline void AnalyticsSettings::set_aggregation_interval_seconds(::int32_t value) {
  _internal_set_aggregation_interval_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSettings.aggregation_interval_seconds)
}
inline ::int32_t AnalyticsSettings::_internal_aggregation_interval_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aggregation_interval_seconds_;
}
inline void AnalyticsSettings::_internal_set_aggregation_interval_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aggregation_interval_seconds_ = value;
}

// int32 data_retention_days = 2;
inline void AnalyticsSettings::clear_data_retention_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_retention_days_ = 0;
}
inline ::int32_t AnalyticsSettings::data_retention_days() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSettings.data_retention_days)
  return _internal_data_retention_days();
}
inline void AnalyticsSettings::set_data_retention_days(::int32_t value) {
  _internal_set_data_retention_days(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSettings.data_retention_days)
}
inline ::int32_t AnalyticsSettings::_internal_data_retention_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_retention_days_;
}
inline void AnalyticsSettings::_internal_set_data_retention_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_retention_days_ = value;
}

// bool real_time_alerting_enabled = 3;
inline void AnalyticsSettings::clear_real_time_alerting_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.real_time_alerting_enabled_ = false;
}
inline bool AnalyticsSettings::real_time_alerting_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSettings.real_time_alerting_enabled)
  return _internal_real_time_alerting_enabled();
}
inline void AnalyticsSettings::set_real_time_alerting_enabled(bool value) {
  _internal_set_real_time_alerting_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSettings.real_time_alerting_enabled)
}
inline bool AnalyticsSettings::_internal_real_time_alerting_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.real_time_alerting_enabled_;
}
inline void AnalyticsSettings::_internal_set_real_time_alerting_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.real_time_alerting_enabled_ = value;
}

// int32 alert_evaluation_interval = 4;
inline void AnalyticsSettings::clear_alert_evaluation_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_evaluation_interval_ = 0;
}
inline ::int32_t AnalyticsSettings::alert_evaluation_interval() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSettings.alert_evaluation_interval)
  return _internal_alert_evaluation_interval();
}
inline void AnalyticsSettings::set_alert_evaluation_interval(::int32_t value) {
  _internal_set_alert_evaluation_interval(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSettings.alert_evaluation_interval)
}
inline ::int32_t AnalyticsSettings::_internal_alert_evaluation_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_evaluation_interval_;
}
inline void AnalyticsSettings::_internal_set_alert_evaluation_interval(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_evaluation_interval_ = value;
}

// repeated .seigr.analytics.AnalyticsAlertThreshold thresholds = 5;
inline int AnalyticsSettings::_internal_thresholds_size() const {
  return _internal_thresholds().size();
}
inline int AnalyticsSettings::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void AnalyticsSettings::clear_thresholds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thresholds_.Clear();
}
inline ::seigr::analytics::AnalyticsAlertThreshold* AnalyticsSettings::mutable_thresholds(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsSettings.thresholds)
  return _internal_mutable_thresholds()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>* AnalyticsSettings::mutable_thresholds()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsSettings.thresholds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_thresholds();
}
inline const ::seigr::analytics::AnalyticsAlertThreshold& AnalyticsSettings::thresholds(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSettings.thresholds)
  return _internal_thresholds().Get(index);
}
inline ::seigr::analytics::AnalyticsAlertThreshold* AnalyticsSettings::add_thresholds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::analytics::AnalyticsAlertThreshold* _add = _internal_mutable_thresholds()->Add();
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsSettings.thresholds)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>& AnalyticsSettings::thresholds() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsSettings.thresholds)
  return _internal_thresholds();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>&
AnalyticsSettings::_internal_thresholds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thresholds_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsAlertThreshold>*
AnalyticsSettings::_internal_mutable_thresholds() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.thresholds_;
}

// map<string, string> metadata = 6;
inline int AnalyticsSettings::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsSettings::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsSettings::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsSettings::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsSettings::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsSettings.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsSettings::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsSettings::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsSettings.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsSummary

// string summary_id = 1;
inline void AnalyticsSummary::clear_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.ClearToEmpty();
}
inline const std::string& AnalyticsSummary::summary_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.summary_id)
  return _internal_summary_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsSummary::set_summary_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.summary_id)
}
inline std::string* AnalyticsSummary::mutable_summary_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsSummary.summary_id)
  return _s;
}
inline const std::string& AnalyticsSummary::_internal_summary_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_id_.Get();
}
inline void AnalyticsSummary::_internal_set_summary_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.Set(value, GetArena());
}
inline std::string* AnalyticsSummary::_internal_mutable_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_id_.Mutable( GetArena());
}
inline std::string* AnalyticsSummary::release_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsSummary.summary_id)
  return _impl_.summary_id_.Release();
}
inline void AnalyticsSummary::set_allocated_summary_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_id_.IsDefault()) {
    _impl_.summary_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsSummary.summary_id)
}

// .seigr.analytics.MetricCategory category = 2;
inline void AnalyticsSummary::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::seigr::analytics::MetricCategory AnalyticsSummary::category() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.category)
  return _internal_category();
}
inline void AnalyticsSummary::set_category(::seigr::analytics::MetricCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.category)
}
inline ::seigr::analytics::MetricCategory AnalyticsSummary::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::analytics::MetricCategory>(_impl_.category_);
}
inline void AnalyticsSummary::_internal_set_category(::seigr::analytics::MetricCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// double average_value = 3;
inline void AnalyticsSummary::clear_average_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_value_ = 0;
}
inline double AnalyticsSummary::average_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.average_value)
  return _internal_average_value();
}
inline void AnalyticsSummary::set_average_value(double value) {
  _internal_set_average_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.average_value)
}
inline double AnalyticsSummary::_internal_average_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_value_;
}
inline void AnalyticsSummary::_internal_set_average_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_value_ = value;
}

// double max_value = 4;
inline void AnalyticsSummary::clear_max_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_value_ = 0;
}
inline double AnalyticsSummary::max_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.max_value)
  return _internal_max_value();
}
inline void AnalyticsSummary::set_max_value(double value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.max_value)
}
inline double AnalyticsSummary::_internal_max_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_value_;
}
inline void AnalyticsSummary::_internal_set_max_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_value_ = value;
}

// double min_value = 5;
inline void AnalyticsSummary::clear_min_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_value_ = 0;
}
inline double AnalyticsSummary::min_value() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.min_value)
  return _internal_min_value();
}
inline void AnalyticsSummary::set_min_value(double value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.min_value)
}
inline double AnalyticsSummary::_internal_min_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_value_;
}
inline void AnalyticsSummary::_internal_set_min_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_value_ = value;
}

// double standard_deviation = 6;
inline void AnalyticsSummary::clear_standard_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standard_deviation_ = 0;
}
inline double AnalyticsSummary::standard_deviation() const {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.standard_deviation)
  return _internal_standard_deviation();
}
inline void AnalyticsSummary::set_standard_deviation(double value) {
  _internal_set_standard_deviation(value);
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.standard_deviation)
}
inline double AnalyticsSummary::_internal_standard_deviation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.standard_deviation_;
}
inline void AnalyticsSummary::_internal_set_standard_deviation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.standard_deviation_ = value;
}

// map<string, double> forecast_values = 7;
inline int AnalyticsSummary::_internal_forecast_values_size() const {
  return _internal_forecast_values().size();
}
inline int AnalyticsSummary::forecast_values_size() const {
  return _internal_forecast_values_size();
}
inline void AnalyticsSummary::clear_forecast_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forecast_values_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& AnalyticsSummary::_internal_forecast_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forecast_values_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& AnalyticsSummary::forecast_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsSummary.forecast_values)
  return _internal_forecast_values();
}
inline ::google::protobuf::Map<std::string, double>* AnalyticsSummary::_internal_mutable_forecast_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.forecast_values_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* AnalyticsSummary::mutable_forecast_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsSummary.forecast_values)
  return _internal_mutable_forecast_values();
}

// string trend = 8;
inline void AnalyticsSummary::clear_trend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trend_.ClearToEmpty();
}
inline const std::string& AnalyticsSummary::trend() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.trend)
  return _internal_trend();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsSummary::set_trend(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trend_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.trend)
}
inline std::string* AnalyticsSummary::mutable_trend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trend();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsSummary.trend)
  return _s;
}
inline const std::string& AnalyticsSummary::_internal_trend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trend_.Get();
}
inline void AnalyticsSummary::_internal_set_trend(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trend_.Set(value, GetArena());
}
inline std::string* AnalyticsSummary::_internal_mutable_trend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.trend_.Mutable( GetArena());
}
inline std::string* AnalyticsSummary::release_trend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsSummary.trend)
  return _impl_.trend_.Release();
}
inline void AnalyticsSummary::set_allocated_trend(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trend_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.trend_.IsDefault()) {
    _impl_.trend_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsSummary.trend)
}

// string period_covered = 9;
inline void AnalyticsSummary::clear_period_covered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_covered_.ClearToEmpty();
}
inline const std::string& AnalyticsSummary::period_covered() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsSummary.period_covered)
  return _internal_period_covered();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsSummary::set_period_covered(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_covered_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsSummary.period_covered)
}
inline std::string* AnalyticsSummary::mutable_period_covered() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_period_covered();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsSummary.period_covered)
  return _s;
}
inline const std::string& AnalyticsSummary::_internal_period_covered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.period_covered_.Get();
}
inline void AnalyticsSummary::_internal_set_period_covered(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_covered_.Set(value, GetArena());
}
inline std::string* AnalyticsSummary::_internal_mutable_period_covered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.period_covered_.Mutable( GetArena());
}
inline std::string* AnalyticsSummary::release_period_covered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsSummary.period_covered)
  return _impl_.period_covered_.Release();
}
inline void AnalyticsSummary::set_allocated_period_covered(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_covered_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.period_covered_.IsDefault()) {
    _impl_.period_covered_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsSummary.period_covered)
}

// map<string, string> metadata = 10;
inline int AnalyticsSummary::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsSummary::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsSummary::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsSummary::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsSummary::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsSummary.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsSummary::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsSummary::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsSummary.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalyticsReport

// string report_id = 1;
inline void AnalyticsReport::clear_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.ClearToEmpty();
}
inline const std::string& AnalyticsReport::report_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.report_id)
  return _internal_report_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsReport::set_report_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsReport.report_id)
}
inline std::string* AnalyticsReport::mutable_report_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_report_id();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.report_id)
  return _s;
}
inline const std::string& AnalyticsReport::_internal_report_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.report_id_.Get();
}
inline void AnalyticsReport::_internal_set_report_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.Set(value, GetArena());
}
inline std::string* AnalyticsReport::_internal_mutable_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.report_id_.Mutable( GetArena());
}
inline std::string* AnalyticsReport::release_report_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsReport.report_id)
  return _impl_.report_id_.Release();
}
inline void AnalyticsReport::set_allocated_report_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.report_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.report_id_.IsDefault()) {
    _impl_.report_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsReport.report_id)
}

// string title = 2;
inline void AnalyticsReport::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AnalyticsReport::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsReport::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsReport.title)
}
inline std::string* AnalyticsReport::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.title)
  return _s;
}
inline const std::string& AnalyticsReport::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void AnalyticsReport::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* AnalyticsReport::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* AnalyticsReport::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsReport.title)
  return _impl_.title_.Release();
}
inline void AnalyticsReport::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsReport.title)
}

// repeated .seigr.analytics.DataMetric metrics = 3;
inline int AnalyticsReport::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int AnalyticsReport::metrics_size() const {
  return _internal_metrics_size();
}
inline void AnalyticsReport::clear_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metrics_.Clear();
}
inline ::seigr::analytics::DataMetric* AnalyticsReport::mutable_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.metrics)
  return _internal_mutable_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>* AnalyticsReport::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsReport.metrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metrics();
}
inline const ::seigr::analytics::DataMetric& AnalyticsReport::metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.metrics)
  return _internal_metrics().Get(index);
}
inline ::seigr::analytics::DataMetric* AnalyticsReport::add_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::analytics::DataMetric* _add = _internal_mutable_metrics()->Add();
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsReport.metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>& AnalyticsReport::metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsReport.metrics)
  return _internal_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>&
AnalyticsReport::_internal_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::DataMetric>*
AnalyticsReport::_internal_mutable_metrics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metrics_;
}

// repeated .seigr.analytics.AnalyticsInsight insights = 4;
inline int AnalyticsReport::_internal_insights_size() const {
  return _internal_insights().size();
}
inline int AnalyticsReport::insights_size() const {
  return _internal_insights_size();
}
inline void AnalyticsReport::clear_insights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.insights_.Clear();
}
inline ::seigr::analytics::AnalyticsInsight* AnalyticsReport::mutable_insights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.insights)
  return _internal_mutable_insights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>* AnalyticsReport::mutable_insights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsReport.insights)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_insights();
}
inline const ::seigr::analytics::AnalyticsInsight& AnalyticsReport::insights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.insights)
  return _internal_insights().Get(index);
}
inline ::seigr::analytics::AnalyticsInsight* AnalyticsReport::add_insights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::analytics::AnalyticsInsight* _add = _internal_mutable_insights()->Add();
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsReport.insights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>& AnalyticsReport::insights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsReport.insights)
  return _internal_insights();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>&
AnalyticsReport::_internal_insights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.insights_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::analytics::AnalyticsInsight>*
AnalyticsReport::_internal_mutable_insights() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.insights_;
}

// string generated_by = 5;
inline void AnalyticsReport::clear_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.ClearToEmpty();
}
inline const std::string& AnalyticsReport::generated_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.generated_by)
  return _internal_generated_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsReport::set_generated_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsReport.generated_by)
}
inline std::string* AnalyticsReport::mutable_generated_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generated_by();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.generated_by)
  return _s;
}
inline const std::string& AnalyticsReport::_internal_generated_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_by_.Get();
}
inline void AnalyticsReport::_internal_set_generated_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.Set(value, GetArena());
}
inline std::string* AnalyticsReport::_internal_mutable_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.generated_by_.Mutable( GetArena());
}
inline std::string* AnalyticsReport::release_generated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsReport.generated_by)
  return _impl_.generated_by_.Release();
}
inline void AnalyticsReport::set_allocated_generated_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generated_by_.IsDefault()) {
    _impl_.generated_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsReport.generated_by)
}

// string timestamp = 6;
inline void AnalyticsReport::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& AnalyticsReport::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnalyticsReport::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsReport.timestamp)
}
inline std::string* AnalyticsReport::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.timestamp)
  return _s;
}
inline const std::string& AnalyticsReport::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void AnalyticsReport::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* AnalyticsReport::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* AnalyticsReport::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.analytics.AnalyticsReport.timestamp)
  return _impl_.timestamp_.Release();
}
inline void AnalyticsReport::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.analytics.AnalyticsReport.timestamp)
}

// map<string, string> metadata = 7;
inline int AnalyticsReport::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnalyticsReport::metadata_size() const {
  return _internal_metadata_size();
}
inline void AnalyticsReport::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsReport::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AnalyticsReport::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.analytics.AnalyticsReport.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsReport::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AnalyticsReport::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.analytics.AnalyticsReport.metadata)
  return _internal_mutable_metadata();
}

// repeated string comparison_report_ids = 8;
inline int AnalyticsReport::_internal_comparison_report_ids_size() const {
  return _internal_comparison_report_ids().size();
}
inline int AnalyticsReport::comparison_report_ids_size() const {
  return _internal_comparison_report_ids_size();
}
inline void AnalyticsReport::clear_comparison_report_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_report_ids_.Clear();
}
inline std::string* AnalyticsReport::add_comparison_report_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_comparison_report_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.analytics.AnalyticsReport.comparison_report_ids)
  return _s;
}
inline const std::string& AnalyticsReport::comparison_report_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.analytics.AnalyticsReport.comparison_report_ids)
  return _internal_comparison_report_ids().Get(index);
}
inline std::string* AnalyticsReport::mutable_comparison_report_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.analytics.AnalyticsReport.comparison_report_ids)
  return _internal_mutable_comparison_report_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AnalyticsReport::set_comparison_report_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_comparison_report_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.analytics.AnalyticsReport.comparison_report_ids)
}
template <typename Arg_, typename... Args_>
inline void AnalyticsReport::add_comparison_report_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_comparison_report_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.analytics.AnalyticsReport.comparison_report_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsReport::comparison_report_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.analytics.AnalyticsReport.comparison_report_ids)
  return _internal_comparison_report_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsReport::mutable_comparison_report_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.analytics.AnalyticsReport.comparison_report_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_comparison_report_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AnalyticsReport::_internal_comparison_report_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.comparison_report_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AnalyticsReport::_internal_mutable_comparison_report_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.comparison_report_ids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::analytics::MetricCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::analytics::MetricCategory>() {
  return ::seigr::analytics::MetricCategory_descriptor();
}
template <>
struct is_proto_enum<::seigr::analytics::MetricType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::analytics::MetricType>() {
  return ::seigr::analytics::MetricType_descriptor();
}
template <>
struct is_proto_enum<::seigr::analytics::AggregationMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::analytics::AggregationMethod>() {
  return ::seigr::analytics::AggregationMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // analytics_2eproto_2epb_2eh
