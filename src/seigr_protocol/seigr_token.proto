syntax = "proto3";

package seigr.seigr_token;

import "google/protobuf/timestamp.proto";
import "cross_chain_operations.proto"; // For seigr.TransactionType

// ===========================
// ENUMERATIONS
// ===========================

/**
 * TokenStatus
 * Defines the operational state of a Seigr token.
 */
enum TokenStatus {
    TOKEN_STATUS_UNDEFINED = 0;         // Undefined token state
    TOKEN_STATUS_ACTIVE = 1;            // Token is active and can be used
    TOKEN_STATUS_CAPPED = 2;            // Token has reached its cap limit
    TOKEN_STATUS_LOCKED = 3;            // Token is locked and cannot be transferred
    TOKEN_STATUS_BURNED = 4;            // Token is permanently removed from circulation
    TOKEN_STATUS_SUSPENDED = 5;         // Token is temporarily suspended
}

// ===========================
// SEIGR TOKEN STRUCTURE
// ===========================

/**
 * SeigrToken
 * Represents a dynamic token with balance, cap management, and metadata.
 */
message SeigrToken {
    string token_id = 1;                // Unique identifier for the token
    string owner_id = 2;                // ID of the token's owner
    uint64 balance = 3;                 // Current balance of the token
    TokenStatus status = 4;             // Current operational status of the token
    uint64 max_cap = 5;                 // Maximum cap allowed for the token balance
    uint64 cap_threshold = 6;           // Threshold to trigger cap enforcement
    google.protobuf.Timestamp created_at = 7; // Creation timestamp
    google.protobuf.Timestamp updated_at = 8; // Last update timestamp
    map<string, string> metadata = 9;   // Additional metadata (e.g., "tier_level", "usage_limits")
    bool eco_friendly_flag = 10;        // Indicates if token operations are eco-friendly
    uint64 reward_accumulation = 11;    // Tracks accumulated rewards
    repeated string authorized_policies = 12; // List of authorized policy IDs for operations
    bool transferable = 13;             // Indicates if the token can be transferred
}

// ===========================
// SERVICE DEFINITION
// ===========================

/**
 * SeigrTokenService
 * Provides operations for managing tokens, including minting, transferring, and querying.
 */
service SeigrTokenService {
    rpc MintToken (MintTokenRequest) returns (MintTokenResponse);                // Create new tokens
    rpc TransferToken (TransferTokenRequest) returns (TransferTokenResponse);    // Transfer tokens
    rpc QueryTokenStatus (QueryTokenStatusRequest) returns (QueryTokenStatusResponse); // Query token status
    rpc AdjustTokenCap (AdjustTokenCapRequest) returns (AdjustTokenCapResponse); // Adjust token cap dynamically
    rpc DistributeSurplus (DistributeSurplusRequest) returns (DistributeSurplusResponse); // Distribute surplus tokens
    rpc BurnToken (BurnTokenRequest) returns (BurnTokenResponse);                // Permanently burn a token
    rpc FetchTransactionHistory (FetchTransactionHistoryRequest) returns (FetchTransactionHistoryResponse); // Fetch transaction history
}

// ===========================
// SERVICE REQUESTS & RESPONSES
// ===========================

/**
 * MintTokenRequest
 * Request to mint (create) tokens for a specific owner.
 */
message MintTokenRequest {
    string owner_id = 1;                // ID of the token's owner
    uint64 amount = 2;                  // Amount of tokens to mint
    map<string, string> metadata = 3;   // Optional metadata for the minted token
}

/**
 * MintTokenResponse
 * Response for minting tokens.
 */
message MintTokenResponse {
    bool success = 1;                   // Indicates if minting was successful
    string message = 2;                 // Additional information or error message
    string token_id = 3;                // ID of the newly minted token
}

/**
 * TransferTokenRequest
 * Request to transfer tokens between users.
 */
message TransferTokenRequest {
    string from_id = 1;                 // Sender ID
    string to_id = 2;                   // Recipient ID
    uint64 amount = 3;                  // Amount to transfer
    string reference_id = 4;            // Optional transaction reference ID
}

/**
 * TransferTokenResponse
 * Response for token transfer confirmation.
 */
message TransferTokenResponse {
    bool success = 1;                   // Indicates if the transfer was successful
    string message = 2;                 // Additional information or error message
}

/**
 * QueryTokenStatusRequest
 * Request to query token status, balance, and cap.
 */
message QueryTokenStatusRequest {
    string token_id = 1;                // ID of the token to query
}

/**
 * QueryTokenStatusResponse
 * Response with token status, balance, and cap details.
 */
message QueryTokenStatusResponse {
    TokenStatus status = 1;             // Current token status
    uint64 balance = 2;                 // Current token balance
    uint64 max_cap = 3;                 // Token cap
    uint64 reward_accumulation = 4;     // Accumulated rewards
    bool is_capped = 5;                 // Whether the token is capped
}

/**
 * AdjustTokenCapRequest
 * Request to modify the cap of a token.
 */
message AdjustTokenCapRequest {
    string token_id = 1;                // ID of the token
    uint64 new_cap = 2;                 // New cap value
}

/**
 * AdjustTokenCapResponse
 * Response for cap adjustment.
 */
message AdjustTokenCapResponse {
    bool success = 1;                   // Indicates if cap adjustment succeeded
    string message = 2;                 // Feedback or error message
    uint64 adjusted_cap = 3;            // Final adjusted cap
}

/**
 * DistributeSurplusRequest
 * Request to distribute surplus tokens.
 */
message DistributeSurplusRequest {
    string token_id = 1;                // ID of the token with surplus
    uint64 distribute_amount = 2;       // Amount to distribute
}

/**
 * DistributeSurplusResponse
 * Response for surplus distribution.
 */
message DistributeSurplusResponse {
    bool success = 1;                   // Indicates if distribution succeeded
    uint64 distributed_amount = 2;      // Amount successfully distributed
    string message = 3;                 // Additional details
}

/**
 * BurnTokenRequest
 * Request to permanently burn a token.
 */
message BurnTokenRequest {
    string token_id = 1;                // ID of the token to burn
}

/**
 * BurnTokenResponse
 * Response confirming token burning.
 */
message BurnTokenResponse {
    bool success = 1;                   // Indicates if the token was burned successfully
    string message = 2;                 // Additional information or error message
}

/**
 * FetchTransactionHistoryRequest
 * Request to fetch token transaction history.
 */
message FetchTransactionHistoryRequest {
    string token_id = 1;                // ID of the token
    uint32 limit = 2;                   // Max number of transactions to retrieve
    bool include_locked_transactions = 3; // Include locked transactions if applicable
}

/**
 * FetchTransactionHistoryResponse
 * Response containing a list of token transactions.
 */
message FetchTransactionHistoryResponse {
    string token_id = 1;                // ID of the token
    repeated Transaction transactions = 2; // List of transactions
}

/**
 * Transaction
 * Represents a single token transaction.
 */
message Transaction {
    uint64 transaction_id = 1;          // Unique identifier for the transaction
    string from_id = 2;                 // Sender ID
    string to_id = 3;                   // Recipient ID
    uint64 amount = 4;                  // Transaction amount
    google.protobuf.Timestamp timestamp = 5; // Transaction timestamp
    seigr.crosschain.TransactionType type = 6; // Type of transaction (e.g., CROSS_CHAIN)
}
