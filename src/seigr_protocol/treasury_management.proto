syntax = "proto3";

package seigr.treasury_management;

import "mycelith_voting.proto"; // For VoteChoice and VotingLayer
import "google/protobuf/timestamp.proto";

// ===========================
// ENUMERATIONS
// ===========================

/**
 * DistributionPolicy
 * Policies for fund distribution from a treasury pool.
 */
enum DistributionPolicy {
    DISTRIBUTION_POLICY_UNDEFINED = 0;        // Undefined distribution policy
    DISTRIBUTION_POLICY_FIXED_ALLOCATION = 1; // Fixed allocation per request
    DISTRIBUTION_POLICY_PERCENTAGE_BASED = 2; // Based on pool balance percentage
    DISTRIBUTION_POLICY_VOTING_DETERMINED = 3; // Allocation via voting
}

/**
 * FundingStatus
 * Approval status of a funding request.
 */
enum FundingStatus {
    FUNDING_STATUS_UNDEFINED = 0;             // Undefined status
    FUNDING_STATUS_PENDING = 1;              // Pending review or approval
    FUNDING_STATUS_APPROVED = 2;             // Fully approved
    FUNDING_STATUS_DENIED = 3;               // Denied
    FUNDING_STATUS_PARTIALLY_APPROVED = 4;   // Partially approved
    FUNDING_STATUS_UNDER_REVIEW = 5;         // Under voting process
}

// ===========================
// TREASURY POOL
// ===========================

/**
 * TreasuryPool
 * Represents a fund pool in the Seigr treasury system.
 */
message TreasuryPool {
    string pool_id = 1;                        // Unique identifier for the treasury pool
    string purpose = 2;                        // Pool's purpose (e.g., "Development Fund")
    uint64 balance = 3;                        // Current balance in tokens
    DistributionPolicy distribution_policy = 4; // Policy for fund allocation
    google.protobuf.Timestamp created_at = 5;  // Pool creation timestamp
    map<string, string> metadata = 6;          // Regulatory or contextual metadata
    uint64 allocated_funds = 7;                // Total allocated funds
    uint64 reserved_funds = 8;                 // Reserved funds awaiting transfer
}

// ===========================
// FUNDING REQUEST
// ===========================

/**
 * FundingRequest
 * Request for funds from a treasury pool.
 */
message FundingRequest {
    string request_id = 1;                     // Unique identifier for the request
    string purpose = 2;                        // Justification for the request
    uint64 requested_amount = 3;               // Amount requested in tokens
    FundingStatus funding_status = 4;          // Approval status of the request
    repeated seigr.voting.VotingLayer voting_layers = 5; // Approval layers for voting
    string requester_id = 6;                   // ID of the requesting entity
    google.protobuf.Timestamp timestamp = 7;   // Request creation timestamp
    google.protobuf.Timestamp last_updated = 8; // Last status update timestamp
    map<string, string> metadata = 9;          // Additional request metadata
    uint64 approved_amount = 10;               // Approved amount for partial funding
    google.protobuf.Timestamp approval_timestamp = 11; // Final approval timestamp
}

// ===========================
// FUNDING HISTORY
// ===========================

/**
 * FundingHistory
 * Audit and reporting history of past funding requests.
 */
message FundingHistory {
    string pool_id = 1;                        // Associated treasury pool ID
    repeated FundingRequest funding_requests = 2; // Past funding requests
    uint32 total_requests = 3;                 // Total funding requests
}

// ===========================
// SERVICE DEFINITION
// ===========================

/**
 * TreasuryManagementService
 * RPCs for managing treasury operations, requests, and policies.
 */
service TreasuryManagementService {
    rpc SubmitFundingRequest (FundingSubmissionRequest) returns (FundingSubmissionResponse);
    rpc ProcessFundingApproval (FundingApprovalRequest) returns (FundingApprovalResponse);
    rpc TransferFunds (TransferFundsRequest) returns (TransferFundsResponse);
    rpc GetFundingHistory (GetFundingHistoryRequest) returns (GetFundingHistoryResponse);
    rpc UpdateDistributionPolicy (UpdateDistributionPolicyRequest) returns (UpdateDistributionPolicyResponse);
}

// ===========================
// SERVICE REQUESTS AND RESPONSES
// ===========================

/**
 * FundingSubmissionRequest
 * Submit a funding request to a treasury pool.
 */
message FundingSubmissionRequest {
    string purpose = 1;                        // Request justification
    uint64 requested_amount = 2;               // Requested funding amount
    string requester_id = 3;                   // Requesting entity ID
    map<string, string> metadata = 4;          // Additional contextual data
}

/**
 * FundingSubmissionResponse
 * Response to a funding submission.
 */
message FundingSubmissionResponse {
    string request_id = 1;                     // Unique request ID
    bool success = 2;                          // Submission success status
    string message = 3;                        // Additional context or errors
}

/**
 * FundingApprovalRequest
 * Request to process approval for a funding request.
 */
message FundingApprovalRequest {
    string request_id = 1;                     // Target funding request ID
    string voter_id = 2;                       // ID of the voting entity
    seigr.voting.VoteChoice choice = 3;        // Voting choice (e.g., YES, NO, ABSTAIN)
    map<string, string> metadata = 4;          // Additional voting data
}

/**
 * FundingApprovalResponse
 * Response to funding approval processing.
 */
message FundingApprovalResponse {
    bool success = 1;                          // Approval success status
    string message = 2;                        // Approval context or errors
}

/**
 * TransferFundsRequest
 * Request to transfer funds from a treasury pool.
 */
message TransferFundsRequest {
    string pool_id = 1;                        // Source pool ID
    uint64 amount = 2;                         // Amount to transfer
    string recipient_address = 3;              // Transfer destination
    string transfer_reason = 4;                // Justification for the transfer
}

/**
 * TransferFundsResponse
 * Response to a transfer request.
 */
message TransferFundsResponse {
    bool success = 1;                          // Transfer success status
    string message = 2;                        // Transfer context or errors
}

/**
 * GetFundingHistoryRequest
 * Request funding history for a specific treasury pool.
 */
message GetFundingHistoryRequest {
    string pool_id = 1;                        // Treasury pool ID
    uint32 limit = 2;                          // Maximum records to retrieve
    bool include_denied = 3;                   // Include denied funding requests
}

/**
 * GetFundingHistoryResponse
 * Provides the funding history of a treasury pool.
 */
message GetFundingHistoryResponse {
    string pool_id = 1;                        // Treasury pool ID
    repeated FundingRequest funding_requests = 2; // List of funding requests
    uint32 total_requests = 3;                 // Total requests
}

/**
 * UpdateDistributionPolicyRequest
 * Request to update the distribution policy of a treasury pool.
 */
message UpdateDistributionPolicyRequest {
    string pool_id = 1;                        // Target treasury pool ID
    DistributionPolicy new_policy = 2;         // New distribution policy
    string updated_by = 3;                     // Entity making the update
}

/**
 * UpdateDistributionPolicyResponse
 * Response to updating the distribution policy.
 */
message UpdateDistributionPolicyResponse {
    bool success = 1;                          // Update success status
    string message = 2;                        // Update context or errors
    DistributionPolicy applied_policy = 3;     // Applied policy post-update
}
