syntax = "proto3";

package seigr.common;

import "google/protobuf/timestamp.proto";

/**
 * Common Protocol Definitions
 *
 * This file contains shared enumerations and messages that are reused across
 * multiple Seigr modules. These definitions ensure consistency, clarity, and
 * reusability in system-wide operations, monitoring, and communication.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing different threat levels detected in operations or resources.
 */
enum ThreatLevel {
    THREAT_LEVEL_UNDEFINED = 0;  // Undefined threat level.
    THREAT_LEVEL_LOW = 1;        // Low-level threat, minimal risk.
    THREAT_LEVEL_MODERATE = 2;   // Moderate threat, requires attention.
    THREAT_LEVEL_HIGH = 3;       // High-level threat, immediate response required.
    THREAT_LEVEL_CRITICAL = 4;   // Critical threat, escalation mandatory.
}

/**
 * Enum representing the operational status of a system, module, or resource.
 */
enum OperationalStatus {
    OPERATIONAL_STATUS_UNDEFINED = 0;       // Undefined operational status.
    OPERATIONAL_STATUS_OK = 1;              // Normal operation.
    OPERATIONAL_STATUS_WARNING = 2;         // Warning state, potential issue detected.
    OPERATIONAL_STATUS_ERROR = 3;           // Error state, functionality impacted.
    OPERATIONAL_STATUS_MAINTENANCE = 4;     // System under maintenance.
    OPERATIONAL_STATUS_DEGRADED = 5;        // Performance is degraded but operational.
    OPERATIONAL_STATUS_DISASTER_RECOVERY = 6; // State of disaster recovery mode.
}

/**
 * Enum representing priority levels for tasks, requests, or alerts.
 */
enum PriorityLevel {
    PRIORITY_LEVEL_UNDEFINED = 0; // Undefined priority.
    PRIORITY_LEVEL_LOW = 1;       // Low priority.
    PRIORITY_LEVEL_MEDIUM = 2;    // Medium priority.
    PRIORITY_LEVEL_HIGH = 3;      // High priority.
    PRIORITY_LEVEL_URGENT = 4;    // Urgent priority.
    PRIORITY_LEVEL_IMMEDIATE = 5; // Immediate action required.
}

/**
 * Enum representing the Quality of Service (QoS) levels in various workflows.
 */
enum QoSLevel {
    QOS_LEVEL_UNDEFINED = 0;  // Undefined QoS level.
    QOS_LEVEL_LOW = 1;        // Best effort, minimal guarantees.
    QOS_LEVEL_MEDIUM = 2;     // Limited guarantee, some packet loss allowed.
    QOS_LEVEL_HIGH = 3;       // High reliability and low latency.
    QOS_LEVEL_CRITICAL = 4;   // Real-time, maximum reliability and lowest latency.
}

/**
 * Enum representing standard data types across various modules.
 */
enum DataType {
    DATA_TYPE_UNDEFINED = 0; // Undefined data type.
    DATA_TYPE_TEXT = 1;      // Textual data.
    DATA_TYPE_IMAGE = 2;     // Image data.
    DATA_TYPE_VIDEO = 3;     // Video data.
    DATA_TYPE_AUDIO = 4;     // Audio data.
    DATA_TYPE_DOCUMENT = 5;  // Document files.
    DATA_TYPE_METADATA = 6;  // Metadata or contextual information.
    DATA_TYPE_BINARY = 7;    // Binary data streams.
    DATA_TYPE_STRUCTURED = 8; // Structured data like JSON or XML.
    DATA_TYPE_STREAM = 9;    // Live data streams.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Standardized metadata for extensible context sharing.
 */
message BasicMetadata {
    string key = 1;            // Metadata key identifier.
    string value = 2;          // Corresponding value.
    string type = 3;           // Type/category of metadata (e.g., "confidential").
    string security_tag = 4;   // Security classification (e.g., "public").
}

/**
 * Represents a standardized timestamp set for tracking lifecycle events.
 */
message Timestamp {
    string created_at = 1;     // Creation timestamp (ISO 8601 format).
    string updated_at = 2;     // Last updated timestamp.
    string accessed_at = 3;    // Last accessed timestamp.
    string deleted_at = 4;     // Deletion timestamp, if applicable.
    string timezone = 5;       // Timezone (e.g., "UTC").
    int32 precision_ms = 6;    // Precision in milliseconds.
}

/**
 * Standardized structure for operation responses across services.
 */
message StandardResponse {
    OperationalStatus status = 1;  // Operation status.
    string message = 2;            // Descriptive feedback or error message.
    map<string, string> metadata = 3; // Additional contextual metadata.
    string request_id = 4;         // Unique request identifier.
    ThreatLevel threat_level = 5;  // Threat level associated with the response.
}

/**
 * Log entry for detecting and recording threats across operations.
 */
message ThreatDetectionLog {
    ThreatLevel threat_level = 1;       // Severity level of the threat.
    string origin = 2;                  // Origin component (e.g., "security_module").
    string description = 3;             // Description of the detected threat.
    Timestamp detection_time = 4;       // Timestamp when threat was detected.
    map<string, string> metadata = 5;   // Additional threat context.
    string response_action = 6;         // Response taken (e.g., "quarantine").
    bool mitigated = 7;                 // Flag if threat was mitigated.
    Timestamp mitigation_time = 8;      // Timestamp of mitigation.
    string impact_scope = 9;            // Scope of the threat's impact.
}

/**
 * Request for checking the status of network hyphens.
 */
message NetworkStatusRequest {
    string requester_id = 1;            // ID of the requester.
    repeated string hyphen_ids = 2;     // List of network hyphen IDs.
    bool include_latency = 3;           // Include latency details in response.
    repeated string protocols = 4;      // Protocols to check for network compatibility.
    map<string, string> options = 5;    // Additional options for customization.
}

/**
 * Response for network status checks.
 */
message NetworkStatusResponse {
    string requester_id = 1;            // ID of the requester.
    repeated string hyphens = 2;        // List of hyphens and their statuses.
    repeated string connectivity = 3;   // Connectivity details.
    map<string, string> response_metadata = 4; // Additional metadata.
}

/**
 * Summary of network health.
 */
message NetworkHealthSummary {
    int32 total_hyphens = 1;            // Total hyphens in the network.
    int32 active_hyphens = 2;           // Number of active hyphens.
    float average_latency_ms = 3;       // Average latency in milliseconds.
    float packet_loss_percentage = 4;  // Percentage of packet loss.
}

/**
 * Performance summary across network sessions.
 */
message NetworkPerformanceSummary {
    float average_latency = 1;          // Average network latency.
    int64 total_data_transferred = 2;   // Total data transferred in bytes.
    int32 active_sessions = 3;          // Number of active sessions.
    float bandwidth_utilization = 4;    // Percentage of bandwidth utilization.
    float jitter_ms = 5;                // Average jitter in milliseconds.
}

// Feedback captures human and external feedback to refine learning processes.
message Feedback {
    string feedback_id = 1; // Unique identifier for the feedback entry.
    string source = 2; // Source of feedback (e.g., human, external system).
    string type = 3; // Type of feedback (e.g., positive, negative, corrective).
    string content = 4; // Content of the feedback.
    google.protobuf.Timestamp timestamp = 5; // When the feedback was provided.
    map<string, float> impact_analysis = 6; // Analysis of feedback impact on learning.
}

/**
 * Represents the type of actions within a lineage entry.
 */
enum EntryType {
    CREATION = 0;        // Object or lineage was created.
    MODIFICATION = 1;    // Object or lineage was modified.
    MERGE = 2;           // Multiple lineages merged into one.
    DELETION = 3;        // Object or lineage was deleted.
    FORK = 4;            // Object or lineage was branched.
    RESTORE = 5;         // Object restored to a previous state.
    SNAPSHOT = 6;        // Snapshot of lineage state captured.
    ADAPTIVE_UPDATE = 7; // Adaptive or automated update.
}

/**
 * Represents an individual entry within a lineage, tracking a single action.
 */
message LineageEntry {
    string entry_id = 1;                     // Unique identifier for the lineage entry.
    string entry_version = 2;                // Version of the lineage entry.
    EntryType entry_type = 3;                // Type of action (e.g., CREATION, MODIFICATION).
    string action = 4;                       // Description of the performed action.
    string creator_id = 5;                   // ID of the primary creator of the entry.
    string contributor_id = 6;               // ID of the contributing entity or user.
    google.protobuf.Timestamp timestamp = 7; // Timestamp of the entry creation.
    repeated string previous_hashes = 8;     // References to previous hashes in case of forks or merges.
    string parent_id = 9;                    // Parent entry ID for hierarchical tracking.
    string event_trigger = 10;               // Event or condition that triggered this entry.
    map<string, string> metadata = 11;       // Metadata for additional context.
    string entry_checksum = 12;              // Checksum for entry-level integrity verification.
    string external_reference_id = 13;       // External reference or linkage for auditing.
    repeated string dependency_ids = 14;     // Dependencies influencing this entry.
    map<string, string> context_data = 15;   // Contextual data relevant to the entry's creation.
    repeated string associated_files = 16;   // Associated files or assets.
    bool adaptive_update_flag = 17;          // Indicates if the update was adaptive.
    string conflict_resolution_strategy = 18; // Strategy applied to resolve conflicts.
    repeated string resolved_dependencies = 19; // Dependencies resolved during this entry's creation.
    string revision_notes = 20;              // Notes explaining the revision or change.
    map<string, seigr.common.Feedback> adaptive_conditions = 21; // Feedback-driven conditions enabling adaptive updates.
    string rollback_checkpoint = 22;         // ID for rolling back to a stable state.
}


// RouteUpdate defines dynamic adjustments in connections between .seigr files.
message RouteUpdate {
    string target_id = 1; // ID of the target .seigr file.
    string action = 2; // Action to be taken (e.g., add, remove, modify).
    map<string, string> metadata = 3; // Metadata for the routing update.
    repeated string dependent_routes = 4; // Routes affected by this update.
}