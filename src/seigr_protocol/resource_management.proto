syntax = "proto3";

package seigr.resource_management;

/**
 * Resource Management Protocol
 *
 * Defines the framework for monitoring, managing, forecasting, and distributing resources 
 * within the Seigr ecosystem, ensuring efficiency, sustainability, and scalability.
 */

// ===========================
// ENUM DEFINITIONS
// ===========================

/**
 * Specifies different types of resources monitored within the Seigr ecosystem.
 */
enum ResourceType {
    RESOURCE_UNDEFINED = 0;
    RESOURCE_CPU = 1;                    // CPU resource utilization
    RESOURCE_MEMORY = 2;                 // Memory resource utilization
    RESOURCE_DISK_IO = 3;                // Disk I/O utilization
    RESOURCE_BANDWIDTH = 4;              // Network bandwidth
    RESOURCE_GPU = 5;                    // GPU resource utilization
    RESOURCE_STORAGE = 6;                // Disk storage capacity
    RESOURCE_ENERGY = 7;                 // Energy consumption
    RESOURCE_COOLING = 8;                // Cooling system efficiency
}

/**
 * Defines the utilization state of a resource.
 */
enum ResourceState {
    RESOURCE_STATE_UNDEFINED = 0;
    RESOURCE_STATE_OPTIMAL = 1;          // Efficient, green usage state
    RESOURCE_STATE_NORMAL = 2;           // Normal operational state
    RESOURCE_STATE_WARNING = 3;          // Approaching critical thresholds
    RESOURCE_STATE_CRITICAL = 4;         // Near failure thresholds
    RESOURCE_STATE_OVERLOADED = 5;       // Overloaded, requires immediate action
    RESOURCE_STATE_DEGRADED = 6;         // Operating at reduced efficiency
}

// ===========================
// RESOURCE USAGE METRICS
// ===========================

/**
 * Tracks resource usage metrics for individual hyphens or clusters.
 */
message ResourceUsage {
    ResourceType type = 1;               // Type of resource monitored
    double usage_percentage = 2;         // Percentage of resource usage
    double absolute_usage = 3;           // Absolute value of resource usage
    string unit = 4;                     // Measurement unit (e.g., MB, GHz, Watts)
    string hyphen_id = 5;                // Unique identifier for the hyphen
    string timestamp = 6;                // Timestamp of the usage measurement
    ResourceState state = 7;             // State of resource utilization
    map<string, string> usage_metadata = 8; // Additional metadata (e.g., location, region)
    string application_id = 9;           // Associated application or workload ID
    double temperature = 10;             // Hardware temperature (if applicable)
    double resource_efficiency_score = 11; // Efficiency score for resource utilization
    double power_consumption = 12;       // Power consumption in watts
    bool sustainable_use_flag = 13;      // Indicates compliance with sustainability goals
    float latency_ms = 14;               // Latency associated with resource usage
}

// ===========================
// RESOURCE LIMITS
// ===========================

/**
 * Defines thresholds and limits for resource usage monitoring.
 */
message ResourceLimits {
    ResourceType type = 1;               // Type of resource
    double warning_threshold = 2;        // Threshold for warning alerts
    double critical_threshold = 3;       // Threshold for critical alerts
    double absolute_max = 4;             // Maximum allowable resource usage
    string unit = 5;                     // Measurement unit
    bool enforce_limits = 6;             // Enforce limits when exceeded
    string escalation_contact = 7;       // Contact for escalation when limits are breached
    int32 max_continuous_overload_seconds = 8; // Max duration of overload allowed
    string auto_scale_action = 9;        // Auto-scaling response action
    double usage_decay_rate = 10;        // Decay rate for recovery after overload
    double sustainable_limit = 11;       // Threshold for sustainable resource usage
    double cooling_efficiency_threshold = 12; // Threshold for cooling system efficiency
}

// ===========================
// RESOURCE MONITORING CONFIGURATION
// ===========================

/**
 * Configuration for monitoring resource utilization across the network.
 */
message ResourceMonitorConfig {
    int32 check_interval_seconds = 1;    // Interval for resource checks
    repeated ResourceLimits resource_limits = 2; // List of resource usage limits
    bool enable_alerting = 3;            // Enable alerting for threshold violations
    map<string, string> config_metadata = 4; // Metadata for the configuration
    string alert_protocol = 5;           // Protocol for alert delivery (e.g., EMAIL, SMS)
    int32 grace_period_seconds = 6;      // Grace period before triggering alerts
    int32 auto_scale_threshold = 7;      // Threshold for triggering auto-scaling
    map<string, int32> alert_severity_levels = 8; // Severity levels for alerts
    int32 alert_frequency_limit = 9;     // Max alerts per time unit
    double load_balancing_threshold = 10; // Threshold for triggering load balancing
    int32 resource_efficiency_adjustment_interval = 11; // Interval for efficiency recalculations
    bool prioritize_energy_efficiency = 12; // Prioritize energy-efficient resource utilization
}

// ===========================
// RESOURCE USAGE SUMMARY
// ===========================

/**
 * Aggregates resource usage data over a specified period.
 */
message ResourceUsageSummary {
    ResourceType type = 1;               // Type of resource
    string hyphen_id = 2;                // Hyphen ID
    double average_usage = 3;            // Average usage percentage
    double peak_usage = 4;               // Peak usage during the period
    double minimum_usage = 5;            // Minimum usage during the period
    double usage_standard_deviation = 6; // Standard deviation of usage
    string summary_period = 7;           // Monitoring period (e.g., 24 hours)
    int32 threshold_exceed_count = 8;    // Number of threshold breaches
    double cost_estimate = 9;            // Estimated cost of resource usage
    int32 time_above_threshold = 10;     // Time above critical threshold
    double efficiency_score_avg = 11;    // Average efficiency score
    double power_consumption_avg = 12;   // Average power consumption
    bool sustainability_compliant = 13; // Compliance with sustainability targets
    double cooling_efficiency_avg = 14; // Average cooling system efficiency
}

// ===========================
// CLUSTER RESOURCE STATUS
// ===========================

/**
 * Tracks resource usage and health across a cluster.
 */
message ClusterResourceStatus {
    string cluster_id = 1;               // Cluster identifier
    repeated ResourceUsageSummary hyphen_summaries = 2; // Per-hyphen resource summaries
    map<string, double> cluster_average_usage = 3; // Average usage per resource type
    map<string, double> cluster_peak_usage = 4;    // Peak usage per resource type
    string last_updated = 5;             // Last status update
    string health_status = 6;            // Overall health status of the cluster
    int32 overloaded_hyphens_count = 7;  // Number of overloaded hyphens
    string recovery_action_plan = 8;     // Plan for recovering cluster health
    double cluster_utilization_score = 9; // Overall utilization efficiency score
    double load_distribution_score = 10; // Efficiency score for load balancing
    double sustainability_compliance_rate = 11; // Compliance rate with sustainability goals
    int32 adaptive_scaling_events = 12;  // Count of adaptive scaling events triggered
    double cluster_power_efficiency = 13; // Cluster-wide power efficiency score
}

// ===========================
// RESOURCE DEMAND FORECAST
// ===========================

/**
 * Predicts future resource demands based on historical usage trends.
 */
message ResourceDemandForecast {
    ResourceType type = 1;               // Type of resource
    string cluster_id = 2;               // Cluster identifier
    string forecast_period = 3;          // Forecast period (e.g., "next 24 hours")
    double projected_peak_usage = 4;     // Projected peak usage
    double projected_average_usage = 5;  // Projected average usage
    double confidence_level = 6;         // Forecast confidence level (e.g., 0.9)
    string forecast_created_at = 7;      // Timestamp of forecast creation
    map<string, string> forecast_metadata = 8; // Additional metadata
    double projected_power_consumption = 9; // Projected power consumption
}
