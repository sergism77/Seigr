// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: identity.proto
// Protobuf C++ Version: 5.29.2

#ifndef identity_2eproto_2epb_2eh
#define identity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "access_control.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_identity_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_identity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_identity_2eproto;
namespace seigr {
class AliasIdentity;
struct AliasIdentityDefaultTypeInternal;
extern AliasIdentityDefaultTypeInternal _AliasIdentity_default_instance_;
class AliasIdentity_AliasMetadataEntry_DoNotUse;
struct AliasIdentity_AliasMetadataEntry_DoNotUseDefaultTypeInternal;
extern AliasIdentity_AliasMetadataEntry_DoNotUseDefaultTypeInternal _AliasIdentity_AliasMetadataEntry_DoNotUse_default_instance_;
class IdentityAuditLog;
struct IdentityAuditLogDefaultTypeInternal;
extern IdentityAuditLogDefaultTypeInternal _IdentityAuditLog_default_instance_;
class IdentityAuditLog_ActionDetailsEntry_DoNotUse;
struct IdentityAuditLog_ActionDetailsEntry_DoNotUseDefaultTypeInternal;
extern IdentityAuditLog_ActionDetailsEntry_DoNotUseDefaultTypeInternal _IdentityAuditLog_ActionDetailsEntry_DoNotUse_default_instance_;
class IdentityAuditLog_MetadataEntry_DoNotUse;
struct IdentityAuditLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern IdentityAuditLog_MetadataEntry_DoNotUseDefaultTypeInternal _IdentityAuditLog_MetadataEntry_DoNotUse_default_instance_;
class SeigrIdentityData;
struct SeigrIdentityDataDefaultTypeInternal;
extern SeigrIdentityDataDefaultTypeInternal _SeigrIdentityData_default_instance_;
class SeigrIdentityData_MetadataEntry_DoNotUse;
struct SeigrIdentityData_MetadataEntry_DoNotUseDefaultTypeInternal;
extern SeigrIdentityData_MetadataEntry_DoNotUseDefaultTypeInternal _SeigrIdentityData_MetadataEntry_DoNotUse_default_instance_;
class SeigrIdentityData_SecurityParametersEntry_DoNotUse;
struct SeigrIdentityData_SecurityParametersEntry_DoNotUseDefaultTypeInternal;
extern SeigrIdentityData_SecurityParametersEntry_DoNotUseDefaultTypeInternal _SeigrIdentityData_SecurityParametersEntry_DoNotUse_default_instance_;
class SeigrIdentityData_VerificationMetadataEntry_DoNotUse;
struct SeigrIdentityData_VerificationMetadataEntry_DoNotUseDefaultTypeInternal;
extern SeigrIdentityData_VerificationMetadataEntry_DoNotUseDefaultTypeInternal _SeigrIdentityData_VerificationMetadataEntry_DoNotUse_default_instance_;
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
enum IdentityStatus : int {
  IDENTITY_STATUS_UNDEFINED = 0,
  IDENTITY_ACTIVE = 1,
  IDENTITY_SUSPENDED = 2,
  IDENTITY_REVOKED = 3,
  IDENTITY_PENDING_VERIFICATION = 4,
  IDENTITY_EXPIRED = 5,
  IdentityStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IdentityStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IdentityStatus_IsValid(int value);
extern const uint32_t IdentityStatus_internal_data_[];
constexpr IdentityStatus IdentityStatus_MIN = static_cast<IdentityStatus>(0);
constexpr IdentityStatus IdentityStatus_MAX = static_cast<IdentityStatus>(5);
constexpr int IdentityStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
IdentityStatus_descriptor();
template <typename T>
const std::string& IdentityStatus_Name(T value) {
  static_assert(std::is_same<T, IdentityStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IdentityStatus_Name().");
  return IdentityStatus_Name(static_cast<IdentityStatus>(value));
}
template <>
inline const std::string& IdentityStatus_Name(IdentityStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IdentityStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool IdentityStatus_Parse(absl::string_view name, IdentityStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IdentityStatus>(
      IdentityStatus_descriptor(), name, value);
}
enum IdentityType : int {
  IDENTITY_TYPE_UNDEFINED = 0,
  IDENTITY_USER = 1,
  IDENTITY_SENSOR = 2,
  IDENTITY_SERVER = 3,
  IDENTITY_APPLICATION = 4,
  IDENTITY_DEVICE = 5,
  IdentityType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IdentityType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IdentityType_IsValid(int value);
extern const uint32_t IdentityType_internal_data_[];
constexpr IdentityType IdentityType_MIN = static_cast<IdentityType>(0);
constexpr IdentityType IdentityType_MAX = static_cast<IdentityType>(5);
constexpr int IdentityType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
IdentityType_descriptor();
template <typename T>
const std::string& IdentityType_Name(T value) {
  static_assert(std::is_same<T, IdentityType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IdentityType_Name().");
  return IdentityType_Name(static_cast<IdentityType>(value));
}
template <>
inline const std::string& IdentityType_Name(IdentityType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IdentityType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool IdentityType_Parse(absl::string_view name, IdentityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IdentityType>(
      IdentityType_descriptor(), name, value);
}
enum PrivacyLevel : int {
  PRIVACY_PUBLIC = 0,
  PRIVACY_PARTIAL_TRACE = 1,
  PRIVACY_SEMI_ANONYMOUS = 2,
  PRIVACY_FULL_ANONYMOUS = 3,
  PRIVACY_SELECTIVE_EXPOSURE = 4,
  PrivacyLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PrivacyLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PrivacyLevel_IsValid(int value);
extern const uint32_t PrivacyLevel_internal_data_[];
constexpr PrivacyLevel PrivacyLevel_MIN = static_cast<PrivacyLevel>(0);
constexpr PrivacyLevel PrivacyLevel_MAX = static_cast<PrivacyLevel>(4);
constexpr int PrivacyLevel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PrivacyLevel_descriptor();
template <typename T>
const std::string& PrivacyLevel_Name(T value) {
  static_assert(std::is_same<T, PrivacyLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PrivacyLevel_Name().");
  return PrivacyLevel_Name(static_cast<PrivacyLevel>(value));
}
template <>
inline const std::string& PrivacyLevel_Name(PrivacyLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PrivacyLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PrivacyLevel_Parse(absl::string_view name, PrivacyLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrivacyLevel>(
      PrivacyLevel_descriptor(), name, value);
}
enum VerificationLevel : int {
  VERIFICATION_LEVEL_UNDEFINED = 0,
  VERIFICATION_LOW_TRUST = 1,
  VERIFICATION_MEDIUM_TRUST = 2,
  VERIFICATION_HIGH_TRUST = 3,
  VERIFICATION_ADMIN_VERIFIED = 4,
  VERIFICATION_CUSTOM = 5,
  VerificationLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VerificationLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VerificationLevel_IsValid(int value);
extern const uint32_t VerificationLevel_internal_data_[];
constexpr VerificationLevel VerificationLevel_MIN = static_cast<VerificationLevel>(0);
constexpr VerificationLevel VerificationLevel_MAX = static_cast<VerificationLevel>(5);
constexpr int VerificationLevel_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
VerificationLevel_descriptor();
template <typename T>
const std::string& VerificationLevel_Name(T value) {
  static_assert(std::is_same<T, VerificationLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VerificationLevel_Name().");
  return VerificationLevel_Name(static_cast<VerificationLevel>(value));
}
template <>
inline const std::string& VerificationLevel_Name(VerificationLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VerificationLevel_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool VerificationLevel_Parse(absl::string_view name, VerificationLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VerificationLevel>(
      VerificationLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SeigrIdentityData_VerificationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SeigrIdentityData_VerificationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrIdentityData_VerificationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SeigrIdentityData_VerificationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SeigrIdentityData_VerificationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SeigrIdentityData_VerificationMetadataEntry_DoNotUse*>(
        &_SeigrIdentityData_VerificationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SeigrIdentityData_SecurityParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SeigrIdentityData_SecurityParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrIdentityData_SecurityParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SeigrIdentityData_SecurityParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SeigrIdentityData_SecurityParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SeigrIdentityData_SecurityParametersEntry_DoNotUse*>(
        &_SeigrIdentityData_SecurityParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SeigrIdentityData_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SeigrIdentityData_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrIdentityData_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SeigrIdentityData_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SeigrIdentityData_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SeigrIdentityData_MetadataEntry_DoNotUse*>(
        &_SeigrIdentityData_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IdentityAuditLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IdentityAuditLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentityAuditLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IdentityAuditLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IdentityAuditLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IdentityAuditLog_MetadataEntry_DoNotUse*>(
        &_IdentityAuditLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IdentityAuditLog_ActionDetailsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IdentityAuditLog_ActionDetailsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentityAuditLog_ActionDetailsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IdentityAuditLog_ActionDetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IdentityAuditLog_ActionDetailsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IdentityAuditLog_ActionDetailsEntry_DoNotUse*>(
        &_IdentityAuditLog_ActionDetailsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AliasIdentity_AliasMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AliasIdentity_AliasMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AliasIdentity_AliasMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AliasIdentity_AliasMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AliasIdentity_AliasMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AliasIdentity_AliasMetadataEntry_DoNotUse*>(
        &_AliasIdentity_AliasMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_identity_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IdentityAuditLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.IdentityAuditLog) */ {
 public:
  inline IdentityAuditLog() : IdentityAuditLog(nullptr) {}
  ~IdentityAuditLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IdentityAuditLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IdentityAuditLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentityAuditLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline IdentityAuditLog(const IdentityAuditLog& from) : IdentityAuditLog(nullptr, from) {}
  inline IdentityAuditLog(IdentityAuditLog&& from) noexcept
      : IdentityAuditLog(nullptr, std::move(from)) {}
  inline IdentityAuditLog& operator=(const IdentityAuditLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentityAuditLog& operator=(IdentityAuditLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentityAuditLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentityAuditLog* internal_default_instance() {
    return reinterpret_cast<const IdentityAuditLog*>(
        &_IdentityAuditLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(IdentityAuditLog& a, IdentityAuditLog& b) { a.Swap(&b); }
  inline void Swap(IdentityAuditLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentityAuditLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentityAuditLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IdentityAuditLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IdentityAuditLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IdentityAuditLog& from) { IdentityAuditLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IdentityAuditLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.IdentityAuditLog"; }

 protected:
  explicit IdentityAuditLog(::google::protobuf::Arena* arena);
  IdentityAuditLog(::google::protobuf::Arena* arena, const IdentityAuditLog& from);
  IdentityAuditLog(::google::protobuf::Arena* arena, IdentityAuditLog&& from) noexcept
      : IdentityAuditLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 6,
    kActionDetailsFieldNumber = 7,
    kActionFieldNumber = 1,
    kPerformedByFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kStatusFieldNumber = 4,
    kDetailsFieldNumber = 5,
    kComplianceTagFieldNumber = 8,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // map<string, string> action_details = 7;
  int action_details_size() const;
  private:
  int _internal_action_details_size() const;

  public:
  void clear_action_details() ;
  const ::google::protobuf::Map<std::string, std::string>& action_details() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_action_details();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_action_details() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_action_details();

  public:
  // string action = 1;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string performed_by = 2;
  void clear_performed_by() ;
  const std::string& performed_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_performed_by(Arg_&& arg, Args_... args);
  std::string* mutable_performed_by();
  PROTOBUF_NODISCARD std::string* release_performed_by();
  void set_allocated_performed_by(std::string* value);

  private:
  const std::string& _internal_performed_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_performed_by(
      const std::string& value);
  std::string* _internal_mutable_performed_by();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string status = 4;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string details = 5;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string compliance_tag = 8;
  void clear_compliance_tag() ;
  const std::string& compliance_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_tag(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_tag();
  PROTOBUF_NODISCARD std::string* release_compliance_tag();
  void set_allocated_compliance_tag(std::string* value);

  private:
  const std::string& _internal_compliance_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_tag(
      const std::string& value);
  std::string* _internal_mutable_compliance_tag();

  public:
  // @@protoc_insertion_point(class_scope:seigr.IdentityAuditLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      115, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IdentityAuditLog& from_msg);
    ::google::protobuf::internal::MapField<IdentityAuditLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::MapField<IdentityAuditLog_ActionDetailsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        action_details_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr performed_by_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::internal::ArenaStringPtr compliance_tag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_identity_2eproto;
};
// -------------------------------------------------------------------

class AliasIdentity final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.AliasIdentity) */ {
 public:
  inline AliasIdentity() : AliasIdentity(nullptr) {}
  ~AliasIdentity() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AliasIdentity* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AliasIdentity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AliasIdentity(
      ::google::protobuf::internal::ConstantInitialized);

  inline AliasIdentity(const AliasIdentity& from) : AliasIdentity(nullptr, from) {}
  inline AliasIdentity(AliasIdentity&& from) noexcept
      : AliasIdentity(nullptr, std::move(from)) {}
  inline AliasIdentity& operator=(const AliasIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AliasIdentity& operator=(AliasIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AliasIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AliasIdentity* internal_default_instance() {
    return reinterpret_cast<const AliasIdentity*>(
        &_AliasIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AliasIdentity& a, AliasIdentity& b) { a.Swap(&b); }
  inline void Swap(AliasIdentity* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AliasIdentity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AliasIdentity* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AliasIdentity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AliasIdentity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AliasIdentity& from) { AliasIdentity::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AliasIdentity* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.AliasIdentity"; }

 protected:
  explicit AliasIdentity(::google::protobuf::Arena* arena);
  AliasIdentity(::google::protobuf::Arena* arena, const AliasIdentity& from);
  AliasIdentity(::google::protobuf::Arena* arena, AliasIdentity&& from) noexcept
      : AliasIdentity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAliasAccessPoliciesFieldNumber = 7,
    kAliasMetadataFieldNumber = 8,
    kRelatedAliasesFieldNumber = 10,
    kAliasIdFieldNumber = 1,
    kAliasNameFieldNumber = 5,
    kAliasSignatureFieldNumber = 6,
    kExpirationTimestampFieldNumber = 9,
    kTraceabilityLevelFieldNumber = 11,
    kStatusFieldNumber = 2,
    kPrivacyLevelFieldNumber = 3,
    kIdentityTypeFieldNumber = 4,
  };
  // repeated .seigr.access_control.AccessPolicy alias_access_policies = 7;
  int alias_access_policies_size() const;
  private:
  int _internal_alias_access_policies_size() const;

  public:
  void clear_alias_access_policies() ;
  ::seigr::access_control::AccessPolicy* mutable_alias_access_policies(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* mutable_alias_access_policies();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& _internal_alias_access_policies() const;
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* _internal_mutable_alias_access_policies();
  public:
  const ::seigr::access_control::AccessPolicy& alias_access_policies(int index) const;
  ::seigr::access_control::AccessPolicy* add_alias_access_policies();
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& alias_access_policies() const;
  // map<string, string> alias_metadata = 8;
  int alias_metadata_size() const;
  private:
  int _internal_alias_metadata_size() const;

  public:
  void clear_alias_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& alias_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_alias_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_alias_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_alias_metadata();

  public:
  // repeated string related_aliases = 10;
  int related_aliases_size() const;
  private:
  int _internal_related_aliases_size() const;

  public:
  void clear_related_aliases() ;
  const std::string& related_aliases(int index) const;
  std::string* mutable_related_aliases(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_related_aliases(int index, Arg_&& value, Args_... args);
  std::string* add_related_aliases();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_related_aliases(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& related_aliases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_related_aliases();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_related_aliases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_related_aliases();

  public:
  // string alias_id = 1;
  void clear_alias_id() ;
  const std::string& alias_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias_id(Arg_&& arg, Args_... args);
  std::string* mutable_alias_id();
  PROTOBUF_NODISCARD std::string* release_alias_id();
  void set_allocated_alias_id(std::string* value);

  private:
  const std::string& _internal_alias_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_id(
      const std::string& value);
  std::string* _internal_mutable_alias_id();

  public:
  // string alias_name = 5;
  void clear_alias_name() ;
  const std::string& alias_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias_name(Arg_&& arg, Args_... args);
  std::string* mutable_alias_name();
  PROTOBUF_NODISCARD std::string* release_alias_name();
  void set_allocated_alias_name(std::string* value);

  private:
  const std::string& _internal_alias_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_name(
      const std::string& value);
  std::string* _internal_mutable_alias_name();

  public:
  // string alias_signature = 6;
  void clear_alias_signature() ;
  const std::string& alias_signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias_signature(Arg_&& arg, Args_... args);
  std::string* mutable_alias_signature();
  PROTOBUF_NODISCARD std::string* release_alias_signature();
  void set_allocated_alias_signature(std::string* value);

  private:
  const std::string& _internal_alias_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias_signature(
      const std::string& value);
  std::string* _internal_mutable_alias_signature();

  public:
  // string expiration_timestamp = 9;
  void clear_expiration_timestamp() ;
  const std::string& expiration_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiration_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_expiration_timestamp();
  PROTOBUF_NODISCARD std::string* release_expiration_timestamp();
  void set_allocated_expiration_timestamp(std::string* value);

  private:
  const std::string& _internal_expiration_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiration_timestamp(
      const std::string& value);
  std::string* _internal_mutable_expiration_timestamp();

  public:
  // string traceability_level = 11;
  void clear_traceability_level() ;
  const std::string& traceability_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_traceability_level(Arg_&& arg, Args_... args);
  std::string* mutable_traceability_level();
  PROTOBUF_NODISCARD std::string* release_traceability_level();
  void set_allocated_traceability_level(std::string* value);

  private:
  const std::string& _internal_traceability_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traceability_level(
      const std::string& value);
  std::string* _internal_mutable_traceability_level();

  public:
  // .seigr.IdentityStatus status = 2;
  void clear_status() ;
  ::seigr::IdentityStatus status() const;
  void set_status(::seigr::IdentityStatus value);

  private:
  ::seigr::IdentityStatus _internal_status() const;
  void _internal_set_status(::seigr::IdentityStatus value);

  public:
  // .seigr.PrivacyLevel privacy_level = 3;
  void clear_privacy_level() ;
  ::seigr::PrivacyLevel privacy_level() const;
  void set_privacy_level(::seigr::PrivacyLevel value);

  private:
  ::seigr::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::seigr::PrivacyLevel value);

  public:
  // .seigr.IdentityType identity_type = 4;
  void clear_identity_type() ;
  ::seigr::IdentityType identity_type() const;
  void set_identity_type(::seigr::IdentityType value);

  private:
  ::seigr::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::seigr::IdentityType value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.AliasIdentity)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      136, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AliasIdentity& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::access_control::AccessPolicy > alias_access_policies_;
    ::google::protobuf::internal::MapField<AliasIdentity_AliasMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        alias_metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> related_aliases_;
    ::google::protobuf::internal::ArenaStringPtr alias_id_;
    ::google::protobuf::internal::ArenaStringPtr alias_name_;
    ::google::protobuf::internal::ArenaStringPtr alias_signature_;
    ::google::protobuf::internal::ArenaStringPtr expiration_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr traceability_level_;
    int status_;
    int privacy_level_;
    int identity_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_identity_2eproto;
};
// -------------------------------------------------------------------

class SeigrIdentityData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.SeigrIdentityData) */ {
 public:
  inline SeigrIdentityData() : SeigrIdentityData(nullptr) {}
  ~SeigrIdentityData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SeigrIdentityData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SeigrIdentityData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeigrIdentityData(
      ::google::protobuf::internal::ConstantInitialized);

  inline SeigrIdentityData(const SeigrIdentityData& from) : SeigrIdentityData(nullptr, from) {}
  inline SeigrIdentityData(SeigrIdentityData&& from) noexcept
      : SeigrIdentityData(nullptr, std::move(from)) {}
  inline SeigrIdentityData& operator=(const SeigrIdentityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeigrIdentityData& operator=(SeigrIdentityData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeigrIdentityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeigrIdentityData* internal_default_instance() {
    return reinterpret_cast<const SeigrIdentityData*>(
        &_SeigrIdentityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SeigrIdentityData& a, SeigrIdentityData& b) { a.Swap(&b); }
  inline void Swap(SeigrIdentityData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeigrIdentityData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeigrIdentityData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SeigrIdentityData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeigrIdentityData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SeigrIdentityData& from) { SeigrIdentityData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SeigrIdentityData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.SeigrIdentityData"; }

 protected:
  explicit SeigrIdentityData(::google::protobuf::Arena* arena);
  SeigrIdentityData(::google::protobuf::Arena* arena, const SeigrIdentityData& from);
  SeigrIdentityData(::google::protobuf::Arena* arena, SeigrIdentityData&& from) noexcept
      : SeigrIdentityData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVerificationMetadataFieldNumber = 11,
    kAccessPoliciesFieldNumber = 12,
    kAuditLogsFieldNumber = 13,
    kMetadataFieldNumber = 15,
    kSecurityParametersFieldNumber = 20,
    kAliasesFieldNumber = 23,
    kSenaryIdFieldNumber = 4,
    kOwnerPublicKeyFieldNumber = 5,
    kEncryptedPrivateKeyFieldNumber = 6,
    kOwnerSignatureFieldNumber = 7,
    kRevocationReasonFieldNumber = 9,
    kVersionFieldNumber = 14,
    kEncryptionKeyFieldNumber = 16,
    kUsbPathFieldNumber = 17,
    kLastUsedTimestampFieldNumber = 19,
    kSecurityPolicyIdFieldNumber = 22,
    kExpirationTimestampFieldNumber = 24,
    kReactivationCodeFieldNumber = 25,
    kKeyRotationScheduleFieldNumber = 26,
    kCreationTimestampFieldNumber = 1,
    kIdentityTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kVerificationLevelFieldNumber = 10,
    kRevokedFieldNumber = 8,
    kUsbRequiredFieldNumber = 18,
    kMultiFactorEnabledFieldNumber = 21,
    kDefaultPrivacyLevelFieldNumber = 27,
  };
  // map<string, string> verification_metadata = 11;
  int verification_metadata_size() const;
  private:
  int _internal_verification_metadata_size() const;

  public:
  void clear_verification_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& verification_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_verification_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_verification_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_verification_metadata();

  public:
  // repeated .seigr.access_control.AccessPolicy access_policies = 12;
  int access_policies_size() const;
  private:
  int _internal_access_policies_size() const;

  public:
  void clear_access_policies() ;
  ::seigr::access_control::AccessPolicy* mutable_access_policies(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* mutable_access_policies();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& _internal_access_policies() const;
  ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* _internal_mutable_access_policies();
  public:
  const ::seigr::access_control::AccessPolicy& access_policies(int index) const;
  ::seigr::access_control::AccessPolicy* add_access_policies();
  const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& access_policies() const;
  // repeated .seigr.IdentityAuditLog audit_logs = 13;
  int audit_logs_size() const;
  private:
  int _internal_audit_logs_size() const;

  public:
  void clear_audit_logs() ;
  ::seigr::IdentityAuditLog* mutable_audit_logs(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>* mutable_audit_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>& _internal_audit_logs() const;
  ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>* _internal_mutable_audit_logs();
  public:
  const ::seigr::IdentityAuditLog& audit_logs(int index) const;
  ::seigr::IdentityAuditLog* add_audit_logs();
  const ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>& audit_logs() const;
  // map<string, string> metadata = 15;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // map<string, string> security_parameters = 20;
  int security_parameters_size() const;
  private:
  int _internal_security_parameters_size() const;

  public:
  void clear_security_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& security_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_security_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_security_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_security_parameters();

  public:
  // repeated .seigr.AliasIdentity aliases = 23;
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;

  public:
  void clear_aliases() ;
  ::seigr::AliasIdentity* mutable_aliases(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>* mutable_aliases();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>& _internal_aliases() const;
  ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>* _internal_mutable_aliases();
  public:
  const ::seigr::AliasIdentity& aliases(int index) const;
  ::seigr::AliasIdentity* add_aliases();
  const ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>& aliases() const;
  // bytes senary_id = 4;
  void clear_senary_id() ;
  const std::string& senary_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senary_id(Arg_&& arg, Args_... args);
  std::string* mutable_senary_id();
  PROTOBUF_NODISCARD std::string* release_senary_id();
  void set_allocated_senary_id(std::string* value);

  private:
  const std::string& _internal_senary_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senary_id(
      const std::string& value);
  std::string* _internal_mutable_senary_id();

  public:
  // bytes owner_public_key = 5;
  void clear_owner_public_key() ;
  const std::string& owner_public_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_owner_public_key();
  PROTOBUF_NODISCARD std::string* release_owner_public_key();
  void set_allocated_owner_public_key(std::string* value);

  private:
  const std::string& _internal_owner_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_public_key(
      const std::string& value);
  std::string* _internal_mutable_owner_public_key();

  public:
  // bytes encrypted_private_key = 6;
  void clear_encrypted_private_key() ;
  const std::string& encrypted_private_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_private_key(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_private_key();
  PROTOBUF_NODISCARD std::string* release_encrypted_private_key();
  void set_allocated_encrypted_private_key(std::string* value);

  private:
  const std::string& _internal_encrypted_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_private_key(
      const std::string& value);
  std::string* _internal_mutable_encrypted_private_key();

  public:
  // bytes owner_signature = 7;
  void clear_owner_signature() ;
  const std::string& owner_signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_signature(Arg_&& arg, Args_... args);
  std::string* mutable_owner_signature();
  PROTOBUF_NODISCARD std::string* release_owner_signature();
  void set_allocated_owner_signature(std::string* value);

  private:
  const std::string& _internal_owner_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_signature(
      const std::string& value);
  std::string* _internal_mutable_owner_signature();

  public:
  // string revocation_reason = 9;
  void clear_revocation_reason() ;
  const std::string& revocation_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_revocation_reason(Arg_&& arg, Args_... args);
  std::string* mutable_revocation_reason();
  PROTOBUF_NODISCARD std::string* release_revocation_reason();
  void set_allocated_revocation_reason(std::string* value);

  private:
  const std::string& _internal_revocation_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revocation_reason(
      const std::string& value);
  std::string* _internal_mutable_revocation_reason();

  public:
  // string version = 14;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes encryption_key = 16;
  void clear_encryption_key() ;
  const std::string& encryption_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encryption_key(Arg_&& arg, Args_... args);
  std::string* mutable_encryption_key();
  PROTOBUF_NODISCARD std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* value);

  private:
  const std::string& _internal_encryption_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_key(
      const std::string& value);
  std::string* _internal_mutable_encryption_key();

  public:
  // string usb_path = 17;
  void clear_usb_path() ;
  const std::string& usb_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usb_path(Arg_&& arg, Args_... args);
  std::string* mutable_usb_path();
  PROTOBUF_NODISCARD std::string* release_usb_path();
  void set_allocated_usb_path(std::string* value);

  private:
  const std::string& _internal_usb_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usb_path(
      const std::string& value);
  std::string* _internal_mutable_usb_path();

  public:
  // string last_used_timestamp = 19;
  void clear_last_used_timestamp() ;
  const std::string& last_used_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_used_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_last_used_timestamp();
  PROTOBUF_NODISCARD std::string* release_last_used_timestamp();
  void set_allocated_last_used_timestamp(std::string* value);

  private:
  const std::string& _internal_last_used_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_used_timestamp(
      const std::string& value);
  std::string* _internal_mutable_last_used_timestamp();

  public:
  // string security_policy_id = 22;
  void clear_security_policy_id() ;
  const std::string& security_policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_security_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_security_policy_id();
  PROTOBUF_NODISCARD std::string* release_security_policy_id();
  void set_allocated_security_policy_id(std::string* value);

  private:
  const std::string& _internal_security_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_policy_id(
      const std::string& value);
  std::string* _internal_mutable_security_policy_id();

  public:
  // string expiration_timestamp = 24;
  void clear_expiration_timestamp() ;
  const std::string& expiration_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiration_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_expiration_timestamp();
  PROTOBUF_NODISCARD std::string* release_expiration_timestamp();
  void set_allocated_expiration_timestamp(std::string* value);

  private:
  const std::string& _internal_expiration_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiration_timestamp(
      const std::string& value);
  std::string* _internal_mutable_expiration_timestamp();

  public:
  // string reactivation_code = 25;
  void clear_reactivation_code() ;
  const std::string& reactivation_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reactivation_code(Arg_&& arg, Args_... args);
  std::string* mutable_reactivation_code();
  PROTOBUF_NODISCARD std::string* release_reactivation_code();
  void set_allocated_reactivation_code(std::string* value);

  private:
  const std::string& _internal_reactivation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reactivation_code(
      const std::string& value);
  std::string* _internal_mutable_reactivation_code();

  public:
  // string key_rotation_schedule = 26;
  void clear_key_rotation_schedule() ;
  const std::string& key_rotation_schedule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_rotation_schedule(Arg_&& arg, Args_... args);
  std::string* mutable_key_rotation_schedule();
  PROTOBUF_NODISCARD std::string* release_key_rotation_schedule();
  void set_allocated_key_rotation_schedule(std::string* value);

  private:
  const std::string& _internal_key_rotation_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_rotation_schedule(
      const std::string& value);
  std::string* _internal_mutable_key_rotation_schedule();

  public:
  // int64 creation_timestamp = 1;
  void clear_creation_timestamp() ;
  ::int64_t creation_timestamp() const;
  void set_creation_timestamp(::int64_t value);

  private:
  ::int64_t _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::int64_t value);

  public:
  // .seigr.IdentityType identity_type = 2;
  void clear_identity_type() ;
  ::seigr::IdentityType identity_type() const;
  void set_identity_type(::seigr::IdentityType value);

  private:
  ::seigr::IdentityType _internal_identity_type() const;
  void _internal_set_identity_type(::seigr::IdentityType value);

  public:
  // .seigr.IdentityStatus status = 3;
  void clear_status() ;
  ::seigr::IdentityStatus status() const;
  void set_status(::seigr::IdentityStatus value);

  private:
  ::seigr::IdentityStatus _internal_status() const;
  void _internal_set_status(::seigr::IdentityStatus value);

  public:
  // .seigr.VerificationLevel verification_level = 10;
  void clear_verification_level() ;
  ::seigr::VerificationLevel verification_level() const;
  void set_verification_level(::seigr::VerificationLevel value);

  private:
  ::seigr::VerificationLevel _internal_verification_level() const;
  void _internal_set_verification_level(::seigr::VerificationLevel value);

  public:
  // bool revoked = 8;
  void clear_revoked() ;
  bool revoked() const;
  void set_revoked(bool value);

  private:
  bool _internal_revoked() const;
  void _internal_set_revoked(bool value);

  public:
  // bool usb_required = 18;
  void clear_usb_required() ;
  bool usb_required() const;
  void set_usb_required(bool value);

  private:
  bool _internal_usb_required() const;
  void _internal_set_usb_required(bool value);

  public:
  // bool multi_factor_enabled = 21;
  void clear_multi_factor_enabled() ;
  bool multi_factor_enabled() const;
  void set_multi_factor_enabled(bool value);

  private:
  bool _internal_multi_factor_enabled() const;
  void _internal_set_multi_factor_enabled(bool value);

  public:
  // .seigr.PrivacyLevel default_privacy_level = 27;
  void clear_default_privacy_level() ;
  ::seigr::PrivacyLevel default_privacy_level() const;
  void set_default_privacy_level(::seigr::PrivacyLevel value);

  private:
  ::seigr::PrivacyLevel _internal_default_privacy_level() const;
  void _internal_set_default_privacy_level(::seigr::PrivacyLevel value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.SeigrIdentityData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 27, 6,
      231, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SeigrIdentityData& from_msg);
    ::google::protobuf::internal::MapField<SeigrIdentityData_VerificationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        verification_metadata_;
    ::google::protobuf::RepeatedPtrField< ::seigr::access_control::AccessPolicy > access_policies_;
    ::google::protobuf::RepeatedPtrField< ::seigr::IdentityAuditLog > audit_logs_;
    ::google::protobuf::internal::MapField<SeigrIdentityData_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::MapField<SeigrIdentityData_SecurityParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        security_parameters_;
    ::google::protobuf::RepeatedPtrField< ::seigr::AliasIdentity > aliases_;
    ::google::protobuf::internal::ArenaStringPtr senary_id_;
    ::google::protobuf::internal::ArenaStringPtr owner_public_key_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_private_key_;
    ::google::protobuf::internal::ArenaStringPtr owner_signature_;
    ::google::protobuf::internal::ArenaStringPtr revocation_reason_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr encryption_key_;
    ::google::protobuf::internal::ArenaStringPtr usb_path_;
    ::google::protobuf::internal::ArenaStringPtr last_used_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr security_policy_id_;
    ::google::protobuf::internal::ArenaStringPtr expiration_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr reactivation_code_;
    ::google::protobuf::internal::ArenaStringPtr key_rotation_schedule_;
    ::int64_t creation_timestamp_;
    int identity_type_;
    int status_;
    int verification_level_;
    bool revoked_;
    bool usb_required_;
    bool multi_factor_enabled_;
    int default_privacy_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_identity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AliasIdentity

// string alias_id = 1;
inline void AliasIdentity::clear_alias_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_id_.ClearToEmpty();
}
inline const std::string& AliasIdentity::alias_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.alias_id)
  return _internal_alias_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AliasIdentity::set_alias_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.alias_id)
}
inline std::string* AliasIdentity::mutable_alias_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias_id();
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.alias_id)
  return _s;
}
inline const std::string& AliasIdentity::_internal_alias_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_id_.Get();
}
inline void AliasIdentity::_internal_set_alias_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_id_.Set(value, GetArena());
}
inline std::string* AliasIdentity::_internal_mutable_alias_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_id_.Mutable( GetArena());
}
inline std::string* AliasIdentity::release_alias_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.AliasIdentity.alias_id)
  return _impl_.alias_id_.Release();
}
inline void AliasIdentity::set_allocated_alias_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alias_id_.IsDefault()) {
    _impl_.alias_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.AliasIdentity.alias_id)
}

// .seigr.IdentityStatus status = 2;
inline void AliasIdentity::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::IdentityStatus AliasIdentity::status() const {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.status)
  return _internal_status();
}
inline void AliasIdentity::set_status(::seigr::IdentityStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.status)
}
inline ::seigr::IdentityStatus AliasIdentity::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::IdentityStatus>(_impl_.status_);
}
inline void AliasIdentity::_internal_set_status(::seigr::IdentityStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .seigr.PrivacyLevel privacy_level = 3;
inline void AliasIdentity::clear_privacy_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.privacy_level_ = 0;
}
inline ::seigr::PrivacyLevel AliasIdentity::privacy_level() const {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.privacy_level)
  return _internal_privacy_level();
}
inline void AliasIdentity::set_privacy_level(::seigr::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.privacy_level)
}
inline ::seigr::PrivacyLevel AliasIdentity::_internal_privacy_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::PrivacyLevel>(_impl_.privacy_level_);
}
inline void AliasIdentity::_internal_set_privacy_level(::seigr::PrivacyLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.privacy_level_ = value;
}

// .seigr.IdentityType identity_type = 4;
inline void AliasIdentity::clear_identity_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_type_ = 0;
}
inline ::seigr::IdentityType AliasIdentity::identity_type() const {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.identity_type)
  return _internal_identity_type();
}
inline void AliasIdentity::set_identity_type(::seigr::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.identity_type)
}
inline ::seigr::IdentityType AliasIdentity::_internal_identity_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::IdentityType>(_impl_.identity_type_);
}
inline void AliasIdentity::_internal_set_identity_type(::seigr::IdentityType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_type_ = value;
}

// string alias_name = 5;
inline void AliasIdentity::clear_alias_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_name_.ClearToEmpty();
}
inline const std::string& AliasIdentity::alias_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.alias_name)
  return _internal_alias_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AliasIdentity::set_alias_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.alias_name)
}
inline std::string* AliasIdentity::mutable_alias_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias_name();
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.alias_name)
  return _s;
}
inline const std::string& AliasIdentity::_internal_alias_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_name_.Get();
}
inline void AliasIdentity::_internal_set_alias_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_name_.Set(value, GetArena());
}
inline std::string* AliasIdentity::_internal_mutable_alias_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_name_.Mutable( GetArena());
}
inline std::string* AliasIdentity::release_alias_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.AliasIdentity.alias_name)
  return _impl_.alias_name_.Release();
}
inline void AliasIdentity::set_allocated_alias_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alias_name_.IsDefault()) {
    _impl_.alias_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.AliasIdentity.alias_name)
}

// string alias_signature = 6;
inline void AliasIdentity::clear_alias_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_signature_.ClearToEmpty();
}
inline const std::string& AliasIdentity::alias_signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.alias_signature)
  return _internal_alias_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AliasIdentity::set_alias_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_signature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.alias_signature)
}
inline std::string* AliasIdentity::mutable_alias_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias_signature();
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.alias_signature)
  return _s;
}
inline const std::string& AliasIdentity::_internal_alias_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_signature_.Get();
}
inline void AliasIdentity::_internal_set_alias_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_signature_.Set(value, GetArena());
}
inline std::string* AliasIdentity::_internal_mutable_alias_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_signature_.Mutable( GetArena());
}
inline std::string* AliasIdentity::release_alias_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.AliasIdentity.alias_signature)
  return _impl_.alias_signature_.Release();
}
inline void AliasIdentity::set_allocated_alias_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.alias_signature_.IsDefault()) {
    _impl_.alias_signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.AliasIdentity.alias_signature)
}

// repeated .seigr.access_control.AccessPolicy alias_access_policies = 7;
inline int AliasIdentity::_internal_alias_access_policies_size() const {
  return _internal_alias_access_policies().size();
}
inline int AliasIdentity::alias_access_policies_size() const {
  return _internal_alias_access_policies_size();
}
inline ::seigr::access_control::AccessPolicy* AliasIdentity::mutable_alias_access_policies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.alias_access_policies)
  return _internal_mutable_alias_access_policies()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* AliasIdentity::mutable_alias_access_policies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.AliasIdentity.alias_access_policies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alias_access_policies();
}
inline const ::seigr::access_control::AccessPolicy& AliasIdentity::alias_access_policies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.alias_access_policies)
  return _internal_alias_access_policies().Get(index);
}
inline ::seigr::access_control::AccessPolicy* AliasIdentity::add_alias_access_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::access_control::AccessPolicy* _add = _internal_mutable_alias_access_policies()->Add();
  // @@protoc_insertion_point(field_add:seigr.AliasIdentity.alias_access_policies)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& AliasIdentity::alias_access_policies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.AliasIdentity.alias_access_policies)
  return _internal_alias_access_policies();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>&
AliasIdentity::_internal_alias_access_policies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_access_policies_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>*
AliasIdentity::_internal_mutable_alias_access_policies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alias_access_policies_;
}

// map<string, string> alias_metadata = 8;
inline int AliasIdentity::_internal_alias_metadata_size() const {
  return _internal_alias_metadata().size();
}
inline int AliasIdentity::alias_metadata_size() const {
  return _internal_alias_metadata_size();
}
inline void AliasIdentity::clear_alias_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AliasIdentity::_internal_alias_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AliasIdentity::alias_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.AliasIdentity.alias_metadata)
  return _internal_alias_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* AliasIdentity::_internal_mutable_alias_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AliasIdentity::mutable_alias_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.AliasIdentity.alias_metadata)
  return _internal_mutable_alias_metadata();
}

// string expiration_timestamp = 9;
inline void AliasIdentity::clear_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.ClearToEmpty();
}
inline const std::string& AliasIdentity::expiration_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.expiration_timestamp)
  return _internal_expiration_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AliasIdentity::set_expiration_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.expiration_timestamp)
}
inline std::string* AliasIdentity::mutable_expiration_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiration_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.expiration_timestamp)
  return _s;
}
inline const std::string& AliasIdentity::_internal_expiration_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_timestamp_.Get();
}
inline void AliasIdentity::_internal_set_expiration_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.Set(value, GetArena());
}
inline std::string* AliasIdentity::_internal_mutable_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiration_timestamp_.Mutable( GetArena());
}
inline std::string* AliasIdentity::release_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.AliasIdentity.expiration_timestamp)
  return _impl_.expiration_timestamp_.Release();
}
inline void AliasIdentity::set_allocated_expiration_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiration_timestamp_.IsDefault()) {
    _impl_.expiration_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.AliasIdentity.expiration_timestamp)
}

// repeated string related_aliases = 10;
inline int AliasIdentity::_internal_related_aliases_size() const {
  return _internal_related_aliases().size();
}
inline int AliasIdentity::related_aliases_size() const {
  return _internal_related_aliases_size();
}
inline void AliasIdentity::clear_related_aliases() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.related_aliases_.Clear();
}
inline std::string* AliasIdentity::add_related_aliases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_related_aliases()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.AliasIdentity.related_aliases)
  return _s;
}
inline const std::string& AliasIdentity::related_aliases(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.related_aliases)
  return _internal_related_aliases().Get(index);
}
inline std::string* AliasIdentity::mutable_related_aliases(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.related_aliases)
  return _internal_mutable_related_aliases()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AliasIdentity::set_related_aliases(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_related_aliases()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.related_aliases)
}
template <typename Arg_, typename... Args_>
inline void AliasIdentity::add_related_aliases(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_related_aliases(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.AliasIdentity.related_aliases)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AliasIdentity::related_aliases() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.AliasIdentity.related_aliases)
  return _internal_related_aliases();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AliasIdentity::mutable_related_aliases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.AliasIdentity.related_aliases)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_related_aliases();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AliasIdentity::_internal_related_aliases() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.related_aliases_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AliasIdentity::_internal_mutable_related_aliases() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.related_aliases_;
}

// string traceability_level = 11;
inline void AliasIdentity::clear_traceability_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traceability_level_.ClearToEmpty();
}
inline const std::string& AliasIdentity::traceability_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.AliasIdentity.traceability_level)
  return _internal_traceability_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AliasIdentity::set_traceability_level(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traceability_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.AliasIdentity.traceability_level)
}
inline std::string* AliasIdentity::mutable_traceability_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_traceability_level();
  // @@protoc_insertion_point(field_mutable:seigr.AliasIdentity.traceability_level)
  return _s;
}
inline const std::string& AliasIdentity::_internal_traceability_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.traceability_level_.Get();
}
inline void AliasIdentity::_internal_set_traceability_level(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traceability_level_.Set(value, GetArena());
}
inline std::string* AliasIdentity::_internal_mutable_traceability_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.traceability_level_.Mutable( GetArena());
}
inline std::string* AliasIdentity::release_traceability_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.AliasIdentity.traceability_level)
  return _impl_.traceability_level_.Release();
}
inline void AliasIdentity::set_allocated_traceability_level(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.traceability_level_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.traceability_level_.IsDefault()) {
    _impl_.traceability_level_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.AliasIdentity.traceability_level)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IdentityAuditLog

// string action = 1;
inline void IdentityAuditLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.action)
}
inline std::string* IdentityAuditLog::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.action)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void IdentityAuditLog::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.action)
  return _impl_.action_.Release();
}
inline void IdentityAuditLog::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.action)
}

// string performed_by = 2;
inline void IdentityAuditLog::clear_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::performed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.performed_by)
  return _internal_performed_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_performed_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.performed_by)
}
inline std::string* IdentityAuditLog::mutable_performed_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_performed_by();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.performed_by)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_performed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.performed_by_.Get();
}
inline void IdentityAuditLog::_internal_set_performed_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.performed_by_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_performed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.performed_by)
  return _impl_.performed_by_.Release();
}
inline void IdentityAuditLog::set_allocated_performed_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.performed_by_.IsDefault()) {
    _impl_.performed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.performed_by)
}

// string timestamp = 3;
inline void IdentityAuditLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.timestamp)
}
inline std::string* IdentityAuditLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.timestamp)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void IdentityAuditLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void IdentityAuditLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.timestamp)
}

// string status = 4;
inline void IdentityAuditLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.status)
}
inline std::string* IdentityAuditLog::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.status)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void IdentityAuditLog::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.status)
  return _impl_.status_.Release();
}
inline void IdentityAuditLog::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.status)
}

// string details = 5;
inline void IdentityAuditLog::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.details)
}
inline std::string* IdentityAuditLog::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.details)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void IdentityAuditLog::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.details)
  return _impl_.details_.Release();
}
inline void IdentityAuditLog::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.details)
}

// map<string, string> metadata = 6;
inline int IdentityAuditLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int IdentityAuditLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void IdentityAuditLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IdentityAuditLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IdentityAuditLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.IdentityAuditLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* IdentityAuditLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IdentityAuditLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.IdentityAuditLog.metadata)
  return _internal_mutable_metadata();
}

// map<string, string> action_details = 7;
inline int IdentityAuditLog::_internal_action_details_size() const {
  return _internal_action_details().size();
}
inline int IdentityAuditLog::action_details_size() const {
  return _internal_action_details_size();
}
inline void IdentityAuditLog::clear_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_details_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IdentityAuditLog::_internal_action_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_details_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IdentityAuditLog::action_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.IdentityAuditLog.action_details)
  return _internal_action_details();
}
inline ::google::protobuf::Map<std::string, std::string>* IdentityAuditLog::_internal_mutable_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_details_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IdentityAuditLog::mutable_action_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.IdentityAuditLog.action_details)
  return _internal_mutable_action_details();
}

// string compliance_tag = 8;
inline void IdentityAuditLog::clear_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.ClearToEmpty();
}
inline const std::string& IdentityAuditLog::compliance_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.IdentityAuditLog.compliance_tag)
  return _internal_compliance_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentityAuditLog::set_compliance_tag(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.IdentityAuditLog.compliance_tag)
}
inline std::string* IdentityAuditLog::mutable_compliance_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_tag();
  // @@protoc_insertion_point(field_mutable:seigr.IdentityAuditLog.compliance_tag)
  return _s;
}
inline const std::string& IdentityAuditLog::_internal_compliance_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_tag_.Get();
}
inline void IdentityAuditLog::_internal_set_compliance_tag(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.Set(value, GetArena());
}
inline std::string* IdentityAuditLog::_internal_mutable_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_tag_.Mutable( GetArena());
}
inline std::string* IdentityAuditLog::release_compliance_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.IdentityAuditLog.compliance_tag)
  return _impl_.compliance_tag_.Release();
}
inline void IdentityAuditLog::set_allocated_compliance_tag(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_tag_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_tag_.IsDefault()) {
    _impl_.compliance_tag_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.IdentityAuditLog.compliance_tag)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeigrIdentityData

// int64 creation_timestamp = 1;
inline void SeigrIdentityData::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = ::int64_t{0};
}
inline ::int64_t SeigrIdentityData::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void SeigrIdentityData::set_creation_timestamp(::int64_t value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.creation_timestamp)
}
inline ::int64_t SeigrIdentityData::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_;
}
inline void SeigrIdentityData::_internal_set_creation_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = value;
}

// .seigr.IdentityType identity_type = 2;
inline void SeigrIdentityData::clear_identity_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_type_ = 0;
}
inline ::seigr::IdentityType SeigrIdentityData::identity_type() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.identity_type)
  return _internal_identity_type();
}
inline void SeigrIdentityData::set_identity_type(::seigr::IdentityType value) {
  _internal_set_identity_type(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.identity_type)
}
inline ::seigr::IdentityType SeigrIdentityData::_internal_identity_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::IdentityType>(_impl_.identity_type_);
}
inline void SeigrIdentityData::_internal_set_identity_type(::seigr::IdentityType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_type_ = value;
}

// .seigr.IdentityStatus status = 3;
inline void SeigrIdentityData::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::IdentityStatus SeigrIdentityData::status() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.status)
  return _internal_status();
}
inline void SeigrIdentityData::set_status(::seigr::IdentityStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.status)
}
inline ::seigr::IdentityStatus SeigrIdentityData::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::IdentityStatus>(_impl_.status_);
}
inline void SeigrIdentityData::_internal_set_status(::seigr::IdentityStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// bytes senary_id = 4;
inline void SeigrIdentityData::clear_senary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_id_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::senary_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.senary_id)
  return _internal_senary_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_senary_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.senary_id)
}
inline std::string* SeigrIdentityData::mutable_senary_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senary_id();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.senary_id)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_senary_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.senary_id_.Get();
}
inline void SeigrIdentityData::_internal_set_senary_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_id_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_senary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.senary_id_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_senary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.senary_id)
  return _impl_.senary_id_.Release();
}
inline void SeigrIdentityData::set_allocated_senary_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senary_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.senary_id_.IsDefault()) {
    _impl_.senary_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.senary_id)
}

// bytes owner_public_key = 5;
inline void SeigrIdentityData::clear_owner_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_public_key_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::owner_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.owner_public_key)
  return _internal_owner_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_owner_public_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.owner_public_key)
}
inline std::string* SeigrIdentityData::mutable_owner_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_public_key();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.owner_public_key)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_owner_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_public_key_.Get();
}
inline void SeigrIdentityData::_internal_set_owner_public_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_public_key_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_owner_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_public_key_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_owner_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.owner_public_key)
  return _impl_.owner_public_key_.Release();
}
inline void SeigrIdentityData::set_allocated_owner_public_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_public_key_.IsDefault()) {
    _impl_.owner_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.owner_public_key)
}

// bytes encrypted_private_key = 6;
inline void SeigrIdentityData::clear_encrypted_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_private_key_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::encrypted_private_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.encrypted_private_key)
  return _internal_encrypted_private_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_encrypted_private_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_private_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.encrypted_private_key)
}
inline std::string* SeigrIdentityData::mutable_encrypted_private_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_private_key();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.encrypted_private_key)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_encrypted_private_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_private_key_.Get();
}
inline void SeigrIdentityData::_internal_set_encrypted_private_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_private_key_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_encrypted_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_private_key_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_encrypted_private_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.encrypted_private_key)
  return _impl_.encrypted_private_key_.Release();
}
inline void SeigrIdentityData::set_allocated_encrypted_private_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_private_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_private_key_.IsDefault()) {
    _impl_.encrypted_private_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.encrypted_private_key)
}

// bytes owner_signature = 7;
inline void SeigrIdentityData::clear_owner_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_signature_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::owner_signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.owner_signature)
  return _internal_owner_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_owner_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.owner_signature)
}
inline std::string* SeigrIdentityData::mutable_owner_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner_signature();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.owner_signature)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_owner_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_signature_.Get();
}
inline void SeigrIdentityData::_internal_set_owner_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_signature_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_owner_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_signature_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_owner_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.owner_signature)
  return _impl_.owner_signature_.Release();
}
inline void SeigrIdentityData::set_allocated_owner_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_signature_.IsDefault()) {
    _impl_.owner_signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.owner_signature)
}

// bool revoked = 8;
inline void SeigrIdentityData::clear_revoked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revoked_ = false;
}
inline bool SeigrIdentityData::revoked() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.revoked)
  return _internal_revoked();
}
inline void SeigrIdentityData::set_revoked(bool value) {
  _internal_set_revoked(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.revoked)
}
inline bool SeigrIdentityData::_internal_revoked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.revoked_;
}
inline void SeigrIdentityData::_internal_set_revoked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revoked_ = value;
}

// string revocation_reason = 9;
inline void SeigrIdentityData::clear_revocation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revocation_reason_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::revocation_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.revocation_reason)
  return _internal_revocation_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_revocation_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revocation_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.revocation_reason)
}
inline std::string* SeigrIdentityData::mutable_revocation_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_revocation_reason();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.revocation_reason)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_revocation_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.revocation_reason_.Get();
}
inline void SeigrIdentityData::_internal_set_revocation_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revocation_reason_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_revocation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.revocation_reason_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_revocation_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.revocation_reason)
  return _impl_.revocation_reason_.Release();
}
inline void SeigrIdentityData::set_allocated_revocation_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revocation_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.revocation_reason_.IsDefault()) {
    _impl_.revocation_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.revocation_reason)
}

// .seigr.VerificationLevel verification_level = 10;
inline void SeigrIdentityData::clear_verification_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_level_ = 0;
}
inline ::seigr::VerificationLevel SeigrIdentityData::verification_level() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.verification_level)
  return _internal_verification_level();
}
inline void SeigrIdentityData::set_verification_level(::seigr::VerificationLevel value) {
  _internal_set_verification_level(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.verification_level)
}
inline ::seigr::VerificationLevel SeigrIdentityData::_internal_verification_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::VerificationLevel>(_impl_.verification_level_);
}
inline void SeigrIdentityData::_internal_set_verification_level(::seigr::VerificationLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_level_ = value;
}

// map<string, string> verification_metadata = 11;
inline int SeigrIdentityData::_internal_verification_metadata_size() const {
  return _internal_verification_metadata().size();
}
inline int SeigrIdentityData::verification_metadata_size() const {
  return _internal_verification_metadata_size();
}
inline void SeigrIdentityData::clear_verification_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::_internal_verification_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verification_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::verification_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.SeigrIdentityData.verification_metadata)
  return _internal_verification_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::_internal_mutable_verification_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.verification_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::mutable_verification_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.SeigrIdentityData.verification_metadata)
  return _internal_mutable_verification_metadata();
}

// repeated .seigr.access_control.AccessPolicy access_policies = 12;
inline int SeigrIdentityData::_internal_access_policies_size() const {
  return _internal_access_policies().size();
}
inline int SeigrIdentityData::access_policies_size() const {
  return _internal_access_policies_size();
}
inline ::seigr::access_control::AccessPolicy* SeigrIdentityData::mutable_access_policies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.access_policies)
  return _internal_mutable_access_policies()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>* SeigrIdentityData::mutable_access_policies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.SeigrIdentityData.access_policies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_access_policies();
}
inline const ::seigr::access_control::AccessPolicy& SeigrIdentityData::access_policies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.access_policies)
  return _internal_access_policies().Get(index);
}
inline ::seigr::access_control::AccessPolicy* SeigrIdentityData::add_access_policies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::access_control::AccessPolicy* _add = _internal_mutable_access_policies()->Add();
  // @@protoc_insertion_point(field_add:seigr.SeigrIdentityData.access_policies)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>& SeigrIdentityData::access_policies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.SeigrIdentityData.access_policies)
  return _internal_access_policies();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>&
SeigrIdentityData::_internal_access_policies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_policies_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::access_control::AccessPolicy>*
SeigrIdentityData::_internal_mutable_access_policies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.access_policies_;
}

// repeated .seigr.IdentityAuditLog audit_logs = 13;
inline int SeigrIdentityData::_internal_audit_logs_size() const {
  return _internal_audit_logs().size();
}
inline int SeigrIdentityData::audit_logs_size() const {
  return _internal_audit_logs_size();
}
inline void SeigrIdentityData::clear_audit_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_logs_.Clear();
}
inline ::seigr::IdentityAuditLog* SeigrIdentityData::mutable_audit_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.audit_logs)
  return _internal_mutable_audit_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>* SeigrIdentityData::mutable_audit_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.SeigrIdentityData.audit_logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_audit_logs();
}
inline const ::seigr::IdentityAuditLog& SeigrIdentityData::audit_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.audit_logs)
  return _internal_audit_logs().Get(index);
}
inline ::seigr::IdentityAuditLog* SeigrIdentityData::add_audit_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::IdentityAuditLog* _add = _internal_mutable_audit_logs()->Add();
  // @@protoc_insertion_point(field_add:seigr.SeigrIdentityData.audit_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>& SeigrIdentityData::audit_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.SeigrIdentityData.audit_logs)
  return _internal_audit_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>&
SeigrIdentityData::_internal_audit_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::IdentityAuditLog>*
SeigrIdentityData::_internal_mutable_audit_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.audit_logs_;
}

// string version = 14;
inline void SeigrIdentityData::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.version)
}
inline std::string* SeigrIdentityData::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.version)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void SeigrIdentityData::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.version)
  return _impl_.version_.Release();
}
inline void SeigrIdentityData::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.version)
}

// map<string, string> metadata = 15;
inline int SeigrIdentityData::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int SeigrIdentityData::metadata_size() const {
  return _internal_metadata_size();
}
inline void SeigrIdentityData::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.SeigrIdentityData.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.SeigrIdentityData.metadata)
  return _internal_mutable_metadata();
}

// bytes encryption_key = 16;
inline void SeigrIdentityData::clear_encryption_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_key_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::encryption_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.encryption_key)
  return _internal_encryption_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_encryption_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.encryption_key)
}
inline std::string* SeigrIdentityData::mutable_encryption_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encryption_key();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.encryption_key)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_encryption_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encryption_key_.Get();
}
inline void SeigrIdentityData::_internal_set_encryption_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_key_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_encryption_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encryption_key_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_encryption_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.encryption_key)
  return _impl_.encryption_key_.Release();
}
inline void SeigrIdentityData::set_allocated_encryption_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encryption_key_.IsDefault()) {
    _impl_.encryption_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.encryption_key)
}

// string usb_path = 17;
inline void SeigrIdentityData::clear_usb_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_path_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::usb_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.usb_path)
  return _internal_usb_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_usb_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.usb_path)
}
inline std::string* SeigrIdentityData::mutable_usb_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_usb_path();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.usb_path)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_usb_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usb_path_.Get();
}
inline void SeigrIdentityData::_internal_set_usb_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_path_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_usb_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.usb_path_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_usb_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.usb_path)
  return _impl_.usb_path_.Release();
}
inline void SeigrIdentityData::set_allocated_usb_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.usb_path_.IsDefault()) {
    _impl_.usb_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.usb_path)
}

// bool usb_required = 18;
inline void SeigrIdentityData::clear_usb_required() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_required_ = false;
}
inline bool SeigrIdentityData::usb_required() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.usb_required)
  return _internal_usb_required();
}
inline void SeigrIdentityData::set_usb_required(bool value) {
  _internal_set_usb_required(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.usb_required)
}
inline bool SeigrIdentityData::_internal_usb_required() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usb_required_;
}
inline void SeigrIdentityData::_internal_set_usb_required(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usb_required_ = value;
}

// string last_used_timestamp = 19;
inline void SeigrIdentityData::clear_last_used_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_used_timestamp_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::last_used_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.last_used_timestamp)
  return _internal_last_used_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_last_used_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_used_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.last_used_timestamp)
}
inline std::string* SeigrIdentityData::mutable_last_used_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_used_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.last_used_timestamp)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_last_used_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_used_timestamp_.Get();
}
inline void SeigrIdentityData::_internal_set_last_used_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_used_timestamp_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_last_used_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_used_timestamp_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_last_used_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.last_used_timestamp)
  return _impl_.last_used_timestamp_.Release();
}
inline void SeigrIdentityData::set_allocated_last_used_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_used_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_used_timestamp_.IsDefault()) {
    _impl_.last_used_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.last_used_timestamp)
}

// map<string, string> security_parameters = 20;
inline int SeigrIdentityData::_internal_security_parameters_size() const {
  return _internal_security_parameters().size();
}
inline int SeigrIdentityData::security_parameters_size() const {
  return _internal_security_parameters_size();
}
inline void SeigrIdentityData::clear_security_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::_internal_security_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.security_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SeigrIdentityData::security_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.SeigrIdentityData.security_parameters)
  return _internal_security_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::_internal_mutable_security_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.security_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SeigrIdentityData::mutable_security_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.SeigrIdentityData.security_parameters)
  return _internal_mutable_security_parameters();
}

// bool multi_factor_enabled = 21;
inline void SeigrIdentityData::clear_multi_factor_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.multi_factor_enabled_ = false;
}
inline bool SeigrIdentityData::multi_factor_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.multi_factor_enabled)
  return _internal_multi_factor_enabled();
}
inline void SeigrIdentityData::set_multi_factor_enabled(bool value) {
  _internal_set_multi_factor_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.multi_factor_enabled)
}
inline bool SeigrIdentityData::_internal_multi_factor_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.multi_factor_enabled_;
}
inline void SeigrIdentityData::_internal_set_multi_factor_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.multi_factor_enabled_ = value;
}

// string security_policy_id = 22;
inline void SeigrIdentityData::clear_security_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_policy_id_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::security_policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.security_policy_id)
  return _internal_security_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_security_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.security_policy_id)
}
inline std::string* SeigrIdentityData::mutable_security_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_security_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.security_policy_id)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_security_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.security_policy_id_.Get();
}
inline void SeigrIdentityData::_internal_set_security_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_policy_id_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_security_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.security_policy_id_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_security_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.security_policy_id)
  return _impl_.security_policy_id_.Release();
}
inline void SeigrIdentityData::set_allocated_security_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.security_policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.security_policy_id_.IsDefault()) {
    _impl_.security_policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.security_policy_id)
}

// repeated .seigr.AliasIdentity aliases = 23;
inline int SeigrIdentityData::_internal_aliases_size() const {
  return _internal_aliases().size();
}
inline int SeigrIdentityData::aliases_size() const {
  return _internal_aliases_size();
}
inline void SeigrIdentityData::clear_aliases() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aliases_.Clear();
}
inline ::seigr::AliasIdentity* SeigrIdentityData::mutable_aliases(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.aliases)
  return _internal_mutable_aliases()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>* SeigrIdentityData::mutable_aliases()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.SeigrIdentityData.aliases)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_aliases();
}
inline const ::seigr::AliasIdentity& SeigrIdentityData::aliases(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.aliases)
  return _internal_aliases().Get(index);
}
inline ::seigr::AliasIdentity* SeigrIdentityData::add_aliases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::AliasIdentity* _add = _internal_mutable_aliases()->Add();
  // @@protoc_insertion_point(field_add:seigr.SeigrIdentityData.aliases)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>& SeigrIdentityData::aliases() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.SeigrIdentityData.aliases)
  return _internal_aliases();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>&
SeigrIdentityData::_internal_aliases() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aliases_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::AliasIdentity>*
SeigrIdentityData::_internal_mutable_aliases() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.aliases_;
}

// string expiration_timestamp = 24;
inline void SeigrIdentityData::clear_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::expiration_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.expiration_timestamp)
  return _internal_expiration_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_expiration_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.expiration_timestamp)
}
inline std::string* SeigrIdentityData::mutable_expiration_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiration_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.expiration_timestamp)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_expiration_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiration_timestamp_.Get();
}
inline void SeigrIdentityData::_internal_set_expiration_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.expiration_timestamp_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_expiration_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.expiration_timestamp)
  return _impl_.expiration_timestamp_.Release();
}
inline void SeigrIdentityData::set_allocated_expiration_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiration_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.expiration_timestamp_.IsDefault()) {
    _impl_.expiration_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.expiration_timestamp)
}

// string reactivation_code = 25;
inline void SeigrIdentityData::clear_reactivation_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reactivation_code_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::reactivation_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.reactivation_code)
  return _internal_reactivation_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_reactivation_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reactivation_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.reactivation_code)
}
inline std::string* SeigrIdentityData::mutable_reactivation_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reactivation_code();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.reactivation_code)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_reactivation_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reactivation_code_.Get();
}
inline void SeigrIdentityData::_internal_set_reactivation_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reactivation_code_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_reactivation_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reactivation_code_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_reactivation_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.reactivation_code)
  return _impl_.reactivation_code_.Release();
}
inline void SeigrIdentityData::set_allocated_reactivation_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reactivation_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reactivation_code_.IsDefault()) {
    _impl_.reactivation_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.reactivation_code)
}

// string key_rotation_schedule = 26;
inline void SeigrIdentityData::clear_key_rotation_schedule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_rotation_schedule_.ClearToEmpty();
}
inline const std::string& SeigrIdentityData::key_rotation_schedule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.key_rotation_schedule)
  return _internal_key_rotation_schedule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeigrIdentityData::set_key_rotation_schedule(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_rotation_schedule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.key_rotation_schedule)
}
inline std::string* SeigrIdentityData::mutable_key_rotation_schedule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_rotation_schedule();
  // @@protoc_insertion_point(field_mutable:seigr.SeigrIdentityData.key_rotation_schedule)
  return _s;
}
inline const std::string& SeigrIdentityData::_internal_key_rotation_schedule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_rotation_schedule_.Get();
}
inline void SeigrIdentityData::_internal_set_key_rotation_schedule(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_rotation_schedule_.Set(value, GetArena());
}
inline std::string* SeigrIdentityData::_internal_mutable_key_rotation_schedule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_rotation_schedule_.Mutable( GetArena());
}
inline std::string* SeigrIdentityData::release_key_rotation_schedule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.SeigrIdentityData.key_rotation_schedule)
  return _impl_.key_rotation_schedule_.Release();
}
inline void SeigrIdentityData::set_allocated_key_rotation_schedule(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_rotation_schedule_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_rotation_schedule_.IsDefault()) {
    _impl_.key_rotation_schedule_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.SeigrIdentityData.key_rotation_schedule)
}

// .seigr.PrivacyLevel default_privacy_level = 27;
inline void SeigrIdentityData::clear_default_privacy_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_privacy_level_ = 0;
}
inline ::seigr::PrivacyLevel SeigrIdentityData::default_privacy_level() const {
  // @@protoc_insertion_point(field_get:seigr.SeigrIdentityData.default_privacy_level)
  return _internal_default_privacy_level();
}
inline void SeigrIdentityData::set_default_privacy_level(::seigr::PrivacyLevel value) {
  _internal_set_default_privacy_level(value);
  // @@protoc_insertion_point(field_set:seigr.SeigrIdentityData.default_privacy_level)
}
inline ::seigr::PrivacyLevel SeigrIdentityData::_internal_default_privacy_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::PrivacyLevel>(_impl_.default_privacy_level_);
}
inline void SeigrIdentityData::_internal_set_default_privacy_level(::seigr::PrivacyLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_privacy_level_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::IdentityStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::IdentityStatus>() {
  return ::seigr::IdentityStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::IdentityType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::IdentityType>() {
  return ::seigr::IdentityType_descriptor();
}
template <>
struct is_proto_enum<::seigr::PrivacyLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::PrivacyLevel>() {
  return ::seigr::PrivacyLevel_descriptor();
}
template <>
struct is_proto_enum<::seigr::VerificationLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::VerificationLevel>() {
  return ::seigr::VerificationLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // identity_2eproto_2epb_2eh
