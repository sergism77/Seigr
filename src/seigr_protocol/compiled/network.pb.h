// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: network.proto
// Protobuf C++ Version: 5.29.2

#ifndef network_2eproto_2epb_2eh
#define network_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_network_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_network_2eproto;
namespace seigr {
namespace network {
class NetworkCluster;
struct NetworkClusterDefaultTypeInternal;
extern NetworkClusterDefaultTypeInternal _NetworkCluster_default_instance_;
class NetworkCluster_ClusterMetadataEntry_DoNotUse;
struct NetworkCluster_ClusterMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkCluster_ClusterMetadataEntry_DoNotUseDefaultTypeInternal _NetworkCluster_ClusterMetadataEntry_DoNotUse_default_instance_;
class NetworkCluster_HyphenStatusCountsEntry_DoNotUse;
struct NetworkCluster_HyphenStatusCountsEntry_DoNotUseDefaultTypeInternal;
extern NetworkCluster_HyphenStatusCountsEntry_DoNotUseDefaultTypeInternal _NetworkCluster_HyphenStatusCountsEntry_DoNotUse_default_instance_;
class NetworkConfig;
struct NetworkConfigDefaultTypeInternal;
extern NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
class NetworkConfig_ConfigMetadataEntry_DoNotUse;
struct NetworkConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal _NetworkConfig_ConfigMetadataEntry_DoNotUse_default_instance_;
class NetworkErrorEvent;
struct NetworkErrorEventDefaultTypeInternal;
extern NetworkErrorEventDefaultTypeInternal _NetworkErrorEvent_default_instance_;
class NetworkErrorEvent_MetadataEntry_DoNotUse;
struct NetworkErrorEvent_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkErrorEvent_MetadataEntry_DoNotUseDefaultTypeInternal _NetworkErrorEvent_MetadataEntry_DoNotUse_default_instance_;
class NetworkHyphen;
struct NetworkHyphenDefaultTypeInternal;
extern NetworkHyphenDefaultTypeInternal _NetworkHyphen_default_instance_;
class NetworkHyphen_MetadataEntry_DoNotUse;
struct NetworkHyphen_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkHyphen_MetadataEntry_DoNotUseDefaultTypeInternal _NetworkHyphen_MetadataEntry_DoNotUse_default_instance_;
class NetworkOperationLog;
struct NetworkOperationLogDefaultTypeInternal;
extern NetworkOperationLogDefaultTypeInternal _NetworkOperationLog_default_instance_;
class NetworkOperationLog_MetadataEntry_DoNotUse;
struct NetworkOperationLog_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkOperationLog_MetadataEntry_DoNotUseDefaultTypeInternal _NetworkOperationLog_MetadataEntry_DoNotUse_default_instance_;
class NetworkPerformanceSummary;
struct NetworkPerformanceSummaryDefaultTypeInternal;
extern NetworkPerformanceSummaryDefaultTypeInternal _NetworkPerformanceSummary_default_instance_;
class NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse;
struct NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUseDefaultTypeInternal;
extern NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUseDefaultTypeInternal _NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse_default_instance_;
class NetworkSecurityPolicy;
struct NetworkSecurityPolicyDefaultTypeInternal;
extern NetworkSecurityPolicyDefaultTypeInternal _NetworkSecurityPolicy_default_instance_;
class NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse;
struct NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal;
extern NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal _NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse_default_instance_;
class NetworkStatistics;
struct NetworkStatisticsDefaultTypeInternal;
extern NetworkStatisticsDefaultTypeInternal _NetworkStatistics_default_instance_;
class NetworkStatistics_LatencyAveragesEntry_DoNotUse;
struct NetworkStatistics_LatencyAveragesEntry_DoNotUseDefaultTypeInternal;
extern NetworkStatistics_LatencyAveragesEntry_DoNotUseDefaultTypeInternal _NetworkStatistics_LatencyAveragesEntry_DoNotUse_default_instance_;
class NetworkStatistics_QosDistributionEntry_DoNotUse;
struct NetworkStatistics_QosDistributionEntry_DoNotUseDefaultTypeInternal;
extern NetworkStatistics_QosDistributionEntry_DoNotUseDefaultTypeInternal _NetworkStatistics_QosDistributionEntry_DoNotUse_default_instance_;
class NetworkStatusRequest;
struct NetworkStatusRequestDefaultTypeInternal;
extern NetworkStatusRequestDefaultTypeInternal _NetworkStatusRequest_default_instance_;
class NetworkStatusRequest_FiltersEntry_DoNotUse;
struct NetworkStatusRequest_FiltersEntry_DoNotUseDefaultTypeInternal;
extern NetworkStatusRequest_FiltersEntry_DoNotUseDefaultTypeInternal _NetworkStatusRequest_FiltersEntry_DoNotUse_default_instance_;
class NetworkStatusResponse;
struct NetworkStatusResponseDefaultTypeInternal;
extern NetworkStatusResponseDefaultTypeInternal _NetworkStatusResponse_default_instance_;
class NetworkStatusResponse_DiagnosticsEntry_DoNotUse;
struct NetworkStatusResponse_DiagnosticsEntry_DoNotUseDefaultTypeInternal;
extern NetworkStatusResponse_DiagnosticsEntry_DoNotUseDefaultTypeInternal _NetworkStatusResponse_DiagnosticsEntry_DoNotUse_default_instance_;
class PeerConnection;
struct PeerConnectionDefaultTypeInternal;
extern PeerConnectionDefaultTypeInternal _PeerConnection_default_instance_;
class PeerConnection_MetadataEntry_DoNotUse;
struct PeerConnection_MetadataEntry_DoNotUseDefaultTypeInternal;
extern PeerConnection_MetadataEntry_DoNotUseDefaultTypeInternal _PeerConnection_MetadataEntry_DoNotUse_default_instance_;
class ProtocolCompatibilityLog;
struct ProtocolCompatibilityLogDefaultTypeInternal;
extern ProtocolCompatibilityLogDefaultTypeInternal _ProtocolCompatibilityLog_default_instance_;
}  // namespace network
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace network {
enum NetworkProtocol : int {
  PROTOCOL_UNDEFINED = 0,
  PROTOCOL_TCP = 1,
  PROTOCOL_UDP = 2,
  PROTOCOL_IPFS = 3,
  PROTOCOL_HYPHEN = 4,
  PROTOCOL_HTTP = 5,
  PROTOCOL_P2P = 6,
  PROTOCOL_ADAPTIVE_LAYERED = 7,
  PROTOCOL_SENARY_COMPRESSION = 8,
  NetworkProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NetworkProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NetworkProtocol_IsValid(int value);
extern const uint32_t NetworkProtocol_internal_data_[];
constexpr NetworkProtocol NetworkProtocol_MIN = static_cast<NetworkProtocol>(0);
constexpr NetworkProtocol NetworkProtocol_MAX = static_cast<NetworkProtocol>(8);
constexpr int NetworkProtocol_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
NetworkProtocol_descriptor();
template <typename T>
const std::string& NetworkProtocol_Name(T value) {
  static_assert(std::is_same<T, NetworkProtocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NetworkProtocol_Name().");
  return NetworkProtocol_Name(static_cast<NetworkProtocol>(value));
}
template <>
inline const std::string& NetworkProtocol_Name(NetworkProtocol value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NetworkProtocol_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool NetworkProtocol_Parse(absl::string_view name, NetworkProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkProtocol>(
      NetworkProtocol_descriptor(), name, value);
}
enum HyphenStatus : int {
  HYPHEN_STATUS_UNDEFINED = 0,
  HYPHEN_ONLINE = 1,
  HYPHEN_OFFLINE = 2,
  HYPHEN_MAINTENANCE = 3,
  HYPHEN_DEGRADED = 4,
  HYPHEN_UNREACHABLE = 5,
  HYPHEN_ADAPTIVE_SCALE_DOWN = 6,
  HYPHEN_ADAPTIVE_SCALE_UP = 7,
  HyphenStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HyphenStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HyphenStatus_IsValid(int value);
extern const uint32_t HyphenStatus_internal_data_[];
constexpr HyphenStatus HyphenStatus_MIN = static_cast<HyphenStatus>(0);
constexpr HyphenStatus HyphenStatus_MAX = static_cast<HyphenStatus>(7);
constexpr int HyphenStatus_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
HyphenStatus_descriptor();
template <typename T>
const std::string& HyphenStatus_Name(T value) {
  static_assert(std::is_same<T, HyphenStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HyphenStatus_Name().");
  return HyphenStatus_Name(static_cast<HyphenStatus>(value));
}
template <>
inline const std::string& HyphenStatus_Name(HyphenStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HyphenStatus_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool HyphenStatus_Parse(absl::string_view name, HyphenStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HyphenStatus>(
      HyphenStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProtocolCompatibilityLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.ProtocolCompatibilityLog) */ {
 public:
  inline ProtocolCompatibilityLog() : ProtocolCompatibilityLog(nullptr) {}
  ~ProtocolCompatibilityLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProtocolCompatibilityLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProtocolCompatibilityLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtocolCompatibilityLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtocolCompatibilityLog(const ProtocolCompatibilityLog& from) : ProtocolCompatibilityLog(nullptr, from) {}
  inline ProtocolCompatibilityLog(ProtocolCompatibilityLog&& from) noexcept
      : ProtocolCompatibilityLog(nullptr, std::move(from)) {}
  inline ProtocolCompatibilityLog& operator=(const ProtocolCompatibilityLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolCompatibilityLog& operator=(ProtocolCompatibilityLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolCompatibilityLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolCompatibilityLog* internal_default_instance() {
    return reinterpret_cast<const ProtocolCompatibilityLog*>(
        &_ProtocolCompatibilityLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(ProtocolCompatibilityLog& a, ProtocolCompatibilityLog& b) { a.Swap(&b); }
  inline void Swap(ProtocolCompatibilityLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolCompatibilityLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolCompatibilityLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProtocolCompatibilityLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtocolCompatibilityLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProtocolCompatibilityLog& from) { ProtocolCompatibilityLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProtocolCompatibilityLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.ProtocolCompatibilityLog"; }

 protected:
  explicit ProtocolCompatibilityLog(::google::protobuf::Arena* arena);
  ProtocolCompatibilityLog(::google::protobuf::Arena* arena, const ProtocolCompatibilityLog& from);
  ProtocolCompatibilityLog(::google::protobuf::Arena* arena, ProtocolCompatibilityLog&& from) noexcept
      : ProtocolCompatibilityLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCompatibleVersionsFieldNumber = 3,
    kHyphenIdFieldNumber = 1,
    kProtocolVersionFieldNumber = 2,
    kTimestampFieldNumber = 5,
    kIsCompatibleFieldNumber = 4,
  };
  // repeated string compatible_versions = 3;
  int compatible_versions_size() const;
  private:
  int _internal_compatible_versions_size() const;

  public:
  void clear_compatible_versions() ;
  const std::string& compatible_versions(int index) const;
  std::string* mutable_compatible_versions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compatible_versions(int index, Arg_&& value, Args_... args);
  std::string* add_compatible_versions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_compatible_versions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& compatible_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_compatible_versions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_compatible_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_compatible_versions();

  public:
  // string hyphen_id = 1;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string protocol_version = 2;
  void clear_protocol_version() ;
  const std::string& protocol_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol_version(Arg_&& arg, Args_... args);
  std::string* mutable_protocol_version();
  PROTOBUF_NODISCARD std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* value);

  private:
  const std::string& _internal_protocol_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_version(
      const std::string& value);
  std::string* _internal_mutable_protocol_version();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // bool is_compatible = 4;
  void clear_is_compatible() ;
  bool is_compatible() const;
  void set_is_compatible(bool value);

  private:
  bool _internal_is_compatible() const;
  void _internal_set_is_compatible(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.ProtocolCompatibilityLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      100, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProtocolCompatibilityLog& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> compatible_versions_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr protocol_version_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    bool is_compatible_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PeerConnection_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PeerConnection_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeerConnection_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PeerConnection_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PeerConnection_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PeerConnection_MetadataEntry_DoNotUse*>(
        &_PeerConnection_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkStatusResponse_DiagnosticsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkStatusResponse_DiagnosticsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatusResponse_DiagnosticsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkStatusResponse_DiagnosticsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkStatusResponse_DiagnosticsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkStatusResponse_DiagnosticsEntry_DoNotUse*>(
        &_NetworkStatusResponse_DiagnosticsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkStatusRequest_FiltersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkStatusRequest_FiltersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatusRequest_FiltersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkStatusRequest_FiltersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkStatusRequest_FiltersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkStatusRequest_FiltersEntry_DoNotUse*>(
        &_NetworkStatusRequest_FiltersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkStatistics_QosDistributionEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  NetworkStatistics_QosDistributionEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatistics_QosDistributionEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkStatistics_QosDistributionEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkStatistics_QosDistributionEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkStatistics_QosDistributionEntry_DoNotUse*>(
        &_NetworkStatistics_QosDistributionEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkStatistics_LatencyAveragesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  NetworkStatistics_LatencyAveragesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatistics_LatencyAveragesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkStatistics_LatencyAveragesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkStatistics_LatencyAveragesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkStatistics_LatencyAveragesEntry_DoNotUse*>(
        &_NetworkStatistics_LatencyAveragesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse*>(
        &_NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse*>(
        &_NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      78, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkOperationLog_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkOperationLog_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkOperationLog_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkOperationLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkOperationLog_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkOperationLog_MetadataEntry_DoNotUse*>(
        &_NetworkOperationLog_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkHyphen_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkHyphen_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkHyphen_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkHyphen_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkHyphen_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkHyphen_MetadataEntry_DoNotUse*>(
        &_NetworkHyphen_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkErrorEvent_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkErrorEvent_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkErrorEvent_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkErrorEvent_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkErrorEvent_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkErrorEvent_MetadataEntry_DoNotUse*>(
        &_NetworkErrorEvent_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkConfig_ConfigMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkConfig_ConfigMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkConfig_ConfigMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkConfig_ConfigMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkConfig_ConfigMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig_ConfigMetadataEntry_DoNotUse*>(
        &_NetworkConfig_ConfigMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkCluster_HyphenStatusCountsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  NetworkCluster_HyphenStatusCountsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkCluster_HyphenStatusCountsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkCluster_HyphenStatusCountsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkCluster_HyphenStatusCountsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkCluster_HyphenStatusCountsEntry_DoNotUse*>(
        &_NetworkCluster_HyphenStatusCountsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class NetworkCluster_ClusterMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  NetworkCluster_ClusterMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkCluster_ClusterMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NetworkCluster_ClusterMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NetworkCluster_ClusterMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NetworkCluster_ClusterMetadataEntry_DoNotUse*>(
        &_NetworkCluster_ClusterMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_network_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PeerConnection final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.PeerConnection) */ {
 public:
  inline PeerConnection() : PeerConnection(nullptr) {}
  ~PeerConnection() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeerConnection* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeerConnection));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeerConnection(
      ::google::protobuf::internal::ConstantInitialized);

  inline PeerConnection(const PeerConnection& from) : PeerConnection(nullptr, from) {}
  inline PeerConnection(PeerConnection&& from) noexcept
      : PeerConnection(nullptr, std::move(from)) {}
  inline PeerConnection& operator=(const PeerConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnection& operator=(PeerConnection&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnection* internal_default_instance() {
    return reinterpret_cast<const PeerConnection*>(
        &_PeerConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PeerConnection& a, PeerConnection& b) { a.Swap(&b); }
  inline void Swap(PeerConnection* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnection* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PeerConnection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeerConnection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PeerConnection& from) { PeerConnection::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PeerConnection* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.PeerConnection"; }

 protected:
  explicit PeerConnection(::google::protobuf::Arena* arena);
  PeerConnection(::google::protobuf::Arena* arena, const PeerConnection& from);
  PeerConnection(::google::protobuf::Arena* arena, PeerConnection&& from) noexcept
      : PeerConnection(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 10,
    kConnectionIdFieldNumber = 1,
    kSourceHyphenIdFieldNumber = 2,
    kTargetHyphenIdFieldNumber = 3,
    kStatusFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kLastUpdatedFieldNumber = 9,
    kProtocolFieldNumber = 4,
    kLatencyMsFieldNumber = 5,
    kQosLevelFieldNumber = 6,
    kAutoScaledQosFieldNumber = 12,
    kDataTransferredBytesFieldNumber = 11,
    kCongestionLevelFieldNumber = 13,
  };
  // map<string, string> metadata = 10;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string connection_id = 1;
  void clear_connection_id() ;
  const std::string& connection_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* value);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string source_hyphen_id = 2;
  void clear_source_hyphen_id() ;
  const std::string& source_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_source_hyphen_id();
  void set_allocated_source_hyphen_id(std::string* value);

  private:
  const std::string& _internal_source_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_source_hyphen_id();

  public:
  // string target_hyphen_id = 3;
  void clear_target_hyphen_id() ;
  const std::string& target_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_target_hyphen_id();
  void set_allocated_target_hyphen_id(std::string* value);

  private:
  const std::string& _internal_target_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_target_hyphen_id();

  public:
  // string status = 7;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string created_at = 8;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string last_updated = 9;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // .seigr.network.NetworkProtocol protocol = 4;
  void clear_protocol() ;
  ::seigr::network::NetworkProtocol protocol() const;
  void set_protocol(::seigr::network::NetworkProtocol value);

  private:
  ::seigr::network::NetworkProtocol _internal_protocol() const;
  void _internal_set_protocol(::seigr::network::NetworkProtocol value);

  public:
  // int32 latency_ms = 5;
  void clear_latency_ms() ;
  ::int32_t latency_ms() const;
  void set_latency_ms(::int32_t value);

  private:
  ::int32_t _internal_latency_ms() const;
  void _internal_set_latency_ms(::int32_t value);

  public:
  // .seigr.common.QoSLevel qos_level = 6;
  void clear_qos_level() ;
  ::seigr::common::QoSLevel qos_level() const;
  void set_qos_level(::seigr::common::QoSLevel value);

  private:
  ::seigr::common::QoSLevel _internal_qos_level() const;
  void _internal_set_qos_level(::seigr::common::QoSLevel value);

  public:
  // bool auto_scaled_qos = 12;
  void clear_auto_scaled_qos() ;
  bool auto_scaled_qos() const;
  void set_auto_scaled_qos(bool value);

  private:
  bool _internal_auto_scaled_qos() const;
  void _internal_set_auto_scaled_qos(bool value);

  public:
  // int64 data_transferred_bytes = 11;
  void clear_data_transferred_bytes() ;
  ::int64_t data_transferred_bytes() const;
  void set_data_transferred_bytes(::int64_t value);

  private:
  ::int64_t _internal_data_transferred_bytes() const;
  void _internal_set_data_transferred_bytes(::int64_t value);

  public:
  // float congestion_level = 13;
  void clear_congestion_level() ;
  float congestion_level() const;
  void set_congestion_level(float value);

  private:
  float _internal_congestion_level() const;
  void _internal_set_congestion_level(float value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.PeerConnection)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PeerConnection& from_msg);
    ::google::protobuf::internal::MapField<PeerConnection_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr connection_id_;
    ::google::protobuf::internal::ArenaStringPtr source_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr target_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    int protocol_;
    ::int32_t latency_ms_;
    int qos_level_;
    bool auto_scaled_qos_;
    ::int64_t data_transferred_bytes_;
    float congestion_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkStatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkStatusResponse) */ {
 public:
  inline NetworkStatusResponse() : NetworkStatusResponse(nullptr) {}
  ~NetworkStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkStatusResponse(const NetworkStatusResponse& from) : NetworkStatusResponse(nullptr, from) {}
  inline NetworkStatusResponse(NetworkStatusResponse&& from) noexcept
      : NetworkStatusResponse(nullptr, std::move(from)) {}
  inline NetworkStatusResponse& operator=(const NetworkStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStatusResponse& operator=(NetworkStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkStatusResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkStatusResponse*>(
        &_NetworkStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(NetworkStatusResponse& a, NetworkStatusResponse& b) { a.Swap(&b); }
  inline void Swap(NetworkStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkStatusResponse& from) { NetworkStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkStatusResponse"; }

 protected:
  explicit NetworkStatusResponse(::google::protobuf::Arena* arena);
  NetworkStatusResponse(::google::protobuf::Arena* arena, const NetworkStatusResponse& from);
  NetworkStatusResponse(::google::protobuf::Arena* arena, NetworkStatusResponse&& from) noexcept
      : NetworkStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDiagnosticsFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kHyphenIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kLastUpdatedFieldNumber = 5,
  };
  // map<string, string> diagnostics = 4;
  int diagnostics_size() const;
  private:
  int _internal_diagnostics_size() const;

  public:
  void clear_diagnostics() ;
  const ::google::protobuf::Map<std::string, std::string>& diagnostics() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_diagnostics();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_diagnostics() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_diagnostics();

  public:
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string hyphen_id = 2;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string last_updated = 5;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      92, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkStatusResponse& from_msg);
    ::google::protobuf::internal::MapField<NetworkStatusResponse_DiagnosticsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        diagnostics_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkStatusRequest) */ {
 public:
  inline NetworkStatusRequest() : NetworkStatusRequest(nullptr) {}
  ~NetworkStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkStatusRequest(const NetworkStatusRequest& from) : NetworkStatusRequest(nullptr, from) {}
  inline NetworkStatusRequest(NetworkStatusRequest&& from) noexcept
      : NetworkStatusRequest(nullptr, std::move(from)) {}
  inline NetworkStatusRequest& operator=(const NetworkStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStatusRequest& operator=(NetworkStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkStatusRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkStatusRequest*>(
        &_NetworkStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(NetworkStatusRequest& a, NetworkStatusRequest& b) { a.Swap(&b); }
  inline void Swap(NetworkStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkStatusRequest& from) { NetworkStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkStatusRequest"; }

 protected:
  explicit NetworkStatusRequest(::google::protobuf::Arena* arena);
  NetworkStatusRequest(::google::protobuf::Arena* arena, const NetworkStatusRequest& from);
  NetworkStatusRequest(::google::protobuf::Arena* arena, NetworkStatusRequest&& from) noexcept
      : NetworkStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFiltersFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kHyphenIdFieldNumber = 2,
    kIncludeDiagnosticsFieldNumber = 4,
  };
  // map<string, string> filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;

  public:
  void clear_filters() ;
  const ::google::protobuf::Map<std::string, std::string>& filters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_filters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_filters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_filters();

  public:
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string hyphen_id = 2;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // bool include_diagnostics = 4;
  void clear_include_diagnostics() ;
  bool include_diagnostics() const;
  void set_include_diagnostics(bool value);

  private:
  bool _internal_include_diagnostics() const;
  void _internal_set_include_diagnostics(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkStatusRequest& from_msg);
    ::google::protobuf::internal::MapField<NetworkStatusRequest_FiltersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        filters_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    bool include_diagnostics_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkStatistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkStatistics) */ {
 public:
  inline NetworkStatistics() : NetworkStatistics(nullptr) {}
  ~NetworkStatistics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkStatistics* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkStatistics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkStatistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkStatistics(const NetworkStatistics& from) : NetworkStatistics(nullptr, from) {}
  inline NetworkStatistics(NetworkStatistics&& from) noexcept
      : NetworkStatistics(nullptr, std::move(from)) {}
  inline NetworkStatistics& operator=(const NetworkStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStatistics& operator=(NetworkStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkStatistics* internal_default_instance() {
    return reinterpret_cast<const NetworkStatistics*>(
        &_NetworkStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(NetworkStatistics& a, NetworkStatistics& b) { a.Swap(&b); }
  inline void Swap(NetworkStatistics* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkStatistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkStatistics* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkStatistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkStatistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkStatistics& from) { NetworkStatistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkStatistics* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkStatistics"; }

 protected:
  explicit NetworkStatistics(::google::protobuf::Arena* arena);
  NetworkStatistics(::google::protobuf::Arena* arena, const NetworkStatistics& from);
  NetworkStatistics(::google::protobuf::Arena* arena, NetworkStatistics&& from) noexcept
      : NetworkStatistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatencyAveragesFieldNumber = 5,
    kQosDistributionFieldNumber = 6,
    kClusterIdFieldNumber = 1,
    kLastUpdatedFieldNumber = 7,
    kPerformanceSummaryFieldNumber = 8,
    kTotalHyphensFieldNumber = 2,
    kActiveConnectionsFieldNumber = 3,
    kTotalDataTransferredMbFieldNumber = 4,
    kAvgCongestionLevelFieldNumber = 9,
  };
  // map<string, double> latency_averages = 5;
  int latency_averages_size() const;
  private:
  int _internal_latency_averages_size() const;

  public:
  void clear_latency_averages() ;
  const ::google::protobuf::Map<std::string, double>& latency_averages() const;
  ::google::protobuf::Map<std::string, double>* mutable_latency_averages();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_latency_averages() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_latency_averages();

  public:
  // map<string, int32> qos_distribution = 6;
  int qos_distribution_size() const;
  private:
  int _internal_qos_distribution_size() const;

  public:
  void clear_qos_distribution() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& qos_distribution() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_qos_distribution();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_qos_distribution() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_qos_distribution();

  public:
  // string cluster_id = 1;
  void clear_cluster_id() ;
  const std::string& cluster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cluster_id(Arg_&& arg, Args_... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* value);

  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(
      const std::string& value);
  std::string* _internal_mutable_cluster_id();

  public:
  // string last_updated = 7;
  void clear_last_updated() ;
  const std::string& last_updated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_updated(Arg_&& arg, Args_... args);
  std::string* mutable_last_updated();
  PROTOBUF_NODISCARD std::string* release_last_updated();
  void set_allocated_last_updated(std::string* value);

  private:
  const std::string& _internal_last_updated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_updated(
      const std::string& value);
  std::string* _internal_mutable_last_updated();

  public:
  // .seigr.common.NetworkPerformanceSummary performance_summary = 8;
  bool has_performance_summary() const;
  void clear_performance_summary() ;
  const ::seigr::common::NetworkPerformanceSummary& performance_summary() const;
  PROTOBUF_NODISCARD ::seigr::common::NetworkPerformanceSummary* release_performance_summary();
  ::seigr::common::NetworkPerformanceSummary* mutable_performance_summary();
  void set_allocated_performance_summary(::seigr::common::NetworkPerformanceSummary* value);
  void unsafe_arena_set_allocated_performance_summary(::seigr::common::NetworkPerformanceSummary* value);
  ::seigr::common::NetworkPerformanceSummary* unsafe_arena_release_performance_summary();

  private:
  const ::seigr::common::NetworkPerformanceSummary& _internal_performance_summary() const;
  ::seigr::common::NetworkPerformanceSummary* _internal_mutable_performance_summary();

  public:
  // int32 total_hyphens = 2;
  void clear_total_hyphens() ;
  ::int32_t total_hyphens() const;
  void set_total_hyphens(::int32_t value);

  private:
  ::int32_t _internal_total_hyphens() const;
  void _internal_set_total_hyphens(::int32_t value);

  public:
  // int32 active_connections = 3;
  void clear_active_connections() ;
  ::int32_t active_connections() const;
  void set_active_connections(::int32_t value);

  private:
  ::int32_t _internal_active_connections() const;
  void _internal_set_active_connections(::int32_t value);

  public:
  // int32 total_data_transferred_mb = 4;
  void clear_total_data_transferred_mb() ;
  ::int32_t total_data_transferred_mb() const;
  void set_total_data_transferred_mb(::int32_t value);

  private:
  ::int32_t _internal_total_data_transferred_mb() const;
  void _internal_set_total_data_transferred_mb(::int32_t value);

  public:
  // float avg_congestion_level = 9;
  void clear_avg_congestion_level() ;
  float avg_congestion_level() const;
  void set_avg_congestion_level(float value);

  private:
  float _internal_avg_congestion_level() const;
  void _internal_set_avg_congestion_level(float value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkStatistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      102, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkStatistics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<NetworkStatistics_LatencyAveragesEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        latency_averages_;
    ::google::protobuf::internal::MapField<NetworkStatistics_QosDistributionEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        qos_distribution_;
    ::google::protobuf::internal::ArenaStringPtr cluster_id_;
    ::google::protobuf::internal::ArenaStringPtr last_updated_;
    ::seigr::common::NetworkPerformanceSummary* performance_summary_;
    ::int32_t total_hyphens_;
    ::int32_t active_connections_;
    ::int32_t total_data_transferred_mb_;
    float avg_congestion_level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkSecurityPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkSecurityPolicy) */ {
 public:
  inline NetworkSecurityPolicy() : NetworkSecurityPolicy(nullptr) {}
  ~NetworkSecurityPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkSecurityPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkSecurityPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkSecurityPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkSecurityPolicy(const NetworkSecurityPolicy& from) : NetworkSecurityPolicy(nullptr, from) {}
  inline NetworkSecurityPolicy(NetworkSecurityPolicy&& from) noexcept
      : NetworkSecurityPolicy(nullptr, std::move(from)) {}
  inline NetworkSecurityPolicy& operator=(const NetworkSecurityPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSecurityPolicy& operator=(NetworkSecurityPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkSecurityPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkSecurityPolicy* internal_default_instance() {
    return reinterpret_cast<const NetworkSecurityPolicy*>(
        &_NetworkSecurityPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(NetworkSecurityPolicy& a, NetworkSecurityPolicy& b) { a.Swap(&b); }
  inline void Swap(NetworkSecurityPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkSecurityPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkSecurityPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkSecurityPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkSecurityPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkSecurityPolicy& from) { NetworkSecurityPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkSecurityPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkSecurityPolicy"; }

 protected:
  explicit NetworkSecurityPolicy(::google::protobuf::Arena* arena);
  NetworkSecurityPolicy(::google::protobuf::Arena* arena, const NetworkSecurityPolicy& from);
  NetworkSecurityPolicy(::google::protobuf::Arena* arena, NetworkSecurityPolicy&& from) noexcept
      : NetworkSecurityPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllowedIpRangesFieldNumber = 2,
    kBlockedIpRangesFieldNumber = 3,
    kAllowedProtocolsFieldNumber = 5,
    kPolicyMetadataFieldNumber = 7,
    kPolicyIdFieldNumber = 1,
    kAutoResponseActionFieldNumber = 8,
    kEnforceStrictTlsFieldNumber = 4,
    kAdaptiveBlacklistingFieldNumber = 6,
  };
  // repeated string allowed_ip_ranges = 2;
  int allowed_ip_ranges_size() const;
  private:
  int _internal_allowed_ip_ranges_size() const;

  public:
  void clear_allowed_ip_ranges() ;
  const std::string& allowed_ip_ranges(int index) const;
  std::string* mutable_allowed_ip_ranges(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allowed_ip_ranges(int index, Arg_&& value, Args_... args);
  std::string* add_allowed_ip_ranges();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_allowed_ip_ranges(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& allowed_ip_ranges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_allowed_ip_ranges();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_allowed_ip_ranges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_allowed_ip_ranges();

  public:
  // repeated string blocked_ip_ranges = 3;
  int blocked_ip_ranges_size() const;
  private:
  int _internal_blocked_ip_ranges_size() const;

  public:
  void clear_blocked_ip_ranges() ;
  const std::string& blocked_ip_ranges(int index) const;
  std::string* mutable_blocked_ip_ranges(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blocked_ip_ranges(int index, Arg_&& value, Args_... args);
  std::string* add_blocked_ip_ranges();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_blocked_ip_ranges(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& blocked_ip_ranges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_blocked_ip_ranges();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_blocked_ip_ranges() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_blocked_ip_ranges();

  public:
  // repeated .seigr.network.NetworkProtocol allowed_protocols = 5;
  int allowed_protocols_size() const;
  private:
  int _internal_allowed_protocols_size() const;

  public:
  void clear_allowed_protocols() ;
  public:
  ::seigr::network::NetworkProtocol allowed_protocols(int index) const;
  void set_allowed_protocols(int index, ::seigr::network::NetworkProtocol value);
  void add_allowed_protocols(::seigr::network::NetworkProtocol value);
  const ::google::protobuf::RepeatedField<int>& allowed_protocols() const;
  ::google::protobuf::RepeatedField<int>* mutable_allowed_protocols();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_allowed_protocols() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_allowed_protocols();

  public:
  // map<string, string> policy_metadata = 7;
  int policy_metadata_size() const;
  private:
  int _internal_policy_metadata_size() const;

  public:
  void clear_policy_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_policy_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_policy_metadata();

  public:
  // string policy_id = 1;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string auto_response_action = 8;
  void clear_auto_response_action() ;
  const std::string& auto_response_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auto_response_action(Arg_&& arg, Args_... args);
  std::string* mutable_auto_response_action();
  PROTOBUF_NODISCARD std::string* release_auto_response_action();
  void set_allocated_auto_response_action(std::string* value);

  private:
  const std::string& _internal_auto_response_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_response_action(
      const std::string& value);
  std::string* _internal_mutable_auto_response_action();

  public:
  // bool enforce_strict_tls = 4;
  void clear_enforce_strict_tls() ;
  bool enforce_strict_tls() const;
  void set_enforce_strict_tls(bool value);

  private:
  bool _internal_enforce_strict_tls() const;
  void _internal_set_enforce_strict_tls(bool value);

  public:
  // bool adaptive_blacklisting = 6;
  void clear_adaptive_blacklisting() ;
  bool adaptive_blacklisting() const;
  void set_adaptive_blacklisting(bool value);

  private:
  bool _internal_adaptive_blacklisting() const;
  void _internal_set_adaptive_blacklisting(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkSecurityPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      130, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkSecurityPolicy& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> allowed_ip_ranges_;
    ::google::protobuf::RepeatedPtrField<std::string> blocked_ip_ranges_;
    ::google::protobuf::RepeatedField<int> allowed_protocols_;
    ::google::protobuf::internal::CachedSize _allowed_protocols_cached_byte_size_;
    ::google::protobuf::internal::MapField<NetworkSecurityPolicy_PolicyMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        policy_metadata_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr auto_response_action_;
    bool enforce_strict_tls_;
    bool adaptive_blacklisting_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkPerformanceSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkPerformanceSummary) */ {
 public:
  inline NetworkPerformanceSummary() : NetworkPerformanceSummary(nullptr) {}
  ~NetworkPerformanceSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkPerformanceSummary* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkPerformanceSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkPerformanceSummary(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkPerformanceSummary(const NetworkPerformanceSummary& from) : NetworkPerformanceSummary(nullptr, from) {}
  inline NetworkPerformanceSummary(NetworkPerformanceSummary&& from) noexcept
      : NetworkPerformanceSummary(nullptr, std::move(from)) {}
  inline NetworkPerformanceSummary& operator=(const NetworkPerformanceSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPerformanceSummary& operator=(NetworkPerformanceSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPerformanceSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPerformanceSummary* internal_default_instance() {
    return reinterpret_cast<const NetworkPerformanceSummary*>(
        &_NetworkPerformanceSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(NetworkPerformanceSummary& a, NetworkPerformanceSummary& b) { a.Swap(&b); }
  inline void Swap(NetworkPerformanceSummary* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPerformanceSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPerformanceSummary* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkPerformanceSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkPerformanceSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkPerformanceSummary& from) { NetworkPerformanceSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkPerformanceSummary* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkPerformanceSummary"; }

 protected:
  explicit NetworkPerformanceSummary(::google::protobuf::Arena* arena);
  NetworkPerformanceSummary(::google::protobuf::Arena* arena, const NetworkPerformanceSummary& from);
  NetworkPerformanceSummary(::google::protobuf::Arena* arena, NetworkPerformanceSummary&& from) noexcept
      : NetworkPerformanceSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPerformanceNotesFieldNumber = 5,
    kSummaryIdFieldNumber = 1,
    kAvgBandwidthUtilizationFieldNumber = 2,
    kAvgResponseTimeFieldNumber = 3,
    kTotalDataTransferredMbFieldNumber = 4,
  };
  // map<string, string> performance_notes = 5;
  int performance_notes_size() const;
  private:
  int _internal_performance_notes_size() const;

  public:
  void clear_performance_notes() ;
  const ::google::protobuf::Map<std::string, std::string>& performance_notes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_performance_notes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_performance_notes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_performance_notes();

  public:
  // string summary_id = 1;
  void clear_summary_id() ;
  const std::string& summary_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary_id(Arg_&& arg, Args_... args);
  std::string* mutable_summary_id();
  PROTOBUF_NODISCARD std::string* release_summary_id();
  void set_allocated_summary_id(std::string* value);

  private:
  const std::string& _internal_summary_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary_id(
      const std::string& value);
  std::string* _internal_mutable_summary_id();

  public:
  // float avg_bandwidth_utilization = 2;
  void clear_avg_bandwidth_utilization() ;
  float avg_bandwidth_utilization() const;
  void set_avg_bandwidth_utilization(float value);

  private:
  float _internal_avg_bandwidth_utilization() const;
  void _internal_set_avg_bandwidth_utilization(float value);

  public:
  // float avg_response_time = 3;
  void clear_avg_response_time() ;
  float avg_response_time() const;
  void set_avg_response_time(float value);

  private:
  float _internal_avg_response_time() const;
  void _internal_set_avg_response_time(float value);

  public:
  // int32 total_data_transferred_mb = 4;
  void clear_total_data_transferred_mb() ;
  ::int32_t total_data_transferred_mb() const;
  void set_total_data_transferred_mb(::int32_t value);

  private:
  ::int32_t _internal_total_data_transferred_mb() const;
  void _internal_set_total_data_transferred_mb(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkPerformanceSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkPerformanceSummary& from_msg);
    ::google::protobuf::internal::MapField<NetworkPerformanceSummary_PerformanceNotesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        performance_notes_;
    ::google::protobuf::internal::ArenaStringPtr summary_id_;
    float avg_bandwidth_utilization_;
    float avg_response_time_;
    ::int32_t total_data_transferred_mb_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkOperationLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkOperationLog) */ {
 public:
  inline NetworkOperationLog() : NetworkOperationLog(nullptr) {}
  ~NetworkOperationLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkOperationLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkOperationLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkOperationLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkOperationLog(const NetworkOperationLog& from) : NetworkOperationLog(nullptr, from) {}
  inline NetworkOperationLog(NetworkOperationLog&& from) noexcept
      : NetworkOperationLog(nullptr, std::move(from)) {}
  inline NetworkOperationLog& operator=(const NetworkOperationLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkOperationLog& operator=(NetworkOperationLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkOperationLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkOperationLog* internal_default_instance() {
    return reinterpret_cast<const NetworkOperationLog*>(
        &_NetworkOperationLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(NetworkOperationLog& a, NetworkOperationLog& b) { a.Swap(&b); }
  inline void Swap(NetworkOperationLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkOperationLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkOperationLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkOperationLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkOperationLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkOperationLog& from) { NetworkOperationLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkOperationLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkOperationLog"; }

 protected:
  explicit NetworkOperationLog(::google::protobuf::Arena* arena);
  NetworkOperationLog(::google::protobuf::Arena* arena, const NetworkOperationLog& from);
  NetworkOperationLog(::google::protobuf::Arena* arena, NetworkOperationLog&& from) noexcept
      : NetworkOperationLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kLogIdFieldNumber = 1,
    kActionFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSourceHyphenIdFieldNumber = 4,
    kTargetHyphenIdFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string log_id = 1;
  void clear_log_id() ;
  const std::string& log_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_id(Arg_&& arg, Args_... args);
  std::string* mutable_log_id();
  PROTOBUF_NODISCARD std::string* release_log_id();
  void set_allocated_log_id(std::string* value);

  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(
      const std::string& value);
  std::string* _internal_mutable_log_id();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string source_hyphen_id = 4;
  void clear_source_hyphen_id() ;
  const std::string& source_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_source_hyphen_id();
  void set_allocated_source_hyphen_id(std::string* value);

  private:
  const std::string& _internal_source_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_source_hyphen_id();

  public:
  // string target_hyphen_id = 5;
  void clear_target_hyphen_id() ;
  const std::string& target_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_target_hyphen_id();
  void set_allocated_target_hyphen_id(std::string* value);

  private:
  const std::string& _internal_target_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_target_hyphen_id();

  public:
  // string status = 6;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkOperationLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      109, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkOperationLog& from_msg);
    ::google::protobuf::internal::MapField<NetworkOperationLog_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr log_id_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr source_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr target_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkHyphen final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkHyphen) */ {
 public:
  inline NetworkHyphen() : NetworkHyphen(nullptr) {}
  ~NetworkHyphen() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkHyphen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkHyphen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkHyphen(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkHyphen(const NetworkHyphen& from) : NetworkHyphen(nullptr, from) {}
  inline NetworkHyphen(NetworkHyphen&& from) noexcept
      : NetworkHyphen(nullptr, std::move(from)) {}
  inline NetworkHyphen& operator=(const NetworkHyphen& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkHyphen& operator=(NetworkHyphen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkHyphen& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkHyphen* internal_default_instance() {
    return reinterpret_cast<const NetworkHyphen*>(
        &_NetworkHyphen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NetworkHyphen& a, NetworkHyphen& b) { a.Swap(&b); }
  inline void Swap(NetworkHyphen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkHyphen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkHyphen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkHyphen>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkHyphen& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkHyphen& from) { NetworkHyphen::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkHyphen* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkHyphen"; }

 protected:
  explicit NetworkHyphen(::google::protobuf::Arena* arena);
  NetworkHyphen(::google::protobuf::Arena* arena, const NetworkHyphen& from);
  NetworkHyphen(::google::protobuf::Arena* arena, NetworkHyphen&& from) noexcept
      : NetworkHyphen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSupportedProtocolsFieldNumber = 6,
    kMetadataFieldNumber = 7,
    kHyphenIdFieldNumber = 1,
    kIpAddressFieldNumber = 2,
    kLastSeenFieldNumber = 8,
    kAdaptiveScalingStatusFieldNumber = 12,
    kPortFieldNumber = 3,
    kPrimaryProtocolFieldNumber = 4,
    kStatusFieldNumber = 5,
    kLoadPercentageFieldNumber = 9,
    kAvgLatencyMsFieldNumber = 10,
    kAvailableBandwidthMbpsFieldNumber = 11,
  };
  // repeated .seigr.network.NetworkProtocol supported_protocols = 6;
  int supported_protocols_size() const;
  private:
  int _internal_supported_protocols_size() const;

  public:
  void clear_supported_protocols() ;
  public:
  ::seigr::network::NetworkProtocol supported_protocols(int index) const;
  void set_supported_protocols(int index, ::seigr::network::NetworkProtocol value);
  void add_supported_protocols(::seigr::network::NetworkProtocol value);
  const ::google::protobuf::RepeatedField<int>& supported_protocols() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_protocols();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_supported_protocols() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_supported_protocols();

  public:
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string hyphen_id = 1;
  void clear_hyphen_id() ;
  const std::string& hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_hyphen_id();
  void set_allocated_hyphen_id(std::string* value);

  private:
  const std::string& _internal_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_hyphen_id();

  public:
  // string ip_address = 2;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // string last_seen = 8;
  void clear_last_seen() ;
  const std::string& last_seen() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_seen(Arg_&& arg, Args_... args);
  std::string* mutable_last_seen();
  PROTOBUF_NODISCARD std::string* release_last_seen();
  void set_allocated_last_seen(std::string* value);

  private:
  const std::string& _internal_last_seen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_seen(
      const std::string& value);
  std::string* _internal_mutable_last_seen();

  public:
  // string adaptive_scaling_status = 12;
  void clear_adaptive_scaling_status() ;
  const std::string& adaptive_scaling_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_adaptive_scaling_status(Arg_&& arg, Args_... args);
  std::string* mutable_adaptive_scaling_status();
  PROTOBUF_NODISCARD std::string* release_adaptive_scaling_status();
  void set_allocated_adaptive_scaling_status(std::string* value);

  private:
  const std::string& _internal_adaptive_scaling_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adaptive_scaling_status(
      const std::string& value);
  std::string* _internal_mutable_adaptive_scaling_status();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // .seigr.network.NetworkProtocol primary_protocol = 4;
  void clear_primary_protocol() ;
  ::seigr::network::NetworkProtocol primary_protocol() const;
  void set_primary_protocol(::seigr::network::NetworkProtocol value);

  private:
  ::seigr::network::NetworkProtocol _internal_primary_protocol() const;
  void _internal_set_primary_protocol(::seigr::network::NetworkProtocol value);

  public:
  // .seigr.network.HyphenStatus status = 5;
  void clear_status() ;
  ::seigr::network::HyphenStatus status() const;
  void set_status(::seigr::network::HyphenStatus value);

  private:
  ::seigr::network::HyphenStatus _internal_status() const;
  void _internal_set_status(::seigr::network::HyphenStatus value);

  public:
  // int32 load_percentage = 9;
  void clear_load_percentage() ;
  ::int32_t load_percentage() const;
  void set_load_percentage(::int32_t value);

  private:
  ::int32_t _internal_load_percentage() const;
  void _internal_set_load_percentage(::int32_t value);

  public:
  // int32 avg_latency_ms = 10;
  void clear_avg_latency_ms() ;
  ::int32_t avg_latency_ms() const;
  void set_avg_latency_ms(::int32_t value);

  private:
  ::int32_t _internal_avg_latency_ms() const;
  void _internal_set_avg_latency_ms(::int32_t value);

  public:
  // int32 available_bandwidth_mbps = 11;
  void clear_available_bandwidth_mbps() ;
  ::int32_t available_bandwidth_mbps() const;
  void set_available_bandwidth_mbps(::int32_t value);

  private:
  ::int32_t _internal_available_bandwidth_mbps() const;
  void _internal_set_available_bandwidth_mbps(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkHyphen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkHyphen& from_msg);
    ::google::protobuf::RepeatedField<int> supported_protocols_;
    ::google::protobuf::internal::CachedSize _supported_protocols_cached_byte_size_;
    ::google::protobuf::internal::MapField<NetworkHyphen_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::google::protobuf::internal::ArenaStringPtr last_seen_;
    ::google::protobuf::internal::ArenaStringPtr adaptive_scaling_status_;
    ::int32_t port_;
    int primary_protocol_;
    int status_;
    ::int32_t load_percentage_;
    ::int32_t avg_latency_ms_;
    ::int32_t available_bandwidth_mbps_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkErrorEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkErrorEvent) */ {
 public:
  inline NetworkErrorEvent() : NetworkErrorEvent(nullptr) {}
  ~NetworkErrorEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkErrorEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkErrorEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkErrorEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkErrorEvent(const NetworkErrorEvent& from) : NetworkErrorEvent(nullptr, from) {}
  inline NetworkErrorEvent(NetworkErrorEvent&& from) noexcept
      : NetworkErrorEvent(nullptr, std::move(from)) {}
  inline NetworkErrorEvent& operator=(const NetworkErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkErrorEvent& operator=(NetworkErrorEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkErrorEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkErrorEvent* internal_default_instance() {
    return reinterpret_cast<const NetworkErrorEvent*>(
        &_NetworkErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NetworkErrorEvent& a, NetworkErrorEvent& b) { a.Swap(&b); }
  inline void Swap(NetworkErrorEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkErrorEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkErrorEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkErrorEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkErrorEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkErrorEvent& from) { NetworkErrorEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkErrorEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkErrorEvent"; }

 protected:
  explicit NetworkErrorEvent(::google::protobuf::Arena* arena);
  NetworkErrorEvent(::google::protobuf::Arena* arena, const NetworkErrorEvent& from);
  NetworkErrorEvent(::google::protobuf::Arena* arena, NetworkErrorEvent&& from) noexcept
      : NetworkErrorEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 7,
    kErrorIdFieldNumber = 1,
    kSourceHyphenIdFieldNumber = 2,
    kTargetHyphenIdFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
    kErrorMessageFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kAutoResolvedFieldNumber = 8,
    kRetryAttemptsFieldNumber = 9,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string error_id = 1;
  void clear_error_id() ;
  const std::string& error_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_id(Arg_&& arg, Args_... args);
  std::string* mutable_error_id();
  PROTOBUF_NODISCARD std::string* release_error_id();
  void set_allocated_error_id(std::string* value);

  private:
  const std::string& _internal_error_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_id(
      const std::string& value);
  std::string* _internal_mutable_error_id();

  public:
  // string source_hyphen_id = 2;
  void clear_source_hyphen_id() ;
  const std::string& source_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_source_hyphen_id();
  void set_allocated_source_hyphen_id(std::string* value);

  private:
  const std::string& _internal_source_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_source_hyphen_id();

  public:
  // string target_hyphen_id = 3;
  void clear_target_hyphen_id() ;
  const std::string& target_hyphen_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_hyphen_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_hyphen_id();
  PROTOBUF_NODISCARD std::string* release_target_hyphen_id();
  void set_allocated_target_hyphen_id(std::string* value);

  private:
  const std::string& _internal_target_hyphen_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_hyphen_id(
      const std::string& value);
  std::string* _internal_mutable_target_hyphen_id();

  public:
  // string error_code = 4;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // string error_message = 5;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // bool auto_resolved = 8;
  void clear_auto_resolved() ;
  bool auto_resolved() const;
  void set_auto_resolved(bool value);

  private:
  bool _internal_auto_resolved() const;
  void _internal_set_auto_resolved(bool value);

  public:
  // int32 retry_attempts = 9;
  void clear_retry_attempts() ;
  ::int32_t retry_attempts() const;
  void set_retry_attempts(::int32_t value);

  private:
  ::int32_t _internal_retry_attempts() const;
  void _internal_set_retry_attempts(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkErrorEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      128, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkErrorEvent& from_msg);
    ::google::protobuf::internal::MapField<NetworkErrorEvent_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr error_id_;
    ::google::protobuf::internal::ArenaStringPtr source_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr target_hyphen_id_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    bool auto_resolved_;
    ::int32_t retry_attempts_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkConfig) */ {
 public:
  inline NetworkConfig() : NetworkConfig(nullptr) {}
  ~NetworkConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkConfig(const NetworkConfig& from) : NetworkConfig(nullptr, from) {}
  inline NetworkConfig(NetworkConfig&& from) noexcept
      : NetworkConfig(nullptr, std::move(from)) {}
  inline NetworkConfig& operator=(const NetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfig& operator=(NetworkConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig*>(
        &_NetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(NetworkConfig& a, NetworkConfig& b) { a.Swap(&b); }
  inline void Swap(NetworkConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkConfig& from) { NetworkConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkConfig"; }

 protected:
  explicit NetworkConfig(::google::protobuf::Arena* arena);
  NetworkConfig(::google::protobuf::Arena* arena, const NetworkConfig& from);
  NetworkConfig(::google::protobuf::Arena* arena, NetworkConfig&& from) noexcept
      : NetworkConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllowedProtocolsFieldNumber = 6,
    kConfigMetadataFieldNumber = 7,
    kFallbackProtocolFieldNumber = 10,
    kMaxConnectionsFieldNumber = 1,
    kRetryLimitFieldNumber = 2,
    kTimeoutSecondsFieldNumber = 3,
    kDefaultQosFieldNumber = 5,
    kEnableEncryptionFieldNumber = 4,
    kEnableDynamicQosScalingFieldNumber = 9,
    kMaxPacketLossThresholdFieldNumber = 8,
  };
  // repeated .seigr.network.NetworkProtocol allowed_protocols = 6;
  int allowed_protocols_size() const;
  private:
  int _internal_allowed_protocols_size() const;

  public:
  void clear_allowed_protocols() ;
  public:
  ::seigr::network::NetworkProtocol allowed_protocols(int index) const;
  void set_allowed_protocols(int index, ::seigr::network::NetworkProtocol value);
  void add_allowed_protocols(::seigr::network::NetworkProtocol value);
  const ::google::protobuf::RepeatedField<int>& allowed_protocols() const;
  ::google::protobuf::RepeatedField<int>* mutable_allowed_protocols();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_allowed_protocols() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_allowed_protocols();

  public:
  // map<string, string> config_metadata = 7;
  int config_metadata_size() const;
  private:
  int _internal_config_metadata_size() const;

  public:
  void clear_config_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_config_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_config_metadata();

  public:
  // string fallback_protocol = 10;
  void clear_fallback_protocol() ;
  const std::string& fallback_protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fallback_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_fallback_protocol();
  PROTOBUF_NODISCARD std::string* release_fallback_protocol();
  void set_allocated_fallback_protocol(std::string* value);

  private:
  const std::string& _internal_fallback_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fallback_protocol(
      const std::string& value);
  std::string* _internal_mutable_fallback_protocol();

  public:
  // int32 max_connections = 1;
  void clear_max_connections() ;
  ::int32_t max_connections() const;
  void set_max_connections(::int32_t value);

  private:
  ::int32_t _internal_max_connections() const;
  void _internal_set_max_connections(::int32_t value);

  public:
  // int32 retry_limit = 2;
  void clear_retry_limit() ;
  ::int32_t retry_limit() const;
  void set_retry_limit(::int32_t value);

  private:
  ::int32_t _internal_retry_limit() const;
  void _internal_set_retry_limit(::int32_t value);

  public:
  // int32 timeout_seconds = 3;
  void clear_timeout_seconds() ;
  ::int32_t timeout_seconds() const;
  void set_timeout_seconds(::int32_t value);

  private:
  ::int32_t _internal_timeout_seconds() const;
  void _internal_set_timeout_seconds(::int32_t value);

  public:
  // .seigr.common.QoSLevel default_qos = 5;
  void clear_default_qos() ;
  ::seigr::common::QoSLevel default_qos() const;
  void set_default_qos(::seigr::common::QoSLevel value);

  private:
  ::seigr::common::QoSLevel _internal_default_qos() const;
  void _internal_set_default_qos(::seigr::common::QoSLevel value);

  public:
  // bool enable_encryption = 4;
  void clear_enable_encryption() ;
  bool enable_encryption() const;
  void set_enable_encryption(bool value);

  private:
  bool _internal_enable_encryption() const;
  void _internal_set_enable_encryption(bool value);

  public:
  // bool enable_dynamic_qos_scaling = 9;
  void clear_enable_dynamic_qos_scaling() ;
  bool enable_dynamic_qos_scaling() const;
  void set_enable_dynamic_qos_scaling(bool value);

  private:
  bool _internal_enable_dynamic_qos_scaling() const;
  void _internal_set_enable_dynamic_qos_scaling(bool value);

  public:
  // int32 max_packet_loss_threshold = 8;
  void clear_max_packet_loss_threshold() ;
  ::int32_t max_packet_loss_threshold() const;
  void set_max_packet_loss_threshold(::int32_t value);

  private:
  ::int32_t _internal_max_packet_loss_threshold() const;
  void _internal_set_max_packet_loss_threshold(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkConfig& from_msg);
    ::google::protobuf::RepeatedField<int> allowed_protocols_;
    ::google::protobuf::internal::CachedSize _allowed_protocols_cached_byte_size_;
    ::google::protobuf::internal::MapField<NetworkConfig_ConfigMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        config_metadata_;
    ::google::protobuf::internal::ArenaStringPtr fallback_protocol_;
    ::int32_t max_connections_;
    ::int32_t retry_limit_;
    ::int32_t timeout_seconds_;
    int default_qos_;
    bool enable_encryption_;
    bool enable_dynamic_qos_scaling_;
    ::int32_t max_packet_loss_threshold_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkCluster final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.network.NetworkCluster) */ {
 public:
  inline NetworkCluster() : NetworkCluster(nullptr) {}
  ~NetworkCluster() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetworkCluster* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetworkCluster));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkCluster(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetworkCluster(const NetworkCluster& from) : NetworkCluster(nullptr, from) {}
  inline NetworkCluster(NetworkCluster&& from) noexcept
      : NetworkCluster(nullptr, std::move(from)) {}
  inline NetworkCluster& operator=(const NetworkCluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkCluster& operator=(NetworkCluster&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkCluster& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkCluster* internal_default_instance() {
    return reinterpret_cast<const NetworkCluster*>(
        &_NetworkCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NetworkCluster& a, NetworkCluster& b) { a.Swap(&b); }
  inline void Swap(NetworkCluster* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkCluster* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkCluster* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetworkCluster>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetworkCluster& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetworkCluster& from) { NetworkCluster::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetworkCluster* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.network.NetworkCluster"; }

 protected:
  explicit NetworkCluster(::google::protobuf::Arena* arena);
  NetworkCluster(::google::protobuf::Arena* arena, const NetworkCluster& from);
  NetworkCluster(::google::protobuf::Arena* arena, NetworkCluster&& from) noexcept
      : NetworkCluster(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHyphensFieldNumber = 2,
    kHyphenStatusCountsFieldNumber = 3,
    kClusterMetadataFieldNumber = 7,
    kClusterIdFieldNumber = 1,
    kLastHealthCheckFieldNumber = 5,
    kHealthStatusFieldNumber = 6,
    kHealthSummaryFieldNumber = 8,
    kDefaultQosLevelFieldNumber = 4,
    kLoadBalancingFactorFieldNumber = 9,
  };
  // repeated .seigr.network.NetworkHyphen hyphens = 2;
  int hyphens_size() const;
  private:
  int _internal_hyphens_size() const;

  public:
  void clear_hyphens() ;
  ::seigr::network::NetworkHyphen* mutable_hyphens(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>* mutable_hyphens();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>& _internal_hyphens() const;
  ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>* _internal_mutable_hyphens();
  public:
  const ::seigr::network::NetworkHyphen& hyphens(int index) const;
  ::seigr::network::NetworkHyphen* add_hyphens();
  const ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>& hyphens() const;
  // map<string, int32> hyphen_status_counts = 3;
  int hyphen_status_counts_size() const;
  private:
  int _internal_hyphen_status_counts_size() const;

  public:
  void clear_hyphen_status_counts() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& hyphen_status_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_hyphen_status_counts();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_hyphen_status_counts() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_hyphen_status_counts();

  public:
  // map<string, string> cluster_metadata = 7;
  int cluster_metadata_size() const;
  private:
  int _internal_cluster_metadata_size() const;

  public:
  void clear_cluster_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& cluster_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_cluster_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_cluster_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_cluster_metadata();

  public:
  // string cluster_id = 1;
  void clear_cluster_id() ;
  const std::string& cluster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cluster_id(Arg_&& arg, Args_... args);
  std::string* mutable_cluster_id();
  PROTOBUF_NODISCARD std::string* release_cluster_id();
  void set_allocated_cluster_id(std::string* value);

  private:
  const std::string& _internal_cluster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id(
      const std::string& value);
  std::string* _internal_mutable_cluster_id();

  public:
  // string last_health_check = 5;
  void clear_last_health_check() ;
  const std::string& last_health_check() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_health_check(Arg_&& arg, Args_... args);
  std::string* mutable_last_health_check();
  PROTOBUF_NODISCARD std::string* release_last_health_check();
  void set_allocated_last_health_check(std::string* value);

  private:
  const std::string& _internal_last_health_check() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_health_check(
      const std::string& value);
  std::string* _internal_mutable_last_health_check();

  public:
  // string health_status = 6;
  void clear_health_status() ;
  const std::string& health_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_health_status(Arg_&& arg, Args_... args);
  std::string* mutable_health_status();
  PROTOBUF_NODISCARD std::string* release_health_status();
  void set_allocated_health_status(std::string* value);

  private:
  const std::string& _internal_health_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_health_status(
      const std::string& value);
  std::string* _internal_mutable_health_status();

  public:
  // .seigr.common.NetworkPerformanceSummary health_summary = 8;
  bool has_health_summary() const;
  void clear_health_summary() ;
  const ::seigr::common::NetworkPerformanceSummary& health_summary() const;
  PROTOBUF_NODISCARD ::seigr::common::NetworkPerformanceSummary* release_health_summary();
  ::seigr::common::NetworkPerformanceSummary* mutable_health_summary();
  void set_allocated_health_summary(::seigr::common::NetworkPerformanceSummary* value);
  void unsafe_arena_set_allocated_health_summary(::seigr::common::NetworkPerformanceSummary* value);
  ::seigr::common::NetworkPerformanceSummary* unsafe_arena_release_health_summary();

  private:
  const ::seigr::common::NetworkPerformanceSummary& _internal_health_summary() const;
  ::seigr::common::NetworkPerformanceSummary* _internal_mutable_health_summary();

  public:
  // .seigr.common.QoSLevel default_qos_level = 4;
  void clear_default_qos_level() ;
  ::seigr::common::QoSLevel default_qos_level() const;
  void set_default_qos_level(::seigr::common::QoSLevel value);

  private:
  ::seigr::common::QoSLevel _internal_default_qos_level() const;
  void _internal_set_default_qos_level(::seigr::common::QoSLevel value);

  public:
  // float load_balancing_factor = 9;
  void clear_load_balancing_factor() ;
  float load_balancing_factor() const;
  void set_load_balancing_factor(float value);

  private:
  float _internal_load_balancing_factor() const;
  void _internal_set_load_balancing_factor(float value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.network.NetworkCluster)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 4,
      121, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetworkCluster& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::seigr::network::NetworkHyphen > hyphens_;
    ::google::protobuf::internal::MapField<NetworkCluster_HyphenStatusCountsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        hyphen_status_counts_;
    ::google::protobuf::internal::MapField<NetworkCluster_ClusterMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        cluster_metadata_;
    ::google::protobuf::internal::ArenaStringPtr cluster_id_;
    ::google::protobuf::internal::ArenaStringPtr last_health_check_;
    ::google::protobuf::internal::ArenaStringPtr health_status_;
    ::seigr::common::NetworkPerformanceSummary* health_summary_;
    int default_qos_level_;
    float load_balancing_factor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkHyphen

// string hyphen_id = 1;
inline void NetworkHyphen::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkHyphen::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkHyphen::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.hyphen_id)
}
inline std::string* NetworkHyphen::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkHyphen.hyphen_id)
  return _s;
}
inline const std::string& NetworkHyphen::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void NetworkHyphen::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkHyphen::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkHyphen::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkHyphen.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void NetworkHyphen::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkHyphen.hyphen_id)
}

// string ip_address = 2;
inline void NetworkHyphen::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& NetworkHyphen::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkHyphen::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.ip_address)
}
inline std::string* NetworkHyphen::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkHyphen.ip_address)
  return _s;
}
inline const std::string& NetworkHyphen::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void NetworkHyphen::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* NetworkHyphen::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* NetworkHyphen::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkHyphen.ip_address)
  return _impl_.ip_address_.Release();
}
inline void NetworkHyphen::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkHyphen.ip_address)
}

// int32 port = 3;
inline void NetworkHyphen::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t NetworkHyphen::port() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.port)
  return _internal_port();
}
inline void NetworkHyphen::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.port)
}
inline ::int32_t NetworkHyphen::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void NetworkHyphen::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// .seigr.network.NetworkProtocol primary_protocol = 4;
inline void NetworkHyphen::clear_primary_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_protocol_ = 0;
}
inline ::seigr::network::NetworkProtocol NetworkHyphen::primary_protocol() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.primary_protocol)
  return _internal_primary_protocol();
}
inline void NetworkHyphen::set_primary_protocol(::seigr::network::NetworkProtocol value) {
  _internal_set_primary_protocol(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.primary_protocol)
}
inline ::seigr::network::NetworkProtocol NetworkHyphen::_internal_primary_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::network::NetworkProtocol>(_impl_.primary_protocol_);
}
inline void NetworkHyphen::_internal_set_primary_protocol(::seigr::network::NetworkProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_protocol_ = value;
}

// .seigr.network.HyphenStatus status = 5;
inline void NetworkHyphen::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::network::HyphenStatus NetworkHyphen::status() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.status)
  return _internal_status();
}
inline void NetworkHyphen::set_status(::seigr::network::HyphenStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.status)
}
inline ::seigr::network::HyphenStatus NetworkHyphen::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::network::HyphenStatus>(_impl_.status_);
}
inline void NetworkHyphen::_internal_set_status(::seigr::network::HyphenStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated .seigr.network.NetworkProtocol supported_protocols = 6;
inline int NetworkHyphen::_internal_supported_protocols_size() const {
  return _internal_supported_protocols().size();
}
inline int NetworkHyphen::supported_protocols_size() const {
  return _internal_supported_protocols_size();
}
inline void NetworkHyphen::clear_supported_protocols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.supported_protocols_.Clear();
}
inline ::seigr::network::NetworkProtocol NetworkHyphen::supported_protocols(int index) const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.supported_protocols)
  return static_cast<::seigr::network::NetworkProtocol>(_internal_supported_protocols().Get(index));
}
inline void NetworkHyphen::set_supported_protocols(int index, ::seigr::network::NetworkProtocol value) {
  _internal_mutable_supported_protocols()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.supported_protocols)
}
inline void NetworkHyphen::add_supported_protocols(::seigr::network::NetworkProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_supported_protocols()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.network.NetworkHyphen.supported_protocols)
}
inline const ::google::protobuf::RepeatedField<int>& NetworkHyphen::supported_protocols() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkHyphen.supported_protocols)
  return _internal_supported_protocols();
}
inline ::google::protobuf::RepeatedField<int>* NetworkHyphen::mutable_supported_protocols()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkHyphen.supported_protocols)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_supported_protocols();
}
inline const ::google::protobuf::RepeatedField<int>& NetworkHyphen::_internal_supported_protocols()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.supported_protocols_;
}
inline ::google::protobuf::RepeatedField<int>* NetworkHyphen::_internal_mutable_supported_protocols() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.supported_protocols_;
}

// map<string, string> metadata = 7;
inline int NetworkHyphen::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int NetworkHyphen::metadata_size() const {
  return _internal_metadata_size();
}
inline void NetworkHyphen::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkHyphen::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkHyphen::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkHyphen.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkHyphen::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkHyphen::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkHyphen.metadata)
  return _internal_mutable_metadata();
}

// string last_seen = 8;
inline void NetworkHyphen::clear_last_seen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_seen_.ClearToEmpty();
}
inline const std::string& NetworkHyphen::last_seen() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.last_seen)
  return _internal_last_seen();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkHyphen::set_last_seen(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_seen_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.last_seen)
}
inline std::string* NetworkHyphen::mutable_last_seen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_seen();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkHyphen.last_seen)
  return _s;
}
inline const std::string& NetworkHyphen::_internal_last_seen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_seen_.Get();
}
inline void NetworkHyphen::_internal_set_last_seen(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_seen_.Set(value, GetArena());
}
inline std::string* NetworkHyphen::_internal_mutable_last_seen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_seen_.Mutable( GetArena());
}
inline std::string* NetworkHyphen::release_last_seen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkHyphen.last_seen)
  return _impl_.last_seen_.Release();
}
inline void NetworkHyphen::set_allocated_last_seen(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_seen_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_seen_.IsDefault()) {
    _impl_.last_seen_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkHyphen.last_seen)
}

// int32 load_percentage = 9;
inline void NetworkHyphen::clear_load_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_percentage_ = 0;
}
inline ::int32_t NetworkHyphen::load_percentage() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.load_percentage)
  return _internal_load_percentage();
}
inline void NetworkHyphen::set_load_percentage(::int32_t value) {
  _internal_set_load_percentage(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.load_percentage)
}
inline ::int32_t NetworkHyphen::_internal_load_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load_percentage_;
}
inline void NetworkHyphen::_internal_set_load_percentage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_percentage_ = value;
}

// int32 avg_latency_ms = 10;
inline void NetworkHyphen::clear_avg_latency_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_latency_ms_ = 0;
}
inline ::int32_t NetworkHyphen::avg_latency_ms() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.avg_latency_ms)
  return _internal_avg_latency_ms();
}
inline void NetworkHyphen::set_avg_latency_ms(::int32_t value) {
  _internal_set_avg_latency_ms(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.avg_latency_ms)
}
inline ::int32_t NetworkHyphen::_internal_avg_latency_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_latency_ms_;
}
inline void NetworkHyphen::_internal_set_avg_latency_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_latency_ms_ = value;
}

// int32 available_bandwidth_mbps = 11;
inline void NetworkHyphen::clear_available_bandwidth_mbps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_bandwidth_mbps_ = 0;
}
inline ::int32_t NetworkHyphen::available_bandwidth_mbps() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.available_bandwidth_mbps)
  return _internal_available_bandwidth_mbps();
}
inline void NetworkHyphen::set_available_bandwidth_mbps(::int32_t value) {
  _internal_set_available_bandwidth_mbps(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.available_bandwidth_mbps)
}
inline ::int32_t NetworkHyphen::_internal_available_bandwidth_mbps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_bandwidth_mbps_;
}
inline void NetworkHyphen::_internal_set_available_bandwidth_mbps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_bandwidth_mbps_ = value;
}

// string adaptive_scaling_status = 12;
inline void NetworkHyphen::clear_adaptive_scaling_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_status_.ClearToEmpty();
}
inline const std::string& NetworkHyphen::adaptive_scaling_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkHyphen.adaptive_scaling_status)
  return _internal_adaptive_scaling_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkHyphen::set_adaptive_scaling_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkHyphen.adaptive_scaling_status)
}
inline std::string* NetworkHyphen::mutable_adaptive_scaling_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_adaptive_scaling_status();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkHyphen.adaptive_scaling_status)
  return _s;
}
inline const std::string& NetworkHyphen::_internal_adaptive_scaling_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_scaling_status_.Get();
}
inline void NetworkHyphen::_internal_set_adaptive_scaling_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_status_.Set(value, GetArena());
}
inline std::string* NetworkHyphen::_internal_mutable_adaptive_scaling_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.adaptive_scaling_status_.Mutable( GetArena());
}
inline std::string* NetworkHyphen::release_adaptive_scaling_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkHyphen.adaptive_scaling_status)
  return _impl_.adaptive_scaling_status_.Release();
}
inline void NetworkHyphen::set_allocated_adaptive_scaling_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_scaling_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.adaptive_scaling_status_.IsDefault()) {
    _impl_.adaptive_scaling_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkHyphen.adaptive_scaling_status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PeerConnection

// string connection_id = 1;
inline void PeerConnection::clear_connection_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& PeerConnection::connection_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.connection_id)
}
inline std::string* PeerConnection::mutable_connection_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.connection_id)
  return _s;
}
inline const std::string& PeerConnection::_internal_connection_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_id_.Get();
}
inline void PeerConnection::_internal_set_connection_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_connection_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.connection_id_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_connection_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.connection_id)
  return _impl_.connection_id_.Release();
}
inline void PeerConnection::set_allocated_connection_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.connection_id_.IsDefault()) {
    _impl_.connection_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.connection_id)
}

// string source_hyphen_id = 2;
inline void PeerConnection::clear_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.ClearToEmpty();
}
inline const std::string& PeerConnection::source_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.source_hyphen_id)
  return _internal_source_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_source_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.source_hyphen_id)
}
inline std::string* PeerConnection::mutable_source_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.source_hyphen_id)
  return _s;
}
inline const std::string& PeerConnection::_internal_source_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_hyphen_id_.Get();
}
inline void PeerConnection::_internal_set_source_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_hyphen_id_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.source_hyphen_id)
  return _impl_.source_hyphen_id_.Release();
}
inline void PeerConnection::set_allocated_source_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_hyphen_id_.IsDefault()) {
    _impl_.source_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.source_hyphen_id)
}

// string target_hyphen_id = 3;
inline void PeerConnection::clear_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.ClearToEmpty();
}
inline const std::string& PeerConnection::target_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.target_hyphen_id)
  return _internal_target_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_target_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.target_hyphen_id)
}
inline std::string* PeerConnection::mutable_target_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.target_hyphen_id)
  return _s;
}
inline const std::string& PeerConnection::_internal_target_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_hyphen_id_.Get();
}
inline void PeerConnection::_internal_set_target_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_hyphen_id_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.target_hyphen_id)
  return _impl_.target_hyphen_id_.Release();
}
inline void PeerConnection::set_allocated_target_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_hyphen_id_.IsDefault()) {
    _impl_.target_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.target_hyphen_id)
}

// .seigr.network.NetworkProtocol protocol = 4;
inline void PeerConnection::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = 0;
}
inline ::seigr::network::NetworkProtocol PeerConnection::protocol() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.protocol)
  return _internal_protocol();
}
inline void PeerConnection::set_protocol(::seigr::network::NetworkProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.protocol)
}
inline ::seigr::network::NetworkProtocol PeerConnection::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::network::NetworkProtocol>(_impl_.protocol_);
}
inline void PeerConnection::_internal_set_protocol(::seigr::network::NetworkProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = value;
}

// int32 latency_ms = 5;
inline void PeerConnection::clear_latency_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latency_ms_ = 0;
}
inline ::int32_t PeerConnection::latency_ms() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.latency_ms)
  return _internal_latency_ms();
}
inline void PeerConnection::set_latency_ms(::int32_t value) {
  _internal_set_latency_ms(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.latency_ms)
}
inline ::int32_t PeerConnection::_internal_latency_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latency_ms_;
}
inline void PeerConnection::_internal_set_latency_ms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latency_ms_ = value;
}

// .seigr.common.QoSLevel qos_level = 6;
inline void PeerConnection::clear_qos_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qos_level_ = 0;
}
inline ::seigr::common::QoSLevel PeerConnection::qos_level() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.qos_level)
  return _internal_qos_level();
}
inline void PeerConnection::set_qos_level(::seigr::common::QoSLevel value) {
  _internal_set_qos_level(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.qos_level)
}
inline ::seigr::common::QoSLevel PeerConnection::_internal_qos_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::QoSLevel>(_impl_.qos_level_);
}
inline void PeerConnection::_internal_set_qos_level(::seigr::common::QoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qos_level_ = value;
}

// string status = 7;
inline void PeerConnection::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& PeerConnection::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.status)
}
inline std::string* PeerConnection::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.status)
  return _s;
}
inline const std::string& PeerConnection::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void PeerConnection::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.status)
  return _impl_.status_.Release();
}
inline void PeerConnection::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.status)
}

// string created_at = 8;
inline void PeerConnection::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& PeerConnection::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.created_at)
}
inline std::string* PeerConnection::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.created_at)
  return _s;
}
inline const std::string& PeerConnection::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void PeerConnection::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.created_at)
  return _impl_.created_at_.Release();
}
inline void PeerConnection::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.created_at)
}

// string last_updated = 9;
inline void PeerConnection::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& PeerConnection::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerConnection::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.last_updated)
}
inline std::string* PeerConnection::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.network.PeerConnection.last_updated)
  return _s;
}
inline const std::string& PeerConnection::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void PeerConnection::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* PeerConnection::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* PeerConnection::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.PeerConnection.last_updated)
  return _impl_.last_updated_.Release();
}
inline void PeerConnection::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.PeerConnection.last_updated)
}

// map<string, string> metadata = 10;
inline int PeerConnection::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int PeerConnection::metadata_size() const {
  return _internal_metadata_size();
}
inline void PeerConnection::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PeerConnection::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PeerConnection::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.PeerConnection.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PeerConnection::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PeerConnection::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.PeerConnection.metadata)
  return _internal_mutable_metadata();
}

// int64 data_transferred_bytes = 11;
inline void PeerConnection::clear_data_transferred_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transferred_bytes_ = ::int64_t{0};
}
inline ::int64_t PeerConnection::data_transferred_bytes() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.data_transferred_bytes)
  return _internal_data_transferred_bytes();
}
inline void PeerConnection::set_data_transferred_bytes(::int64_t value) {
  _internal_set_data_transferred_bytes(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.data_transferred_bytes)
}
inline ::int64_t PeerConnection::_internal_data_transferred_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_transferred_bytes_;
}
inline void PeerConnection::_internal_set_data_transferred_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_transferred_bytes_ = value;
}

// bool auto_scaled_qos = 12;
inline void PeerConnection::clear_auto_scaled_qos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scaled_qos_ = false;
}
inline bool PeerConnection::auto_scaled_qos() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.auto_scaled_qos)
  return _internal_auto_scaled_qos();
}
inline void PeerConnection::set_auto_scaled_qos(bool value) {
  _internal_set_auto_scaled_qos(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.auto_scaled_qos)
}
inline bool PeerConnection::_internal_auto_scaled_qos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_scaled_qos_;
}
inline void PeerConnection::_internal_set_auto_scaled_qos(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_scaled_qos_ = value;
}

// float congestion_level = 13;
inline void PeerConnection::clear_congestion_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.congestion_level_ = 0;
}
inline float PeerConnection::congestion_level() const {
  // @@protoc_insertion_point(field_get:seigr.network.PeerConnection.congestion_level)
  return _internal_congestion_level();
}
inline void PeerConnection::set_congestion_level(float value) {
  _internal_set_congestion_level(value);
  // @@protoc_insertion_point(field_set:seigr.network.PeerConnection.congestion_level)
}
inline float PeerConnection::_internal_congestion_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.congestion_level_;
}
inline void PeerConnection::_internal_set_congestion_level(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.congestion_level_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkCluster

// string cluster_id = 1;
inline void NetworkCluster::clear_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.ClearToEmpty();
}
inline const std::string& NetworkCluster::cluster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.cluster_id)
  return _internal_cluster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkCluster::set_cluster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkCluster.cluster_id)
}
inline std::string* NetworkCluster::mutable_cluster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkCluster.cluster_id)
  return _s;
}
inline const std::string& NetworkCluster::_internal_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_id_.Get();
}
inline void NetworkCluster::_internal_set_cluster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(value, GetArena());
}
inline std::string* NetworkCluster::_internal_mutable_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_id_.Mutable( GetArena());
}
inline std::string* NetworkCluster::release_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkCluster.cluster_id)
  return _impl_.cluster_id_.Release();
}
inline void NetworkCluster::set_allocated_cluster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cluster_id_.IsDefault()) {
    _impl_.cluster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkCluster.cluster_id)
}

// repeated .seigr.network.NetworkHyphen hyphens = 2;
inline int NetworkCluster::_internal_hyphens_size() const {
  return _internal_hyphens().size();
}
inline int NetworkCluster::hyphens_size() const {
  return _internal_hyphens_size();
}
inline void NetworkCluster::clear_hyphens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphens_.Clear();
}
inline ::seigr::network::NetworkHyphen* NetworkCluster::mutable_hyphens(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkCluster.hyphens)
  return _internal_mutable_hyphens()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>* NetworkCluster::mutable_hyphens()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkCluster.hyphens)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hyphens();
}
inline const ::seigr::network::NetworkHyphen& NetworkCluster::hyphens(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.hyphens)
  return _internal_hyphens().Get(index);
}
inline ::seigr::network::NetworkHyphen* NetworkCluster::add_hyphens() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::network::NetworkHyphen* _add = _internal_mutable_hyphens()->Add();
  // @@protoc_insertion_point(field_add:seigr.network.NetworkCluster.hyphens)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>& NetworkCluster::hyphens() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkCluster.hyphens)
  return _internal_hyphens();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>&
NetworkCluster::_internal_hyphens() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphens_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::network::NetworkHyphen>*
NetworkCluster::_internal_mutable_hyphens() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hyphens_;
}

// map<string, int32> hyphen_status_counts = 3;
inline int NetworkCluster::_internal_hyphen_status_counts_size() const {
  return _internal_hyphen_status_counts().size();
}
inline int NetworkCluster::hyphen_status_counts_size() const {
  return _internal_hyphen_status_counts_size();
}
inline void NetworkCluster::clear_hyphen_status_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_status_counts_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NetworkCluster::_internal_hyphen_status_counts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_status_counts_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NetworkCluster::hyphen_status_counts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkCluster.hyphen_status_counts)
  return _internal_hyphen_status_counts();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NetworkCluster::_internal_mutable_hyphen_status_counts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_status_counts_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NetworkCluster::mutable_hyphen_status_counts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkCluster.hyphen_status_counts)
  return _internal_mutable_hyphen_status_counts();
}

// .seigr.common.QoSLevel default_qos_level = 4;
inline void NetworkCluster::clear_default_qos_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_qos_level_ = 0;
}
inline ::seigr::common::QoSLevel NetworkCluster::default_qos_level() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.default_qos_level)
  return _internal_default_qos_level();
}
inline void NetworkCluster::set_default_qos_level(::seigr::common::QoSLevel value) {
  _internal_set_default_qos_level(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkCluster.default_qos_level)
}
inline ::seigr::common::QoSLevel NetworkCluster::_internal_default_qos_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::QoSLevel>(_impl_.default_qos_level_);
}
inline void NetworkCluster::_internal_set_default_qos_level(::seigr::common::QoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_qos_level_ = value;
}

// string last_health_check = 5;
inline void NetworkCluster::clear_last_health_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_health_check_.ClearToEmpty();
}
inline const std::string& NetworkCluster::last_health_check() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.last_health_check)
  return _internal_last_health_check();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkCluster::set_last_health_check(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_health_check_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkCluster.last_health_check)
}
inline std::string* NetworkCluster::mutable_last_health_check() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_health_check();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkCluster.last_health_check)
  return _s;
}
inline const std::string& NetworkCluster::_internal_last_health_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_health_check_.Get();
}
inline void NetworkCluster::_internal_set_last_health_check(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_health_check_.Set(value, GetArena());
}
inline std::string* NetworkCluster::_internal_mutable_last_health_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_health_check_.Mutable( GetArena());
}
inline std::string* NetworkCluster::release_last_health_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkCluster.last_health_check)
  return _impl_.last_health_check_.Release();
}
inline void NetworkCluster::set_allocated_last_health_check(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_health_check_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_health_check_.IsDefault()) {
    _impl_.last_health_check_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkCluster.last_health_check)
}

// string health_status = 6;
inline void NetworkCluster::clear_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.ClearToEmpty();
}
inline const std::string& NetworkCluster::health_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.health_status)
  return _internal_health_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkCluster::set_health_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkCluster.health_status)
}
inline std::string* NetworkCluster::mutable_health_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_health_status();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkCluster.health_status)
  return _s;
}
inline const std::string& NetworkCluster::_internal_health_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.health_status_.Get();
}
inline void NetworkCluster::_internal_set_health_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.Set(value, GetArena());
}
inline std::string* NetworkCluster::_internal_mutable_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.health_status_.Mutable( GetArena());
}
inline std::string* NetworkCluster::release_health_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkCluster.health_status)
  return _impl_.health_status_.Release();
}
inline void NetworkCluster::set_allocated_health_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.health_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.health_status_.IsDefault()) {
    _impl_.health_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkCluster.health_status)
}

// map<string, string> cluster_metadata = 7;
inline int NetworkCluster::_internal_cluster_metadata_size() const {
  return _internal_cluster_metadata().size();
}
inline int NetworkCluster::cluster_metadata_size() const {
  return _internal_cluster_metadata_size();
}
inline void NetworkCluster::clear_cluster_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkCluster::_internal_cluster_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkCluster::cluster_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkCluster.cluster_metadata)
  return _internal_cluster_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkCluster::_internal_mutable_cluster_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkCluster::mutable_cluster_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkCluster.cluster_metadata)
  return _internal_mutable_cluster_metadata();
}

// .seigr.common.NetworkPerformanceSummary health_summary = 8;
inline bool NetworkCluster::has_health_summary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.health_summary_ != nullptr);
  return value;
}
inline const ::seigr::common::NetworkPerformanceSummary& NetworkCluster::_internal_health_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::common::NetworkPerformanceSummary* p = _impl_.health_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::common::NetworkPerformanceSummary&>(::seigr::common::_NetworkPerformanceSummary_default_instance_);
}
inline const ::seigr::common::NetworkPerformanceSummary& NetworkCluster::health_summary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.health_summary)
  return _internal_health_summary();
}
inline void NetworkCluster::unsafe_arena_set_allocated_health_summary(::seigr::common::NetworkPerformanceSummary* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.health_summary_);
  }
  _impl_.health_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.network.NetworkCluster.health_summary)
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkCluster::release_health_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* released = _impl_.health_summary_;
  _impl_.health_summary_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkCluster::unsafe_arena_release_health_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkCluster.health_summary)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* temp = _impl_.health_summary_;
  _impl_.health_summary_ = nullptr;
  return temp;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkCluster::_internal_mutable_health_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.health_summary_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::common::NetworkPerformanceSummary>(GetArena());
    _impl_.health_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(p);
  }
  return _impl_.health_summary_;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkCluster::mutable_health_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* _msg = _internal_mutable_health_summary();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkCluster.health_summary)
  return _msg;
}
inline void NetworkCluster::set_allocated_health_summary(::seigr::common::NetworkPerformanceSummary* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.health_summary_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.health_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkCluster.health_summary)
}

// float load_balancing_factor = 9;
inline void NetworkCluster::clear_load_balancing_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_balancing_factor_ = 0;
}
inline float NetworkCluster::load_balancing_factor() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkCluster.load_balancing_factor)
  return _internal_load_balancing_factor();
}
inline void NetworkCluster::set_load_balancing_factor(float value) {
  _internal_set_load_balancing_factor(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkCluster.load_balancing_factor)
}
inline float NetworkCluster::_internal_load_balancing_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load_balancing_factor_;
}
inline void NetworkCluster::_internal_set_load_balancing_factor(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load_balancing_factor_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkConfig

// int32 max_connections = 1;
inline void NetworkConfig::clear_max_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_connections_ = 0;
}
inline ::int32_t NetworkConfig::max_connections() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.max_connections)
  return _internal_max_connections();
}
inline void NetworkConfig::set_max_connections(::int32_t value) {
  _internal_set_max_connections(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.max_connections)
}
inline ::int32_t NetworkConfig::_internal_max_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_connections_;
}
inline void NetworkConfig::_internal_set_max_connections(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_connections_ = value;
}

// int32 retry_limit = 2;
inline void NetworkConfig::clear_retry_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_limit_ = 0;
}
inline ::int32_t NetworkConfig::retry_limit() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.retry_limit)
  return _internal_retry_limit();
}
inline void NetworkConfig::set_retry_limit(::int32_t value) {
  _internal_set_retry_limit(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.retry_limit)
}
inline ::int32_t NetworkConfig::_internal_retry_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_limit_;
}
inline void NetworkConfig::_internal_set_retry_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_limit_ = value;
}

// int32 timeout_seconds = 3;
inline void NetworkConfig::clear_timeout_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_seconds_ = 0;
}
inline ::int32_t NetworkConfig::timeout_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.timeout_seconds)
  return _internal_timeout_seconds();
}
inline void NetworkConfig::set_timeout_seconds(::int32_t value) {
  _internal_set_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.timeout_seconds)
}
inline ::int32_t NetworkConfig::_internal_timeout_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_seconds_;
}
inline void NetworkConfig::_internal_set_timeout_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_seconds_ = value;
}

// bool enable_encryption = 4;
inline void NetworkConfig::clear_enable_encryption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = false;
}
inline bool NetworkConfig::enable_encryption() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.enable_encryption)
  return _internal_enable_encryption();
}
inline void NetworkConfig::set_enable_encryption(bool value) {
  _internal_set_enable_encryption(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.enable_encryption)
}
inline bool NetworkConfig::_internal_enable_encryption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_encryption_;
}
inline void NetworkConfig::_internal_set_enable_encryption(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = value;
}

// .seigr.common.QoSLevel default_qos = 5;
inline void NetworkConfig::clear_default_qos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_qos_ = 0;
}
inline ::seigr::common::QoSLevel NetworkConfig::default_qos() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.default_qos)
  return _internal_default_qos();
}
inline void NetworkConfig::set_default_qos(::seigr::common::QoSLevel value) {
  _internal_set_default_qos(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.default_qos)
}
inline ::seigr::common::QoSLevel NetworkConfig::_internal_default_qos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::QoSLevel>(_impl_.default_qos_);
}
inline void NetworkConfig::_internal_set_default_qos(::seigr::common::QoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_qos_ = value;
}

// repeated .seigr.network.NetworkProtocol allowed_protocols = 6;
inline int NetworkConfig::_internal_allowed_protocols_size() const {
  return _internal_allowed_protocols().size();
}
inline int NetworkConfig::allowed_protocols_size() const {
  return _internal_allowed_protocols_size();
}
inline void NetworkConfig::clear_allowed_protocols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_protocols_.Clear();
}
inline ::seigr::network::NetworkProtocol NetworkConfig::allowed_protocols(int index) const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.allowed_protocols)
  return static_cast<::seigr::network::NetworkProtocol>(_internal_allowed_protocols().Get(index));
}
inline void NetworkConfig::set_allowed_protocols(int index, ::seigr::network::NetworkProtocol value) {
  _internal_mutable_allowed_protocols()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.allowed_protocols)
}
inline void NetworkConfig::add_allowed_protocols(::seigr::network::NetworkProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_allowed_protocols()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.network.NetworkConfig.allowed_protocols)
}
inline const ::google::protobuf::RepeatedField<int>& NetworkConfig::allowed_protocols() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkConfig.allowed_protocols)
  return _internal_allowed_protocols();
}
inline ::google::protobuf::RepeatedField<int>* NetworkConfig::mutable_allowed_protocols()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkConfig.allowed_protocols)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_protocols();
}
inline const ::google::protobuf::RepeatedField<int>& NetworkConfig::_internal_allowed_protocols()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_protocols_;
}
inline ::google::protobuf::RepeatedField<int>* NetworkConfig::_internal_mutable_allowed_protocols() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_protocols_;
}

// map<string, string> config_metadata = 7;
inline int NetworkConfig::_internal_config_metadata_size() const {
  return _internal_config_metadata().size();
}
inline int NetworkConfig::config_metadata_size() const {
  return _internal_config_metadata_size();
}
inline void NetworkConfig::clear_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkConfig::_internal_config_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.config_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkConfig::config_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkConfig.config_metadata)
  return _internal_config_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkConfig::_internal_mutable_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.config_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkConfig::mutable_config_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkConfig.config_metadata)
  return _internal_mutable_config_metadata();
}

// int32 max_packet_loss_threshold = 8;
inline void NetworkConfig::clear_max_packet_loss_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_packet_loss_threshold_ = 0;
}
inline ::int32_t NetworkConfig::max_packet_loss_threshold() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.max_packet_loss_threshold)
  return _internal_max_packet_loss_threshold();
}
inline void NetworkConfig::set_max_packet_loss_threshold(::int32_t value) {
  _internal_set_max_packet_loss_threshold(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.max_packet_loss_threshold)
}
inline ::int32_t NetworkConfig::_internal_max_packet_loss_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_packet_loss_threshold_;
}
inline void NetworkConfig::_internal_set_max_packet_loss_threshold(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_packet_loss_threshold_ = value;
}

// bool enable_dynamic_qos_scaling = 9;
inline void NetworkConfig::clear_enable_dynamic_qos_scaling() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dynamic_qos_scaling_ = false;
}
inline bool NetworkConfig::enable_dynamic_qos_scaling() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.enable_dynamic_qos_scaling)
  return _internal_enable_dynamic_qos_scaling();
}
inline void NetworkConfig::set_enable_dynamic_qos_scaling(bool value) {
  _internal_set_enable_dynamic_qos_scaling(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.enable_dynamic_qos_scaling)
}
inline bool NetworkConfig::_internal_enable_dynamic_qos_scaling() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_dynamic_qos_scaling_;
}
inline void NetworkConfig::_internal_set_enable_dynamic_qos_scaling(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_dynamic_qos_scaling_ = value;
}

// string fallback_protocol = 10;
inline void NetworkConfig::clear_fallback_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_protocol_.ClearToEmpty();
}
inline const std::string& NetworkConfig::fallback_protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkConfig.fallback_protocol)
  return _internal_fallback_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkConfig::set_fallback_protocol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkConfig.fallback_protocol)
}
inline std::string* NetworkConfig::mutable_fallback_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fallback_protocol();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkConfig.fallback_protocol)
  return _s;
}
inline const std::string& NetworkConfig::_internal_fallback_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fallback_protocol_.Get();
}
inline void NetworkConfig::_internal_set_fallback_protocol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_protocol_.Set(value, GetArena());
}
inline std::string* NetworkConfig::_internal_mutable_fallback_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fallback_protocol_.Mutable( GetArena());
}
inline std::string* NetworkConfig::release_fallback_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkConfig.fallback_protocol)
  return _impl_.fallback_protocol_.Release();
}
inline void NetworkConfig::set_allocated_fallback_protocol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_protocol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fallback_protocol_.IsDefault()) {
    _impl_.fallback_protocol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkConfig.fallback_protocol)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkStatistics

// string cluster_id = 1;
inline void NetworkStatistics::clear_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.ClearToEmpty();
}
inline const std::string& NetworkStatistics::cluster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.cluster_id)
  return _internal_cluster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatistics::set_cluster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.cluster_id)
}
inline std::string* NetworkStatistics::mutable_cluster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatistics.cluster_id)
  return _s;
}
inline const std::string& NetworkStatistics::_internal_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_id_.Get();
}
inline void NetworkStatistics::_internal_set_cluster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.Set(value, GetArena());
}
inline std::string* NetworkStatistics::_internal_mutable_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cluster_id_.Mutable( GetArena());
}
inline std::string* NetworkStatistics::release_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatistics.cluster_id)
  return _impl_.cluster_id_.Release();
}
inline void NetworkStatistics::set_allocated_cluster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cluster_id_.IsDefault()) {
    _impl_.cluster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatistics.cluster_id)
}

// int32 total_hyphens = 2;
inline void NetworkStatistics::clear_total_hyphens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_hyphens_ = 0;
}
inline ::int32_t NetworkStatistics::total_hyphens() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.total_hyphens)
  return _internal_total_hyphens();
}
inline void NetworkStatistics::set_total_hyphens(::int32_t value) {
  _internal_set_total_hyphens(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.total_hyphens)
}
inline ::int32_t NetworkStatistics::_internal_total_hyphens() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_hyphens_;
}
inline void NetworkStatistics::_internal_set_total_hyphens(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_hyphens_ = value;
}

// int32 active_connections = 3;
inline void NetworkStatistics::clear_active_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_connections_ = 0;
}
inline ::int32_t NetworkStatistics::active_connections() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.active_connections)
  return _internal_active_connections();
}
inline void NetworkStatistics::set_active_connections(::int32_t value) {
  _internal_set_active_connections(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.active_connections)
}
inline ::int32_t NetworkStatistics::_internal_active_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_connections_;
}
inline void NetworkStatistics::_internal_set_active_connections(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_connections_ = value;
}

// int32 total_data_transferred_mb = 4;
inline void NetworkStatistics::clear_total_data_transferred_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_data_transferred_mb_ = 0;
}
inline ::int32_t NetworkStatistics::total_data_transferred_mb() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.total_data_transferred_mb)
  return _internal_total_data_transferred_mb();
}
inline void NetworkStatistics::set_total_data_transferred_mb(::int32_t value) {
  _internal_set_total_data_transferred_mb(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.total_data_transferred_mb)
}
inline ::int32_t NetworkStatistics::_internal_total_data_transferred_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_data_transferred_mb_;
}
inline void NetworkStatistics::_internal_set_total_data_transferred_mb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_data_transferred_mb_ = value;
}

// map<string, double> latency_averages = 5;
inline int NetworkStatistics::_internal_latency_averages_size() const {
  return _internal_latency_averages().size();
}
inline int NetworkStatistics::latency_averages_size() const {
  return _internal_latency_averages_size();
}
inline void NetworkStatistics::clear_latency_averages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latency_averages_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& NetworkStatistics::_internal_latency_averages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latency_averages_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& NetworkStatistics::latency_averages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkStatistics.latency_averages)
  return _internal_latency_averages();
}
inline ::google::protobuf::Map<std::string, double>* NetworkStatistics::_internal_mutable_latency_averages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.latency_averages_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* NetworkStatistics::mutable_latency_averages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkStatistics.latency_averages)
  return _internal_mutable_latency_averages();
}

// map<string, int32> qos_distribution = 6;
inline int NetworkStatistics::_internal_qos_distribution_size() const {
  return _internal_qos_distribution().size();
}
inline int NetworkStatistics::qos_distribution_size() const {
  return _internal_qos_distribution_size();
}
inline void NetworkStatistics::clear_qos_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qos_distribution_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NetworkStatistics::_internal_qos_distribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qos_distribution_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& NetworkStatistics::qos_distribution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkStatistics.qos_distribution)
  return _internal_qos_distribution();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NetworkStatistics::_internal_mutable_qos_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.qos_distribution_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* NetworkStatistics::mutable_qos_distribution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkStatistics.qos_distribution)
  return _internal_mutable_qos_distribution();
}

// string last_updated = 7;
inline void NetworkStatistics::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& NetworkStatistics::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatistics::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.last_updated)
}
inline std::string* NetworkStatistics::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatistics.last_updated)
  return _s;
}
inline const std::string& NetworkStatistics::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void NetworkStatistics::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* NetworkStatistics::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* NetworkStatistics::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatistics.last_updated)
  return _impl_.last_updated_.Release();
}
inline void NetworkStatistics::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatistics.last_updated)
}

// .seigr.common.NetworkPerformanceSummary performance_summary = 8;
inline bool NetworkStatistics::has_performance_summary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.performance_summary_ != nullptr);
  return value;
}
inline const ::seigr::common::NetworkPerformanceSummary& NetworkStatistics::_internal_performance_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::common::NetworkPerformanceSummary* p = _impl_.performance_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::common::NetworkPerformanceSummary&>(::seigr::common::_NetworkPerformanceSummary_default_instance_);
}
inline const ::seigr::common::NetworkPerformanceSummary& NetworkStatistics::performance_summary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.performance_summary)
  return _internal_performance_summary();
}
inline void NetworkStatistics::unsafe_arena_set_allocated_performance_summary(::seigr::common::NetworkPerformanceSummary* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.performance_summary_);
  }
  _impl_.performance_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.network.NetworkStatistics.performance_summary)
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkStatistics::release_performance_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* released = _impl_.performance_summary_;
  _impl_.performance_summary_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkStatistics::unsafe_arena_release_performance_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatistics.performance_summary)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* temp = _impl_.performance_summary_;
  _impl_.performance_summary_ = nullptr;
  return temp;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkStatistics::_internal_mutable_performance_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.performance_summary_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::common::NetworkPerformanceSummary>(GetArena());
    _impl_.performance_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(p);
  }
  return _impl_.performance_summary_;
}
inline ::seigr::common::NetworkPerformanceSummary* NetworkStatistics::mutable_performance_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::common::NetworkPerformanceSummary* _msg = _internal_mutable_performance_summary();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatistics.performance_summary)
  return _msg;
}
inline void NetworkStatistics::set_allocated_performance_summary(::seigr::common::NetworkPerformanceSummary* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.performance_summary_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.performance_summary_ = reinterpret_cast<::seigr::common::NetworkPerformanceSummary*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatistics.performance_summary)
}

// float avg_congestion_level = 9;
inline void NetworkStatistics::clear_avg_congestion_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_congestion_level_ = 0;
}
inline float NetworkStatistics::avg_congestion_level() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatistics.avg_congestion_level)
  return _internal_avg_congestion_level();
}
inline void NetworkStatistics::set_avg_congestion_level(float value) {
  _internal_set_avg_congestion_level(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatistics.avg_congestion_level)
}
inline float NetworkStatistics::_internal_avg_congestion_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_congestion_level_;
}
inline void NetworkStatistics::_internal_set_avg_congestion_level(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_congestion_level_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkSecurityPolicy

// string policy_id = 1;
inline void NetworkSecurityPolicy::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& NetworkSecurityPolicy::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkSecurityPolicy::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.policy_id)
}
inline std::string* NetworkSecurityPolicy::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkSecurityPolicy.policy_id)
  return _s;
}
inline const std::string& NetworkSecurityPolicy::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void NetworkSecurityPolicy::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* NetworkSecurityPolicy::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* NetworkSecurityPolicy::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkSecurityPolicy.policy_id)
  return _impl_.policy_id_.Release();
}
inline void NetworkSecurityPolicy::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkSecurityPolicy.policy_id)
}

// repeated string allowed_ip_ranges = 2;
inline int NetworkSecurityPolicy::_internal_allowed_ip_ranges_size() const {
  return _internal_allowed_ip_ranges().size();
}
inline int NetworkSecurityPolicy::allowed_ip_ranges_size() const {
  return _internal_allowed_ip_ranges_size();
}
inline void NetworkSecurityPolicy::clear_allowed_ip_ranges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_ip_ranges_.Clear();
}
inline std::string* NetworkSecurityPolicy::add_allowed_ip_ranges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_allowed_ip_ranges()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
  return _s;
}
inline const std::string& NetworkSecurityPolicy::allowed_ip_ranges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
  return _internal_allowed_ip_ranges().Get(index);
}
inline std::string* NetworkSecurityPolicy::mutable_allowed_ip_ranges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
  return _internal_mutable_allowed_ip_ranges()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NetworkSecurityPolicy::set_allowed_ip_ranges(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_allowed_ip_ranges()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
}
template <typename Arg_, typename... Args_>
inline void NetworkSecurityPolicy::add_allowed_ip_ranges(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_allowed_ip_ranges(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetworkSecurityPolicy::allowed_ip_ranges() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
  return _internal_allowed_ip_ranges();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetworkSecurityPolicy::mutable_allowed_ip_ranges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkSecurityPolicy.allowed_ip_ranges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_ip_ranges();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetworkSecurityPolicy::_internal_allowed_ip_ranges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_ip_ranges_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetworkSecurityPolicy::_internal_mutable_allowed_ip_ranges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_ip_ranges_;
}

// repeated string blocked_ip_ranges = 3;
inline int NetworkSecurityPolicy::_internal_blocked_ip_ranges_size() const {
  return _internal_blocked_ip_ranges().size();
}
inline int NetworkSecurityPolicy::blocked_ip_ranges_size() const {
  return _internal_blocked_ip_ranges_size();
}
inline void NetworkSecurityPolicy::clear_blocked_ip_ranges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocked_ip_ranges_.Clear();
}
inline std::string* NetworkSecurityPolicy::add_blocked_ip_ranges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_blocked_ip_ranges()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
  return _s;
}
inline const std::string& NetworkSecurityPolicy::blocked_ip_ranges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
  return _internal_blocked_ip_ranges().Get(index);
}
inline std::string* NetworkSecurityPolicy::mutable_blocked_ip_ranges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
  return _internal_mutable_blocked_ip_ranges()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NetworkSecurityPolicy::set_blocked_ip_ranges(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_blocked_ip_ranges()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
}
template <typename Arg_, typename... Args_>
inline void NetworkSecurityPolicy::add_blocked_ip_ranges(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_blocked_ip_ranges(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetworkSecurityPolicy::blocked_ip_ranges() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
  return _internal_blocked_ip_ranges();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetworkSecurityPolicy::mutable_blocked_ip_ranges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkSecurityPolicy.blocked_ip_ranges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocked_ip_ranges();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetworkSecurityPolicy::_internal_blocked_ip_ranges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocked_ip_ranges_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetworkSecurityPolicy::_internal_mutable_blocked_ip_ranges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocked_ip_ranges_;
}

// bool enforce_strict_tls = 4;
inline void NetworkSecurityPolicy::clear_enforce_strict_tls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_strict_tls_ = false;
}
inline bool NetworkSecurityPolicy::enforce_strict_tls() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.enforce_strict_tls)
  return _internal_enforce_strict_tls();
}
inline void NetworkSecurityPolicy::set_enforce_strict_tls(bool value) {
  _internal_set_enforce_strict_tls(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.enforce_strict_tls)
}
inline bool NetworkSecurityPolicy::_internal_enforce_strict_tls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforce_strict_tls_;
}
inline void NetworkSecurityPolicy::_internal_set_enforce_strict_tls(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_strict_tls_ = value;
}

// repeated .seigr.network.NetworkProtocol allowed_protocols = 5;
inline int NetworkSecurityPolicy::_internal_allowed_protocols_size() const {
  return _internal_allowed_protocols().size();
}
inline int NetworkSecurityPolicy::allowed_protocols_size() const {
  return _internal_allowed_protocols_size();
}
inline void NetworkSecurityPolicy::clear_allowed_protocols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_protocols_.Clear();
}
inline ::seigr::network::NetworkProtocol NetworkSecurityPolicy::allowed_protocols(int index) const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.allowed_protocols)
  return static_cast<::seigr::network::NetworkProtocol>(_internal_allowed_protocols().Get(index));
}
inline void NetworkSecurityPolicy::set_allowed_protocols(int index, ::seigr::network::NetworkProtocol value) {
  _internal_mutable_allowed_protocols()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.allowed_protocols)
}
inline void NetworkSecurityPolicy::add_allowed_protocols(::seigr::network::NetworkProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_allowed_protocols()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.network.NetworkSecurityPolicy.allowed_protocols)
}
inline const ::google::protobuf::RepeatedField<int>& NetworkSecurityPolicy::allowed_protocols() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.NetworkSecurityPolicy.allowed_protocols)
  return _internal_allowed_protocols();
}
inline ::google::protobuf::RepeatedField<int>* NetworkSecurityPolicy::mutable_allowed_protocols()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.NetworkSecurityPolicy.allowed_protocols)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_protocols();
}
inline const ::google::protobuf::RepeatedField<int>& NetworkSecurityPolicy::_internal_allowed_protocols()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_protocols_;
}
inline ::google::protobuf::RepeatedField<int>* NetworkSecurityPolicy::_internal_mutable_allowed_protocols() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_protocols_;
}

// bool adaptive_blacklisting = 6;
inline void NetworkSecurityPolicy::clear_adaptive_blacklisting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_blacklisting_ = false;
}
inline bool NetworkSecurityPolicy::adaptive_blacklisting() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.adaptive_blacklisting)
  return _internal_adaptive_blacklisting();
}
inline void NetworkSecurityPolicy::set_adaptive_blacklisting(bool value) {
  _internal_set_adaptive_blacklisting(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.adaptive_blacklisting)
}
inline bool NetworkSecurityPolicy::_internal_adaptive_blacklisting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptive_blacklisting_;
}
inline void NetworkSecurityPolicy::_internal_set_adaptive_blacklisting(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptive_blacklisting_ = value;
}

// map<string, string> policy_metadata = 7;
inline int NetworkSecurityPolicy::_internal_policy_metadata_size() const {
  return _internal_policy_metadata().size();
}
inline int NetworkSecurityPolicy::policy_metadata_size() const {
  return _internal_policy_metadata_size();
}
inline void NetworkSecurityPolicy::clear_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkSecurityPolicy::_internal_policy_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkSecurityPolicy::policy_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkSecurityPolicy.policy_metadata)
  return _internal_policy_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkSecurityPolicy::_internal_mutable_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkSecurityPolicy::mutable_policy_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkSecurityPolicy.policy_metadata)
  return _internal_mutable_policy_metadata();
}

// string auto_response_action = 8;
inline void NetworkSecurityPolicy::clear_auto_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_response_action_.ClearToEmpty();
}
inline const std::string& NetworkSecurityPolicy::auto_response_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkSecurityPolicy.auto_response_action)
  return _internal_auto_response_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkSecurityPolicy::set_auto_response_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_response_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkSecurityPolicy.auto_response_action)
}
inline std::string* NetworkSecurityPolicy::mutable_auto_response_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_auto_response_action();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkSecurityPolicy.auto_response_action)
  return _s;
}
inline const std::string& NetworkSecurityPolicy::_internal_auto_response_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_response_action_.Get();
}
inline void NetworkSecurityPolicy::_internal_set_auto_response_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_response_action_.Set(value, GetArena());
}
inline std::string* NetworkSecurityPolicy::_internal_mutable_auto_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.auto_response_action_.Mutable( GetArena());
}
inline std::string* NetworkSecurityPolicy::release_auto_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkSecurityPolicy.auto_response_action)
  return _impl_.auto_response_action_.Release();
}
inline void NetworkSecurityPolicy::set_allocated_auto_response_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_response_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auto_response_action_.IsDefault()) {
    _impl_.auto_response_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkSecurityPolicy.auto_response_action)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkErrorEvent

// string error_id = 1;
inline void NetworkErrorEvent::clear_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::error_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.error_id)
  return _internal_error_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_error_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.error_id)
}
inline std::string* NetworkErrorEvent::mutable_error_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.error_id)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_error_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_id_.Get();
}
inline void NetworkErrorEvent::_internal_set_error_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_id_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.error_id)
  return _impl_.error_id_.Release();
}
inline void NetworkErrorEvent::set_allocated_error_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_id_.IsDefault()) {
    _impl_.error_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.error_id)
}

// string source_hyphen_id = 2;
inline void NetworkErrorEvent::clear_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::source_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.source_hyphen_id)
  return _internal_source_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_source_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.source_hyphen_id)
}
inline std::string* NetworkErrorEvent::mutable_source_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.source_hyphen_id)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_source_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_hyphen_id_.Get();
}
inline void NetworkErrorEvent::_internal_set_source_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.source_hyphen_id)
  return _impl_.source_hyphen_id_.Release();
}
inline void NetworkErrorEvent::set_allocated_source_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_hyphen_id_.IsDefault()) {
    _impl_.source_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.source_hyphen_id)
}

// string target_hyphen_id = 3;
inline void NetworkErrorEvent::clear_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::target_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.target_hyphen_id)
  return _internal_target_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_target_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.target_hyphen_id)
}
inline std::string* NetworkErrorEvent::mutable_target_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.target_hyphen_id)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_target_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_hyphen_id_.Get();
}
inline void NetworkErrorEvent::_internal_set_target_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.target_hyphen_id)
  return _impl_.target_hyphen_id_.Release();
}
inline void NetworkErrorEvent::set_allocated_target_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_hyphen_id_.IsDefault()) {
    _impl_.target_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.target_hyphen_id)
}

// string error_code = 4;
inline void NetworkErrorEvent::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.error_code)
}
inline std::string* NetworkErrorEvent::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.error_code)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void NetworkErrorEvent::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.error_code)
  return _impl_.error_code_.Release();
}
inline void NetworkErrorEvent::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.error_code)
}

// string error_message = 5;
inline void NetworkErrorEvent::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.error_message)
}
inline std::string* NetworkErrorEvent::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.error_message)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void NetworkErrorEvent::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.error_message)
  return _impl_.error_message_.Release();
}
inline void NetworkErrorEvent::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.error_message)
}

// string timestamp = 6;
inline void NetworkErrorEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& NetworkErrorEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkErrorEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.timestamp)
}
inline std::string* NetworkErrorEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkErrorEvent.timestamp)
  return _s;
}
inline const std::string& NetworkErrorEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void NetworkErrorEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* NetworkErrorEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* NetworkErrorEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkErrorEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void NetworkErrorEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkErrorEvent.timestamp)
}

// map<string, string> metadata = 7;
inline int NetworkErrorEvent::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int NetworkErrorEvent::metadata_size() const {
  return _internal_metadata_size();
}
inline void NetworkErrorEvent::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkErrorEvent::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkErrorEvent::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkErrorEvent.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkErrorEvent::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkErrorEvent::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkErrorEvent.metadata)
  return _internal_mutable_metadata();
}

// bool auto_resolved = 8;
inline void NetworkErrorEvent::clear_auto_resolved() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_resolved_ = false;
}
inline bool NetworkErrorEvent::auto_resolved() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.auto_resolved)
  return _internal_auto_resolved();
}
inline void NetworkErrorEvent::set_auto_resolved(bool value) {
  _internal_set_auto_resolved(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.auto_resolved)
}
inline bool NetworkErrorEvent::_internal_auto_resolved() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_resolved_;
}
inline void NetworkErrorEvent::_internal_set_auto_resolved(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_resolved_ = value;
}

// int32 retry_attempts = 9;
inline void NetworkErrorEvent::clear_retry_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempts_ = 0;
}
inline ::int32_t NetworkErrorEvent::retry_attempts() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkErrorEvent.retry_attempts)
  return _internal_retry_attempts();
}
inline void NetworkErrorEvent::set_retry_attempts(::int32_t value) {
  _internal_set_retry_attempts(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkErrorEvent.retry_attempts)
}
inline ::int32_t NetworkErrorEvent::_internal_retry_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_attempts_;
}
inline void NetworkErrorEvent::_internal_set_retry_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_attempts_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkStatusRequest

// string request_id = 1;
inline void NetworkStatusRequest::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& NetworkStatusRequest::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusRequest.request_id)
}
inline std::string* NetworkStatusRequest::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusRequest.request_id)
  return _s;
}
inline const std::string& NetworkStatusRequest::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void NetworkStatusRequest::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* NetworkStatusRequest::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* NetworkStatusRequest::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void NetworkStatusRequest::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusRequest.request_id)
}

// string hyphen_id = 2;
inline void NetworkStatusRequest::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkStatusRequest::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusRequest.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusRequest::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusRequest.hyphen_id)
}
inline std::string* NetworkStatusRequest::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusRequest.hyphen_id)
  return _s;
}
inline const std::string& NetworkStatusRequest::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void NetworkStatusRequest::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkStatusRequest::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkStatusRequest::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusRequest.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void NetworkStatusRequest::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusRequest.hyphen_id)
}

// map<string, string> filters = 3;
inline int NetworkStatusRequest::_internal_filters_size() const {
  return _internal_filters().size();
}
inline int NetworkStatusRequest::filters_size() const {
  return _internal_filters_size();
}
inline void NetworkStatusRequest::clear_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkStatusRequest::_internal_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkStatusRequest::filters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkStatusRequest.filters)
  return _internal_filters();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkStatusRequest::_internal_mutable_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkStatusRequest::mutable_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkStatusRequest.filters)
  return _internal_mutable_filters();
}

// bool include_diagnostics = 4;
inline void NetworkStatusRequest::clear_include_diagnostics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_diagnostics_ = false;
}
inline bool NetworkStatusRequest::include_diagnostics() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusRequest.include_diagnostics)
  return _internal_include_diagnostics();
}
inline void NetworkStatusRequest::set_include_diagnostics(bool value) {
  _internal_set_include_diagnostics(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusRequest.include_diagnostics)
}
inline bool NetworkStatusRequest::_internal_include_diagnostics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_diagnostics_;
}
inline void NetworkStatusRequest::_internal_set_include_diagnostics(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_diagnostics_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkStatusResponse

// string request_id = 1;
inline void NetworkStatusResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& NetworkStatusResponse::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusResponse.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusResponse::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusResponse.request_id)
}
inline std::string* NetworkStatusResponse::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusResponse.request_id)
  return _s;
}
inline const std::string& NetworkStatusResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void NetworkStatusResponse::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* NetworkStatusResponse::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* NetworkStatusResponse::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusResponse.request_id)
  return _impl_.request_id_.Release();
}
inline void NetworkStatusResponse::set_allocated_request_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusResponse.request_id)
}

// string hyphen_id = 2;
inline void NetworkStatusResponse::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkStatusResponse::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusResponse.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusResponse::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusResponse.hyphen_id)
}
inline std::string* NetworkStatusResponse::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusResponse.hyphen_id)
  return _s;
}
inline const std::string& NetworkStatusResponse::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void NetworkStatusResponse::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkStatusResponse::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkStatusResponse::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusResponse.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void NetworkStatusResponse::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusResponse.hyphen_id)
}

// string status = 3;
inline void NetworkStatusResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& NetworkStatusResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusResponse.status)
}
inline std::string* NetworkStatusResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusResponse.status)
  return _s;
}
inline const std::string& NetworkStatusResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void NetworkStatusResponse::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* NetworkStatusResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* NetworkStatusResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusResponse.status)
  return _impl_.status_.Release();
}
inline void NetworkStatusResponse::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusResponse.status)
}

// map<string, string> diagnostics = 4;
inline int NetworkStatusResponse::_internal_diagnostics_size() const {
  return _internal_diagnostics().size();
}
inline int NetworkStatusResponse::diagnostics_size() const {
  return _internal_diagnostics_size();
}
inline void NetworkStatusResponse::clear_diagnostics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diagnostics_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkStatusResponse::_internal_diagnostics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diagnostics_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkStatusResponse::diagnostics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkStatusResponse.diagnostics)
  return _internal_diagnostics();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkStatusResponse::_internal_mutable_diagnostics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.diagnostics_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkStatusResponse::mutable_diagnostics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkStatusResponse.diagnostics)
  return _internal_mutable_diagnostics();
}

// string last_updated = 5;
inline void NetworkStatusResponse::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.ClearToEmpty();
}
inline const std::string& NetworkStatusResponse::last_updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkStatusResponse.last_updated)
  return _internal_last_updated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkStatusResponse::set_last_updated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkStatusResponse.last_updated)
}
inline std::string* NetworkStatusResponse::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkStatusResponse.last_updated)
  return _s;
}
inline const std::string& NetworkStatusResponse::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_updated_.Get();
}
inline void NetworkStatusResponse::_internal_set_last_updated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.Set(value, GetArena());
}
inline std::string* NetworkStatusResponse::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_updated_.Mutable( GetArena());
}
inline std::string* NetworkStatusResponse::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkStatusResponse.last_updated)
  return _impl_.last_updated_.Release();
}
inline void NetworkStatusResponse::set_allocated_last_updated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_updated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_updated_.IsDefault()) {
    _impl_.last_updated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkStatusResponse.last_updated)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkOperationLog

// string log_id = 1;
inline void NetworkOperationLog::clear_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::log_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.log_id)
  return _internal_log_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_log_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.log_id)
}
inline std::string* NetworkOperationLog::mutable_log_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.log_id)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_log_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_id_.Get();
}
inline void NetworkOperationLog::_internal_set_log_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_id_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_log_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.log_id)
  return _impl_.log_id_.Release();
}
inline void NetworkOperationLog::set_allocated_log_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_id_.IsDefault()) {
    _impl_.log_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.log_id)
}

// string action = 2;
inline void NetworkOperationLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.action)
}
inline std::string* NetworkOperationLog::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.action)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void NetworkOperationLog::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.action)
  return _impl_.action_.Release();
}
inline void NetworkOperationLog::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.action)
}

// string timestamp = 3;
inline void NetworkOperationLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.timestamp)
}
inline std::string* NetworkOperationLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.timestamp)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void NetworkOperationLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void NetworkOperationLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.timestamp)
}

// string source_hyphen_id = 4;
inline void NetworkOperationLog::clear_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::source_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.source_hyphen_id)
  return _internal_source_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_source_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.source_hyphen_id)
}
inline std::string* NetworkOperationLog::mutable_source_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.source_hyphen_id)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_source_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_hyphen_id_.Get();
}
inline void NetworkOperationLog::_internal_set_source_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_source_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.source_hyphen_id)
  return _impl_.source_hyphen_id_.Release();
}
inline void NetworkOperationLog::set_allocated_source_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_hyphen_id_.IsDefault()) {
    _impl_.source_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.source_hyphen_id)
}

// string target_hyphen_id = 5;
inline void NetworkOperationLog::clear_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::target_hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.target_hyphen_id)
  return _internal_target_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_target_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.target_hyphen_id)
}
inline std::string* NetworkOperationLog::mutable_target_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.target_hyphen_id)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_target_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_hyphen_id_.Get();
}
inline void NetworkOperationLog::_internal_set_target_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_hyphen_id_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_target_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.target_hyphen_id)
  return _impl_.target_hyphen_id_.Release();
}
inline void NetworkOperationLog::set_allocated_target_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_hyphen_id_.IsDefault()) {
    _impl_.target_hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.target_hyphen_id)
}

// string status = 6;
inline void NetworkOperationLog::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& NetworkOperationLog::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkOperationLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkOperationLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkOperationLog.status)
}
inline std::string* NetworkOperationLog::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkOperationLog.status)
  return _s;
}
inline const std::string& NetworkOperationLog::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void NetworkOperationLog::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* NetworkOperationLog::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* NetworkOperationLog::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkOperationLog.status)
  return _impl_.status_.Release();
}
inline void NetworkOperationLog::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkOperationLog.status)
}

// map<string, string> metadata = 7;
inline int NetworkOperationLog::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int NetworkOperationLog::metadata_size() const {
  return _internal_metadata_size();
}
inline void NetworkOperationLog::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkOperationLog::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkOperationLog::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkOperationLog.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkOperationLog::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkOperationLog::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkOperationLog.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkPerformanceSummary

// string summary_id = 1;
inline void NetworkPerformanceSummary::clear_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.ClearToEmpty();
}
inline const std::string& NetworkPerformanceSummary::summary_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkPerformanceSummary.summary_id)
  return _internal_summary_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkPerformanceSummary::set_summary_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.NetworkPerformanceSummary.summary_id)
}
inline std::string* NetworkPerformanceSummary::mutable_summary_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.NetworkPerformanceSummary.summary_id)
  return _s;
}
inline const std::string& NetworkPerformanceSummary::_internal_summary_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_id_.Get();
}
inline void NetworkPerformanceSummary::_internal_set_summary_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.Set(value, GetArena());
}
inline std::string* NetworkPerformanceSummary::_internal_mutable_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_id_.Mutable( GetArena());
}
inline std::string* NetworkPerformanceSummary::release_summary_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.NetworkPerformanceSummary.summary_id)
  return _impl_.summary_id_.Release();
}
inline void NetworkPerformanceSummary::set_allocated_summary_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_id_.IsDefault()) {
    _impl_.summary_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.NetworkPerformanceSummary.summary_id)
}

// float avg_bandwidth_utilization = 2;
inline void NetworkPerformanceSummary::clear_avg_bandwidth_utilization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_bandwidth_utilization_ = 0;
}
inline float NetworkPerformanceSummary::avg_bandwidth_utilization() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkPerformanceSummary.avg_bandwidth_utilization)
  return _internal_avg_bandwidth_utilization();
}
inline void NetworkPerformanceSummary::set_avg_bandwidth_utilization(float value) {
  _internal_set_avg_bandwidth_utilization(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkPerformanceSummary.avg_bandwidth_utilization)
}
inline float NetworkPerformanceSummary::_internal_avg_bandwidth_utilization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_bandwidth_utilization_;
}
inline void NetworkPerformanceSummary::_internal_set_avg_bandwidth_utilization(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_bandwidth_utilization_ = value;
}

// float avg_response_time = 3;
inline void NetworkPerformanceSummary::clear_avg_response_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_response_time_ = 0;
}
inline float NetworkPerformanceSummary::avg_response_time() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkPerformanceSummary.avg_response_time)
  return _internal_avg_response_time();
}
inline void NetworkPerformanceSummary::set_avg_response_time(float value) {
  _internal_set_avg_response_time(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkPerformanceSummary.avg_response_time)
}
inline float NetworkPerformanceSummary::_internal_avg_response_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_response_time_;
}
inline void NetworkPerformanceSummary::_internal_set_avg_response_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_response_time_ = value;
}

// int32 total_data_transferred_mb = 4;
inline void NetworkPerformanceSummary::clear_total_data_transferred_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_data_transferred_mb_ = 0;
}
inline ::int32_t NetworkPerformanceSummary::total_data_transferred_mb() const {
  // @@protoc_insertion_point(field_get:seigr.network.NetworkPerformanceSummary.total_data_transferred_mb)
  return _internal_total_data_transferred_mb();
}
inline void NetworkPerformanceSummary::set_total_data_transferred_mb(::int32_t value) {
  _internal_set_total_data_transferred_mb(value);
  // @@protoc_insertion_point(field_set:seigr.network.NetworkPerformanceSummary.total_data_transferred_mb)
}
inline ::int32_t NetworkPerformanceSummary::_internal_total_data_transferred_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_data_transferred_mb_;
}
inline void NetworkPerformanceSummary::_internal_set_total_data_transferred_mb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_data_transferred_mb_ = value;
}

// map<string, string> performance_notes = 5;
inline int NetworkPerformanceSummary::_internal_performance_notes_size() const {
  return _internal_performance_notes().size();
}
inline int NetworkPerformanceSummary::performance_notes_size() const {
  return _internal_performance_notes_size();
}
inline void NetworkPerformanceSummary::clear_performance_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.performance_notes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkPerformanceSummary::_internal_performance_notes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.performance_notes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& NetworkPerformanceSummary::performance_notes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.network.NetworkPerformanceSummary.performance_notes)
  return _internal_performance_notes();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkPerformanceSummary::_internal_mutable_performance_notes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.performance_notes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* NetworkPerformanceSummary::mutable_performance_notes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.network.NetworkPerformanceSummary.performance_notes)
  return _internal_mutable_performance_notes();
}

// -------------------------------------------------------------------

// ProtocolCompatibilityLog

// string hyphen_id = 1;
inline void ProtocolCompatibilityLog::clear_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.ClearToEmpty();
}
inline const std::string& ProtocolCompatibilityLog::hyphen_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.ProtocolCompatibilityLog.hyphen_id)
  return _internal_hyphen_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtocolCompatibilityLog::set_hyphen_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.ProtocolCompatibilityLog.hyphen_id)
}
inline std::string* ProtocolCompatibilityLog::mutable_hyphen_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hyphen_id();
  // @@protoc_insertion_point(field_mutable:seigr.network.ProtocolCompatibilityLog.hyphen_id)
  return _s;
}
inline const std::string& ProtocolCompatibilityLog::_internal_hyphen_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hyphen_id_.Get();
}
inline void ProtocolCompatibilityLog::_internal_set_hyphen_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.Set(value, GetArena());
}
inline std::string* ProtocolCompatibilityLog::_internal_mutable_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hyphen_id_.Mutable( GetArena());
}
inline std::string* ProtocolCompatibilityLog::release_hyphen_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.ProtocolCompatibilityLog.hyphen_id)
  return _impl_.hyphen_id_.Release();
}
inline void ProtocolCompatibilityLog::set_allocated_hyphen_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hyphen_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hyphen_id_.IsDefault()) {
    _impl_.hyphen_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.ProtocolCompatibilityLog.hyphen_id)
}

// string protocol_version = 2;
inline void ProtocolCompatibilityLog::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.ClearToEmpty();
}
inline const std::string& ProtocolCompatibilityLog::protocol_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.ProtocolCompatibilityLog.protocol_version)
  return _internal_protocol_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtocolCompatibilityLog::set_protocol_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.ProtocolCompatibilityLog.protocol_version)
}
inline std::string* ProtocolCompatibilityLog::mutable_protocol_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:seigr.network.ProtocolCompatibilityLog.protocol_version)
  return _s;
}
inline const std::string& ProtocolCompatibilityLog::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_version_.Get();
}
inline void ProtocolCompatibilityLog::_internal_set_protocol_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.Set(value, GetArena());
}
inline std::string* ProtocolCompatibilityLog::_internal_mutable_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.protocol_version_.Mutable( GetArena());
}
inline std::string* ProtocolCompatibilityLog::release_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.ProtocolCompatibilityLog.protocol_version)
  return _impl_.protocol_version_.Release();
}
inline void ProtocolCompatibilityLog::set_allocated_protocol_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.protocol_version_.IsDefault()) {
    _impl_.protocol_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.ProtocolCompatibilityLog.protocol_version)
}

// repeated string compatible_versions = 3;
inline int ProtocolCompatibilityLog::_internal_compatible_versions_size() const {
  return _internal_compatible_versions().size();
}
inline int ProtocolCompatibilityLog::compatible_versions_size() const {
  return _internal_compatible_versions_size();
}
inline void ProtocolCompatibilityLog::clear_compatible_versions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compatible_versions_.Clear();
}
inline std::string* ProtocolCompatibilityLog::add_compatible_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_compatible_versions()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.network.ProtocolCompatibilityLog.compatible_versions)
  return _s;
}
inline const std::string& ProtocolCompatibilityLog::compatible_versions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.ProtocolCompatibilityLog.compatible_versions)
  return _internal_compatible_versions().Get(index);
}
inline std::string* ProtocolCompatibilityLog::mutable_compatible_versions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.network.ProtocolCompatibilityLog.compatible_versions)
  return _internal_mutable_compatible_versions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ProtocolCompatibilityLog::set_compatible_versions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_compatible_versions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.network.ProtocolCompatibilityLog.compatible_versions)
}
template <typename Arg_, typename... Args_>
inline void ProtocolCompatibilityLog::add_compatible_versions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_compatible_versions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.network.ProtocolCompatibilityLog.compatible_versions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProtocolCompatibilityLog::compatible_versions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.network.ProtocolCompatibilityLog.compatible_versions)
  return _internal_compatible_versions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProtocolCompatibilityLog::mutable_compatible_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.network.ProtocolCompatibilityLog.compatible_versions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_compatible_versions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProtocolCompatibilityLog::_internal_compatible_versions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compatible_versions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProtocolCompatibilityLog::_internal_mutable_compatible_versions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.compatible_versions_;
}

// bool is_compatible = 4;
inline void ProtocolCompatibilityLog::clear_is_compatible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compatible_ = false;
}
inline bool ProtocolCompatibilityLog::is_compatible() const {
  // @@protoc_insertion_point(field_get:seigr.network.ProtocolCompatibilityLog.is_compatible)
  return _internal_is_compatible();
}
inline void ProtocolCompatibilityLog::set_is_compatible(bool value) {
  _internal_set_is_compatible(value);
  // @@protoc_insertion_point(field_set:seigr.network.ProtocolCompatibilityLog.is_compatible)
}
inline bool ProtocolCompatibilityLog::_internal_is_compatible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_compatible_;
}
inline void ProtocolCompatibilityLog::_internal_set_is_compatible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compatible_ = value;
}

// string timestamp = 5;
inline void ProtocolCompatibilityLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& ProtocolCompatibilityLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.network.ProtocolCompatibilityLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtocolCompatibilityLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.network.ProtocolCompatibilityLog.timestamp)
}
inline std::string* ProtocolCompatibilityLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.network.ProtocolCompatibilityLog.timestamp)
  return _s;
}
inline const std::string& ProtocolCompatibilityLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void ProtocolCompatibilityLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* ProtocolCompatibilityLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* ProtocolCompatibilityLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.network.ProtocolCompatibilityLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void ProtocolCompatibilityLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.network.ProtocolCompatibilityLog.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::network::NetworkProtocol> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::network::NetworkProtocol>() {
  return ::seigr::network::NetworkProtocol_descriptor();
}
template <>
struct is_proto_enum<::seigr::network::HyphenStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::network::HyphenStatus>() {
  return ::seigr::network::HyphenStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // network_2eproto_2epb_2eh
