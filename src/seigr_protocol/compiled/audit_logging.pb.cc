// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: audit_logging.proto
// Protobuf C++ Version: 5.29.2

#include "audit_logging.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seigr {
namespace audit {
              template <typename>
PROTOBUF_CONSTEXPR AuditReport_MetadataEntry_DoNotUse::AuditReport_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditReport_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditReport_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditReport_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditReport_MetadataEntry_DoNotUseDefaultTypeInternal _AuditReport_MetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLogStats_UserActionCountsEntry_DoNotUse::AuditLogStats_UserActionCountsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLogStats_UserActionCountsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLogStats_UserActionCountsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLogStats_UserActionCountsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogStats_UserActionCountsEntry_DoNotUseDefaultTypeInternal _AuditLogStats_UserActionCountsEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLogStats_CategoryRatiosEntry_DoNotUse::AuditLogStats_CategoryRatiosEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLogStats_CategoryRatiosEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLogStats_CategoryRatiosEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLogStats_CategoryRatiosEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogStats_CategoryRatiosEntry_DoNotUseDefaultTypeInternal _AuditLogStats_CategoryRatiosEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLogStats_CategoryCountsEntry_DoNotUse::AuditLogStats_CategoryCountsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLogStats_CategoryCountsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLogStats_CategoryCountsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLogStats_CategoryCountsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogStats_CategoryCountsEntry_DoNotUseDefaultTypeInternal _AuditLogStats_CategoryCountsEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLogQuery_AdditionalFiltersEntry_DoNotUse::AuditLogQuery_AdditionalFiltersEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLogQuery_AdditionalFiltersEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLogQuery_AdditionalFiltersEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLogQuery_AdditionalFiltersEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogQuery_AdditionalFiltersEntry_DoNotUseDefaultTypeInternal _AuditLogQuery_AdditionalFiltersEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLogEntry_MetadataEntry_DoNotUse::AuditLogEntry_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLogEntry_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLogEntry_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLogEntry_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogEntry_MetadataEntry_DoNotUseDefaultTypeInternal _AuditLogEntry_MetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AuditLog_MetadataEntry_DoNotUse::AuditLog_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AuditLog_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AuditLog_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuditLog_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLog_MetadataEntry_DoNotUseDefaultTypeInternal _AuditLog_MetadataEntry_DoNotUse_default_instance_;

inline constexpr AuditLogStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : category_counts_{},
        user_action_counts_{},
        category_ratios_{},
        last_entry_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        summary_period_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        most_active_user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        most_frequent_action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_entries_{0},
        critical_count_{0},
        error_count_{0},
        warning_count_{0},
        critical_event_ratio_{0},
        alert_count_{0},
        escalation_threshold_{0},
        error_to_warning_ratio_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AuditLogStats::AuditLogStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuditLogStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogStatsDefaultTypeInternal() {}
  union {
    AuditLogStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogStatsDefaultTypeInternal _AuditLogStats_default_instance_;

inline constexpr AuditLogQuery::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_ids_{},
        categories_{},
        _categories_cached_byte_size_{0},
        log_levels_{},
        _log_levels_cached_byte_size_{0},
        tags_{},
        actions_{},
        additional_filters_{},
        date_range_start_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        date_range_end_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_of_day_start_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_of_day_end_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_pattern_detection_{false},
        include_session_data_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AuditLogQuery::AuditLogQuery(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuditLogQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogQueryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogQueryDefaultTypeInternal() {}
  union {
    AuditLogQuery _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogQueryDefaultTypeInternal _AuditLogQuery_default_instance_;

inline constexpr AuditLogEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metadata_{},
        tags_{},
        log_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        role_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        component_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_details_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_policy_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        originating_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_level_{static_cast< ::seigr::audit::LogLevel >(0)},
        category_{static_cast< ::seigr::audit::LogCategory >(0)},
        requires_attention_{false},
        mfa_verified_{false},
        session_duration_seconds_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AuditLogEntry::AuditLogEntry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuditLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogEntryDefaultTypeInternal() {}
  union {
    AuditLogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogEntryDefaultTypeInternal _AuditLogEntry_default_instance_;

inline constexpr AuditReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entries_{},
        metadata_{},
        related_reports_{},
        report_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        generated_by_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        generated_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        summary_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        statistics_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AuditReport::AuditReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuditReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditReportDefaultTypeInternal() {}
  union {
    AuditReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditReportDefaultTypeInternal _AuditReport_default_instance_;

inline constexpr AuditLog::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entries_{},
        metadata_{},
        source_system_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_date_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        comparison_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_owner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        integrity_verified_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AuditLog::AuditLog(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuditLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuditLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuditLogDefaultTypeInternal() {}
  union {
    AuditLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuditLogDefaultTypeInternal _AuditLog_default_instance_;
}  // namespace audit
}  // namespace seigr
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_audit_5flogging_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_audit_5flogging_2eproto = nullptr;
const ::uint32_t
    TableStruct_audit_5flogging_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.log_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.user_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.role_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.log_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.category_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.requires_attention_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.component_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.action_details_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.tags_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.escalation_policy_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.session_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.session_duration_seconds_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.mfa_verified_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogEntry, _impl_.originating_ip_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.entries_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.source_system_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.log_version_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.log_date_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.comparison_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.integrity_verified_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLog, _impl_.log_owner_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.user_ids_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.categories_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.log_levels_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.date_range_start_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.date_range_end_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.tags_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.actions_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.additional_filters_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.time_of_day_start_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.time_of_day_end_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.enable_pattern_detection_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogQuery, _impl_.include_session_data_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.total_entries_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.critical_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.error_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.warning_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.category_counts_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.user_action_counts_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.last_entry_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.summary_period_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.alert_count_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.critical_event_ratio_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.escalation_threshold_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.error_to_warning_ratio_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.category_ratios_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.most_active_user_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditLogStats, _impl_.most_frequent_action_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.report_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.entries_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.statistics_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.generated_by_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.generated_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.summary_),
        PROTOBUF_FIELD_OFFSET(::seigr::audit::AuditReport, _impl_.related_reports_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse)},
        {12, -1, -1, sizeof(::seigr::audit::AuditLogEntry)},
        {38, 48, -1, sizeof(::seigr::audit::AuditLog_MetadataEntry_DoNotUse)},
        {50, -1, -1, sizeof(::seigr::audit::AuditLog)},
        {66, 76, -1, sizeof(::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse)},
        {78, -1, -1, sizeof(::seigr::audit::AuditLogQuery)},
        {98, 108, -1, sizeof(::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse)},
        {110, 120, -1, sizeof(::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse)},
        {122, 132, -1, sizeof(::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse)},
        {134, -1, -1, sizeof(::seigr::audit::AuditLogStats)},
        {157, 167, -1, sizeof(::seigr::audit::AuditReport_MetadataEntry_DoNotUse)},
        {169, 185, -1, sizeof(::seigr::audit::AuditReport)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::seigr::audit::_AuditLogEntry_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLogEntry_default_instance_._instance,
    &::seigr::audit::_AuditLog_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLog_default_instance_._instance,
    &::seigr::audit::_AuditLogQuery_AdditionalFiltersEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLogQuery_default_instance_._instance,
    &::seigr::audit::_AuditLogStats_CategoryCountsEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLogStats_UserActionCountsEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLogStats_CategoryRatiosEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditLogStats_default_instance_._instance,
    &::seigr::audit::_AuditReport_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::audit::_AuditReport_default_instance_._instance,
};
const char descriptor_table_protodef_audit_5flogging_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023audit_logging.proto\022\013seigr.audit\"\212\004\n\rA"
    "uditLogEntry\022\016\n\006log_id\030\001 \001(\t\022\017\n\007user_id\030"
    "\002 \001(\t\022\014\n\004role\030\003 \001(\t\022\016\n\006action\030\004 \001(\t\022(\n\tl"
    "og_level\030\005 \001(\0162\025.seigr.audit.LogLevel\022*\n"
    "\010category\030\006 \001(\0162\030.seigr.audit.LogCategor"
    "y\022\021\n\ttimestamp\030\007 \001(\t\022:\n\010metadata\030\010 \003(\0132("
    ".seigr.audit.AuditLogEntry.MetadataEntry"
    "\022\032\n\022requires_attention\030\t \001(\010\022\021\n\tcomponen"
    "t\030\n \001(\t\022\026\n\016action_details\030\013 \001(\t\022\014\n\004tags\030"
    "\014 \003(\t\022\031\n\021escalation_policy\030\r \001(\t\022\022\n\nsess"
    "ion_id\030\016 \001(\t\022\020\n\010location\030\017 \001(\t\022 \n\030sessio"
    "n_duration_seconds\030\020 \001(\005\022\024\n\014mfa_verified"
    "\030\021 \001(\010\022\026\n\016originating_ip\030\022 \001(\t\032/\n\rMetada"
    "taEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
    "\243\002\n\010AuditLog\022+\n\007entries\030\001 \003(\0132\032.seigr.au"
    "dit.AuditLogEntry\022\025\n\rsource_system\030\002 \001(\t"
    "\022\023\n\013log_version\030\003 \001(\t\022\020\n\010log_date\030\004 \001(\t\022"
    "5\n\010metadata\030\005 \003(\0132#.seigr.audit.AuditLog"
    ".MetadataEntry\022\025\n\rcomparison_id\030\006 \001(\t\022\032\n"
    "\022integrity_verified\030\007 \001(\010\022\021\n\tlog_owner\030\010"
    " \001(\t\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\t:\0028\001\"\310\003\n\rAuditLogQuery\022\020\n\010user_"
    "ids\030\001 \003(\t\022,\n\ncategories\030\002 \003(\0162\030.seigr.au"
    "dit.LogCategory\022)\n\nlog_levels\030\003 \003(\0162\025.se"
    "igr.audit.LogLevel\022\030\n\020date_range_start\030\004"
    " \001(\t\022\026\n\016date_range_end\030\005 \001(\t\022\014\n\004tags\030\006 \003"
    "(\t\022\017\n\007actions\030\007 \003(\t\022M\n\022additional_filter"
    "s\030\010 \003(\01321.seigr.audit.AuditLogQuery.Addi"
    "tionalFiltersEntry\022\031\n\021time_of_day_start\030"
    "\t \001(\t\022\027\n\017time_of_day_end\030\n \001(\t\022 \n\030enable"
    "_pattern_detection\030\013 \001(\010\022\034\n\024include_sess"
    "ion_data\030\014 \001(\010\0328\n\026AdditionalFiltersEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\323\005\n\rAud"
    "itLogStats\022\025\n\rtotal_entries\030\001 \001(\005\022\026\n\016cri"
    "tical_count\030\002 \001(\005\022\023\n\013error_count\030\003 \001(\005\022\025"
    "\n\rwarning_count\030\004 \001(\005\022G\n\017category_counts"
    "\030\005 \003(\0132..seigr.audit.AuditLogStats.Categ"
    "oryCountsEntry\022L\n\022user_action_counts\030\006 \003"
    "(\01320.seigr.audit.AuditLogStats.UserActio"
    "nCountsEntry\022\034\n\024last_entry_timestamp\030\007 \001"
    "(\t\022\026\n\016summary_period\030\010 \001(\t\022\023\n\013alert_coun"
    "t\030\t \001(\005\022\034\n\024critical_event_ratio\030\n \001(\001\022\034\n"
    "\024escalation_threshold\030\013 \001(\005\022\036\n\026error_to_"
    "warning_ratio\030\014 \001(\001\022G\n\017category_ratios\030\r"
    " \003(\0132..seigr.audit.AuditLogStats.Categor"
    "yRatiosEntry\022\033\n\023most_active_user_id\030\016 \001("
    "\t\022\034\n\024most_frequent_action\030\017 \001(\t\0325\n\023Categ"
    "oryCountsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\005:\0028\001\0327\n\025UserActionCountsEntry\022\013\n\003key\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0325\n\023CategoryRatio"
    "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\276"
    "\002\n\013AuditReport\022\021\n\treport_id\030\001 \001(\t\022+\n\007ent"
    "ries\030\002 \003(\0132\032.seigr.audit.AuditLogEntry\022."
    "\n\nstatistics\030\003 \001(\0132\032.seigr.audit.AuditLo"
    "gStats\022\024\n\014generated_by\030\004 \001(\t\022\024\n\014generate"
    "d_at\030\005 \001(\t\0228\n\010metadata\030\006 \003(\0132&.seigr.aud"
    "it.AuditReport.MetadataEntry\022\017\n\007summary\030"
    "\007 \001(\t\022\027\n\017related_reports\030\010 \003(\t\032/\n\rMetada"
    "taEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*"
    "\374\001\n\013LogCategory\022\032\n\026LOG_CATEGORY_UNDEFINE"
    "D\020\000\022\031\n\025LOG_CATEGORY_SECURITY\020\001\022\034\n\030LOG_CA"
    "TEGORY_DATA_ACCESS\020\002\022!\n\035LOG_CATEGORY_SYS"
    "TEM_OPERATION\020\003\022\034\n\030LOG_CATEGORY_USER_ACT"
    "ION\020\004\022\034\n\030LOG_CATEGORY_ERROR_EVENT\020\005\022\034\n\030L"
    "OG_CATEGORY_PERFORMANCE\020\006\022\033\n\027LOG_CATEGOR"
    "Y_COMPLIANCE\020\007*\267\001\n\010LogLevel\022\027\n\023LOG_LEVEL"
    "_UNDEFINED\020\000\022\022\n\016LOG_LEVEL_INFO\020\001\022\022\n\016LOG_"
    "LEVEL_WARN\020\002\022\023\n\017LOG_LEVEL_ERROR\020\003\022\023\n\017LOG"
    "_LEVEL_DEBUG\020\004\022\026\n\022LOG_LEVEL_CRITICAL\020\005\022\023"
    "\n\017LOG_LEVEL_ALERT\020\006\022\023\n\017LOG_LEVEL_FATAL\020\007"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_audit_5flogging_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_audit_5flogging_2eproto = {
    false,
    false,
    2808,
    descriptor_table_protodef_audit_5flogging_2eproto,
    "audit_logging.proto",
    &descriptor_table_audit_5flogging_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_audit_5flogging_2eproto::offsets,
    file_level_enum_descriptors_audit_5flogging_2eproto,
    file_level_service_descriptors_audit_5flogging_2eproto,
};
namespace seigr {
namespace audit {
const ::google::protobuf::EnumDescriptor* LogCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_audit_5flogging_2eproto);
  return file_level_enum_descriptors_audit_5flogging_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t LogCategory_internal_data_[] = {
    524288u, 0u, };
bool LogCategory_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_audit_5flogging_2eproto);
  return file_level_enum_descriptors_audit_5flogging_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t LogLevel_internal_data_[] = {
    524288u, 0u, };
bool LogLevel_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLogEntry_MetadataEntry_DoNotUse::AuditLogEntry_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLogEntry_MetadataEntry_DoNotUse::AuditLogEntry_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLogEntry_MetadataEntry_DoNotUse::AuditLogEntry_MetadataEntry_DoNotUse() : SuperType() {}
              AuditLogEntry_MetadataEntry_DoNotUse::AuditLogEntry_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLogEntry_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLogEntry_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto AuditLogEntry_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLogEntry_MetadataEntry_DoNotUse),
                                                          alignof(AuditLogEntry_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLogEntry_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLogEntry_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLogEntry_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLogEntry_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLogEntry_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLogEntry_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLogEntry_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLogEntry_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 56, 2> AuditLogEntry_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogEntry_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\3\5\0\0\0\0\0"
    "seigr.audit.AuditLogEntry.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AuditLogEntry::_Internal {
 public:
};

AuditLogEntry::AuditLogEntry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.audit.AuditLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::audit::AuditLogEntry& from_msg)
      : metadata_{visibility, arena, from.metadata_},
        tags_{visibility, arena, from.tags_},
        log_id_(arena, from.log_id_),
        user_id_(arena, from.user_id_),
        role_(arena, from.role_),
        action_(arena, from.action_),
        timestamp_(arena, from.timestamp_),
        component_(arena, from.component_),
        action_details_(arena, from.action_details_),
        escalation_policy_(arena, from.escalation_policy_),
        session_id_(arena, from.session_id_),
        location_(arena, from.location_),
        originating_ip_(arena, from.originating_ip_),
        _cached_size_{0} {}

AuditLogEntry::AuditLogEntry(
    ::google::protobuf::Arena* arena,
    const AuditLogEntry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuditLogEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, log_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, log_level_),
           offsetof(Impl_, session_duration_seconds_) -
               offsetof(Impl_, log_level_) +
               sizeof(Impl_::session_duration_seconds_));

  // @@protoc_insertion_point(copy_constructor:seigr.audit.AuditLogEntry)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metadata_{visibility, arena},
        tags_{visibility, arena},
        log_id_(arena),
        user_id_(arena),
        role_(arena),
        action_(arena),
        timestamp_(arena),
        component_(arena),
        action_details_(arena),
        escalation_policy_(arena),
        session_id_(arena),
        location_(arena),
        originating_ip_(arena),
        _cached_size_{0} {}

inline void AuditLogEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, log_level_),
           0,
           offsetof(Impl_, session_duration_seconds_) -
               offsetof(Impl_, log_level_) +
               sizeof(Impl_::session_duration_seconds_));
}
AuditLogEntry::~AuditLogEntry() {
  // @@protoc_insertion_point(destructor:seigr.audit.AuditLogEntry)
  SharedDtor(*this);
}
inline void AuditLogEntry::SharedDtor(MessageLite& self) {
  AuditLogEntry& this_ = static_cast<AuditLogEntry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.log_id_.Destroy();
  this_._impl_.user_id_.Destroy();
  this_._impl_.role_.Destroy();
  this_._impl_.action_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.component_.Destroy();
  this_._impl_.action_details_.Destroy();
  this_._impl_.escalation_policy_.Destroy();
  this_._impl_.session_id_.Destroy();
  this_._impl_.location_.Destroy();
  this_._impl_.originating_ip_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AuditLogEntry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuditLogEntry(arena);
}
constexpr auto AuditLogEntry::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.metadata_) +
          decltype(AuditLogEntry::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.metadata_) +
          decltype(AuditLogEntry::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.tags_) +
          decltype(AuditLogEntry::_impl_.tags_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AuditLogEntry), alignof(AuditLogEntry), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuditLogEntry::PlacementNew_,
                                 sizeof(AuditLogEntry),
                                 alignof(AuditLogEntry));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuditLogEntry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuditLogEntry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuditLogEntry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuditLogEntry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuditLogEntry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuditLogEntry>(), &AuditLogEntry::ByteSizeLong,
            &AuditLogEntry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_._cached_size_),
        false,
    },
    &AuditLogEntry::kDescriptorMethods,
    &descriptor_table_audit_5flogging_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuditLogEntry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 1, 166, 2> AuditLogEntry::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string log_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.log_id_)}},
    // string user_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.user_id_)}},
    // string role = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.role_)}},
    // string action = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.action_)}},
    // .seigr.audit.LogLevel log_level = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogEntry, _impl_.log_level_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.log_level_)}},
    // .seigr.audit.LogCategory category = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogEntry, _impl_.category_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.category_)}},
    // string timestamp = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool requires_attention = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AuditLogEntry, _impl_.requires_attention_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.requires_attention_)}},
    // string component = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.component_)}},
    // string action_details = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.action_details_)}},
    // repeated string tags = 12;
    {::_pbi::TcParser::FastUR1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.tags_)}},
    // string escalation_policy = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.escalation_policy_)}},
    // string session_id = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.session_id_)}},
    // string location = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.location_)}},
    // int32 session_duration_seconds = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.session_duration_seconds_)}},
    // bool mfa_verified = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.mfa_verified_)}},
    // string originating_ip = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.originating_ip_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string log_id = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.log_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_id = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string role = 3;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.role_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action = 4;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.audit.LogLevel log_level = 5;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .seigr.audit.LogCategory category = 6;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.category_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 8;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool requires_attention = 9;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.requires_attention_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string component = 10;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.component_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action_details = 11;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.action_details_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string tags = 12;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string escalation_policy = 13;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.escalation_policy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 14;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string location = 15;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.location_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 session_duration_seconds = 16;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.session_duration_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool mfa_verified = 17;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.mfa_verified_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string originating_ip = 18;
    {PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.originating_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLogEntry()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\31\6\7\4\6\0\0\11\10\0\11\16\4\21\12\10\0\0\16\0\0\0\0\0"
    "seigr.audit.AuditLogEntry"
    "log_id"
    "user_id"
    "role"
    "action"
    "timestamp"
    "metadata"
    "component"
    "action_details"
    "tags"
    "escalation_policy"
    "session_id"
    "location"
    "originating_ip"
  }},
};

PROTOBUF_NOINLINE void AuditLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.audit.AuditLogEntry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.tags_.Clear();
  _impl_.log_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.role_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.component_.ClearToEmpty();
  _impl_.action_details_.ClearToEmpty();
  _impl_.escalation_policy_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.originating_ip_.ClearToEmpty();
  ::memset(&_impl_.log_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.session_duration_seconds_) -
      reinterpret_cast<char*>(&_impl_.log_level_)) + sizeof(_impl_.session_duration_seconds_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuditLogEntry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuditLogEntry& this_ = static_cast<const AuditLogEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuditLogEntry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuditLogEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.audit.AuditLogEntry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string log_id = 1;
          if (!this_._internal_log_id().empty()) {
            const std::string& _s = this_._internal_log_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.log_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string user_id = 2;
          if (!this_._internal_user_id().empty()) {
            const std::string& _s = this_._internal_user_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.user_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string role = 3;
          if (!this_._internal_role().empty()) {
            const std::string& _s = this_._internal_role();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.role");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string action = 4;
          if (!this_._internal_action().empty()) {
            const std::string& _s = this_._internal_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.action");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .seigr.audit.LogLevel log_level = 5;
          if (this_._internal_log_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_log_level(), target);
          }

          // .seigr.audit.LogCategory category = 6;
          if (this_._internal_category() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_category(), target);
          }

          // string timestamp = 7;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.timestamp");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> metadata = 8;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.metadata");
              }
            }
          }

          // bool requires_attention = 9;
          if (this_._internal_requires_attention() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_requires_attention(), target);
          }

          // string component = 10;
          if (!this_._internal_component().empty()) {
            const std::string& _s = this_._internal_component();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.component");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string action_details = 11;
          if (!this_._internal_action_details().empty()) {
            const std::string& _s = this_._internal_action_details();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.action_details");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // repeated string tags = 12;
          for (int i = 0, n = this_._internal_tags_size(); i < n; ++i) {
            const auto& s = this_._internal_tags().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.tags");
            target = stream->WriteString(12, s, target);
          }

          // string escalation_policy = 13;
          if (!this_._internal_escalation_policy().empty()) {
            const std::string& _s = this_._internal_escalation_policy();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.escalation_policy");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // string session_id = 14;
          if (!this_._internal_session_id().empty()) {
            const std::string& _s = this_._internal_session_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.session_id");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string location = 15;
          if (!this_._internal_location().empty()) {
            const std::string& _s = this_._internal_location();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.location");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // int32 session_duration_seconds = 16;
          if (this_._internal_session_duration_seconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_session_duration_seconds(), target);
          }

          // bool mfa_verified = 17;
          if (this_._internal_mfa_verified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_mfa_verified(), target);
          }

          // string originating_ip = 18;
          if (!this_._internal_originating_ip().empty()) {
            const std::string& _s = this_._internal_originating_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogEntry.originating_ip");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.audit.AuditLogEntry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuditLogEntry::ByteSizeLong(const MessageLite& base) {
          const AuditLogEntry& this_ = static_cast<const AuditLogEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuditLogEntry::ByteSizeLong() const {
          const AuditLogEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.audit.AuditLogEntry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated string tags = 12;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_tags().size());
              for (int i = 0, n = this_._internal_tags().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_tags().Get(i));
              }
            }
          }
           {
            // string log_id = 1;
            if (!this_._internal_log_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_log_id());
            }
            // string user_id = 2;
            if (!this_._internal_user_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_id());
            }
            // string role = 3;
            if (!this_._internal_role().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_role());
            }
            // string action = 4;
            if (!this_._internal_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action());
            }
            // string timestamp = 7;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string component = 10;
            if (!this_._internal_component().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_component());
            }
            // string action_details = 11;
            if (!this_._internal_action_details().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action_details());
            }
            // string escalation_policy = 13;
            if (!this_._internal_escalation_policy().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_policy());
            }
            // string session_id = 14;
            if (!this_._internal_session_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_session_id());
            }
            // string location = 15;
            if (!this_._internal_location().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_location());
            }
            // string originating_ip = 18;
            if (!this_._internal_originating_ip().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_originating_ip());
            }
            // .seigr.audit.LogLevel log_level = 5;
            if (this_._internal_log_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_log_level());
            }
            // .seigr.audit.LogCategory category = 6;
            if (this_._internal_category() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_category());
            }
            // bool requires_attention = 9;
            if (this_._internal_requires_attention() != 0) {
              total_size += 2;
            }
            // bool mfa_verified = 17;
            if (this_._internal_mfa_verified() != 0) {
              total_size += 3;
            }
            // int32 session_duration_seconds = 16;
            if (this_._internal_session_duration_seconds() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_session_duration_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuditLogEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuditLogEntry*>(&to_msg);
  auto& from = static_cast<const AuditLogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.audit.AuditLogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  if (!from._internal_log_id().empty()) {
    _this->_internal_set_log_id(from._internal_log_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_component().empty()) {
    _this->_internal_set_component(from._internal_component());
  }
  if (!from._internal_action_details().empty()) {
    _this->_internal_set_action_details(from._internal_action_details());
  }
  if (!from._internal_escalation_policy().empty()) {
    _this->_internal_set_escalation_policy(from._internal_escalation_policy());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_originating_ip().empty()) {
    _this->_internal_set_originating_ip(from._internal_originating_ip());
  }
  if (from._internal_log_level() != 0) {
    _this->_impl_.log_level_ = from._impl_.log_level_;
  }
  if (from._internal_category() != 0) {
    _this->_impl_.category_ = from._impl_.category_;
  }
  if (from._internal_requires_attention() != 0) {
    _this->_impl_.requires_attention_ = from._impl_.requires_attention_;
  }
  if (from._internal_mfa_verified() != 0) {
    _this->_impl_.mfa_verified_ = from._impl_.mfa_verified_;
  }
  if (from._internal_session_duration_seconds() != 0) {
    _this->_impl_.session_duration_seconds_ = from._impl_.session_duration_seconds_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuditLogEntry::CopyFrom(const AuditLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.audit.AuditLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuditLogEntry::InternalSwap(AuditLogEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_id_, &other->_impl_.log_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.role_, &other->_impl_.role_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_, &other->_impl_.action_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.component_, &other->_impl_.component_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_details_, &other->_impl_.action_details_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_policy_, &other->_impl_.escalation_policy_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, &other->_impl_.location_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.originating_ip_, &other->_impl_.originating_ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.session_duration_seconds_)
      + sizeof(AuditLogEntry::_impl_.session_duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(AuditLogEntry, _impl_.log_level_)>(
          reinterpret_cast<char*>(&_impl_.log_level_),
          reinterpret_cast<char*>(&other->_impl_.log_level_));
}

::google::protobuf::Metadata AuditLogEntry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLog_MetadataEntry_DoNotUse::AuditLog_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLog_MetadataEntry_DoNotUse::AuditLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLog_MetadataEntry_DoNotUse::AuditLog_MetadataEntry_DoNotUse() : SuperType() {}
              AuditLog_MetadataEntry_DoNotUse::AuditLog_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLog_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLog_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto AuditLog_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLog_MetadataEntry_DoNotUse),
                                                          alignof(AuditLog_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLog_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLog_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLog_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLog_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLog_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLog_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLog_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLog_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2> AuditLog_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLog_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLog_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\3\5\0\0\0\0\0"
    "seigr.audit.AuditLog.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AuditLog::_Internal {
 public:
};

AuditLog::AuditLog(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.audit.AuditLog)
}
inline PROTOBUF_NDEBUG_INLINE AuditLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::audit::AuditLog& from_msg)
      : entries_{visibility, arena, from.entries_},
        metadata_{visibility, arena, from.metadata_},
        source_system_(arena, from.source_system_),
        log_version_(arena, from.log_version_),
        log_date_(arena, from.log_date_),
        comparison_id_(arena, from.comparison_id_),
        log_owner_(arena, from.log_owner_),
        _cached_size_{0} {}

AuditLog::AuditLog(
    ::google::protobuf::Arena* arena,
    const AuditLog& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuditLog* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.integrity_verified_ = from._impl_.integrity_verified_;

  // @@protoc_insertion_point(copy_constructor:seigr.audit.AuditLog)
}
inline PROTOBUF_NDEBUG_INLINE AuditLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entries_{visibility, arena},
        metadata_{visibility, arena},
        source_system_(arena),
        log_version_(arena),
        log_date_(arena),
        comparison_id_(arena),
        log_owner_(arena),
        _cached_size_{0} {}

inline void AuditLog::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.integrity_verified_ = {};
}
AuditLog::~AuditLog() {
  // @@protoc_insertion_point(destructor:seigr.audit.AuditLog)
  SharedDtor(*this);
}
inline void AuditLog::SharedDtor(MessageLite& self) {
  AuditLog& this_ = static_cast<AuditLog&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.source_system_.Destroy();
  this_._impl_.log_version_.Destroy();
  this_._impl_.log_date_.Destroy();
  this_._impl_.comparison_id_.Destroy();
  this_._impl_.log_owner_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AuditLog::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuditLog(arena);
}
constexpr auto AuditLog::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.entries_) +
          decltype(AuditLog::_impl_.entries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.metadata_) +
          decltype(AuditLog::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.metadata_) +
          decltype(AuditLog::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AuditLog), alignof(AuditLog), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuditLog::PlacementNew_,
                                 sizeof(AuditLog),
                                 alignof(AuditLog));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuditLog::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuditLog_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuditLog::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuditLog>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuditLog::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuditLog>(), &AuditLog::ByteSizeLong,
            &AuditLog::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuditLog, _impl_._cached_size_),
        false,
    },
    &AuditLog::kDescriptorMethods,
    &descriptor_table_audit_5flogging_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuditLog::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 99, 2> AuditLog::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLog>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string log_owner = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_owner_)}},
    // repeated .seigr.audit.AuditLogEntry entries = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.entries_)}},
    // string source_system = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.source_system_)}},
    // string log_version = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_version_)}},
    // string log_date = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string comparison_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.comparison_id_)}},
    // bool integrity_verified = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AuditLog, _impl_.integrity_verified_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.integrity_verified_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .seigr.audit.AuditLogEntry entries = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.entries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string source_system = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.source_system_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string log_version = 3;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string log_date = 4;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_date_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 5;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string comparison_id = 6;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.comparison_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool integrity_verified = 7;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.integrity_verified_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string log_owner = 8;
    {PROTOBUF_FIELD_OFFSET(AuditLog, _impl_.log_owner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::audit::AuditLogEntry>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLog()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\24\0\15\13\10\10\15\0\11\0\0\0\0\0\0\0"
    "seigr.audit.AuditLog"
    "source_system"
    "log_version"
    "log_date"
    "metadata"
    "comparison_id"
    "log_owner"
  }},
};

PROTOBUF_NOINLINE void AuditLog::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.audit.AuditLog)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.metadata_.Clear();
  _impl_.source_system_.ClearToEmpty();
  _impl_.log_version_.ClearToEmpty();
  _impl_.log_date_.ClearToEmpty();
  _impl_.comparison_id_.ClearToEmpty();
  _impl_.log_owner_.ClearToEmpty();
  _impl_.integrity_verified_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuditLog::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuditLog& this_ = static_cast<const AuditLog&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuditLog::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuditLog& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.audit.AuditLog)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .seigr.audit.AuditLogEntry entries = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_entries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_entries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string source_system = 2;
          if (!this_._internal_source_system().empty()) {
            const std::string& _s = this_._internal_source_system();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.source_system");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string log_version = 3;
          if (!this_._internal_log_version().empty()) {
            const std::string& _s = this_._internal_log_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.log_version");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string log_date = 4;
          if (!this_._internal_log_date().empty()) {
            const std::string& _s = this_._internal_log_date();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.log_date");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // map<string, string> metadata = 5;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.metadata");
              }
            }
          }

          // string comparison_id = 6;
          if (!this_._internal_comparison_id().empty()) {
            const std::string& _s = this_._internal_comparison_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.comparison_id");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // bool integrity_verified = 7;
          if (this_._internal_integrity_verified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_integrity_verified(), target);
          }

          // string log_owner = 8;
          if (!this_._internal_log_owner().empty()) {
            const std::string& _s = this_._internal_log_owner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLog.log_owner");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.audit.AuditLog)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuditLog::ByteSizeLong(const MessageLite& base) {
          const AuditLog& this_ = static_cast<const AuditLog&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuditLog::ByteSizeLong() const {
          const AuditLog& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.audit.AuditLog)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.audit.AuditLogEntry entries = 1;
            {
              total_size += 1UL * this_._internal_entries_size();
              for (const auto& msg : this_._internal_entries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> metadata = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string source_system = 2;
            if (!this_._internal_source_system().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_source_system());
            }
            // string log_version = 3;
            if (!this_._internal_log_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_log_version());
            }
            // string log_date = 4;
            if (!this_._internal_log_date().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_log_date());
            }
            // string comparison_id = 6;
            if (!this_._internal_comparison_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_comparison_id());
            }
            // string log_owner = 8;
            if (!this_._internal_log_owner().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_log_owner());
            }
            // bool integrity_verified = 7;
            if (this_._internal_integrity_verified() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuditLog::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuditLog*>(&to_msg);
  auto& from = static_cast<const AuditLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.audit.AuditLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(
      from._internal_entries());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_source_system().empty()) {
    _this->_internal_set_source_system(from._internal_source_system());
  }
  if (!from._internal_log_version().empty()) {
    _this->_internal_set_log_version(from._internal_log_version());
  }
  if (!from._internal_log_date().empty()) {
    _this->_internal_set_log_date(from._internal_log_date());
  }
  if (!from._internal_comparison_id().empty()) {
    _this->_internal_set_comparison_id(from._internal_comparison_id());
  }
  if (!from._internal_log_owner().empty()) {
    _this->_internal_set_log_owner(from._internal_log_owner());
  }
  if (from._internal_integrity_verified() != 0) {
    _this->_impl_.integrity_verified_ = from._impl_.integrity_verified_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuditLog::CopyFrom(const AuditLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.audit.AuditLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuditLog::InternalSwap(AuditLog* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_system_, &other->_impl_.source_system_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_version_, &other->_impl_.log_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_date_, &other->_impl_.log_date_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comparison_id_, &other->_impl_.comparison_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_owner_, &other->_impl_.log_owner_, arena);
        swap(_impl_.integrity_verified_, other->_impl_.integrity_verified_);
}

::google::protobuf::Metadata AuditLog::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLogQuery_AdditionalFiltersEntry_DoNotUse::AuditLogQuery_AdditionalFiltersEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLogQuery_AdditionalFiltersEntry_DoNotUse::AuditLogQuery_AdditionalFiltersEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLogQuery_AdditionalFiltersEntry_DoNotUse::AuditLogQuery_AdditionalFiltersEntry_DoNotUse() : SuperType() {}
              AuditLogQuery_AdditionalFiltersEntry_DoNotUse::AuditLogQuery_AdditionalFiltersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLogQuery_AdditionalFiltersEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLogQuery_AdditionalFiltersEntry_DoNotUse(arena);
              }
              constexpr auto AuditLogQuery_AdditionalFiltersEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLogQuery_AdditionalFiltersEntry_DoNotUse),
                                                          alignof(AuditLogQuery_AdditionalFiltersEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLogQuery_AdditionalFiltersEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLogQuery_AdditionalFiltersEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLogQuery_AdditionalFiltersEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLogQuery_AdditionalFiltersEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLogQuery_AdditionalFiltersEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLogQuery_AdditionalFiltersEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLogQuery_AdditionalFiltersEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLogQuery_AdditionalFiltersEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 65, 2> AuditLogQuery_AdditionalFiltersEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogQuery_AdditionalFiltersEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery_AdditionalFiltersEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\60\3\5\0\0\0\0\0"
    "seigr.audit.AuditLogQuery.AdditionalFiltersEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AuditLogQuery::_Internal {
 public:
};

AuditLogQuery::AuditLogQuery(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.audit.AuditLogQuery)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::audit::AuditLogQuery& from_msg)
      : user_ids_{visibility, arena, from.user_ids_},
        categories_{visibility, arena, from.categories_},
        _categories_cached_byte_size_{0},
        log_levels_{visibility, arena, from.log_levels_},
        _log_levels_cached_byte_size_{0},
        tags_{visibility, arena, from.tags_},
        actions_{visibility, arena, from.actions_},
        additional_filters_{visibility, arena, from.additional_filters_},
        date_range_start_(arena, from.date_range_start_),
        date_range_end_(arena, from.date_range_end_),
        time_of_day_start_(arena, from.time_of_day_start_),
        time_of_day_end_(arena, from.time_of_day_end_),
        _cached_size_{0} {}

AuditLogQuery::AuditLogQuery(
    ::google::protobuf::Arena* arena,
    const AuditLogQuery& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuditLogQuery* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_pattern_detection_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enable_pattern_detection_),
           offsetof(Impl_, include_session_data_) -
               offsetof(Impl_, enable_pattern_detection_) +
               sizeof(Impl_::include_session_data_));

  // @@protoc_insertion_point(copy_constructor:seigr.audit.AuditLogQuery)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : user_ids_{visibility, arena},
        categories_{visibility, arena},
        _categories_cached_byte_size_{0},
        log_levels_{visibility, arena},
        _log_levels_cached_byte_size_{0},
        tags_{visibility, arena},
        actions_{visibility, arena},
        additional_filters_{visibility, arena},
        date_range_start_(arena),
        date_range_end_(arena),
        time_of_day_start_(arena),
        time_of_day_end_(arena),
        _cached_size_{0} {}

inline void AuditLogQuery::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enable_pattern_detection_),
           0,
           offsetof(Impl_, include_session_data_) -
               offsetof(Impl_, enable_pattern_detection_) +
               sizeof(Impl_::include_session_data_));
}
AuditLogQuery::~AuditLogQuery() {
  // @@protoc_insertion_point(destructor:seigr.audit.AuditLogQuery)
  SharedDtor(*this);
}
inline void AuditLogQuery::SharedDtor(MessageLite& self) {
  AuditLogQuery& this_ = static_cast<AuditLogQuery&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.date_range_start_.Destroy();
  this_._impl_.date_range_end_.Destroy();
  this_._impl_.time_of_day_start_.Destroy();
  this_._impl_.time_of_day_end_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AuditLogQuery::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuditLogQuery(arena);
}
constexpr auto AuditLogQuery::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.user_ids_) +
          decltype(AuditLogQuery::_impl_.user_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.categories_) +
          decltype(AuditLogQuery::_impl_.categories_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.log_levels_) +
          decltype(AuditLogQuery::_impl_.log_levels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.tags_) +
          decltype(AuditLogQuery::_impl_.tags_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.actions_) +
          decltype(AuditLogQuery::_impl_.actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.additional_filters_) +
          decltype(AuditLogQuery::_impl_.additional_filters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.additional_filters_) +
          decltype(AuditLogQuery::_impl_.additional_filters_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AuditLogQuery), alignof(AuditLogQuery), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuditLogQuery::PlacementNew_,
                                 sizeof(AuditLogQuery),
                                 alignof(AuditLogQuery));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuditLogQuery::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuditLogQuery_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuditLogQuery::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuditLogQuery>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuditLogQuery::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuditLogQuery>(), &AuditLogQuery::ByteSizeLong,
            &AuditLogQuery::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_._cached_size_),
        false,
    },
    &AuditLogQuery::kDescriptorMethods,
    &descriptor_table_audit_5flogging_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuditLogQuery::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 1, 141, 2> AuditLogQuery::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogQuery>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string user_ids = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.user_ids_)}},
    // repeated .seigr.audit.LogCategory categories = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.categories_)}},
    // repeated .seigr.audit.LogLevel log_levels = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.log_levels_)}},
    // string date_range_start = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.date_range_start_)}},
    // string date_range_end = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.date_range_end_)}},
    // repeated string tags = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.tags_)}},
    // repeated string actions = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.actions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string time_of_day_start = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.time_of_day_start_)}},
    // string time_of_day_end = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.time_of_day_end_)}},
    // bool enable_pattern_detection = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AuditLogQuery, _impl_.enable_pattern_detection_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.enable_pattern_detection_)}},
    // bool include_session_data = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AuditLogQuery, _impl_.include_session_data_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.include_session_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string user_ids = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.user_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .seigr.audit.LogCategory categories = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.categories_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .seigr.audit.LogLevel log_levels = 3;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.log_levels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // string date_range_start = 4;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.date_range_start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string date_range_end = 5;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.date_range_end_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string tags = 6;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string actions = 7;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // map<string, string> additional_filters = 8;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.additional_filters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string time_of_day_start = 9;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.time_of_day_start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string time_of_day_end = 10;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.time_of_day_end_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool enable_pattern_detection = 11;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.enable_pattern_detection_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool include_session_data = 12;
    {PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.include_session_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLogQuery()._impl_.additional_filters_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\31\10\0\0\20\16\4\7\22\21\17\0\0\0\0\0"
    "seigr.audit.AuditLogQuery"
    "user_ids"
    "date_range_start"
    "date_range_end"
    "tags"
    "actions"
    "additional_filters"
    "time_of_day_start"
    "time_of_day_end"
  }},
};

PROTOBUF_NOINLINE void AuditLogQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.audit.AuditLogQuery)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.categories_.Clear();
  _impl_.log_levels_.Clear();
  _impl_.tags_.Clear();
  _impl_.actions_.Clear();
  _impl_.additional_filters_.Clear();
  _impl_.date_range_start_.ClearToEmpty();
  _impl_.date_range_end_.ClearToEmpty();
  _impl_.time_of_day_start_.ClearToEmpty();
  _impl_.time_of_day_end_.ClearToEmpty();
  ::memset(&_impl_.enable_pattern_detection_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.include_session_data_) -
      reinterpret_cast<char*>(&_impl_.enable_pattern_detection_)) + sizeof(_impl_.include_session_data_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuditLogQuery::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuditLogQuery& this_ = static_cast<const AuditLogQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuditLogQuery::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuditLogQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.audit.AuditLogQuery)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string user_ids = 1;
          for (int i = 0, n = this_._internal_user_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_user_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.user_ids");
            target = stream->WriteString(1, s, target);
          }

          // repeated .seigr.audit.LogCategory categories = 2;
          {
            std::size_t byte_size =
                                              this_._impl_._categories_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  2, this_._internal_categories(), byte_size, target);
            }
          }

          // repeated .seigr.audit.LogLevel log_levels = 3;
          {
            std::size_t byte_size =
                                              this_._impl_._log_levels_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  3, this_._internal_log_levels(), byte_size, target);
            }
          }

          // string date_range_start = 4;
          if (!this_._internal_date_range_start().empty()) {
            const std::string& _s = this_._internal_date_range_start();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.date_range_start");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string date_range_end = 5;
          if (!this_._internal_date_range_end().empty()) {
            const std::string& _s = this_._internal_date_range_end();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.date_range_end");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated string tags = 6;
          for (int i = 0, n = this_._internal_tags_size(); i < n; ++i) {
            const auto& s = this_._internal_tags().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.tags");
            target = stream->WriteString(6, s, target);
          }

          // repeated string actions = 7;
          for (int i = 0, n = this_._internal_actions_size(); i < n; ++i) {
            const auto& s = this_._internal_actions().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.actions");
            target = stream->WriteString(7, s, target);
          }

          // map<string, string> additional_filters = 8;
          if (!this_._internal_additional_filters().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_additional_filters();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.additional_filters");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.additional_filters");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.additional_filters");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.additional_filters");
              }
            }
          }

          // string time_of_day_start = 9;
          if (!this_._internal_time_of_day_start().empty()) {
            const std::string& _s = this_._internal_time_of_day_start();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.time_of_day_start");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string time_of_day_end = 10;
          if (!this_._internal_time_of_day_end().empty()) {
            const std::string& _s = this_._internal_time_of_day_end();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogQuery.time_of_day_end");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // bool enable_pattern_detection = 11;
          if (this_._internal_enable_pattern_detection() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_enable_pattern_detection(), target);
          }

          // bool include_session_data = 12;
          if (this_._internal_include_session_data() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_include_session_data(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.audit.AuditLogQuery)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuditLogQuery::ByteSizeLong(const MessageLite& base) {
          const AuditLogQuery& this_ = static_cast<const AuditLogQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuditLogQuery::ByteSizeLong() const {
          const AuditLogQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.audit.AuditLogQuery)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string user_ids = 1;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_user_ids().size());
              for (int i = 0, n = this_._internal_user_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_user_ids().Get(i));
              }
            }
            // repeated .seigr.audit.LogCategory categories = 2;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_categories(), 1, this_._impl_._categories_cached_byte_size_);
            }
            // repeated .seigr.audit.LogLevel log_levels = 3;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_log_levels(), 1, this_._impl_._log_levels_cached_byte_size_);
            }
            // repeated string tags = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_tags().size());
              for (int i = 0, n = this_._internal_tags().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_tags().Get(i));
              }
            }
            // repeated string actions = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_actions().size());
              for (int i = 0, n = this_._internal_actions().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_actions().Get(i));
              }
            }
            // map<string, string> additional_filters = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_additional_filters_size());
              for (const auto& entry : this_._internal_additional_filters()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string date_range_start = 4;
            if (!this_._internal_date_range_start().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_date_range_start());
            }
            // string date_range_end = 5;
            if (!this_._internal_date_range_end().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_date_range_end());
            }
            // string time_of_day_start = 9;
            if (!this_._internal_time_of_day_start().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_time_of_day_start());
            }
            // string time_of_day_end = 10;
            if (!this_._internal_time_of_day_end().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_time_of_day_end());
            }
            // bool enable_pattern_detection = 11;
            if (this_._internal_enable_pattern_detection() != 0) {
              total_size += 2;
            }
            // bool include_session_data = 12;
            if (this_._internal_include_session_data() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuditLogQuery::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuditLogQuery*>(&to_msg);
  auto& from = static_cast<const AuditLogQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.audit.AuditLogQuery)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_user_ids()->MergeFrom(from._internal_user_ids());
  _this->_internal_mutable_categories()->MergeFrom(from._internal_categories());
  _this->_internal_mutable_log_levels()->MergeFrom(from._internal_log_levels());
  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  _this->_internal_mutable_actions()->MergeFrom(from._internal_actions());
  _this->_impl_.additional_filters_.MergeFrom(from._impl_.additional_filters_);
  if (!from._internal_date_range_start().empty()) {
    _this->_internal_set_date_range_start(from._internal_date_range_start());
  }
  if (!from._internal_date_range_end().empty()) {
    _this->_internal_set_date_range_end(from._internal_date_range_end());
  }
  if (!from._internal_time_of_day_start().empty()) {
    _this->_internal_set_time_of_day_start(from._internal_time_of_day_start());
  }
  if (!from._internal_time_of_day_end().empty()) {
    _this->_internal_set_time_of_day_end(from._internal_time_of_day_end());
  }
  if (from._internal_enable_pattern_detection() != 0) {
    _this->_impl_.enable_pattern_detection_ = from._impl_.enable_pattern_detection_;
  }
  if (from._internal_include_session_data() != 0) {
    _this->_impl_.include_session_data_ = from._impl_.include_session_data_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuditLogQuery::CopyFrom(const AuditLogQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.audit.AuditLogQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuditLogQuery::InternalSwap(AuditLogQuery* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  _impl_.log_levels_.InternalSwap(&other->_impl_.log_levels_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
  _impl_.additional_filters_.InternalSwap(&other->_impl_.additional_filters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_range_start_, &other->_impl_.date_range_start_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_range_end_, &other->_impl_.date_range_end_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_of_day_start_, &other->_impl_.time_of_day_start_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_of_day_end_, &other->_impl_.time_of_day_end_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.include_session_data_)
      + sizeof(AuditLogQuery::_impl_.include_session_data_)
      - PROTOBUF_FIELD_OFFSET(AuditLogQuery, _impl_.enable_pattern_detection_)>(
          reinterpret_cast<char*>(&_impl_.enable_pattern_detection_),
          reinterpret_cast<char*>(&other->_impl_.enable_pattern_detection_));
}

::google::protobuf::Metadata AuditLogQuery::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLogStats_CategoryCountsEntry_DoNotUse::AuditLogStats_CategoryCountsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLogStats_CategoryCountsEntry_DoNotUse::AuditLogStats_CategoryCountsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLogStats_CategoryCountsEntry_DoNotUse::AuditLogStats_CategoryCountsEntry_DoNotUse() : SuperType() {}
              AuditLogStats_CategoryCountsEntry_DoNotUse::AuditLogStats_CategoryCountsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLogStats_CategoryCountsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLogStats_CategoryCountsEntry_DoNotUse(arena);
              }
              constexpr auto AuditLogStats_CategoryCountsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLogStats_CategoryCountsEntry_DoNotUse),
                                                          alignof(AuditLogStats_CategoryCountsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLogStats_CategoryCountsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLogStats_CategoryCountsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLogStats_CategoryCountsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLogStats_CategoryCountsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLogStats_CategoryCountsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLogStats_CategoryCountsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLogStats_CategoryCountsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLogStats_CategoryCountsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> AuditLogStats_CategoryCountsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogStats_CategoryCountsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryCountsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\55\3\0\0\0\0\0\0"
    "seigr.audit.AuditLogStats.CategoryCountsEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLogStats_UserActionCountsEntry_DoNotUse::AuditLogStats_UserActionCountsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLogStats_UserActionCountsEntry_DoNotUse::AuditLogStats_UserActionCountsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLogStats_UserActionCountsEntry_DoNotUse::AuditLogStats_UserActionCountsEntry_DoNotUse() : SuperType() {}
              AuditLogStats_UserActionCountsEntry_DoNotUse::AuditLogStats_UserActionCountsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLogStats_UserActionCountsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLogStats_UserActionCountsEntry_DoNotUse(arena);
              }
              constexpr auto AuditLogStats_UserActionCountsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLogStats_UserActionCountsEntry_DoNotUse),
                                                          alignof(AuditLogStats_UserActionCountsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLogStats_UserActionCountsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLogStats_UserActionCountsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLogStats_UserActionCountsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLogStats_UserActionCountsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLogStats_UserActionCountsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLogStats_UserActionCountsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLogStats_UserActionCountsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLogStats_UserActionCountsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> AuditLogStats_UserActionCountsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogStats_UserActionCountsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_UserActionCountsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\57\3\0\0\0\0\0\0"
    "seigr.audit.AuditLogStats.UserActionCountsEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditLogStats_CategoryRatiosEntry_DoNotUse::AuditLogStats_CategoryRatiosEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditLogStats_CategoryRatiosEntry_DoNotUse::AuditLogStats_CategoryRatiosEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditLogStats_CategoryRatiosEntry_DoNotUse::AuditLogStats_CategoryRatiosEntry_DoNotUse() : SuperType() {}
              AuditLogStats_CategoryRatiosEntry_DoNotUse::AuditLogStats_CategoryRatiosEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditLogStats_CategoryRatiosEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditLogStats_CategoryRatiosEntry_DoNotUse(arena);
              }
              constexpr auto AuditLogStats_CategoryRatiosEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditLogStats_CategoryRatiosEntry_DoNotUse),
                                                          alignof(AuditLogStats_CategoryRatiosEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditLogStats_CategoryRatiosEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditLogStats_CategoryRatiosEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditLogStats_CategoryRatiosEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditLogStats_CategoryRatiosEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditLogStats_CategoryRatiosEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditLogStats_CategoryRatiosEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditLogStats_CategoryRatiosEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditLogStats_CategoryRatiosEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> AuditLogStats_CategoryRatiosEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogStats_CategoryRatiosEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats_CategoryRatiosEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\55\3\0\0\0\0\0\0"
    "seigr.audit.AuditLogStats.CategoryRatiosEntry"
    "key"
  }},
};

// ===================================================================

class AuditLogStats::_Internal {
 public:
};

AuditLogStats::AuditLogStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.audit.AuditLogStats)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::audit::AuditLogStats& from_msg)
      : category_counts_{visibility, arena, from.category_counts_},
        user_action_counts_{visibility, arena, from.user_action_counts_},
        category_ratios_{visibility, arena, from.category_ratios_},
        last_entry_timestamp_(arena, from.last_entry_timestamp_),
        summary_period_(arena, from.summary_period_),
        most_active_user_id_(arena, from.most_active_user_id_),
        most_frequent_action_(arena, from.most_frequent_action_),
        _cached_size_{0} {}

AuditLogStats::AuditLogStats(
    ::google::protobuf::Arena* arena,
    const AuditLogStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuditLogStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_entries_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_entries_),
           offsetof(Impl_, error_to_warning_ratio_) -
               offsetof(Impl_, total_entries_) +
               sizeof(Impl_::error_to_warning_ratio_));

  // @@protoc_insertion_point(copy_constructor:seigr.audit.AuditLogStats)
}
inline PROTOBUF_NDEBUG_INLINE AuditLogStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : category_counts_{visibility, arena},
        user_action_counts_{visibility, arena},
        category_ratios_{visibility, arena},
        last_entry_timestamp_(arena),
        summary_period_(arena),
        most_active_user_id_(arena),
        most_frequent_action_(arena),
        _cached_size_{0} {}

inline void AuditLogStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_entries_),
           0,
           offsetof(Impl_, error_to_warning_ratio_) -
               offsetof(Impl_, total_entries_) +
               sizeof(Impl_::error_to_warning_ratio_));
}
AuditLogStats::~AuditLogStats() {
  // @@protoc_insertion_point(destructor:seigr.audit.AuditLogStats)
  SharedDtor(*this);
}
inline void AuditLogStats::SharedDtor(MessageLite& self) {
  AuditLogStats& this_ = static_cast<AuditLogStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.last_entry_timestamp_.Destroy();
  this_._impl_.summary_period_.Destroy();
  this_._impl_.most_active_user_id_.Destroy();
  this_._impl_.most_frequent_action_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AuditLogStats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuditLogStats(arena);
}
constexpr auto AuditLogStats::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_counts_) +
          decltype(AuditLogStats::_impl_.category_counts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_counts_) +
          decltype(AuditLogStats::_impl_.category_counts_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.user_action_counts_) +
          decltype(AuditLogStats::_impl_.user_action_counts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.user_action_counts_) +
          decltype(AuditLogStats::_impl_.user_action_counts_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_ratios_) +
          decltype(AuditLogStats::_impl_.category_ratios_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_ratios_) +
          decltype(AuditLogStats::_impl_.category_ratios_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AuditLogStats), alignof(AuditLogStats), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuditLogStats::PlacementNew_,
                                 sizeof(AuditLogStats),
                                 alignof(AuditLogStats));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuditLogStats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuditLogStats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuditLogStats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuditLogStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuditLogStats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuditLogStats>(), &AuditLogStats::ByteSizeLong,
            &AuditLogStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_._cached_size_),
        false,
    },
    &AuditLogStats::kDescriptorMethods,
    &descriptor_table_audit_5flogging_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuditLogStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 3, 163, 2> AuditLogStats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditLogStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 total_entries = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.total_entries_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.total_entries_)}},
    // int32 critical_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.critical_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.critical_count_)}},
    // int32 error_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.error_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.error_count_)}},
    // int32 warning_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.warning_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.warning_count_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string last_entry_timestamp = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.last_entry_timestamp_)}},
    // string summary_period = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.summary_period_)}},
    // int32 alert_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.alert_count_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.alert_count_)}},
    // double critical_event_ratio = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.critical_event_ratio_)}},
    // int32 escalation_threshold = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuditLogStats, _impl_.escalation_threshold_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.escalation_threshold_)}},
    // double error_to_warning_ratio = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.error_to_warning_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string most_active_user_id = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.most_active_user_id_)}},
    // string most_frequent_action = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.most_frequent_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 total_entries = 1;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.total_entries_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 critical_count = 2;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.critical_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 error_count = 3;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.error_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 warning_count = 4;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.warning_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<string, int32> category_counts = 5;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_counts_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, int32> user_action_counts = 6;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.user_action_counts_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string last_entry_timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.last_entry_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string summary_period = 8;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.summary_period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 alert_count = 9;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.alert_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double critical_event_ratio = 10;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.critical_event_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 escalation_threshold = 11;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.escalation_threshold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double error_to_warning_ratio = 12;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.error_to_warning_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // map<string, double> category_ratios = 13;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.category_ratios_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string most_active_user_id = 14;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.most_active_user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string most_frequent_action = 15;
    {PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.most_frequent_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLogStats()._impl_.category_counts_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLogStats()._impl_.user_action_counts_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditLogStats()._impl_.category_ratios_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\31\0\0\0\0\17\22\24\16\0\0\0\0\17\23\24"
    "seigr.audit.AuditLogStats"
    "category_counts"
    "user_action_counts"
    "last_entry_timestamp"
    "summary_period"
    "category_ratios"
    "most_active_user_id"
    "most_frequent_action"
  }},
};

PROTOBUF_NOINLINE void AuditLogStats::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.audit.AuditLogStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_counts_.Clear();
  _impl_.user_action_counts_.Clear();
  _impl_.category_ratios_.Clear();
  _impl_.last_entry_timestamp_.ClearToEmpty();
  _impl_.summary_period_.ClearToEmpty();
  _impl_.most_active_user_id_.ClearToEmpty();
  _impl_.most_frequent_action_.ClearToEmpty();
  ::memset(&_impl_.total_entries_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_to_warning_ratio_) -
      reinterpret_cast<char*>(&_impl_.total_entries_)) + sizeof(_impl_.error_to_warning_ratio_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuditLogStats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuditLogStats& this_ = static_cast<const AuditLogStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuditLogStats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuditLogStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.audit.AuditLogStats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 total_entries = 1;
          if (this_._internal_total_entries() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_total_entries(), target);
          }

          // int32 critical_count = 2;
          if (this_._internal_critical_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_critical_count(), target);
          }

          // int32 error_count = 3;
          if (this_._internal_error_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_error_count(), target);
          }

          // int32 warning_count = 4;
          if (this_._internal_warning_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_warning_count(), target);
          }

          // map<string, int32> category_counts = 5;
          if (!this_._internal_category_counts().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_category_counts();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.category_counts");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.category_counts");
              }
            }
          }

          // map<string, int32> user_action_counts = 6;
          if (!this_._internal_user_action_counts().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_user_action_counts();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.user_action_counts");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.user_action_counts");
              }
            }
          }

          // string last_entry_timestamp = 7;
          if (!this_._internal_last_entry_timestamp().empty()) {
            const std::string& _s = this_._internal_last_entry_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.last_entry_timestamp");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string summary_period = 8;
          if (!this_._internal_summary_period().empty()) {
            const std::string& _s = this_._internal_summary_period();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.summary_period");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // int32 alert_count = 9;
          if (this_._internal_alert_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_alert_count(), target);
          }

          // double critical_event_ratio = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_critical_event_ratio()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_critical_event_ratio(), target);
          }

          // int32 escalation_threshold = 11;
          if (this_._internal_escalation_threshold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_escalation_threshold(), target);
          }

          // double error_to_warning_ratio = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_error_to_warning_ratio()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_error_to_warning_ratio(), target);
          }

          // map<string, double> category_ratios = 13;
          if (!this_._internal_category_ratios().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_category_ratios();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.category_ratios");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.category_ratios");
              }
            }
          }

          // string most_active_user_id = 14;
          if (!this_._internal_most_active_user_id().empty()) {
            const std::string& _s = this_._internal_most_active_user_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.most_active_user_id");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string most_frequent_action = 15;
          if (!this_._internal_most_frequent_action().empty()) {
            const std::string& _s = this_._internal_most_frequent_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditLogStats.most_frequent_action");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.audit.AuditLogStats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuditLogStats::ByteSizeLong(const MessageLite& base) {
          const AuditLogStats& this_ = static_cast<const AuditLogStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuditLogStats::ByteSizeLong() const {
          const AuditLogStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.audit.AuditLogStats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, int32> category_counts = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_category_counts_size());
              for (const auto& entry : this_._internal_category_counts()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, int32> user_action_counts = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_user_action_counts_size());
              for (const auto& entry : this_._internal_user_action_counts()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, double> category_ratios = 13;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_category_ratios_size());
              for (const auto& entry : this_._internal_category_ratios()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string last_entry_timestamp = 7;
            if (!this_._internal_last_entry_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_entry_timestamp());
            }
            // string summary_period = 8;
            if (!this_._internal_summary_period().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_summary_period());
            }
            // string most_active_user_id = 14;
            if (!this_._internal_most_active_user_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_most_active_user_id());
            }
            // string most_frequent_action = 15;
            if (!this_._internal_most_frequent_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_most_frequent_action());
            }
            // int32 total_entries = 1;
            if (this_._internal_total_entries() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_entries());
            }
            // int32 critical_count = 2;
            if (this_._internal_critical_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_critical_count());
            }
            // int32 error_count = 3;
            if (this_._internal_error_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_error_count());
            }
            // int32 warning_count = 4;
            if (this_._internal_warning_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_warning_count());
            }
            // double critical_event_ratio = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_critical_event_ratio()) != 0) {
              total_size += 9;
            }
            // int32 alert_count = 9;
            if (this_._internal_alert_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_alert_count());
            }
            // int32 escalation_threshold = 11;
            if (this_._internal_escalation_threshold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_escalation_threshold());
            }
            // double error_to_warning_ratio = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_error_to_warning_ratio()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuditLogStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuditLogStats*>(&to_msg);
  auto& from = static_cast<const AuditLogStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.audit.AuditLogStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_counts_.MergeFrom(from._impl_.category_counts_);
  _this->_impl_.user_action_counts_.MergeFrom(from._impl_.user_action_counts_);
  _this->_impl_.category_ratios_.MergeFrom(from._impl_.category_ratios_);
  if (!from._internal_last_entry_timestamp().empty()) {
    _this->_internal_set_last_entry_timestamp(from._internal_last_entry_timestamp());
  }
  if (!from._internal_summary_period().empty()) {
    _this->_internal_set_summary_period(from._internal_summary_period());
  }
  if (!from._internal_most_active_user_id().empty()) {
    _this->_internal_set_most_active_user_id(from._internal_most_active_user_id());
  }
  if (!from._internal_most_frequent_action().empty()) {
    _this->_internal_set_most_frequent_action(from._internal_most_frequent_action());
  }
  if (from._internal_total_entries() != 0) {
    _this->_impl_.total_entries_ = from._impl_.total_entries_;
  }
  if (from._internal_critical_count() != 0) {
    _this->_impl_.critical_count_ = from._impl_.critical_count_;
  }
  if (from._internal_error_count() != 0) {
    _this->_impl_.error_count_ = from._impl_.error_count_;
  }
  if (from._internal_warning_count() != 0) {
    _this->_impl_.warning_count_ = from._impl_.warning_count_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_critical_event_ratio()) != 0) {
    _this->_impl_.critical_event_ratio_ = from._impl_.critical_event_ratio_;
  }
  if (from._internal_alert_count() != 0) {
    _this->_impl_.alert_count_ = from._impl_.alert_count_;
  }
  if (from._internal_escalation_threshold() != 0) {
    _this->_impl_.escalation_threshold_ = from._impl_.escalation_threshold_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_error_to_warning_ratio()) != 0) {
    _this->_impl_.error_to_warning_ratio_ = from._impl_.error_to_warning_ratio_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuditLogStats::CopyFrom(const AuditLogStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.audit.AuditLogStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuditLogStats::InternalSwap(AuditLogStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.category_counts_.InternalSwap(&other->_impl_.category_counts_);
  _impl_.user_action_counts_.InternalSwap(&other->_impl_.user_action_counts_);
  _impl_.category_ratios_.InternalSwap(&other->_impl_.category_ratios_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_entry_timestamp_, &other->_impl_.last_entry_timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_period_, &other->_impl_.summary_period_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.most_active_user_id_, &other->_impl_.most_active_user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.most_frequent_action_, &other->_impl_.most_frequent_action_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.error_to_warning_ratio_)
      + sizeof(AuditLogStats::_impl_.error_to_warning_ratio_)
      - PROTOBUF_FIELD_OFFSET(AuditLogStats, _impl_.total_entries_)>(
          reinterpret_cast<char*>(&_impl_.total_entries_),
          reinterpret_cast<char*>(&other->_impl_.total_entries_));
}

::google::protobuf::Metadata AuditLogStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AuditReport_MetadataEntry_DoNotUse::AuditReport_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AuditReport_MetadataEntry_DoNotUse::AuditReport_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AuditReport_MetadataEntry_DoNotUse::AuditReport_MetadataEntry_DoNotUse() : SuperType() {}
              AuditReport_MetadataEntry_DoNotUse::AuditReport_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AuditReport_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AuditReport_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto AuditReport_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuditReport_MetadataEntry_DoNotUse),
                                                          alignof(AuditReport_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AuditReport_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AuditReport_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AuditReport_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AuditReport_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AuditReport_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AuditReport_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AuditReport_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_audit_5flogging_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AuditReport_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 54, 2> AuditReport_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditReport_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AuditReport_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\3\5\0\0\0\0\0"
    "seigr.audit.AuditReport.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AuditReport::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AuditReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AuditReport, _impl_._has_bits_);
};

AuditReport::AuditReport(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.audit.AuditReport)
}
inline PROTOBUF_NDEBUG_INLINE AuditReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::audit::AuditReport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entries_{visibility, arena, from.entries_},
        metadata_{visibility, arena, from.metadata_},
        related_reports_{visibility, arena, from.related_reports_},
        report_id_(arena, from.report_id_),
        generated_by_(arena, from.generated_by_),
        generated_at_(arena, from.generated_at_),
        summary_(arena, from.summary_) {}

AuditReport::AuditReport(
    ::google::protobuf::Arena* arena,
    const AuditReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuditReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statistics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::audit::AuditLogStats>(
                              arena, *from._impl_.statistics_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.audit.AuditReport)
}
inline PROTOBUF_NDEBUG_INLINE AuditReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        entries_{visibility, arena},
        metadata_{visibility, arena},
        related_reports_{visibility, arena},
        report_id_(arena),
        generated_by_(arena),
        generated_at_(arena),
        summary_(arena) {}

inline void AuditReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.statistics_ = {};
}
AuditReport::~AuditReport() {
  // @@protoc_insertion_point(destructor:seigr.audit.AuditReport)
  SharedDtor(*this);
}
inline void AuditReport::SharedDtor(MessageLite& self) {
  AuditReport& this_ = static_cast<AuditReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.report_id_.Destroy();
  this_._impl_.generated_by_.Destroy();
  this_._impl_.generated_at_.Destroy();
  this_._impl_.summary_.Destroy();
  delete this_._impl_.statistics_;
  this_._impl_.~Impl_();
}

inline void* AuditReport::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuditReport(arena);
}
constexpr auto AuditReport::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.entries_) +
          decltype(AuditReport::_impl_.entries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.metadata_) +
          decltype(AuditReport::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.metadata_) +
          decltype(AuditReport::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.related_reports_) +
          decltype(AuditReport::_impl_.related_reports_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AuditReport), alignof(AuditReport), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuditReport::PlacementNew_,
                                 sizeof(AuditReport),
                                 alignof(AuditReport));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuditReport::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuditReport_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuditReport::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuditReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuditReport::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuditReport>(), &AuditReport::ByteSizeLong,
            &AuditReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuditReport, _impl_._cached_size_),
        false,
    },
    &AuditReport::kDescriptorMethods,
    &descriptor_table_audit_5flogging_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuditReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 103, 2> AuditReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuditReport, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::audit::AuditReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string related_reports = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.related_reports_)}},
    // string report_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.report_id_)}},
    // repeated .seigr.audit.AuditLogEntry entries = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.entries_)}},
    // .seigr.audit.AuditLogStats statistics = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.statistics_)}},
    // string generated_by = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.generated_by_)}},
    // string generated_at = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.generated_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string summary = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.summary_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string report_id = 1;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.report_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.audit.AuditLogEntry entries = 2;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.entries_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .seigr.audit.AuditLogStats statistics = 3;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.statistics_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string generated_by = 4;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.generated_by_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string generated_at = 5;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.generated_at_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 6;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.metadata_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string summary = 7;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.summary_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string related_reports = 8;
    {PROTOBUF_FIELD_OFFSET(AuditReport, _impl_.related_reports_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::audit::AuditLogEntry>()},
    {::_pbi::TcParser::GetTable<::seigr::audit::AuditLogStats>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AuditReport()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\27\11\0\0\14\14\10\7\17\0\0\0\0\0\0\0"
    "seigr.audit.AuditReport"
    "report_id"
    "generated_by"
    "generated_at"
    "metadata"
    "summary"
    "related_reports"
  }},
};

PROTOBUF_NOINLINE void AuditReport::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.audit.AuditReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.metadata_.Clear();
  _impl_.related_reports_.Clear();
  _impl_.report_id_.ClearToEmpty();
  _impl_.generated_by_.ClearToEmpty();
  _impl_.generated_at_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.statistics_ != nullptr);
    _impl_.statistics_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuditReport::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuditReport& this_ = static_cast<const AuditReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuditReport::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuditReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.audit.AuditReport)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string report_id = 1;
          if (!this_._internal_report_id().empty()) {
            const std::string& _s = this_._internal_report_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.report_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .seigr.audit.AuditLogEntry entries = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_entries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_entries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.audit.AuditLogStats statistics = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.statistics_, this_._impl_.statistics_->GetCachedSize(), target,
                stream);
          }

          // string generated_by = 4;
          if (!this_._internal_generated_by().empty()) {
            const std::string& _s = this_._internal_generated_by();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.generated_by");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string generated_at = 5;
          if (!this_._internal_generated_at().empty()) {
            const std::string& _s = this_._internal_generated_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.generated_at");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // map<string, string> metadata = 6;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.metadata");
              }
            }
          }

          // string summary = 7;
          if (!this_._internal_summary().empty()) {
            const std::string& _s = this_._internal_summary();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.summary");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // repeated string related_reports = 8;
          for (int i = 0, n = this_._internal_related_reports_size(); i < n; ++i) {
            const auto& s = this_._internal_related_reports().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.audit.AuditReport.related_reports");
            target = stream->WriteString(8, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.audit.AuditReport)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuditReport::ByteSizeLong(const MessageLite& base) {
          const AuditReport& this_ = static_cast<const AuditReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuditReport::ByteSizeLong() const {
          const AuditReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.audit.AuditReport)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.audit.AuditLogEntry entries = 2;
            {
              total_size += 1UL * this_._internal_entries_size();
              for (const auto& msg : this_._internal_entries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> metadata = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated string related_reports = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_related_reports().size());
              for (int i = 0, n = this_._internal_related_reports().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_related_reports().Get(i));
              }
            }
          }
           {
            // string report_id = 1;
            if (!this_._internal_report_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_report_id());
            }
            // string generated_by = 4;
            if (!this_._internal_generated_by().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_generated_by());
            }
            // string generated_at = 5;
            if (!this_._internal_generated_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_generated_at());
            }
            // string summary = 7;
            if (!this_._internal_summary().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_summary());
            }
          }
           {
            // .seigr.audit.AuditLogStats statistics = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.statistics_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuditReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuditReport*>(&to_msg);
  auto& from = static_cast<const AuditReport&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.audit.AuditReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(
      from._internal_entries());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_internal_mutable_related_reports()->MergeFrom(from._internal_related_reports());
  if (!from._internal_report_id().empty()) {
    _this->_internal_set_report_id(from._internal_report_id());
  }
  if (!from._internal_generated_by().empty()) {
    _this->_internal_set_generated_by(from._internal_generated_by());
  }
  if (!from._internal_generated_at().empty()) {
    _this->_internal_set_generated_at(from._internal_generated_at());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.statistics_ != nullptr);
    if (_this->_impl_.statistics_ == nullptr) {
      _this->_impl_.statistics_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::audit::AuditLogStats>(arena, *from._impl_.statistics_);
    } else {
      _this->_impl_.statistics_->MergeFrom(*from._impl_.statistics_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuditReport::CopyFrom(const AuditReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.audit.AuditReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuditReport::InternalSwap(AuditReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.related_reports_.InternalSwap(&other->_impl_.related_reports_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.report_id_, &other->_impl_.report_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generated_by_, &other->_impl_.generated_by_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generated_at_, &other->_impl_.generated_at_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_, &other->_impl_.summary_, arena);
  swap(_impl_.statistics_, other->_impl_.statistics_);
}

::google::protobuf::Metadata AuditReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace audit
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_audit_5flogging_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
