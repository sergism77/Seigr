// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: access_policies.proto
// Protobuf C++ Version: 5.29.2

#include "access_policies.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seigr {
namespace access_policies {
              template <typename>
PROTOBUF_CONSTEXPR PolicyEscalation_MetadataEntry_DoNotUse::PolicyEscalation_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyEscalation_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyEscalation_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyEscalation_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEscalation_MetadataEntry_DoNotUseDefaultTypeInternal _PolicyEscalation_MetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyCheckResponse_DecisionMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyCheckResponse_DecisionMetadataEntry_DoNotUseDefaultTypeInternal _PolicyCheckResponse_DecisionMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PolicyCheckResponse_AuditMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyCheckResponse_AuditMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyCheckResponse_AuditMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyCheckResponse_AuditMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyCheckResponse_AuditMetadataEntry_DoNotUseDefaultTypeInternal _PolicyCheckResponse_AuditMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyCheckRequest_ContextEntry_DoNotUse::PolicyCheckRequest_ContextEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyCheckRequest_ContextEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyCheckRequest_ContextEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyCheckRequest_ContextEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyCheckRequest_ContextEntry_DoNotUseDefaultTypeInternal _PolicyCheckRequest_ContextEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AccessPolicySet_MetadataEntry_DoNotUse::AccessPolicySet_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AccessPolicySet_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AccessPolicySet_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccessPolicySet_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessPolicySet_MetadataEntry_DoNotUseDefaultTypeInternal _AccessPolicySet_MetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AccessLifecyclePolicy_MetadataEntry_DoNotUse::AccessLifecyclePolicy_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AccessLifecyclePolicy_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AccessLifecyclePolicy_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccessLifecyclePolicy_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessLifecyclePolicy_MetadataEntry_DoNotUseDefaultTypeInternal _AccessLifecyclePolicy_MetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AccessLifecyclePolicy_ConditionsEntry_DoNotUse::AccessLifecyclePolicy_ConditionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : AccessLifecyclePolicy_ConditionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : AccessLifecyclePolicy_ConditionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AccessLifecyclePolicy_ConditionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessLifecyclePolicy_ConditionsEntry_DoNotUseDefaultTypeInternal _AccessLifecyclePolicy_ConditionsEntry_DoNotUse_default_instance_;

inline constexpr PolicyEscalation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metadata_{},
        escalation_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        original_policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        triggered_by_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        new_policy_status_{static_cast< ::seigr::access_control::PolicyStatus >(0)},
        auto_resolved_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyEscalation::PolicyEscalation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyEscalationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEscalationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEscalationDefaultTypeInternal() {}
  union {
    PolicyEscalation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEscalationDefaultTypeInternal _PolicyEscalation_default_instance_;

inline constexpr PolicyCheckResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : permitted_actions_{},
        _permitted_actions_cached_byte_size_{0},
        audit_metadata_{},
        decision_metadata_{},
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        denial_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalation_suggestion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        decision_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        evaluator_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_status_{static_cast< ::seigr::access_control::PolicyStatus >(0)},
        is_action_allowed_{false},
        emergency_override_used_{false},
        compliance_score_{0},
        risk_score_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyCheckResponse::PolicyCheckResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyCheckResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyCheckResponseDefaultTypeInternal() {}
  union {
    PolicyCheckResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyCheckResponseDefaultTypeInternal _PolicyCheckResponse_default_instance_;

inline constexpr PolicyCheckRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : context_{},
        requested_actions_{},
        _requested_actions_cached_byte_size_{0},
        requester_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resource_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        network_condition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        correlation_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_{static_cast< ::seigr::access_policies::ActionType >(0)},
        emergency_override_flag_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyCheckRequest::PolicyCheckRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyCheckRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyCheckRequestDefaultTypeInternal() {}
  union {
    PolicyCheckRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyCheckRequestDefaultTypeInternal _PolicyCheckRequest_default_instance_;

inline constexpr AccessLifecyclePolicy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : conditions_{},
        metadata_{},
        lifecycle_policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        associated_policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        end_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        review_interval_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auto_renew_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccessLifecyclePolicy::AccessLifecyclePolicy(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccessLifecyclePolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessLifecyclePolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessLifecyclePolicyDefaultTypeInternal() {}
  union {
    AccessLifecyclePolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessLifecyclePolicyDefaultTypeInternal _AccessLifecyclePolicy_default_instance_;

inline constexpr AccessPolicySet::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : policies_{},
        inherited_set_ids_{},
        metadata_{},
        set_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_reviewed_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        max_inheritance_depth_{0},
        conditional_inheritance_enabled_{false},
        enforced_globally_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccessPolicySet::AccessPolicySet(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccessPolicySetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessPolicySetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessPolicySetDefaultTypeInternal() {}
  union {
    AccessPolicySet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessPolicySetDefaultTypeInternal _AccessPolicySet_default_instance_;
}  // namespace access_policies
}  // namespace seigr
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_access_5fpolicies_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_access_5fpolicies_2eproto = nullptr;
const ::uint32_t
    TableStruct_access_5fpolicies_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.set_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.policies_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.inherited_set_ids_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.max_inheritance_depth_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.last_reviewed_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.conditional_inheritance_enabled_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessPolicySet, _impl_.enforced_globally_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.requester_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.resource_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.context_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.requested_actions_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.ip_address_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.device_info_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.request_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.network_condition_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.emergency_override_flag_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.session_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckRequest, _impl_.correlation_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.is_action_allowed_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.policy_status_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.denial_reason_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.permitted_actions_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.audit_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.compliance_score_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.risk_score_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.escalation_suggestion_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.decision_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.emergency_override_used_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.evaluator_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyCheckResponse, _impl_.decision_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.escalation_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.original_policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.triggered_by_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.escalation_reason_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.escalation_path_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.new_policy_status_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.escalation_timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::PolicyEscalation, _impl_.auto_resolved_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.lifecycle_policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.associated_policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.auto_renew_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.conditions_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.review_interval_),
        PROTOBUF_FIELD_OFFSET(::seigr::access_policies::AccessLifecyclePolicy, _impl_.metadata_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse)},
        {12, -1, -1, sizeof(::seigr::access_policies::AccessPolicySet)},
        {30, 40, -1, sizeof(::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse)},
        {42, -1, -1, sizeof(::seigr::access_policies::PolicyCheckRequest)},
        {63, 73, -1, sizeof(::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse)},
        {75, 85, -1, sizeof(::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse)},
        {87, -1, -1, sizeof(::seigr::access_policies::PolicyCheckResponse)},
        {108, 118, -1, sizeof(::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse)},
        {120, -1, -1, sizeof(::seigr::access_policies::PolicyEscalation)},
        {137, 147, -1, sizeof(::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse)},
        {149, 159, -1, sizeof(::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse)},
        {161, -1, -1, sizeof(::seigr::access_policies::AccessLifecyclePolicy)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::seigr::access_policies::_AccessPolicySet_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_AccessPolicySet_default_instance_._instance,
    &::seigr::access_policies::_PolicyCheckRequest_ContextEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_PolicyCheckRequest_default_instance_._instance,
    &::seigr::access_policies::_PolicyCheckResponse_AuditMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_PolicyCheckResponse_DecisionMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_PolicyCheckResponse_default_instance_._instance,
    &::seigr::access_policies::_PolicyEscalation_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_PolicyEscalation_default_instance_._instance,
    &::seigr::access_policies::_AccessLifecyclePolicy_ConditionsEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_AccessLifecyclePolicy_MetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::access_policies::_AccessLifecyclePolicy_default_instance_._instance,
};
const char descriptor_table_protodef_access_5fpolicies_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025access_policies.proto\022\025seigr.access_po"
    "licies\032\024access_control.proto\"\204\003\n\017AccessP"
    "olicySet\022\016\n\006set_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\0224"
    "\n\010policies\030\003 \003(\0132\".seigr.access_control."
    "AccessPolicy\022\031\n\021inherited_set_ids\030\004 \003(\t\022"
    "\035\n\025max_inheritance_depth\030\005 \001(\005\022\017\n\007versio"
    "n\030\006 \001(\t\022\025\n\rlast_reviewed\030\007 \001(\t\022F\n\010metada"
    "ta\030\010 \003(\01324.seigr.access_policies.AccessP"
    "olicySet.MetadataEntry\022\'\n\037conditional_in"
    "heritance_enabled\030\t \001(\010\022\031\n\021enforced_glob"
    "ally\030\n \001(\010\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\t:\0028\001\"\350\003\n\022PolicyCheckReque"
    "st\022\024\n\014requester_id\030\001 \001(\t\022\021\n\tpolicy_id\030\002 "
    "\001(\t\0221\n\006action\030\003 \001(\0162!.seigr.access_polic"
    "ies.ActionType\022\023\n\013resource_id\030\004 \001(\t\022G\n\007c"
    "ontext\030\005 \003(\01326.seigr.access_policies.Pol"
    "icyCheckRequest.ContextEntry\022<\n\021requeste"
    "d_actions\030\006 \003(\0162!.seigr.access_policies."
    "ActionType\022\022\n\nip_address\030\007 \001(\t\022\023\n\013device"
    "_info\030\010 \001(\t\022\031\n\021request_timestamp\030\t \001(\t\022\031"
    "\n\021network_condition\030\n \001(\t\022\037\n\027emergency_o"
    "verride_flag\030\013 \001(\010\022\022\n\nsession_id\030\014 \001(\t\022\026"
    "\n\016correlation_id\030\r \001(\t\032.\n\014ContextEntry\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\226\005\n\023Polic"
    "yCheckResponse\022\031\n\021is_action_allowed\030\001 \001("
    "\010\022\021\n\tpolicy_id\030\002 \001(\t\0229\n\rpolicy_status\030\003 "
    "\001(\0162\".seigr.access_control.PolicyStatus\022"
    "\025\n\rdenial_reason\030\004 \001(\t\022<\n\021permitted_acti"
    "ons\030\005 \003(\0162!.seigr.access_policies.Action"
    "Type\022U\n\016audit_metadata\030\006 \003(\0132=.seigr.acc"
    "ess_policies.PolicyCheckResponse.AuditMe"
    "tadataEntry\022\030\n\020compliance_score\030\007 \001(\001\022\022\n"
    "\nrisk_score\030\010 \001(\001\022\035\n\025escalation_suggesti"
    "on\030\t \001(\t\022\032\n\022decision_timestamp\030\n \001(\t\022\037\n\027"
    "emergency_override_used\030\013 \001(\010\022\024\n\014evaluat"
    "or_id\030\014 \001(\t\022[\n\021decision_metadata\030\r \003(\0132@"
    ".seigr.access_policies.PolicyCheckRespon"
    "se.DecisionMetadataEntry\0324\n\022AuditMetadat"
    "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0327"
    "\n\025DecisionMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
    "value\030\002 \001(\t:\0028\001\"\200\003\n\020PolicyEscalation\022\025\n\r"
    "escalation_id\030\001 \001(\t\022\032\n\022original_policy_i"
    "d\030\002 \001(\t\022\027\n\017triggered_by_id\030\003 \001(\t\022\031\n\021esca"
    "lation_reason\030\004 \001(\t\022\027\n\017escalation_path\030\005"
    " \001(\t\022=\n\021new_policy_status\030\006 \001(\0162\".seigr."
    "access_control.PolicyStatus\022\034\n\024escalatio"
    "n_timestamp\030\007 \001(\t\022G\n\010metadata\030\010 \003(\01325.se"
    "igr.access_policies.PolicyEscalation.Met"
    "adataEntry\022\025\n\rauto_resolved\030\t \001(\010\032/\n\rMet"
    "adataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"\251\003\n\025AccessLifecyclePolicy\022\033\n\023lifecycl"
    "e_policy_id\030\001 \001(\t\022\034\n\024associated_policy_i"
    "d\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\t\022\020\n\010end_time\030"
    "\004 \001(\t\022\022\n\nauto_renew\030\005 \001(\010\022P\n\nconditions\030"
    "\006 \003(\0132<.seigr.access_policies.AccessLife"
    "cyclePolicy.ConditionsEntry\022\027\n\017review_in"
    "terval\030\007 \001(\t\022L\n\010metadata\030\010 \003(\0132:.seigr.a"
    "ccess_policies.AccessLifecyclePolicy.Met"
    "adataEntry\0321\n\017ConditionsEntry\022\013\n\003key\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032/\n\rMetadataEntry\022\013"
    "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\374\002\n\nActio"
    "nType\022\031\n\025ACTION_TYPE_UNDEFINED\020\000\022\024\n\020ACTI"
    "ON_TYPE_READ\020\001\022\025\n\021ACTION_TYPE_WRITE\020\002\022\027\n"
    "\023ACTION_TYPE_EXECUTE\020\003\022\026\n\022ACTION_TYPE_DE"
    "LETE\020\004\022\025\n\021ACTION_TYPE_SHARE\020\005\022\030\n\024ACTION_"
    "TYPE_ROLLBACK\020\006\022\035\n\031ACTION_TYPE_MODIFY_PO"
    "LICY\020\007\022\025\n\021ACTION_TYPE_AUDIT\020\010\022\037\n\033ACTION_"
    "TYPE_OVERRIDE_POLICY\020\t\022 \n\034ACTION_TYPE_EM"
    "ERGENCY_ACCESS\020\n\022\030\n\024ACTION_TYPE_VALIDATE"
    "\020\013\022\031\n\025ACTION_TYPE_PROVISION\020\014\022\026\n\022ACTION_"
    "TYPE_REVOKE\020\rb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_access_5fpolicies_2eproto_deps[1] =
    {
        &::descriptor_table_access_5fcontrol_2eproto,
};
static ::absl::once_flag descriptor_table_access_5fpolicies_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_access_5fpolicies_2eproto = {
    false,
    false,
    2821,
    descriptor_table_protodef_access_5fpolicies_2eproto,
    "access_policies.proto",
    &descriptor_table_access_5fpolicies_2eproto_once,
    descriptor_table_access_5fpolicies_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_access_5fpolicies_2eproto::offsets,
    file_level_enum_descriptors_access_5fpolicies_2eproto,
    file_level_service_descriptors_access_5fpolicies_2eproto,
};
namespace seigr {
namespace access_policies {
const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_access_5fpolicies_2eproto);
  return file_level_enum_descriptors_access_5fpolicies_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ActionType_internal_data_[] = {
    917504u, 0u, };
bool ActionType_IsValid(int value) {
  return 0 <= value && value <= 13;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AccessPolicySet_MetadataEntry_DoNotUse::AccessPolicySet_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AccessPolicySet_MetadataEntry_DoNotUse::AccessPolicySet_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AccessPolicySet_MetadataEntry_DoNotUse::AccessPolicySet_MetadataEntry_DoNotUse() : SuperType() {}
              AccessPolicySet_MetadataEntry_DoNotUse::AccessPolicySet_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AccessPolicySet_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AccessPolicySet_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto AccessPolicySet_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccessPolicySet_MetadataEntry_DoNotUse),
                                                          alignof(AccessPolicySet_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AccessPolicySet_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AccessPolicySet_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AccessPolicySet_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AccessPolicySet_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AccessPolicySet_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AccessPolicySet_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AccessPolicySet_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AccessPolicySet_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 68, 2> AccessPolicySet_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::AccessPolicySet_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\63\3\5\0\0\0\0\0"
    "seigr.access_policies.AccessPolicySet.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AccessPolicySet::_Internal {
 public:
};

void AccessPolicySet::clear_policies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policies_.Clear();
}
AccessPolicySet::AccessPolicySet(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.access_policies.AccessPolicySet)
}
inline PROTOBUF_NDEBUG_INLINE AccessPolicySet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::access_policies::AccessPolicySet& from_msg)
      : policies_{visibility, arena, from.policies_},
        inherited_set_ids_{visibility, arena, from.inherited_set_ids_},
        metadata_{visibility, arena, from.metadata_},
        set_id_(arena, from.set_id_),
        name_(arena, from.name_),
        version_(arena, from.version_),
        last_reviewed_(arena, from.last_reviewed_),
        _cached_size_{0} {}

AccessPolicySet::AccessPolicySet(
    ::google::protobuf::Arena* arena,
    const AccessPolicySet& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccessPolicySet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_inheritance_depth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, max_inheritance_depth_),
           offsetof(Impl_, enforced_globally_) -
               offsetof(Impl_, max_inheritance_depth_) +
               sizeof(Impl_::enforced_globally_));

  // @@protoc_insertion_point(copy_constructor:seigr.access_policies.AccessPolicySet)
}
inline PROTOBUF_NDEBUG_INLINE AccessPolicySet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : policies_{visibility, arena},
        inherited_set_ids_{visibility, arena},
        metadata_{visibility, arena},
        set_id_(arena),
        name_(arena),
        version_(arena),
        last_reviewed_(arena),
        _cached_size_{0} {}

inline void AccessPolicySet::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_inheritance_depth_),
           0,
           offsetof(Impl_, enforced_globally_) -
               offsetof(Impl_, max_inheritance_depth_) +
               sizeof(Impl_::enforced_globally_));
}
AccessPolicySet::~AccessPolicySet() {
  // @@protoc_insertion_point(destructor:seigr.access_policies.AccessPolicySet)
  SharedDtor(*this);
}
inline void AccessPolicySet::SharedDtor(MessageLite& self) {
  AccessPolicySet& this_ = static_cast<AccessPolicySet&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.set_id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.version_.Destroy();
  this_._impl_.last_reviewed_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AccessPolicySet::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AccessPolicySet(arena);
}
constexpr auto AccessPolicySet::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.policies_) +
          decltype(AccessPolicySet::_impl_.policies_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.inherited_set_ids_) +
          decltype(AccessPolicySet::_impl_.inherited_set_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.metadata_) +
          decltype(AccessPolicySet::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.metadata_) +
          decltype(AccessPolicySet::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AccessPolicySet), alignof(AccessPolicySet), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AccessPolicySet::PlacementNew_,
                                 sizeof(AccessPolicySet),
                                 alignof(AccessPolicySet));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AccessPolicySet::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AccessPolicySet_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AccessPolicySet::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AccessPolicySet>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AccessPolicySet::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AccessPolicySet>(), &AccessPolicySet::ByteSizeLong,
            &AccessPolicySet::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_._cached_size_),
        false,
    },
    &AccessPolicySet::kDescriptorMethods,
    &descriptor_table_access_5fpolicies_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AccessPolicySet::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 109, 2> AccessPolicySet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::AccessPolicySet>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string set_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.set_id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.name_)}},
    // repeated .seigr.access_control.AccessPolicy policies = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.policies_)}},
    // repeated string inherited_set_ids = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.inherited_set_ids_)}},
    // int32 max_inheritance_depth = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccessPolicySet, _impl_.max_inheritance_depth_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.max_inheritance_depth_)}},
    // string version = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.version_)}},
    // string last_reviewed = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.last_reviewed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool conditional_inheritance_enabled = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccessPolicySet, _impl_.conditional_inheritance_enabled_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.conditional_inheritance_enabled_)}},
    // bool enforced_globally = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccessPolicySet, _impl_.enforced_globally_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.enforced_globally_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string set_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.set_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.access_control.AccessPolicy policies = 3;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.policies_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string inherited_set_ids = 4;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.inherited_set_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 max_inheritance_depth = 5;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.max_inheritance_depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string version = 6;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string last_reviewed = 7;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.last_reviewed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 8;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool conditional_inheritance_enabled = 9;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.conditional_inheritance_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool enforced_globally = 10;
    {PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.enforced_globally_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::access_control::AccessPolicy>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AccessPolicySet()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\45\6\4\0\21\0\7\15\10\0\0\0\0\0\0\0"
    "seigr.access_policies.AccessPolicySet"
    "set_id"
    "name"
    "inherited_set_ids"
    "version"
    "last_reviewed"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void AccessPolicySet::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.access_policies.AccessPolicySet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.policies_.Clear();
  _impl_.inherited_set_ids_.Clear();
  _impl_.metadata_.Clear();
  _impl_.set_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.last_reviewed_.ClearToEmpty();
  ::memset(&_impl_.max_inheritance_depth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enforced_globally_) -
      reinterpret_cast<char*>(&_impl_.max_inheritance_depth_)) + sizeof(_impl_.enforced_globally_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AccessPolicySet::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AccessPolicySet& this_ = static_cast<const AccessPolicySet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AccessPolicySet::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AccessPolicySet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.access_policies.AccessPolicySet)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string set_id = 1;
          if (!this_._internal_set_id().empty()) {
            const std::string& _s = this_._internal_set_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.set_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated .seigr.access_control.AccessPolicy policies = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_policies_size());
               i < n; i++) {
            const auto& repfield = this_._internal_policies().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string inherited_set_ids = 4;
          for (int i = 0, n = this_._internal_inherited_set_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_inherited_set_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.inherited_set_ids");
            target = stream->WriteString(4, s, target);
          }

          // int32 max_inheritance_depth = 5;
          if (this_._internal_max_inheritance_depth() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_max_inheritance_depth(), target);
          }

          // string version = 6;
          if (!this_._internal_version().empty()) {
            const std::string& _s = this_._internal_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.version");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string last_reviewed = 7;
          if (!this_._internal_last_reviewed().empty()) {
            const std::string& _s = this_._internal_last_reviewed();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.last_reviewed");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> metadata = 8;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessPolicySet.metadata");
              }
            }
          }

          // bool conditional_inheritance_enabled = 9;
          if (this_._internal_conditional_inheritance_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_conditional_inheritance_enabled(), target);
          }

          // bool enforced_globally = 10;
          if (this_._internal_enforced_globally() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_enforced_globally(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.access_policies.AccessPolicySet)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AccessPolicySet::ByteSizeLong(const MessageLite& base) {
          const AccessPolicySet& this_ = static_cast<const AccessPolicySet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AccessPolicySet::ByteSizeLong() const {
          const AccessPolicySet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.access_policies.AccessPolicySet)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.access_control.AccessPolicy policies = 3;
            {
              total_size += 1UL * this_._internal_policies_size();
              for (const auto& msg : this_._internal_policies()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string inherited_set_ids = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_inherited_set_ids().size());
              for (int i = 0, n = this_._internal_inherited_set_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_inherited_set_ids().Get(i));
              }
            }
            // map<string, string> metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string set_id = 1;
            if (!this_._internal_set_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_set_id());
            }
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string version = 6;
            if (!this_._internal_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_version());
            }
            // string last_reviewed = 7;
            if (!this_._internal_last_reviewed().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_reviewed());
            }
            // int32 max_inheritance_depth = 5;
            if (this_._internal_max_inheritance_depth() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_inheritance_depth());
            }
            // bool conditional_inheritance_enabled = 9;
            if (this_._internal_conditional_inheritance_enabled() != 0) {
              total_size += 2;
            }
            // bool enforced_globally = 10;
            if (this_._internal_enforced_globally() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AccessPolicySet::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccessPolicySet*>(&to_msg);
  auto& from = static_cast<const AccessPolicySet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.access_policies.AccessPolicySet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_policies()->MergeFrom(
      from._internal_policies());
  _this->_internal_mutable_inherited_set_ids()->MergeFrom(from._internal_inherited_set_ids());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_set_id().empty()) {
    _this->_internal_set_set_id(from._internal_set_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_last_reviewed().empty()) {
    _this->_internal_set_last_reviewed(from._internal_last_reviewed());
  }
  if (from._internal_max_inheritance_depth() != 0) {
    _this->_impl_.max_inheritance_depth_ = from._impl_.max_inheritance_depth_;
  }
  if (from._internal_conditional_inheritance_enabled() != 0) {
    _this->_impl_.conditional_inheritance_enabled_ = from._impl_.conditional_inheritance_enabled_;
  }
  if (from._internal_enforced_globally() != 0) {
    _this->_impl_.enforced_globally_ = from._impl_.enforced_globally_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccessPolicySet::CopyFrom(const AccessPolicySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.access_policies.AccessPolicySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccessPolicySet::InternalSwap(AccessPolicySet* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.policies_.InternalSwap(&other->_impl_.policies_);
  _impl_.inherited_set_ids_.InternalSwap(&other->_impl_.inherited_set_ids_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.set_id_, &other->_impl_.set_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_reviewed_, &other->_impl_.last_reviewed_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.enforced_globally_)
      + sizeof(AccessPolicySet::_impl_.enforced_globally_)
      - PROTOBUF_FIELD_OFFSET(AccessPolicySet, _impl_.max_inheritance_depth_)>(
          reinterpret_cast<char*>(&_impl_.max_inheritance_depth_),
          reinterpret_cast<char*>(&other->_impl_.max_inheritance_depth_));
}

::google::protobuf::Metadata AccessPolicySet::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyCheckRequest_ContextEntry_DoNotUse::PolicyCheckRequest_ContextEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyCheckRequest_ContextEntry_DoNotUse::PolicyCheckRequest_ContextEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyCheckRequest_ContextEntry_DoNotUse::PolicyCheckRequest_ContextEntry_DoNotUse() : SuperType() {}
              PolicyCheckRequest_ContextEntry_DoNotUse::PolicyCheckRequest_ContextEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyCheckRequest_ContextEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyCheckRequest_ContextEntry_DoNotUse(arena);
              }
              constexpr auto PolicyCheckRequest_ContextEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyCheckRequest_ContextEntry_DoNotUse),
                                                          alignof(PolicyCheckRequest_ContextEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyCheckRequest_ContextEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyCheckRequest_ContextEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyCheckRequest_ContextEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyCheckRequest_ContextEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyCheckRequest_ContextEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyCheckRequest_ContextEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyCheckRequest_ContextEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyCheckRequest_ContextEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 70, 2> PolicyCheckRequest_ContextEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyCheckRequest_ContextEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest_ContextEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\3\5\0\0\0\0\0"
    "seigr.access_policies.PolicyCheckRequest.ContextEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyCheckRequest::_Internal {
 public:
};

PolicyCheckRequest::PolicyCheckRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.access_policies.PolicyCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::access_policies::PolicyCheckRequest& from_msg)
      : context_{visibility, arena, from.context_},
        requested_actions_{visibility, arena, from.requested_actions_},
        _requested_actions_cached_byte_size_{0},
        requester_id_(arena, from.requester_id_),
        policy_id_(arena, from.policy_id_),
        resource_id_(arena, from.resource_id_),
        ip_address_(arena, from.ip_address_),
        device_info_(arena, from.device_info_),
        request_timestamp_(arena, from.request_timestamp_),
        network_condition_(arena, from.network_condition_),
        session_id_(arena, from.session_id_),
        correlation_id_(arena, from.correlation_id_),
        _cached_size_{0} {}

PolicyCheckRequest::PolicyCheckRequest(
    ::google::protobuf::Arena* arena,
    const PolicyCheckRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyCheckRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, action_),
           offsetof(Impl_, emergency_override_flag_) -
               offsetof(Impl_, action_) +
               sizeof(Impl_::emergency_override_flag_));

  // @@protoc_insertion_point(copy_constructor:seigr.access_policies.PolicyCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : context_{visibility, arena},
        requested_actions_{visibility, arena},
        _requested_actions_cached_byte_size_{0},
        requester_id_(arena),
        policy_id_(arena),
        resource_id_(arena),
        ip_address_(arena),
        device_info_(arena),
        request_timestamp_(arena),
        network_condition_(arena),
        session_id_(arena),
        correlation_id_(arena),
        _cached_size_{0} {}

inline void PolicyCheckRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_),
           0,
           offsetof(Impl_, emergency_override_flag_) -
               offsetof(Impl_, action_) +
               sizeof(Impl_::emergency_override_flag_));
}
PolicyCheckRequest::~PolicyCheckRequest() {
  // @@protoc_insertion_point(destructor:seigr.access_policies.PolicyCheckRequest)
  SharedDtor(*this);
}
inline void PolicyCheckRequest::SharedDtor(MessageLite& self) {
  PolicyCheckRequest& this_ = static_cast<PolicyCheckRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.requester_id_.Destroy();
  this_._impl_.policy_id_.Destroy();
  this_._impl_.resource_id_.Destroy();
  this_._impl_.ip_address_.Destroy();
  this_._impl_.device_info_.Destroy();
  this_._impl_.request_timestamp_.Destroy();
  this_._impl_.network_condition_.Destroy();
  this_._impl_.session_id_.Destroy();
  this_._impl_.correlation_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyCheckRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyCheckRequest(arena);
}
constexpr auto PolicyCheckRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.context_) +
          decltype(PolicyCheckRequest::_impl_.context_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.context_) +
          decltype(PolicyCheckRequest::_impl_.context_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.requested_actions_) +
          decltype(PolicyCheckRequest::_impl_.requested_actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyCheckRequest), alignof(PolicyCheckRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyCheckRequest::PlacementNew_,
                                 sizeof(PolicyCheckRequest),
                                 alignof(PolicyCheckRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyCheckRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyCheckRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyCheckRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyCheckRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyCheckRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyCheckRequest>(), &PolicyCheckRequest::ByteSizeLong,
            &PolicyCheckRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_._cached_size_),
        false,
    },
    &PolicyCheckRequest::kDescriptorMethods,
    &descriptor_table_access_5fpolicies_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyCheckRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 1, 175, 2> PolicyCheckRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyCheckRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string requester_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.requester_id_)}},
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.policy_id_)}},
    // .seigr.access_policies.ActionType action = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PolicyCheckRequest, _impl_.action_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.action_)}},
    // string resource_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.resource_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .seigr.access_policies.ActionType requested_actions = 6;
    {::_pbi::TcParser::FastV32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.requested_actions_)}},
    // string ip_address = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.ip_address_)}},
    // string device_info = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.device_info_)}},
    // string request_timestamp = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.request_timestamp_)}},
    // string network_condition = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.network_condition_)}},
    // bool emergency_override_flag = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyCheckRequest, _impl_.emergency_override_flag_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.emergency_override_flag_)}},
    // string session_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.session_id_)}},
    // string correlation_id = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.correlation_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string requester_id = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.requester_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.access_policies.ActionType action = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string resource_id = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.resource_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> context = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.context_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .seigr.access_policies.ActionType requested_actions = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.requested_actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // string ip_address = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.ip_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_info = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.device_info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string request_timestamp = 9;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.request_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string network_condition = 10;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.network_condition_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool emergency_override_flag = 11;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.emergency_override_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string session_id = 12;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string correlation_id = 13;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.correlation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyCheckRequest()._impl_.context_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\50\14\11\0\13\7\0\12\13\21\21\0\12\16\0\0"
    "seigr.access_policies.PolicyCheckRequest"
    "requester_id"
    "policy_id"
    "resource_id"
    "context"
    "ip_address"
    "device_info"
    "request_timestamp"
    "network_condition"
    "session_id"
    "correlation_id"
  }},
};

PROTOBUF_NOINLINE void PolicyCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.access_policies.PolicyCheckRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_.Clear();
  _impl_.requested_actions_.Clear();
  _impl_.requester_id_.ClearToEmpty();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.resource_id_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.device_info_.ClearToEmpty();
  _impl_.request_timestamp_.ClearToEmpty();
  _impl_.network_condition_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.correlation_id_.ClearToEmpty();
  ::memset(&_impl_.action_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.emergency_override_flag_) -
      reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.emergency_override_flag_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyCheckRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyCheckRequest& this_ = static_cast<const PolicyCheckRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyCheckRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyCheckRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.access_policies.PolicyCheckRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string requester_id = 1;
          if (!this_._internal_requester_id().empty()) {
            const std::string& _s = this_._internal_requester_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.requester_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .seigr.access_policies.ActionType action = 3;
          if (this_._internal_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_action(), target);
          }

          // string resource_id = 4;
          if (!this_._internal_resource_id().empty()) {
            const std::string& _s = this_._internal_resource_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.resource_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // map<string, string> context = 5;
          if (!this_._internal_context().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_context();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.context");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.context");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    5, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.context");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.context");
              }
            }
          }

          // repeated .seigr.access_policies.ActionType requested_actions = 6;
          {
            std::size_t byte_size =
                                              this_._impl_._requested_actions_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  6, this_._internal_requested_actions(), byte_size, target);
            }
          }

          // string ip_address = 7;
          if (!this_._internal_ip_address().empty()) {
            const std::string& _s = this_._internal_ip_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.ip_address");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string device_info = 8;
          if (!this_._internal_device_info().empty()) {
            const std::string& _s = this_._internal_device_info();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.device_info");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // string request_timestamp = 9;
          if (!this_._internal_request_timestamp().empty()) {
            const std::string& _s = this_._internal_request_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.request_timestamp");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string network_condition = 10;
          if (!this_._internal_network_condition().empty()) {
            const std::string& _s = this_._internal_network_condition();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.network_condition");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // bool emergency_override_flag = 11;
          if (this_._internal_emergency_override_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_emergency_override_flag(), target);
          }

          // string session_id = 12;
          if (!this_._internal_session_id().empty()) {
            const std::string& _s = this_._internal_session_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.session_id");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string correlation_id = 13;
          if (!this_._internal_correlation_id().empty()) {
            const std::string& _s = this_._internal_correlation_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckRequest.correlation_id");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.access_policies.PolicyCheckRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyCheckRequest::ByteSizeLong(const MessageLite& base) {
          const PolicyCheckRequest& this_ = static_cast<const PolicyCheckRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyCheckRequest::ByteSizeLong() const {
          const PolicyCheckRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.access_policies.PolicyCheckRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> context = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_context_size());
              for (const auto& entry : this_._internal_context()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .seigr.access_policies.ActionType requested_actions = 6;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_requested_actions(), 1, this_._impl_._requested_actions_cached_byte_size_);
            }
          }
           {
            // string requester_id = 1;
            if (!this_._internal_requester_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_requester_id());
            }
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string resource_id = 4;
            if (!this_._internal_resource_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_resource_id());
            }
            // string ip_address = 7;
            if (!this_._internal_ip_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip_address());
            }
            // string device_info = 8;
            if (!this_._internal_device_info().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_info());
            }
            // string request_timestamp = 9;
            if (!this_._internal_request_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_request_timestamp());
            }
            // string network_condition = 10;
            if (!this_._internal_network_condition().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_network_condition());
            }
            // string session_id = 12;
            if (!this_._internal_session_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_session_id());
            }
            // string correlation_id = 13;
            if (!this_._internal_correlation_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_correlation_id());
            }
            // .seigr.access_policies.ActionType action = 3;
            if (this_._internal_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_action());
            }
            // bool emergency_override_flag = 11;
            if (this_._internal_emergency_override_flag() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyCheckRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyCheckRequest*>(&to_msg);
  auto& from = static_cast<const PolicyCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.access_policies.PolicyCheckRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.context_.MergeFrom(from._impl_.context_);
  _this->_internal_mutable_requested_actions()->MergeFrom(from._internal_requested_actions());
  if (!from._internal_requester_id().empty()) {
    _this->_internal_set_requester_id(from._internal_requester_id());
  }
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_resource_id().empty()) {
    _this->_internal_set_resource_id(from._internal_resource_id());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_device_info().empty()) {
    _this->_internal_set_device_info(from._internal_device_info());
  }
  if (!from._internal_request_timestamp().empty()) {
    _this->_internal_set_request_timestamp(from._internal_request_timestamp());
  }
  if (!from._internal_network_condition().empty()) {
    _this->_internal_set_network_condition(from._internal_network_condition());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_correlation_id().empty()) {
    _this->_internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_action() != 0) {
    _this->_impl_.action_ = from._impl_.action_;
  }
  if (from._internal_emergency_override_flag() != 0) {
    _this->_impl_.emergency_override_flag_ = from._impl_.emergency_override_flag_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyCheckRequest::CopyFrom(const PolicyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.access_policies.PolicyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyCheckRequest::InternalSwap(PolicyCheckRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.context_.InternalSwap(&other->_impl_.context_);
  _impl_.requested_actions_.InternalSwap(&other->_impl_.requested_actions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.requester_id_, &other->_impl_.requester_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resource_id_, &other->_impl_.resource_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_info_, &other->_impl_.device_info_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_timestamp_, &other->_impl_.request_timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_condition_, &other->_impl_.network_condition_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.correlation_id_, &other->_impl_.correlation_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.emergency_override_flag_)
      + sizeof(PolicyCheckRequest::_impl_.emergency_override_flag_)
      - PROTOBUF_FIELD_OFFSET(PolicyCheckRequest, _impl_.action_)>(
          reinterpret_cast<char*>(&_impl_.action_),
          reinterpret_cast<char*>(&other->_impl_.action_));
}

::google::protobuf::Metadata PolicyCheckRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PolicyCheckResponse_AuditMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PolicyCheckResponse_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PolicyCheckResponse_AuditMetadataEntry_DoNotUse() : SuperType() {}
              PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PolicyCheckResponse_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyCheckResponse_AuditMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyCheckResponse_AuditMetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyCheckResponse_AuditMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyCheckResponse_AuditMetadataEntry_DoNotUse),
                                                          alignof(PolicyCheckResponse_AuditMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyCheckResponse_AuditMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyCheckResponse_AuditMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyCheckResponse_AuditMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyCheckResponse_AuditMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyCheckResponse_AuditMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyCheckResponse_AuditMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyCheckResponse_AuditMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyCheckResponse_AuditMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 77, 2> PolicyCheckResponse_AuditMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyCheckResponse_AuditMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_AuditMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\74\3\5\0\0\0\0\0"
    "seigr.access_policies.PolicyCheckResponse.AuditMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse() : SuperType() {}
              PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyCheckResponse_DecisionMetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse),
                                                          alignof(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyCheckResponse_DecisionMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyCheckResponse_DecisionMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 80, 2> PolicyCheckResponse_DecisionMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyCheckResponse_DecisionMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse_DecisionMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\77\3\5\0\0\0\0\0"
    "seigr.access_policies.PolicyCheckResponse.DecisionMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyCheckResponse::_Internal {
 public:
};

PolicyCheckResponse::PolicyCheckResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.access_policies.PolicyCheckResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyCheckResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::access_policies::PolicyCheckResponse& from_msg)
      : permitted_actions_{visibility, arena, from.permitted_actions_},
        _permitted_actions_cached_byte_size_{0},
        audit_metadata_{visibility, arena, from.audit_metadata_},
        decision_metadata_{visibility, arena, from.decision_metadata_},
        policy_id_(arena, from.policy_id_),
        denial_reason_(arena, from.denial_reason_),
        escalation_suggestion_(arena, from.escalation_suggestion_),
        decision_timestamp_(arena, from.decision_timestamp_),
        evaluator_id_(arena, from.evaluator_id_),
        _cached_size_{0} {}

PolicyCheckResponse::PolicyCheckResponse(
    ::google::protobuf::Arena* arena,
    const PolicyCheckResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyCheckResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, policy_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, policy_status_),
           offsetof(Impl_, risk_score_) -
               offsetof(Impl_, policy_status_) +
               sizeof(Impl_::risk_score_));

  // @@protoc_insertion_point(copy_constructor:seigr.access_policies.PolicyCheckResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyCheckResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : permitted_actions_{visibility, arena},
        _permitted_actions_cached_byte_size_{0},
        audit_metadata_{visibility, arena},
        decision_metadata_{visibility, arena},
        policy_id_(arena),
        denial_reason_(arena),
        escalation_suggestion_(arena),
        decision_timestamp_(arena),
        evaluator_id_(arena),
        _cached_size_{0} {}

inline void PolicyCheckResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, policy_status_),
           0,
           offsetof(Impl_, risk_score_) -
               offsetof(Impl_, policy_status_) +
               sizeof(Impl_::risk_score_));
}
PolicyCheckResponse::~PolicyCheckResponse() {
  // @@protoc_insertion_point(destructor:seigr.access_policies.PolicyCheckResponse)
  SharedDtor(*this);
}
inline void PolicyCheckResponse::SharedDtor(MessageLite& self) {
  PolicyCheckResponse& this_ = static_cast<PolicyCheckResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.policy_id_.Destroy();
  this_._impl_.denial_reason_.Destroy();
  this_._impl_.escalation_suggestion_.Destroy();
  this_._impl_.decision_timestamp_.Destroy();
  this_._impl_.evaluator_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyCheckResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyCheckResponse(arena);
}
constexpr auto PolicyCheckResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.permitted_actions_) +
          decltype(PolicyCheckResponse::_impl_.permitted_actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.audit_metadata_) +
          decltype(PolicyCheckResponse::_impl_.audit_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.audit_metadata_) +
          decltype(PolicyCheckResponse::_impl_.audit_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.decision_metadata_) +
          decltype(PolicyCheckResponse::_impl_.decision_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.decision_metadata_) +
          decltype(PolicyCheckResponse::_impl_.decision_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyCheckResponse), alignof(PolicyCheckResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyCheckResponse::PlacementNew_,
                                 sizeof(PolicyCheckResponse),
                                 alignof(PolicyCheckResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyCheckResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyCheckResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyCheckResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyCheckResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyCheckResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyCheckResponse>(), &PolicyCheckResponse::ByteSizeLong,
            &PolicyCheckResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_._cached_size_),
        false,
    },
    &PolicyCheckResponse::kDescriptorMethods,
    &descriptor_table_access_5fpolicies_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyCheckResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 2, 162, 2> PolicyCheckResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyCheckResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_action_allowed = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyCheckResponse, _impl_.is_action_allowed_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.is_action_allowed_)}},
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.policy_id_)}},
    // .seigr.access_control.PolicyStatus policy_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PolicyCheckResponse, _impl_.policy_status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.policy_status_)}},
    // string denial_reason = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.denial_reason_)}},
    // repeated .seigr.access_policies.ActionType permitted_actions = 5;
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.permitted_actions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // double compliance_score = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.compliance_score_)}},
    // double risk_score = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.risk_score_)}},
    // string escalation_suggestion = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.escalation_suggestion_)}},
    // string decision_timestamp = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.decision_timestamp_)}},
    // bool emergency_override_used = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyCheckResponse, _impl_.emergency_override_used_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.emergency_override_used_)}},
    // string evaluator_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.evaluator_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_action_allowed = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.is_action_allowed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.access_control.PolicyStatus policy_status = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.policy_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string denial_reason = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.denial_reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.access_policies.ActionType permitted_actions = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.permitted_actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // map<string, string> audit_metadata = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.audit_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // double compliance_score = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.compliance_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double risk_score = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.risk_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string escalation_suggestion = 9;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.escalation_suggestion_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string decision_timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.decision_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool emergency_override_used = 11;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.emergency_override_used_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string evaluator_id = 12;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.evaluator_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> decision_metadata = 13;
    {PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.decision_metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyCheckResponse()._impl_.audit_metadata_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyCheckResponse()._impl_.decision_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\51\0\11\0\15\0\16\0\0\25\22\0\14\21\0\0"
    "seigr.access_policies.PolicyCheckResponse"
    "policy_id"
    "denial_reason"
    "audit_metadata"
    "escalation_suggestion"
    "decision_timestamp"
    "evaluator_id"
    "decision_metadata"
  }},
};

PROTOBUF_NOINLINE void PolicyCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.access_policies.PolicyCheckResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.permitted_actions_.Clear();
  _impl_.audit_metadata_.Clear();
  _impl_.decision_metadata_.Clear();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.denial_reason_.ClearToEmpty();
  _impl_.escalation_suggestion_.ClearToEmpty();
  _impl_.decision_timestamp_.ClearToEmpty();
  _impl_.evaluator_id_.ClearToEmpty();
  ::memset(&_impl_.policy_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.risk_score_) -
      reinterpret_cast<char*>(&_impl_.policy_status_)) + sizeof(_impl_.risk_score_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyCheckResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyCheckResponse& this_ = static_cast<const PolicyCheckResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyCheckResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyCheckResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.access_policies.PolicyCheckResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_action_allowed = 1;
          if (this_._internal_is_action_allowed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_action_allowed(), target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .seigr.access_control.PolicyStatus policy_status = 3;
          if (this_._internal_policy_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_policy_status(), target);
          }

          // string denial_reason = 4;
          if (!this_._internal_denial_reason().empty()) {
            const std::string& _s = this_._internal_denial_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.denial_reason");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated .seigr.access_policies.ActionType permitted_actions = 5;
          {
            std::size_t byte_size =
                                              this_._impl_._permitted_actions_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  5, this_._internal_permitted_actions(), byte_size, target);
            }
          }

          // map<string, string> audit_metadata = 6;
          if (!this_._internal_audit_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_audit_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.audit_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.audit_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.audit_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.audit_metadata");
              }
            }
          }

          // double compliance_score = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_compliance_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_compliance_score(), target);
          }

          // double risk_score = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_risk_score()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_risk_score(), target);
          }

          // string escalation_suggestion = 9;
          if (!this_._internal_escalation_suggestion().empty()) {
            const std::string& _s = this_._internal_escalation_suggestion();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.escalation_suggestion");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string decision_timestamp = 10;
          if (!this_._internal_decision_timestamp().empty()) {
            const std::string& _s = this_._internal_decision_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.decision_timestamp");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // bool emergency_override_used = 11;
          if (this_._internal_emergency_override_used() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_emergency_override_used(), target);
          }

          // string evaluator_id = 12;
          if (!this_._internal_evaluator_id().empty()) {
            const std::string& _s = this_._internal_evaluator_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.evaluator_id");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // map<string, string> decision_metadata = 13;
          if (!this_._internal_decision_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_decision_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.decision_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.decision_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    13, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.decision_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyCheckResponse.decision_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.access_policies.PolicyCheckResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyCheckResponse::ByteSizeLong(const MessageLite& base) {
          const PolicyCheckResponse& this_ = static_cast<const PolicyCheckResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyCheckResponse::ByteSizeLong() const {
          const PolicyCheckResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.access_policies.PolicyCheckResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.access_policies.ActionType permitted_actions = 5;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_permitted_actions(), 1, this_._impl_._permitted_actions_cached_byte_size_);
            }
            // map<string, string> audit_metadata = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_audit_metadata_size());
              for (const auto& entry : this_._internal_audit_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> decision_metadata = 13;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_decision_metadata_size());
              for (const auto& entry : this_._internal_decision_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string denial_reason = 4;
            if (!this_._internal_denial_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_denial_reason());
            }
            // string escalation_suggestion = 9;
            if (!this_._internal_escalation_suggestion().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_suggestion());
            }
            // string decision_timestamp = 10;
            if (!this_._internal_decision_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_decision_timestamp());
            }
            // string evaluator_id = 12;
            if (!this_._internal_evaluator_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_evaluator_id());
            }
            // .seigr.access_control.PolicyStatus policy_status = 3;
            if (this_._internal_policy_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_policy_status());
            }
            // bool is_action_allowed = 1;
            if (this_._internal_is_action_allowed() != 0) {
              total_size += 2;
            }
            // bool emergency_override_used = 11;
            if (this_._internal_emergency_override_used() != 0) {
              total_size += 2;
            }
            // double compliance_score = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_compliance_score()) != 0) {
              total_size += 9;
            }
            // double risk_score = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_risk_score()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyCheckResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyCheckResponse*>(&to_msg);
  auto& from = static_cast<const PolicyCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.access_policies.PolicyCheckResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_permitted_actions()->MergeFrom(from._internal_permitted_actions());
  _this->_impl_.audit_metadata_.MergeFrom(from._impl_.audit_metadata_);
  _this->_impl_.decision_metadata_.MergeFrom(from._impl_.decision_metadata_);
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_denial_reason().empty()) {
    _this->_internal_set_denial_reason(from._internal_denial_reason());
  }
  if (!from._internal_escalation_suggestion().empty()) {
    _this->_internal_set_escalation_suggestion(from._internal_escalation_suggestion());
  }
  if (!from._internal_decision_timestamp().empty()) {
    _this->_internal_set_decision_timestamp(from._internal_decision_timestamp());
  }
  if (!from._internal_evaluator_id().empty()) {
    _this->_internal_set_evaluator_id(from._internal_evaluator_id());
  }
  if (from._internal_policy_status() != 0) {
    _this->_impl_.policy_status_ = from._impl_.policy_status_;
  }
  if (from._internal_is_action_allowed() != 0) {
    _this->_impl_.is_action_allowed_ = from._impl_.is_action_allowed_;
  }
  if (from._internal_emergency_override_used() != 0) {
    _this->_impl_.emergency_override_used_ = from._impl_.emergency_override_used_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_compliance_score()) != 0) {
    _this->_impl_.compliance_score_ = from._impl_.compliance_score_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_risk_score()) != 0) {
    _this->_impl_.risk_score_ = from._impl_.risk_score_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyCheckResponse::CopyFrom(const PolicyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.access_policies.PolicyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyCheckResponse::InternalSwap(PolicyCheckResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.permitted_actions_.InternalSwap(&other->_impl_.permitted_actions_);
  _impl_.audit_metadata_.InternalSwap(&other->_impl_.audit_metadata_);
  _impl_.decision_metadata_.InternalSwap(&other->_impl_.decision_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denial_reason_, &other->_impl_.denial_reason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_suggestion_, &other->_impl_.escalation_suggestion_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.decision_timestamp_, &other->_impl_.decision_timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evaluator_id_, &other->_impl_.evaluator_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.risk_score_)
      + sizeof(PolicyCheckResponse::_impl_.risk_score_)
      - PROTOBUF_FIELD_OFFSET(PolicyCheckResponse, _impl_.policy_status_)>(
          reinterpret_cast<char*>(&_impl_.policy_status_),
          reinterpret_cast<char*>(&other->_impl_.policy_status_));
}

::google::protobuf::Metadata PolicyCheckResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyEscalation_MetadataEntry_DoNotUse::PolicyEscalation_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyEscalation_MetadataEntry_DoNotUse::PolicyEscalation_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyEscalation_MetadataEntry_DoNotUse::PolicyEscalation_MetadataEntry_DoNotUse() : SuperType() {}
              PolicyEscalation_MetadataEntry_DoNotUse::PolicyEscalation_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyEscalation_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyEscalation_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyEscalation_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyEscalation_MetadataEntry_DoNotUse),
                                                          alignof(PolicyEscalation_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyEscalation_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyEscalation_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyEscalation_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyEscalation_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyEscalation_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyEscalation_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyEscalation_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyEscalation_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 69, 2> PolicyEscalation_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyEscalation_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\64\3\5\0\0\0\0\0"
    "seigr.access_policies.PolicyEscalation.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyEscalation::_Internal {
 public:
};

PolicyEscalation::PolicyEscalation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.access_policies.PolicyEscalation)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEscalation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::access_policies::PolicyEscalation& from_msg)
      : metadata_{visibility, arena, from.metadata_},
        escalation_id_(arena, from.escalation_id_),
        original_policy_id_(arena, from.original_policy_id_),
        triggered_by_id_(arena, from.triggered_by_id_),
        escalation_reason_(arena, from.escalation_reason_),
        escalation_path_(arena, from.escalation_path_),
        escalation_timestamp_(arena, from.escalation_timestamp_),
        _cached_size_{0} {}

PolicyEscalation::PolicyEscalation(
    ::google::protobuf::Arena* arena,
    const PolicyEscalation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyEscalation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, new_policy_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, new_policy_status_),
           offsetof(Impl_, auto_resolved_) -
               offsetof(Impl_, new_policy_status_) +
               sizeof(Impl_::auto_resolved_));

  // @@protoc_insertion_point(copy_constructor:seigr.access_policies.PolicyEscalation)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEscalation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metadata_{visibility, arena},
        escalation_id_(arena),
        original_policy_id_(arena),
        triggered_by_id_(arena),
        escalation_reason_(arena),
        escalation_path_(arena),
        escalation_timestamp_(arena),
        _cached_size_{0} {}

inline void PolicyEscalation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, new_policy_status_),
           0,
           offsetof(Impl_, auto_resolved_) -
               offsetof(Impl_, new_policy_status_) +
               sizeof(Impl_::auto_resolved_));
}
PolicyEscalation::~PolicyEscalation() {
  // @@protoc_insertion_point(destructor:seigr.access_policies.PolicyEscalation)
  SharedDtor(*this);
}
inline void PolicyEscalation::SharedDtor(MessageLite& self) {
  PolicyEscalation& this_ = static_cast<PolicyEscalation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.escalation_id_.Destroy();
  this_._impl_.original_policy_id_.Destroy();
  this_._impl_.triggered_by_id_.Destroy();
  this_._impl_.escalation_reason_.Destroy();
  this_._impl_.escalation_path_.Destroy();
  this_._impl_.escalation_timestamp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyEscalation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyEscalation(arena);
}
constexpr auto PolicyEscalation::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.metadata_) +
          decltype(PolicyEscalation::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.metadata_) +
          decltype(PolicyEscalation::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyEscalation), alignof(PolicyEscalation), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyEscalation::PlacementNew_,
                                 sizeof(PolicyEscalation),
                                 alignof(PolicyEscalation));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyEscalation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyEscalation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyEscalation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyEscalation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyEscalation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyEscalation>(), &PolicyEscalation::ByteSizeLong,
            &PolicyEscalation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_._cached_size_),
        false,
    },
    &PolicyEscalation::kDescriptorMethods,
    &descriptor_table_access_5fpolicies_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyEscalation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 161, 2> PolicyEscalation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::PolicyEscalation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string escalation_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_id_)}},
    // string original_policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.original_policy_id_)}},
    // string triggered_by_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.triggered_by_id_)}},
    // string escalation_reason = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_reason_)}},
    // string escalation_path = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_path_)}},
    // .seigr.access_control.PolicyStatus new_policy_status = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PolicyEscalation, _impl_.new_policy_status_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.new_policy_status_)}},
    // string escalation_timestamp = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool auto_resolved = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyEscalation, _impl_.auto_resolved_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.auto_resolved_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string escalation_id = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string original_policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.original_policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string triggered_by_id = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.triggered_by_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string escalation_reason = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string escalation_path = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.access_control.PolicyStatus new_policy_status = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.new_policy_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string escalation_timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.escalation_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool auto_resolved = 9;
    {PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.auto_resolved_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyEscalation()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\46\15\22\17\21\17\0\24\10\0\0\0\0\0\0\0"
    "seigr.access_policies.PolicyEscalation"
    "escalation_id"
    "original_policy_id"
    "triggered_by_id"
    "escalation_reason"
    "escalation_path"
    "escalation_timestamp"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void PolicyEscalation::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.access_policies.PolicyEscalation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.escalation_id_.ClearToEmpty();
  _impl_.original_policy_id_.ClearToEmpty();
  _impl_.triggered_by_id_.ClearToEmpty();
  _impl_.escalation_reason_.ClearToEmpty();
  _impl_.escalation_path_.ClearToEmpty();
  _impl_.escalation_timestamp_.ClearToEmpty();
  ::memset(&_impl_.new_policy_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.auto_resolved_) -
      reinterpret_cast<char*>(&_impl_.new_policy_status_)) + sizeof(_impl_.auto_resolved_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyEscalation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyEscalation& this_ = static_cast<const PolicyEscalation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyEscalation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyEscalation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.access_policies.PolicyEscalation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string escalation_id = 1;
          if (!this_._internal_escalation_id().empty()) {
            const std::string& _s = this_._internal_escalation_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.escalation_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string original_policy_id = 2;
          if (!this_._internal_original_policy_id().empty()) {
            const std::string& _s = this_._internal_original_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.original_policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string triggered_by_id = 3;
          if (!this_._internal_triggered_by_id().empty()) {
            const std::string& _s = this_._internal_triggered_by_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.triggered_by_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string escalation_reason = 4;
          if (!this_._internal_escalation_reason().empty()) {
            const std::string& _s = this_._internal_escalation_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.escalation_reason");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string escalation_path = 5;
          if (!this_._internal_escalation_path().empty()) {
            const std::string& _s = this_._internal_escalation_path();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.escalation_path");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .seigr.access_control.PolicyStatus new_policy_status = 6;
          if (this_._internal_new_policy_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_new_policy_status(), target);
          }

          // string escalation_timestamp = 7;
          if (!this_._internal_escalation_timestamp().empty()) {
            const std::string& _s = this_._internal_escalation_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.escalation_timestamp");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> metadata = 8;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.PolicyEscalation.metadata");
              }
            }
          }

          // bool auto_resolved = 9;
          if (this_._internal_auto_resolved() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_auto_resolved(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.access_policies.PolicyEscalation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyEscalation::ByteSizeLong(const MessageLite& base) {
          const PolicyEscalation& this_ = static_cast<const PolicyEscalation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyEscalation::ByteSizeLong() const {
          const PolicyEscalation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.access_policies.PolicyEscalation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string escalation_id = 1;
            if (!this_._internal_escalation_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_id());
            }
            // string original_policy_id = 2;
            if (!this_._internal_original_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_original_policy_id());
            }
            // string triggered_by_id = 3;
            if (!this_._internal_triggered_by_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_triggered_by_id());
            }
            // string escalation_reason = 4;
            if (!this_._internal_escalation_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_reason());
            }
            // string escalation_path = 5;
            if (!this_._internal_escalation_path().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_path());
            }
            // string escalation_timestamp = 7;
            if (!this_._internal_escalation_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalation_timestamp());
            }
            // .seigr.access_control.PolicyStatus new_policy_status = 6;
            if (this_._internal_new_policy_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_new_policy_status());
            }
            // bool auto_resolved = 9;
            if (this_._internal_auto_resolved() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyEscalation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyEscalation*>(&to_msg);
  auto& from = static_cast<const PolicyEscalation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.access_policies.PolicyEscalation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_escalation_id().empty()) {
    _this->_internal_set_escalation_id(from._internal_escalation_id());
  }
  if (!from._internal_original_policy_id().empty()) {
    _this->_internal_set_original_policy_id(from._internal_original_policy_id());
  }
  if (!from._internal_triggered_by_id().empty()) {
    _this->_internal_set_triggered_by_id(from._internal_triggered_by_id());
  }
  if (!from._internal_escalation_reason().empty()) {
    _this->_internal_set_escalation_reason(from._internal_escalation_reason());
  }
  if (!from._internal_escalation_path().empty()) {
    _this->_internal_set_escalation_path(from._internal_escalation_path());
  }
  if (!from._internal_escalation_timestamp().empty()) {
    _this->_internal_set_escalation_timestamp(from._internal_escalation_timestamp());
  }
  if (from._internal_new_policy_status() != 0) {
    _this->_impl_.new_policy_status_ = from._impl_.new_policy_status_;
  }
  if (from._internal_auto_resolved() != 0) {
    _this->_impl_.auto_resolved_ = from._impl_.auto_resolved_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyEscalation::CopyFrom(const PolicyEscalation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.access_policies.PolicyEscalation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyEscalation::InternalSwap(PolicyEscalation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_id_, &other->_impl_.escalation_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.original_policy_id_, &other->_impl_.original_policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.triggered_by_id_, &other->_impl_.triggered_by_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_reason_, &other->_impl_.escalation_reason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_path_, &other->_impl_.escalation_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalation_timestamp_, &other->_impl_.escalation_timestamp_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.auto_resolved_)
      + sizeof(PolicyEscalation::_impl_.auto_resolved_)
      - PROTOBUF_FIELD_OFFSET(PolicyEscalation, _impl_.new_policy_status_)>(
          reinterpret_cast<char*>(&_impl_.new_policy_status_),
          reinterpret_cast<char*>(&other->_impl_.new_policy_status_));
}

::google::protobuf::Metadata PolicyEscalation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AccessLifecyclePolicy_ConditionsEntry_DoNotUse::AccessLifecyclePolicy_ConditionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AccessLifecyclePolicy_ConditionsEntry_DoNotUse::AccessLifecyclePolicy_ConditionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AccessLifecyclePolicy_ConditionsEntry_DoNotUse::AccessLifecyclePolicy_ConditionsEntry_DoNotUse() : SuperType() {}
              AccessLifecyclePolicy_ConditionsEntry_DoNotUse::AccessLifecyclePolicy_ConditionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AccessLifecyclePolicy_ConditionsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AccessLifecyclePolicy_ConditionsEntry_DoNotUse(arena);
              }
              constexpr auto AccessLifecyclePolicy_ConditionsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccessLifecyclePolicy_ConditionsEntry_DoNotUse),
                                                          alignof(AccessLifecyclePolicy_ConditionsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AccessLifecyclePolicy_ConditionsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AccessLifecyclePolicy_ConditionsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AccessLifecyclePolicy_ConditionsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AccessLifecyclePolicy_ConditionsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AccessLifecyclePolicy_ConditionsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AccessLifecyclePolicy_ConditionsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AccessLifecyclePolicy_ConditionsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AccessLifecyclePolicy_ConditionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 76, 2> AccessLifecyclePolicy_ConditionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::AccessLifecyclePolicy_ConditionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_ConditionsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\73\3\5\0\0\0\0\0"
    "seigr.access_policies.AccessLifecyclePolicy.ConditionsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              AccessLifecyclePolicy_MetadataEntry_DoNotUse::AccessLifecyclePolicy_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              AccessLifecyclePolicy_MetadataEntry_DoNotUse::AccessLifecyclePolicy_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              AccessLifecyclePolicy_MetadataEntry_DoNotUse::AccessLifecyclePolicy_MetadataEntry_DoNotUse() : SuperType() {}
              AccessLifecyclePolicy_MetadataEntry_DoNotUse::AccessLifecyclePolicy_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* AccessLifecyclePolicy_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) AccessLifecyclePolicy_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto AccessLifecyclePolicy_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccessLifecyclePolicy_MetadataEntry_DoNotUse),
                                                          alignof(AccessLifecyclePolicy_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull AccessLifecyclePolicy_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_AccessLifecyclePolicy_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &AccessLifecyclePolicy_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<AccessLifecyclePolicy_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &AccessLifecyclePolicy_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &AccessLifecyclePolicy_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &AccessLifecyclePolicy_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_access_5fpolicies_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* AccessLifecyclePolicy_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 74, 2> AccessLifecyclePolicy_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::AccessLifecyclePolicy_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\3\5\0\0\0\0\0"
    "seigr.access_policies.AccessLifecyclePolicy.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class AccessLifecyclePolicy::_Internal {
 public:
};

AccessLifecyclePolicy::AccessLifecyclePolicy(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.access_policies.AccessLifecyclePolicy)
}
inline PROTOBUF_NDEBUG_INLINE AccessLifecyclePolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::access_policies::AccessLifecyclePolicy& from_msg)
      : conditions_{visibility, arena, from.conditions_},
        metadata_{visibility, arena, from.metadata_},
        lifecycle_policy_id_(arena, from.lifecycle_policy_id_),
        associated_policy_id_(arena, from.associated_policy_id_),
        start_time_(arena, from.start_time_),
        end_time_(arena, from.end_time_),
        review_interval_(arena, from.review_interval_),
        _cached_size_{0} {}

AccessLifecyclePolicy::AccessLifecyclePolicy(
    ::google::protobuf::Arena* arena,
    const AccessLifecyclePolicy& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccessLifecyclePolicy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.auto_renew_ = from._impl_.auto_renew_;

  // @@protoc_insertion_point(copy_constructor:seigr.access_policies.AccessLifecyclePolicy)
}
inline PROTOBUF_NDEBUG_INLINE AccessLifecyclePolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : conditions_{visibility, arena},
        metadata_{visibility, arena},
        lifecycle_policy_id_(arena),
        associated_policy_id_(arena),
        start_time_(arena),
        end_time_(arena),
        review_interval_(arena),
        _cached_size_{0} {}

inline void AccessLifecyclePolicy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.auto_renew_ = {};
}
AccessLifecyclePolicy::~AccessLifecyclePolicy() {
  // @@protoc_insertion_point(destructor:seigr.access_policies.AccessLifecyclePolicy)
  SharedDtor(*this);
}
inline void AccessLifecyclePolicy::SharedDtor(MessageLite& self) {
  AccessLifecyclePolicy& this_ = static_cast<AccessLifecyclePolicy&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.lifecycle_policy_id_.Destroy();
  this_._impl_.associated_policy_id_.Destroy();
  this_._impl_.start_time_.Destroy();
  this_._impl_.end_time_.Destroy();
  this_._impl_.review_interval_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AccessLifecyclePolicy::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AccessLifecyclePolicy(arena);
}
constexpr auto AccessLifecyclePolicy::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.conditions_) +
          decltype(AccessLifecyclePolicy::_impl_.conditions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.conditions_) +
          decltype(AccessLifecyclePolicy::_impl_.conditions_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.metadata_) +
          decltype(AccessLifecyclePolicy::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.metadata_) +
          decltype(AccessLifecyclePolicy::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AccessLifecyclePolicy), alignof(AccessLifecyclePolicy), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AccessLifecyclePolicy::PlacementNew_,
                                 sizeof(AccessLifecyclePolicy),
                                 alignof(AccessLifecyclePolicy));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AccessLifecyclePolicy::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AccessLifecyclePolicy_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AccessLifecyclePolicy::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AccessLifecyclePolicy>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AccessLifecyclePolicy::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AccessLifecyclePolicy>(), &AccessLifecyclePolicy::ByteSizeLong,
            &AccessLifecyclePolicy::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_._cached_size_),
        false,
    },
    &AccessLifecyclePolicy::kDescriptorMethods,
    &descriptor_table_access_5fpolicies_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AccessLifecyclePolicy::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 150, 2> AccessLifecyclePolicy::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::access_policies::AccessLifecyclePolicy>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string lifecycle_policy_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.lifecycle_policy_id_)}},
    // string associated_policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.associated_policy_id_)}},
    // string start_time = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.start_time_)}},
    // string end_time = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.end_time_)}},
    // bool auto_renew = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccessLifecyclePolicy, _impl_.auto_renew_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.auto_renew_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string review_interval = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.review_interval_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string lifecycle_policy_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.lifecycle_policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string associated_policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.associated_policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string start_time = 3;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string end_time = 4;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.end_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool auto_renew = 5;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.auto_renew_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> conditions = 6;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.conditions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string review_interval = 7;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.review_interval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> metadata = 8;
    {PROTOBUF_FIELD_OFFSET(AccessLifecyclePolicy, _impl_.metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AccessLifecyclePolicy()._impl_.conditions_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AccessLifecyclePolicy()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\53\23\24\12\10\0\12\17\10\0\0\0\0\0\0\0"
    "seigr.access_policies.AccessLifecyclePolicy"
    "lifecycle_policy_id"
    "associated_policy_id"
    "start_time"
    "end_time"
    "conditions"
    "review_interval"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void AccessLifecyclePolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.access_policies.AccessLifecyclePolicy)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conditions_.Clear();
  _impl_.metadata_.Clear();
  _impl_.lifecycle_policy_id_.ClearToEmpty();
  _impl_.associated_policy_id_.ClearToEmpty();
  _impl_.start_time_.ClearToEmpty();
  _impl_.end_time_.ClearToEmpty();
  _impl_.review_interval_.ClearToEmpty();
  _impl_.auto_renew_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AccessLifecyclePolicy::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AccessLifecyclePolicy& this_ = static_cast<const AccessLifecyclePolicy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AccessLifecyclePolicy::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AccessLifecyclePolicy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.access_policies.AccessLifecyclePolicy)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string lifecycle_policy_id = 1;
          if (!this_._internal_lifecycle_policy_id().empty()) {
            const std::string& _s = this_._internal_lifecycle_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.lifecycle_policy_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string associated_policy_id = 2;
          if (!this_._internal_associated_policy_id().empty()) {
            const std::string& _s = this_._internal_associated_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.associated_policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string start_time = 3;
          if (!this_._internal_start_time().empty()) {
            const std::string& _s = this_._internal_start_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.start_time");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string end_time = 4;
          if (!this_._internal_end_time().empty()) {
            const std::string& _s = this_._internal_end_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.end_time");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool auto_renew = 5;
          if (this_._internal_auto_renew() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_auto_renew(), target);
          }

          // map<string, string> conditions = 6;
          if (!this_._internal_conditions().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_conditions();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.conditions");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.conditions");
              }
            }
          }

          // string review_interval = 7;
          if (!this_._internal_review_interval().empty()) {
            const std::string& _s = this_._internal_review_interval();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.review_interval");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, string> metadata = 8;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.access_policies.AccessLifecyclePolicy.metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.access_policies.AccessLifecyclePolicy)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AccessLifecyclePolicy::ByteSizeLong(const MessageLite& base) {
          const AccessLifecyclePolicy& this_ = static_cast<const AccessLifecyclePolicy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AccessLifecyclePolicy::ByteSizeLong() const {
          const AccessLifecyclePolicy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.access_policies.AccessLifecyclePolicy)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> conditions = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_conditions_size());
              for (const auto& entry : this_._internal_conditions()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string lifecycle_policy_id = 1;
            if (!this_._internal_lifecycle_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_lifecycle_policy_id());
            }
            // string associated_policy_id = 2;
            if (!this_._internal_associated_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_associated_policy_id());
            }
            // string start_time = 3;
            if (!this_._internal_start_time().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_start_time());
            }
            // string end_time = 4;
            if (!this_._internal_end_time().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_end_time());
            }
            // string review_interval = 7;
            if (!this_._internal_review_interval().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_review_interval());
            }
            // bool auto_renew = 5;
            if (this_._internal_auto_renew() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AccessLifecyclePolicy::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccessLifecyclePolicy*>(&to_msg);
  auto& from = static_cast<const AccessLifecyclePolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.access_policies.AccessLifecyclePolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conditions_.MergeFrom(from._impl_.conditions_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_lifecycle_policy_id().empty()) {
    _this->_internal_set_lifecycle_policy_id(from._internal_lifecycle_policy_id());
  }
  if (!from._internal_associated_policy_id().empty()) {
    _this->_internal_set_associated_policy_id(from._internal_associated_policy_id());
  }
  if (!from._internal_start_time().empty()) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_end_time().empty()) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (!from._internal_review_interval().empty()) {
    _this->_internal_set_review_interval(from._internal_review_interval());
  }
  if (from._internal_auto_renew() != 0) {
    _this->_impl_.auto_renew_ = from._impl_.auto_renew_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccessLifecyclePolicy::CopyFrom(const AccessLifecyclePolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.access_policies.AccessLifecyclePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccessLifecyclePolicy::InternalSwap(AccessLifecyclePolicy* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.conditions_.InternalSwap(&other->_impl_.conditions_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.lifecycle_policy_id_, &other->_impl_.lifecycle_policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.associated_policy_id_, &other->_impl_.associated_policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.start_time_, &other->_impl_.start_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.end_time_, &other->_impl_.end_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.review_interval_, &other->_impl_.review_interval_, arena);
        swap(_impl_.auto_renew_, other->_impl_.auto_renew_);
}

::google::protobuf::Metadata AccessLifecyclePolicy::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace access_policies
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_access_5fpolicies_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
