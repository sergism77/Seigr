// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: visualization.proto
// Protobuf C++ Version: 5.29.2

#ifndef visualization_2eproto_2epb_2eh
#define visualization_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_visualization_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_visualization_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_visualization_2eproto;
namespace seigr {
namespace visualization {
class DashboardLayout;
struct DashboardLayoutDefaultTypeInternal;
extern DashboardLayoutDefaultTypeInternal _DashboardLayout_default_instance_;
class DashboardLayout_DashboardMetadataEntry_DoNotUse;
struct DashboardLayout_DashboardMetadataEntry_DoNotUseDefaultTypeInternal;
extern DashboardLayout_DashboardMetadataEntry_DoNotUseDefaultTypeInternal _DashboardLayout_DashboardMetadataEntry_DoNotUse_default_instance_;
class DashboardLayout_LayoutPositionsEntry_DoNotUse;
struct DashboardLayout_LayoutPositionsEntry_DoNotUseDefaultTypeInternal;
extern DashboardLayout_LayoutPositionsEntry_DoNotUseDefaultTypeInternal _DashboardLayout_LayoutPositionsEntry_DoNotUse_default_instance_;
class DataPoint;
struct DataPointDefaultTypeInternal;
extern DataPointDefaultTypeInternal _DataPoint_default_instance_;
class DataPoint_AttributesEntry_DoNotUse;
struct DataPoint_AttributesEntry_DoNotUseDefaultTypeInternal;
extern DataPoint_AttributesEntry_DoNotUseDefaultTypeInternal _DataPoint_AttributesEntry_DoNotUse_default_instance_;
class InteractiveElement;
struct InteractiveElementDefaultTypeInternal;
extern InteractiveElementDefaultTypeInternal _InteractiveElement_default_instance_;
class InteractiveElement_BehaviorRulesEntry_DoNotUse;
struct InteractiveElement_BehaviorRulesEntry_DoNotUseDefaultTypeInternal;
extern InteractiveElement_BehaviorRulesEntry_DoNotUseDefaultTypeInternal _InteractiveElement_BehaviorRulesEntry_DoNotUse_default_instance_;
class InteractiveElement_OptionsEntry_DoNotUse;
struct InteractiveElement_OptionsEntry_DoNotUseDefaultTypeInternal;
extern InteractiveElement_OptionsEntry_DoNotUseDefaultTypeInternal _InteractiveElement_OptionsEntry_DoNotUse_default_instance_;
class ThemeSettings;
struct ThemeSettingsDefaultTypeInternal;
extern ThemeSettingsDefaultTypeInternal _ThemeSettings_default_instance_;
class ThemeSettings_AdditionalStylesEntry_DoNotUse;
struct ThemeSettings_AdditionalStylesEntry_DoNotUseDefaultTypeInternal;
extern ThemeSettings_AdditionalStylesEntry_DoNotUseDefaultTypeInternal _ThemeSettings_AdditionalStylesEntry_DoNotUse_default_instance_;
class VisualizationConfig;
struct VisualizationConfigDefaultTypeInternal;
extern VisualizationConfigDefaultTypeInternal _VisualizationConfig_default_instance_;
class VisualizationConfig_ConfigMetadataEntry_DoNotUse;
struct VisualizationConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal;
extern VisualizationConfig_ConfigMetadataEntry_DoNotUseDefaultTypeInternal _VisualizationConfig_ConfigMetadataEntry_DoNotUse_default_instance_;
class VisualizationData;
struct VisualizationDataDefaultTypeInternal;
extern VisualizationDataDefaultTypeInternal _VisualizationData_default_instance_;
class VisualizationData_DataMetadataEntry_DoNotUse;
struct VisualizationData_DataMetadataEntry_DoNotUseDefaultTypeInternal;
extern VisualizationData_DataMetadataEntry_DoNotUseDefaultTypeInternal _VisualizationData_DataMetadataEntry_DoNotUse_default_instance_;
class VisualizationErrorLog;
struct VisualizationErrorLogDefaultTypeInternal;
extern VisualizationErrorLogDefaultTypeInternal _VisualizationErrorLog_default_instance_;
class VisualizationUsageStats;
struct VisualizationUsageStatsDefaultTypeInternal;
extern VisualizationUsageStatsDefaultTypeInternal _VisualizationUsageStats_default_instance_;
class WidgetConfig;
struct WidgetConfigDefaultTypeInternal;
extern WidgetConfigDefaultTypeInternal _WidgetConfig_default_instance_;
class WidgetConfig_DisplayOptionsEntry_DoNotUse;
struct WidgetConfig_DisplayOptionsEntry_DoNotUseDefaultTypeInternal;
extern WidgetConfig_DisplayOptionsEntry_DoNotUseDefaultTypeInternal _WidgetConfig_DisplayOptionsEntry_DoNotUse_default_instance_;
class WidgetConfig_WidgetMetadataEntry_DoNotUse;
struct WidgetConfig_WidgetMetadataEntry_DoNotUseDefaultTypeInternal;
extern WidgetConfig_WidgetMetadataEntry_DoNotUseDefaultTypeInternal _WidgetConfig_WidgetMetadataEntry_DoNotUse_default_instance_;
}  // namespace visualization
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace visualization {
enum WidgetType : int {
  WIDGET_TYPE_UNDEFINED = 0,
  WIDGET_TYPE_CHART = 1,
  WIDGET_TYPE_TABLE = 2,
  WIDGET_TYPE_MAP = 3,
  WIDGET_TYPE_GRAPH = 4,
  WIDGET_TYPE_GAUGE = 5,
  WIDGET_TYPE_METRIC = 6,
  WIDGET_TYPE_TREND = 7,
  WidgetType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WidgetType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WidgetType_IsValid(int value);
extern const uint32_t WidgetType_internal_data_[];
constexpr WidgetType WidgetType_MIN = static_cast<WidgetType>(0);
constexpr WidgetType WidgetType_MAX = static_cast<WidgetType>(7);
constexpr int WidgetType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
WidgetType_descriptor();
template <typename T>
const std::string& WidgetType_Name(T value) {
  static_assert(std::is_same<T, WidgetType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WidgetType_Name().");
  return WidgetType_Name(static_cast<WidgetType>(value));
}
template <>
inline const std::string& WidgetType_Name(WidgetType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WidgetType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool WidgetType_Parse(absl::string_view name, WidgetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WidgetType>(
      WidgetType_descriptor(), name, value);
}
enum ChartType : int {
  CHART_TYPE_UNDEFINED = 0,
  CHART_TYPE_LINE = 1,
  CHART_TYPE_BAR = 2,
  CHART_TYPE_PIE = 3,
  CHART_TYPE_SCATTER = 4,
  CHART_TYPE_HEATMAP = 5,
  CHART_TYPE_AREA = 6,
  ChartType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChartType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChartType_IsValid(int value);
extern const uint32_t ChartType_internal_data_[];
constexpr ChartType ChartType_MIN = static_cast<ChartType>(0);
constexpr ChartType ChartType_MAX = static_cast<ChartType>(6);
constexpr int ChartType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ChartType_descriptor();
template <typename T>
const std::string& ChartType_Name(T value) {
  static_assert(std::is_same<T, ChartType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChartType_Name().");
  return ChartType_Name(static_cast<ChartType>(value));
}
template <>
inline const std::string& ChartType_Name(ChartType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChartType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ChartType_Parse(absl::string_view name, ChartType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChartType>(
      ChartType_descriptor(), name, value);
}
enum ExportFormat : int {
  EXPORT_FORMAT_UNDEFINED = 0,
  EXPORT_FORMAT_PDF = 1,
  EXPORT_FORMAT_PNG = 2,
  EXPORT_FORMAT_CSV = 3,
  ExportFormat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExportFormat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExportFormat_IsValid(int value);
extern const uint32_t ExportFormat_internal_data_[];
constexpr ExportFormat ExportFormat_MIN = static_cast<ExportFormat>(0);
constexpr ExportFormat ExportFormat_MAX = static_cast<ExportFormat>(3);
constexpr int ExportFormat_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ExportFormat_descriptor();
template <typename T>
const std::string& ExportFormat_Name(T value) {
  static_assert(std::is_same<T, ExportFormat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExportFormat_Name().");
  return ExportFormat_Name(static_cast<ExportFormat>(value));
}
template <>
inline const std::string& ExportFormat_Name(ExportFormat value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExportFormat_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ExportFormat_Parse(absl::string_view name, ExportFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExportFormat>(
      ExportFormat_descriptor(), name, value);
}
enum StreamingState : int {
  STREAMING_STATE_UNDEFINED = 0,
  STREAMING_ACTIVE = 1,
  STREAMING_INACTIVE = 2,
  STREAMING_PAUSED = 3,
  STREAMING_ERROR = 4,
  StreamingState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StreamingState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StreamingState_IsValid(int value);
extern const uint32_t StreamingState_internal_data_[];
constexpr StreamingState StreamingState_MIN = static_cast<StreamingState>(0);
constexpr StreamingState StreamingState_MAX = static_cast<StreamingState>(4);
constexpr int StreamingState_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StreamingState_descriptor();
template <typename T>
const std::string& StreamingState_Name(T value) {
  static_assert(std::is_same<T, StreamingState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StreamingState_Name().");
  return StreamingState_Name(static_cast<StreamingState>(value));
}
template <>
inline const std::string& StreamingState_Name(StreamingState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StreamingState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StreamingState_Parse(absl::string_view name, StreamingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamingState>(
      StreamingState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WidgetConfig_WidgetMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WidgetConfig_WidgetMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WidgetConfig_WidgetMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WidgetConfig_WidgetMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WidgetConfig_WidgetMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WidgetConfig_WidgetMetadataEntry_DoNotUse*>(
        &_WidgetConfig_WidgetMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class WidgetConfig_DisplayOptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WidgetConfig_DisplayOptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WidgetConfig_DisplayOptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WidgetConfig_DisplayOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WidgetConfig_DisplayOptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WidgetConfig_DisplayOptionsEntry_DoNotUse*>(
        &_WidgetConfig_DisplayOptionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class VisualizationUsageStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.VisualizationUsageStats) */ {
 public:
  inline VisualizationUsageStats() : VisualizationUsageStats(nullptr) {}
  ~VisualizationUsageStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisualizationUsageStats* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisualizationUsageStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationUsageStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline VisualizationUsageStats(const VisualizationUsageStats& from) : VisualizationUsageStats(nullptr, from) {}
  inline VisualizationUsageStats(VisualizationUsageStats&& from) noexcept
      : VisualizationUsageStats(nullptr, std::move(from)) {}
  inline VisualizationUsageStats& operator=(const VisualizationUsageStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualizationUsageStats& operator=(VisualizationUsageStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisualizationUsageStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualizationUsageStats* internal_default_instance() {
    return reinterpret_cast<const VisualizationUsageStats*>(
        &_VisualizationUsageStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(VisualizationUsageStats& a, VisualizationUsageStats& b) { a.Swap(&b); }
  inline void Swap(VisualizationUsageStats* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualizationUsageStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualizationUsageStats* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisualizationUsageStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisualizationUsageStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisualizationUsageStats& from) { VisualizationUsageStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisualizationUsageStats* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.VisualizationUsageStats"; }

 protected:
  explicit VisualizationUsageStats(::google::protobuf::Arena* arena);
  VisualizationUsageStats(::google::protobuf::Arena* arena, const VisualizationUsageStats& from);
  VisualizationUsageStats(::google::protobuf::Arena* arena, VisualizationUsageStats&& from) noexcept
      : VisualizationUsageStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kDashboardIdFieldNumber = 2,
    kWidgetIdFieldNumber = 3,
    kLastAccessedFieldNumber = 5,
    kViewCountFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string dashboard_id = 2;
  void clear_dashboard_id() ;
  const std::string& dashboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dashboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_dashboard_id();
  PROTOBUF_NODISCARD std::string* release_dashboard_id();
  void set_allocated_dashboard_id(std::string* value);

  private:
  const std::string& _internal_dashboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dashboard_id(
      const std::string& value);
  std::string* _internal_mutable_dashboard_id();

  public:
  // string widget_id = 3;
  void clear_widget_id() ;
  const std::string& widget_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_widget_id(Arg_&& arg, Args_... args);
  std::string* mutable_widget_id();
  PROTOBUF_NODISCARD std::string* release_widget_id();
  void set_allocated_widget_id(std::string* value);

  private:
  const std::string& _internal_widget_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_id(
      const std::string& value);
  std::string* _internal_mutable_widget_id();

  public:
  // string last_accessed = 5;
  void clear_last_accessed() ;
  const std::string& last_accessed() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_accessed(Arg_&& arg, Args_... args);
  std::string* mutable_last_accessed();
  PROTOBUF_NODISCARD std::string* release_last_accessed();
  void set_allocated_last_accessed(std::string* value);

  private:
  const std::string& _internal_last_accessed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_accessed(
      const std::string& value);
  std::string* _internal_mutable_last_accessed();

  public:
  // int32 view_count = 4;
  void clear_view_count() ;
  ::int32_t view_count() const;
  void set_view_count(::int32_t value);

  private:
  ::int32_t _internal_view_count() const;
  void _internal_set_view_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.VisualizationUsageStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VisualizationUsageStats& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr dashboard_id_;
    ::google::protobuf::internal::ArenaStringPtr widget_id_;
    ::google::protobuf::internal::ArenaStringPtr last_accessed_;
    ::int32_t view_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class VisualizationErrorLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.VisualizationErrorLog) */ {
 public:
  inline VisualizationErrorLog() : VisualizationErrorLog(nullptr) {}
  ~VisualizationErrorLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisualizationErrorLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisualizationErrorLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationErrorLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline VisualizationErrorLog(const VisualizationErrorLog& from) : VisualizationErrorLog(nullptr, from) {}
  inline VisualizationErrorLog(VisualizationErrorLog&& from) noexcept
      : VisualizationErrorLog(nullptr, std::move(from)) {}
  inline VisualizationErrorLog& operator=(const VisualizationErrorLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualizationErrorLog& operator=(VisualizationErrorLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisualizationErrorLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualizationErrorLog* internal_default_instance() {
    return reinterpret_cast<const VisualizationErrorLog*>(
        &_VisualizationErrorLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(VisualizationErrorLog& a, VisualizationErrorLog& b) { a.Swap(&b); }
  inline void Swap(VisualizationErrorLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualizationErrorLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualizationErrorLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisualizationErrorLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisualizationErrorLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisualizationErrorLog& from) { VisualizationErrorLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisualizationErrorLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.VisualizationErrorLog"; }

 protected:
  explicit VisualizationErrorLog(::google::protobuf::Arena* arena);
  VisualizationErrorLog(::google::protobuf::Arena* arena, const VisualizationErrorLog& from);
  VisualizationErrorLog(::google::protobuf::Arena* arena, VisualizationErrorLog&& from) noexcept
      : VisualizationErrorLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorIdFieldNumber = 1,
    kWidgetIdFieldNumber = 2,
    kDataSourceIdFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // string error_id = 1;
  void clear_error_id() ;
  const std::string& error_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_id(Arg_&& arg, Args_... args);
  std::string* mutable_error_id();
  PROTOBUF_NODISCARD std::string* release_error_id();
  void set_allocated_error_id(std::string* value);

  private:
  const std::string& _internal_error_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_id(
      const std::string& value);
  std::string* _internal_mutable_error_id();

  public:
  // string widget_id = 2;
  void clear_widget_id() ;
  const std::string& widget_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_widget_id(Arg_&& arg, Args_... args);
  std::string* mutable_widget_id();
  PROTOBUF_NODISCARD std::string* release_widget_id();
  void set_allocated_widget_id(std::string* value);

  private:
  const std::string& _internal_widget_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_id(
      const std::string& value);
  std::string* _internal_mutable_widget_id();

  public:
  // string data_source_id = 3;
  void clear_data_source_id() ;
  const std::string& data_source_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_source_id(Arg_&& arg, Args_... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* value);

  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(
      const std::string& value);
  std::string* _internal_mutable_data_source_id();

  public:
  // string error_message = 4;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.VisualizationErrorLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VisualizationErrorLog& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_id_;
    ::google::protobuf::internal::ArenaStringPtr widget_id_;
    ::google::protobuf::internal::ArenaStringPtr data_source_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class VisualizationData_DataMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  VisualizationData_DataMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationData_DataMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit VisualizationData_DataMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const VisualizationData_DataMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const VisualizationData_DataMetadataEntry_DoNotUse*>(
        &_VisualizationData_DataMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class VisualizationConfig_ConfigMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  VisualizationConfig_ConfigMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationConfig_ConfigMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit VisualizationConfig_ConfigMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const VisualizationConfig_ConfigMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const VisualizationConfig_ConfigMetadataEntry_DoNotUse*>(
        &_VisualizationConfig_ConfigMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ThemeSettings_AdditionalStylesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ThemeSettings_AdditionalStylesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ThemeSettings_AdditionalStylesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ThemeSettings_AdditionalStylesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ThemeSettings_AdditionalStylesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ThemeSettings_AdditionalStylesEntry_DoNotUse*>(
        &_ThemeSettings_AdditionalStylesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InteractiveElement_OptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InteractiveElement_OptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveElement_OptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InteractiveElement_OptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InteractiveElement_OptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InteractiveElement_OptionsEntry_DoNotUse*>(
        &_InteractiveElement_OptionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class InteractiveElement_BehaviorRulesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  InteractiveElement_BehaviorRulesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveElement_BehaviorRulesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit InteractiveElement_BehaviorRulesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const InteractiveElement_BehaviorRulesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const InteractiveElement_BehaviorRulesEntry_DoNotUse*>(
        &_InteractiveElement_BehaviorRulesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DataPoint_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DataPoint_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPoint_AttributesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DataPoint_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DataPoint_AttributesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DataPoint_AttributesEntry_DoNotUse*>(
        &_DataPoint_AttributesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DashboardLayout_LayoutPositionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  DashboardLayout_LayoutPositionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DashboardLayout_LayoutPositionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DashboardLayout_LayoutPositionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DashboardLayout_LayoutPositionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DashboardLayout_LayoutPositionsEntry_DoNotUse*>(
        &_DashboardLayout_LayoutPositionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DashboardLayout_DashboardMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DashboardLayout_DashboardMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DashboardLayout_DashboardMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DashboardLayout_DashboardMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DashboardLayout_DashboardMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DashboardLayout_DashboardMetadataEntry_DoNotUse*>(
        &_DashboardLayout_DashboardMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_visualization_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ThemeSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.ThemeSettings) */ {
 public:
  inline ThemeSettings() : ThemeSettings(nullptr) {}
  ~ThemeSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ThemeSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ThemeSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ThemeSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline ThemeSettings(const ThemeSettings& from) : ThemeSettings(nullptr, from) {}
  inline ThemeSettings(ThemeSettings&& from) noexcept
      : ThemeSettings(nullptr, std::move(from)) {}
  inline ThemeSettings& operator=(const ThemeSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeSettings& operator=(ThemeSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeSettings* internal_default_instance() {
    return reinterpret_cast<const ThemeSettings*>(
        &_ThemeSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ThemeSettings& a, ThemeSettings& b) { a.Swap(&b); }
  inline void Swap(ThemeSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ThemeSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThemeSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ThemeSettings& from) { ThemeSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ThemeSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.ThemeSettings"; }

 protected:
  explicit ThemeSettings(::google::protobuf::Arena* arena);
  ThemeSettings(::google::protobuf::Arena* arena, const ThemeSettings& from);
  ThemeSettings(::google::protobuf::Arena* arena, ThemeSettings&& from) noexcept
      : ThemeSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdditionalStylesFieldNumber = 8,
    kThemeIdFieldNumber = 1,
    kThemeNameFieldNumber = 2,
    kPrimaryColorFieldNumber = 3,
    kSecondaryColorFieldNumber = 4,
    kBackgroundColorFieldNumber = 5,
    kFontFamilyFieldNumber = 6,
    kFontSizeFieldNumber = 7,
    kIsDarkModeFieldNumber = 9,
  };
  // map<string, string> additional_styles = 8;
  int additional_styles_size() const;
  private:
  int _internal_additional_styles_size() const;

  public:
  void clear_additional_styles() ;
  const ::google::protobuf::Map<std::string, std::string>& additional_styles() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_additional_styles();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_additional_styles() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_additional_styles();

  public:
  // string theme_id = 1;
  void clear_theme_id() ;
  const std::string& theme_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_id(Arg_&& arg, Args_... args);
  std::string* mutable_theme_id();
  PROTOBUF_NODISCARD std::string* release_theme_id();
  void set_allocated_theme_id(std::string* value);

  private:
  const std::string& _internal_theme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_id(
      const std::string& value);
  std::string* _internal_mutable_theme_id();

  public:
  // string theme_name = 2;
  void clear_theme_name() ;
  const std::string& theme_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_name(Arg_&& arg, Args_... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* value);

  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(
      const std::string& value);
  std::string* _internal_mutable_theme_name();

  public:
  // string primary_color = 3;
  void clear_primary_color() ;
  const std::string& primary_color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_color(Arg_&& arg, Args_... args);
  std::string* mutable_primary_color();
  PROTOBUF_NODISCARD std::string* release_primary_color();
  void set_allocated_primary_color(std::string* value);

  private:
  const std::string& _internal_primary_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_color(
      const std::string& value);
  std::string* _internal_mutable_primary_color();

  public:
  // string secondary_color = 4;
  void clear_secondary_color() ;
  const std::string& secondary_color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secondary_color(Arg_&& arg, Args_... args);
  std::string* mutable_secondary_color();
  PROTOBUF_NODISCARD std::string* release_secondary_color();
  void set_allocated_secondary_color(std::string* value);

  private:
  const std::string& _internal_secondary_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondary_color(
      const std::string& value);
  std::string* _internal_mutable_secondary_color();

  public:
  // string background_color = 5;
  void clear_background_color() ;
  const std::string& background_color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_background_color(Arg_&& arg, Args_... args);
  std::string* mutable_background_color();
  PROTOBUF_NODISCARD std::string* release_background_color();
  void set_allocated_background_color(std::string* value);

  private:
  const std::string& _internal_background_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background_color(
      const std::string& value);
  std::string* _internal_mutable_background_color();

  public:
  // string font_family = 6;
  void clear_font_family() ;
  const std::string& font_family() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_font_family(Arg_&& arg, Args_... args);
  std::string* mutable_font_family();
  PROTOBUF_NODISCARD std::string* release_font_family();
  void set_allocated_font_family(std::string* value);

  private:
  const std::string& _internal_font_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_family(
      const std::string& value);
  std::string* _internal_mutable_font_family();

  public:
  // string font_size = 7;
  void clear_font_size() ;
  const std::string& font_size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_font_size(Arg_&& arg, Args_... args);
  std::string* mutable_font_size();
  PROTOBUF_NODISCARD std::string* release_font_size();
  void set_allocated_font_size(std::string* value);

  private:
  const std::string& _internal_font_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_size(
      const std::string& value);
  std::string* _internal_mutable_font_size();

  public:
  // bool is_dark_mode = 9;
  void clear_is_dark_mode() ;
  bool is_dark_mode() const;
  void set_is_dark_mode(bool value);

  private:
  bool _internal_is_dark_mode() const;
  void _internal_set_is_dark_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.ThemeSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      149, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ThemeSettings& from_msg);
    ::google::protobuf::internal::MapField<ThemeSettings_AdditionalStylesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        additional_styles_;
    ::google::protobuf::internal::ArenaStringPtr theme_id_;
    ::google::protobuf::internal::ArenaStringPtr theme_name_;
    ::google::protobuf::internal::ArenaStringPtr primary_color_;
    ::google::protobuf::internal::ArenaStringPtr secondary_color_;
    ::google::protobuf::internal::ArenaStringPtr background_color_;
    ::google::protobuf::internal::ArenaStringPtr font_family_;
    ::google::protobuf::internal::ArenaStringPtr font_size_;
    bool is_dark_mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class InteractiveElement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.InteractiveElement) */ {
 public:
  inline InteractiveElement() : InteractiveElement(nullptr) {}
  ~InteractiveElement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InteractiveElement* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InteractiveElement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveElement(
      ::google::protobuf::internal::ConstantInitialized);

  inline InteractiveElement(const InteractiveElement& from) : InteractiveElement(nullptr, from) {}
  inline InteractiveElement(InteractiveElement&& from) noexcept
      : InteractiveElement(nullptr, std::move(from)) {}
  inline InteractiveElement& operator=(const InteractiveElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveElement& operator=(InteractiveElement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const InteractiveElement* internal_default_instance() {
    return reinterpret_cast<const InteractiveElement*>(
        &_InteractiveElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(InteractiveElement& a, InteractiveElement& b) { a.Swap(&b); }
  inline void Swap(InteractiveElement* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveElement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveElement* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InteractiveElement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InteractiveElement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InteractiveElement& from) { InteractiveElement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InteractiveElement* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.InteractiveElement"; }

 protected:
  explicit InteractiveElement(::google::protobuf::Arena* arena);
  InteractiveElement(::google::protobuf::Arena* arena, const InteractiveElement& from);
  InteractiveElement(::google::protobuf::Arena* arena, InteractiveElement&& from) noexcept
      : InteractiveElement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOptionsFieldNumber = 4,
    kBehaviorRulesFieldNumber = 6,
    kElementIdFieldNumber = 1,
    kWidgetIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIsRequiredFieldNumber = 5,
  };
  // map<string, string> options = 4;
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  const ::google::protobuf::Map<std::string, std::string>& options() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_options();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_options() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_options();

  public:
  // map<string, string> behavior_rules = 6;
  int behavior_rules_size() const;
  private:
  int _internal_behavior_rules_size() const;

  public:
  void clear_behavior_rules() ;
  const ::google::protobuf::Map<std::string, std::string>& behavior_rules() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_behavior_rules();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_behavior_rules() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_behavior_rules();

  public:
  // string element_id = 1;
  void clear_element_id() ;
  const std::string& element_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_element_id(Arg_&& arg, Args_... args);
  std::string* mutable_element_id();
  PROTOBUF_NODISCARD std::string* release_element_id();
  void set_allocated_element_id(std::string* value);

  private:
  const std::string& _internal_element_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element_id(
      const std::string& value);
  std::string* _internal_mutable_element_id();

  public:
  // string widget_id = 2;
  void clear_widget_id() ;
  const std::string& widget_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_widget_id(Arg_&& arg, Args_... args);
  std::string* mutable_widget_id();
  PROTOBUF_NODISCARD std::string* release_widget_id();
  void set_allocated_widget_id(std::string* value);

  private:
  const std::string& _internal_widget_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_id(
      const std::string& value);
  std::string* _internal_mutable_widget_id();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bool is_required = 5;
  void clear_is_required() ;
  bool is_required() const;
  void set_is_required(bool value);

  private:
  bool _internal_is_required() const;
  void _internal_set_is_required(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.InteractiveElement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      91, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InteractiveElement& from_msg);
    ::google::protobuf::internal::MapField<InteractiveElement_OptionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        options_;
    ::google::protobuf::internal::MapField<InteractiveElement_BehaviorRulesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        behavior_rules_;
    ::google::protobuf::internal::ArenaStringPtr element_id_;
    ::google::protobuf::internal::ArenaStringPtr widget_id_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    bool is_required_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class DataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.DataPoint) */ {
 public:
  inline DataPoint() : DataPoint(nullptr) {}
  ~DataPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataPoint(const DataPoint& from) : DataPoint(nullptr, from) {}
  inline DataPoint(DataPoint&& from) noexcept
      : DataPoint(nullptr, std::move(from)) {}
  inline DataPoint& operator=(const DataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPoint& operator=(DataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPoint* internal_default_instance() {
    return reinterpret_cast<const DataPoint*>(
        &_DataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(DataPoint& a, DataPoint& b) { a.Swap(&b); }
  inline void Swap(DataPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataPoint& from) { DataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.DataPoint"; }

 protected:
  explicit DataPoint(::google::protobuf::Arena* arena);
  DataPoint(::google::protobuf::Arena* arena, const DataPoint& from);
  DataPoint(::google::protobuf::Arena* arena, DataPoint&& from) noexcept
      : DataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 3,
    kLabelFieldNumber = 1,
    kColorFieldNumber = 4,
    kIconFieldNumber = 5,
    kValueFieldNumber = 2,
  };
  // map<string, string> attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& attributes() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_attributes();

  public:
  // string label = 1;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string color = 4;
  void clear_color() ;
  const std::string& color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* value);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // string icon = 5;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* value);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.DataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataPoint& from_msg);
    ::google::protobuf::internal::MapField<DataPoint_AttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class WidgetConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.WidgetConfig) */ {
 public:
  inline WidgetConfig() : WidgetConfig(nullptr) {}
  ~WidgetConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WidgetConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WidgetConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WidgetConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline WidgetConfig(const WidgetConfig& from) : WidgetConfig(nullptr, from) {}
  inline WidgetConfig(WidgetConfig&& from) noexcept
      : WidgetConfig(nullptr, std::move(from)) {}
  inline WidgetConfig& operator=(const WidgetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidgetConfig& operator=(WidgetConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidgetConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidgetConfig* internal_default_instance() {
    return reinterpret_cast<const WidgetConfig*>(
        &_WidgetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(WidgetConfig& a, WidgetConfig& b) { a.Swap(&b); }
  inline void Swap(WidgetConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidgetConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WidgetConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WidgetConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WidgetConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WidgetConfig& from) { WidgetConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WidgetConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.WidgetConfig"; }

 protected:
  explicit WidgetConfig(::google::protobuf::Arena* arena);
  WidgetConfig(::google::protobuf::Arena* arena, const WidgetConfig& from);
  WidgetConfig(::google::protobuf::Arena* arena, WidgetConfig&& from) noexcept
      : WidgetConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDisplayOptionsFieldNumber = 7,
    kWidgetMetadataFieldNumber = 8,
    kInteractiveElementsFieldNumber = 12,
    kWidgetIdFieldNumber = 1,
    kTitleFieldNumber = 3,
    kDataSourceFieldNumber = 5,
    kTooltipFieldNumber = 9,
    kFontStyleFieldNumber = 10,
    kWidgetTypeFieldNumber = 2,
    kChartTypeFieldNumber = 4,
    kRefreshIntervalSecondsFieldNumber = 6,
    kEnableInteractivityFieldNumber = 11,
  };
  // map<string, string> display_options = 7;
  int display_options_size() const;
  private:
  int _internal_display_options_size() const;

  public:
  void clear_display_options() ;
  const ::google::protobuf::Map<std::string, std::string>& display_options() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_display_options();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_display_options() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_display_options();

  public:
  // map<string, string> widget_metadata = 8;
  int widget_metadata_size() const;
  private:
  int _internal_widget_metadata_size() const;

  public:
  void clear_widget_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& widget_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_widget_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_widget_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_widget_metadata();

  public:
  // repeated .seigr.visualization.InteractiveElement interactive_elements = 12;
  int interactive_elements_size() const;
  private:
  int _internal_interactive_elements_size() const;

  public:
  void clear_interactive_elements() ;
  ::seigr::visualization::InteractiveElement* mutable_interactive_elements(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>* mutable_interactive_elements();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>& _internal_interactive_elements() const;
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>* _internal_mutable_interactive_elements();
  public:
  const ::seigr::visualization::InteractiveElement& interactive_elements(int index) const;
  ::seigr::visualization::InteractiveElement* add_interactive_elements();
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>& interactive_elements() const;
  // string widget_id = 1;
  void clear_widget_id() ;
  const std::string& widget_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_widget_id(Arg_&& arg, Args_... args);
  std::string* mutable_widget_id();
  PROTOBUF_NODISCARD std::string* release_widget_id();
  void set_allocated_widget_id(std::string* value);

  private:
  const std::string& _internal_widget_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_id(
      const std::string& value);
  std::string* _internal_mutable_widget_id();

  public:
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string data_source = 5;
  void clear_data_source() ;
  const std::string& data_source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_source(Arg_&& arg, Args_... args);
  std::string* mutable_data_source();
  PROTOBUF_NODISCARD std::string* release_data_source();
  void set_allocated_data_source(std::string* value);

  private:
  const std::string& _internal_data_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source(
      const std::string& value);
  std::string* _internal_mutable_data_source();

  public:
  // string tooltip = 9;
  void clear_tooltip() ;
  const std::string& tooltip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tooltip(Arg_&& arg, Args_... args);
  std::string* mutable_tooltip();
  PROTOBUF_NODISCARD std::string* release_tooltip();
  void set_allocated_tooltip(std::string* value);

  private:
  const std::string& _internal_tooltip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tooltip(
      const std::string& value);
  std::string* _internal_mutable_tooltip();

  public:
  // string font_style = 10;
  void clear_font_style() ;
  const std::string& font_style() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_font_style(Arg_&& arg, Args_... args);
  std::string* mutable_font_style();
  PROTOBUF_NODISCARD std::string* release_font_style();
  void set_allocated_font_style(std::string* value);

  private:
  const std::string& _internal_font_style() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_style(
      const std::string& value);
  std::string* _internal_mutable_font_style();

  public:
  // .seigr.visualization.WidgetType widget_type = 2;
  void clear_widget_type() ;
  ::seigr::visualization::WidgetType widget_type() const;
  void set_widget_type(::seigr::visualization::WidgetType value);

  private:
  ::seigr::visualization::WidgetType _internal_widget_type() const;
  void _internal_set_widget_type(::seigr::visualization::WidgetType value);

  public:
  // .seigr.visualization.ChartType chart_type = 4;
  void clear_chart_type() ;
  ::seigr::visualization::ChartType chart_type() const;
  void set_chart_type(::seigr::visualization::ChartType value);

  private:
  ::seigr::visualization::ChartType _internal_chart_type() const;
  void _internal_set_chart_type(::seigr::visualization::ChartType value);

  public:
  // int32 refresh_interval_seconds = 6;
  void clear_refresh_interval_seconds() ;
  ::int32_t refresh_interval_seconds() const;
  void set_refresh_interval_seconds(::int32_t value);

  private:
  ::int32_t _internal_refresh_interval_seconds() const;
  void _internal_set_refresh_interval_seconds(::int32_t value);

  public:
  // bool enable_interactivity = 11;
  void clear_enable_interactivity() ;
  bool enable_interactivity() const;
  void set_enable_interactivity(bool value);

  private:
  bool _internal_enable_interactivity() const;
  void _internal_set_enable_interactivity(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.WidgetConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      121, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WidgetConfig& from_msg);
    ::google::protobuf::internal::MapField<WidgetConfig_DisplayOptionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        display_options_;
    ::google::protobuf::internal::MapField<WidgetConfig_WidgetMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        widget_metadata_;
    ::google::protobuf::RepeatedPtrField< ::seigr::visualization::InteractiveElement > interactive_elements_;
    ::google::protobuf::internal::ArenaStringPtr widget_id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr data_source_;
    ::google::protobuf::internal::ArenaStringPtr tooltip_;
    ::google::protobuf::internal::ArenaStringPtr font_style_;
    int widget_type_;
    int chart_type_;
    ::int32_t refresh_interval_seconds_;
    bool enable_interactivity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class VisualizationData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.VisualizationData) */ {
 public:
  inline VisualizationData() : VisualizationData(nullptr) {}
  ~VisualizationData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisualizationData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisualizationData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationData(
      ::google::protobuf::internal::ConstantInitialized);

  inline VisualizationData(const VisualizationData& from) : VisualizationData(nullptr, from) {}
  inline VisualizationData(VisualizationData&& from) noexcept
      : VisualizationData(nullptr, std::move(from)) {}
  inline VisualizationData& operator=(const VisualizationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualizationData& operator=(VisualizationData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisualizationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualizationData* internal_default_instance() {
    return reinterpret_cast<const VisualizationData*>(
        &_VisualizationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(VisualizationData& a, VisualizationData& b) { a.Swap(&b); }
  inline void Swap(VisualizationData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualizationData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualizationData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisualizationData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisualizationData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisualizationData& from) { VisualizationData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisualizationData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.VisualizationData"; }

 protected:
  explicit VisualizationData(::google::protobuf::Arena* arena);
  VisualizationData(::google::protobuf::Arena* arena, const VisualizationData& from);
  VisualizationData(::google::protobuf::Arena* arena, VisualizationData&& from) noexcept
      : VisualizationData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 3,
    kDataMetadataFieldNumber = 5,
    kDataSourceIdFieldNumber = 1,
    kWidgetIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kIsHistoricalDataFieldNumber = 6,
  };
  // repeated .seigr.visualization.DataPoint data_points = 3;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::seigr::visualization::DataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>* _internal_mutable_data_points();
  public:
  const ::seigr::visualization::DataPoint& data_points(int index) const;
  ::seigr::visualization::DataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>& data_points() const;
  // map<string, string> data_metadata = 5;
  int data_metadata_size() const;
  private:
  int _internal_data_metadata_size() const;

  public:
  void clear_data_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& data_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_data_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_data_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_data_metadata();

  public:
  // string data_source_id = 1;
  void clear_data_source_id() ;
  const std::string& data_source_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_source_id(Arg_&& arg, Args_... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* value);

  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(
      const std::string& value);
  std::string* _internal_mutable_data_source_id();

  public:
  // string widget_id = 2;
  void clear_widget_id() ;
  const std::string& widget_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_widget_id(Arg_&& arg, Args_... args);
  std::string* mutable_widget_id();
  PROTOBUF_NODISCARD std::string* release_widget_id();
  void set_allocated_widget_id(std::string* value);

  private:
  const std::string& _internal_widget_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_widget_id(
      const std::string& value);
  std::string* _internal_mutable_widget_id();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // bool is_historical_data = 6;
  void clear_is_historical_data() ;
  bool is_historical_data() const;
  void set_is_historical_data(bool value);

  private:
  bool _internal_is_historical_data() const;
  void _internal_set_is_historical_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.VisualizationData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      91, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VisualizationData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::visualization::DataPoint > data_points_;
    ::google::protobuf::internal::MapField<VisualizationData_DataMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        data_metadata_;
    ::google::protobuf::internal::ArenaStringPtr data_source_id_;
    ::google::protobuf::internal::ArenaStringPtr widget_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    bool is_historical_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class DashboardLayout final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.DashboardLayout) */ {
 public:
  inline DashboardLayout() : DashboardLayout(nullptr) {}
  ~DashboardLayout() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DashboardLayout* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DashboardLayout));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DashboardLayout(
      ::google::protobuf::internal::ConstantInitialized);

  inline DashboardLayout(const DashboardLayout& from) : DashboardLayout(nullptr, from) {}
  inline DashboardLayout(DashboardLayout&& from) noexcept
      : DashboardLayout(nullptr, std::move(from)) {}
  inline DashboardLayout& operator=(const DashboardLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline DashboardLayout& operator=(DashboardLayout&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DashboardLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const DashboardLayout* internal_default_instance() {
    return reinterpret_cast<const DashboardLayout*>(
        &_DashboardLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DashboardLayout& a, DashboardLayout& b) { a.Swap(&b); }
  inline void Swap(DashboardLayout* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DashboardLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DashboardLayout* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DashboardLayout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DashboardLayout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DashboardLayout& from) { DashboardLayout::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DashboardLayout* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.DashboardLayout"; }

 protected:
  explicit DashboardLayout(::google::protobuf::Arena* arena);
  DashboardLayout(::google::protobuf::Arena* arena, const DashboardLayout& from);
  DashboardLayout(::google::protobuf::Arena* arena, DashboardLayout&& from) noexcept
      : DashboardLayout(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWidgetsFieldNumber = 3,
    kLayoutPositionsFieldNumber = 4,
    kDashboardMetadataFieldNumber = 7,
    kDashboardIdFieldNumber = 1,
    kDashboardNameFieldNumber = 2,
    kCreatedByFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kBackgroundImageUrlFieldNumber = 8,
    kThemeIdFieldNumber = 9,
  };
  // repeated .seigr.visualization.WidgetConfig widgets = 3;
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;

  public:
  void clear_widgets() ;
  ::seigr::visualization::WidgetConfig* mutable_widgets(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>* mutable_widgets();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>& _internal_widgets() const;
  ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>* _internal_mutable_widgets();
  public:
  const ::seigr::visualization::WidgetConfig& widgets(int index) const;
  ::seigr::visualization::WidgetConfig* add_widgets();
  const ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>& widgets() const;
  // map<string, int32> layout_positions = 4;
  int layout_positions_size() const;
  private:
  int _internal_layout_positions_size() const;

  public:
  void clear_layout_positions() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& layout_positions() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_layout_positions();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_layout_positions() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_layout_positions();

  public:
  // map<string, string> dashboard_metadata = 7;
  int dashboard_metadata_size() const;
  private:
  int _internal_dashboard_metadata_size() const;

  public:
  void clear_dashboard_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& dashboard_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_dashboard_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_dashboard_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_dashboard_metadata();

  public:
  // string dashboard_id = 1;
  void clear_dashboard_id() ;
  const std::string& dashboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dashboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_dashboard_id();
  PROTOBUF_NODISCARD std::string* release_dashboard_id();
  void set_allocated_dashboard_id(std::string* value);

  private:
  const std::string& _internal_dashboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dashboard_id(
      const std::string& value);
  std::string* _internal_mutable_dashboard_id();

  public:
  // string dashboard_name = 2;
  void clear_dashboard_name() ;
  const std::string& dashboard_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dashboard_name(Arg_&& arg, Args_... args);
  std::string* mutable_dashboard_name();
  PROTOBUF_NODISCARD std::string* release_dashboard_name();
  void set_allocated_dashboard_name(std::string* value);

  private:
  const std::string& _internal_dashboard_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dashboard_name(
      const std::string& value);
  std::string* _internal_mutable_dashboard_name();

  public:
  // string created_by = 5;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 6;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string background_image_url = 8;
  void clear_background_image_url() ;
  const std::string& background_image_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_background_image_url(Arg_&& arg, Args_... args);
  std::string* mutable_background_image_url();
  PROTOBUF_NODISCARD std::string* release_background_image_url();
  void set_allocated_background_image_url(std::string* value);

  private:
  const std::string& _internal_background_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background_image_url(
      const std::string& value);
  std::string* _internal_mutable_background_image_url();

  public:
  // string theme_id = 9;
  void clear_theme_id() ;
  const std::string& theme_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_id(Arg_&& arg, Args_... args);
  std::string* mutable_theme_id();
  PROTOBUF_NODISCARD std::string* release_theme_id();
  void set_allocated_theme_id(std::string* value);

  private:
  const std::string& _internal_theme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_id(
      const std::string& value);
  std::string* _internal_mutable_theme_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.DashboardLayout)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      160, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DashboardLayout& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::visualization::WidgetConfig > widgets_;
    ::google::protobuf::internal::MapField<DashboardLayout_LayoutPositionsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        layout_positions_;
    ::google::protobuf::internal::MapField<DashboardLayout_DashboardMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        dashboard_metadata_;
    ::google::protobuf::internal::ArenaStringPtr dashboard_id_;
    ::google::protobuf::internal::ArenaStringPtr dashboard_name_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr background_image_url_;
    ::google::protobuf::internal::ArenaStringPtr theme_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class VisualizationConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.visualization.VisualizationConfig) */ {
 public:
  inline VisualizationConfig() : VisualizationConfig(nullptr) {}
  ~VisualizationConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VisualizationConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VisualizationConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VisualizationConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline VisualizationConfig(const VisualizationConfig& from) : VisualizationConfig(nullptr, from) {}
  inline VisualizationConfig(VisualizationConfig&& from) noexcept
      : VisualizationConfig(nullptr, std::move(from)) {}
  inline VisualizationConfig& operator=(const VisualizationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualizationConfig& operator=(VisualizationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisualizationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisualizationConfig* internal_default_instance() {
    return reinterpret_cast<const VisualizationConfig*>(
        &_VisualizationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(VisualizationConfig& a, VisualizationConfig& b) { a.Swap(&b); }
  inline void Swap(VisualizationConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisualizationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisualizationConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VisualizationConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VisualizationConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VisualizationConfig& from) { VisualizationConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VisualizationConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.visualization.VisualizationConfig"; }

 protected:
  explicit VisualizationConfig(::google::protobuf::Arena* arena);
  VisualizationConfig(::google::protobuf::Arena* arena, const VisualizationConfig& from);
  VisualizationConfig(::google::protobuf::Arena* arena, VisualizationConfig&& from) noexcept
      : VisualizationConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigMetadataFieldNumber = 5,
    kFavoriteDashboardsFieldNumber = 6,
    kUserIdFieldNumber = 1,
    kDefaultDashboardFieldNumber = 2,
    kThemeSettingsFieldNumber = 3,
    kEnableRealTimeUpdatesFieldNumber = 4,
  };
  // map<string, string> config_metadata = 5;
  int config_metadata_size() const;
  private:
  int _internal_config_metadata_size() const;

  public:
  void clear_config_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_config_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_config_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_config_metadata();

  public:
  // repeated string favorite_dashboards = 6;
  int favorite_dashboards_size() const;
  private:
  int _internal_favorite_dashboards_size() const;

  public:
  void clear_favorite_dashboards() ;
  const std::string& favorite_dashboards(int index) const;
  std::string* mutable_favorite_dashboards(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_favorite_dashboards(int index, Arg_&& value, Args_... args);
  std::string* add_favorite_dashboards();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_favorite_dashboards(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& favorite_dashboards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_favorite_dashboards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_favorite_dashboards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_favorite_dashboards();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .seigr.visualization.DashboardLayout default_dashboard = 2;
  bool has_default_dashboard() const;
  void clear_default_dashboard() ;
  const ::seigr::visualization::DashboardLayout& default_dashboard() const;
  PROTOBUF_NODISCARD ::seigr::visualization::DashboardLayout* release_default_dashboard();
  ::seigr::visualization::DashboardLayout* mutable_default_dashboard();
  void set_allocated_default_dashboard(::seigr::visualization::DashboardLayout* value);
  void unsafe_arena_set_allocated_default_dashboard(::seigr::visualization::DashboardLayout* value);
  ::seigr::visualization::DashboardLayout* unsafe_arena_release_default_dashboard();

  private:
  const ::seigr::visualization::DashboardLayout& _internal_default_dashboard() const;
  ::seigr::visualization::DashboardLayout* _internal_mutable_default_dashboard();

  public:
  // .seigr.visualization.ThemeSettings theme_settings = 3;
  bool has_theme_settings() const;
  void clear_theme_settings() ;
  const ::seigr::visualization::ThemeSettings& theme_settings() const;
  PROTOBUF_NODISCARD ::seigr::visualization::ThemeSettings* release_theme_settings();
  ::seigr::visualization::ThemeSettings* mutable_theme_settings();
  void set_allocated_theme_settings(::seigr::visualization::ThemeSettings* value);
  void unsafe_arena_set_allocated_theme_settings(::seigr::visualization::ThemeSettings* value);
  ::seigr::visualization::ThemeSettings* unsafe_arena_release_theme_settings();

  private:
  const ::seigr::visualization::ThemeSettings& _internal_theme_settings() const;
  ::seigr::visualization::ThemeSettings* _internal_mutable_theme_settings();

  public:
  // bool enable_real_time_updates = 4;
  void clear_enable_real_time_updates() ;
  bool enable_real_time_updates() const;
  void set_enable_real_time_updates(bool value);

  private:
  bool _internal_enable_real_time_updates() const;
  void _internal_set_enable_real_time_updates(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.visualization.VisualizationConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VisualizationConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<VisualizationConfig_ConfigMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        config_metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> favorite_dashboards_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::seigr::visualization::DashboardLayout* default_dashboard_;
    ::seigr::visualization::ThemeSettings* theme_settings_;
    bool enable_real_time_updates_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_visualization_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InteractiveElement

// string element_id = 1;
inline void InteractiveElement::clear_element_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.element_id_.ClearToEmpty();
}
inline const std::string& InteractiveElement::element_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.InteractiveElement.element_id)
  return _internal_element_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InteractiveElement::set_element_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.element_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.InteractiveElement.element_id)
}
inline std::string* InteractiveElement::mutable_element_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_element_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.InteractiveElement.element_id)
  return _s;
}
inline const std::string& InteractiveElement::_internal_element_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.element_id_.Get();
}
inline void InteractiveElement::_internal_set_element_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.element_id_.Set(value, GetArena());
}
inline std::string* InteractiveElement::_internal_mutable_element_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.element_id_.Mutable( GetArena());
}
inline std::string* InteractiveElement::release_element_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.InteractiveElement.element_id)
  return _impl_.element_id_.Release();
}
inline void InteractiveElement::set_allocated_element_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.element_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.element_id_.IsDefault()) {
    _impl_.element_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.InteractiveElement.element_id)
}

// string widget_id = 2;
inline void InteractiveElement::clear_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.ClearToEmpty();
}
inline const std::string& InteractiveElement::widget_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.InteractiveElement.widget_id)
  return _internal_widget_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InteractiveElement::set_widget_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.InteractiveElement.widget_id)
}
inline std::string* InteractiveElement::mutable_widget_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_widget_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.InteractiveElement.widget_id)
  return _s;
}
inline const std::string& InteractiveElement::_internal_widget_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_id_.Get();
}
inline void InteractiveElement::_internal_set_widget_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(value, GetArena());
}
inline std::string* InteractiveElement::_internal_mutable_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_id_.Mutable( GetArena());
}
inline std::string* InteractiveElement::release_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.InteractiveElement.widget_id)
  return _impl_.widget_id_.Release();
}
inline void InteractiveElement::set_allocated_widget_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.widget_id_.IsDefault()) {
    _impl_.widget_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.InteractiveElement.widget_id)
}

// string type = 3;
inline void InteractiveElement::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& InteractiveElement::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.InteractiveElement.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InteractiveElement::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.InteractiveElement.type)
}
inline std::string* InteractiveElement::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.InteractiveElement.type)
  return _s;
}
inline const std::string& InteractiveElement::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void InteractiveElement::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* InteractiveElement::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* InteractiveElement::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.InteractiveElement.type)
  return _impl_.type_.Release();
}
inline void InteractiveElement::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.InteractiveElement.type)
}

// map<string, string> options = 4;
inline int InteractiveElement::_internal_options_size() const {
  return _internal_options().size();
}
inline int InteractiveElement::options_size() const {
  return _internal_options_size();
}
inline void InteractiveElement::clear_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.options_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InteractiveElement::_internal_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InteractiveElement::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.InteractiveElement.options)
  return _internal_options();
}
inline ::google::protobuf::Map<std::string, std::string>* InteractiveElement::_internal_mutable_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InteractiveElement::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.InteractiveElement.options)
  return _internal_mutable_options();
}

// bool is_required = 5;
inline void InteractiveElement::clear_is_required() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_required_ = false;
}
inline bool InteractiveElement::is_required() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.InteractiveElement.is_required)
  return _internal_is_required();
}
inline void InteractiveElement::set_is_required(bool value) {
  _internal_set_is_required(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.InteractiveElement.is_required)
}
inline bool InteractiveElement::_internal_is_required() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_required_;
}
inline void InteractiveElement::_internal_set_is_required(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_required_ = value;
}

// map<string, string> behavior_rules = 6;
inline int InteractiveElement::_internal_behavior_rules_size() const {
  return _internal_behavior_rules().size();
}
inline int InteractiveElement::behavior_rules_size() const {
  return _internal_behavior_rules_size();
}
inline void InteractiveElement::clear_behavior_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.behavior_rules_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& InteractiveElement::_internal_behavior_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.behavior_rules_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& InteractiveElement::behavior_rules() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.InteractiveElement.behavior_rules)
  return _internal_behavior_rules();
}
inline ::google::protobuf::Map<std::string, std::string>* InteractiveElement::_internal_mutable_behavior_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.behavior_rules_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* InteractiveElement::mutable_behavior_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.InteractiveElement.behavior_rules)
  return _internal_mutable_behavior_rules();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WidgetConfig

// string widget_id = 1;
inline void WidgetConfig::clear_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.ClearToEmpty();
}
inline const std::string& WidgetConfig::widget_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.widget_id)
  return _internal_widget_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidgetConfig::set_widget_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.widget_id)
}
inline std::string* WidgetConfig::mutable_widget_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_widget_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.widget_id)
  return _s;
}
inline const std::string& WidgetConfig::_internal_widget_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_id_.Get();
}
inline void WidgetConfig::_internal_set_widget_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(value, GetArena());
}
inline std::string* WidgetConfig::_internal_mutable_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_id_.Mutable( GetArena());
}
inline std::string* WidgetConfig::release_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.WidgetConfig.widget_id)
  return _impl_.widget_id_.Release();
}
inline void WidgetConfig::set_allocated_widget_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.widget_id_.IsDefault()) {
    _impl_.widget_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.WidgetConfig.widget_id)
}

// .seigr.visualization.WidgetType widget_type = 2;
inline void WidgetConfig::clear_widget_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_type_ = 0;
}
inline ::seigr::visualization::WidgetType WidgetConfig::widget_type() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.widget_type)
  return _internal_widget_type();
}
inline void WidgetConfig::set_widget_type(::seigr::visualization::WidgetType value) {
  _internal_set_widget_type(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.widget_type)
}
inline ::seigr::visualization::WidgetType WidgetConfig::_internal_widget_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::visualization::WidgetType>(_impl_.widget_type_);
}
inline void WidgetConfig::_internal_set_widget_type(::seigr::visualization::WidgetType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_type_ = value;
}

// string title = 3;
inline void WidgetConfig::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& WidgetConfig::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidgetConfig::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.title)
}
inline std::string* WidgetConfig::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.title)
  return _s;
}
inline const std::string& WidgetConfig::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void WidgetConfig::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* WidgetConfig::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* WidgetConfig::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.WidgetConfig.title)
  return _impl_.title_.Release();
}
inline void WidgetConfig::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.WidgetConfig.title)
}

// .seigr.visualization.ChartType chart_type = 4;
inline void WidgetConfig::clear_chart_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chart_type_ = 0;
}
inline ::seigr::visualization::ChartType WidgetConfig::chart_type() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.chart_type)
  return _internal_chart_type();
}
inline void WidgetConfig::set_chart_type(::seigr::visualization::ChartType value) {
  _internal_set_chart_type(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.chart_type)
}
inline ::seigr::visualization::ChartType WidgetConfig::_internal_chart_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::visualization::ChartType>(_impl_.chart_type_);
}
inline void WidgetConfig::_internal_set_chart_type(::seigr::visualization::ChartType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chart_type_ = value;
}

// string data_source = 5;
inline void WidgetConfig::clear_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.ClearToEmpty();
}
inline const std::string& WidgetConfig::data_source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.data_source)
  return _internal_data_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidgetConfig::set_data_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.data_source)
}
inline std::string* WidgetConfig::mutable_data_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.data_source)
  return _s;
}
inline const std::string& WidgetConfig::_internal_data_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_.Get();
}
inline void WidgetConfig::_internal_set_data_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.Set(value, GetArena());
}
inline std::string* WidgetConfig::_internal_mutable_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_source_.Mutable( GetArena());
}
inline std::string* WidgetConfig::release_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.WidgetConfig.data_source)
  return _impl_.data_source_.Release();
}
inline void WidgetConfig::set_allocated_data_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_.IsDefault()) {
    _impl_.data_source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.WidgetConfig.data_source)
}

// int32 refresh_interval_seconds = 6;
inline void WidgetConfig::clear_refresh_interval_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.refresh_interval_seconds_ = 0;
}
inline ::int32_t WidgetConfig::refresh_interval_seconds() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.refresh_interval_seconds)
  return _internal_refresh_interval_seconds();
}
inline void WidgetConfig::set_refresh_interval_seconds(::int32_t value) {
  _internal_set_refresh_interval_seconds(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.refresh_interval_seconds)
}
inline ::int32_t WidgetConfig::_internal_refresh_interval_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.refresh_interval_seconds_;
}
inline void WidgetConfig::_internal_set_refresh_interval_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.refresh_interval_seconds_ = value;
}

// map<string, string> display_options = 7;
inline int WidgetConfig::_internal_display_options_size() const {
  return _internal_display_options().size();
}
inline int WidgetConfig::display_options_size() const {
  return _internal_display_options_size();
}
inline void WidgetConfig::clear_display_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_options_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WidgetConfig::_internal_display_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.display_options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WidgetConfig::display_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.WidgetConfig.display_options)
  return _internal_display_options();
}
inline ::google::protobuf::Map<std::string, std::string>* WidgetConfig::_internal_mutable_display_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.display_options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WidgetConfig::mutable_display_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.WidgetConfig.display_options)
  return _internal_mutable_display_options();
}

// map<string, string> widget_metadata = 8;
inline int WidgetConfig::_internal_widget_metadata_size() const {
  return _internal_widget_metadata().size();
}
inline int WidgetConfig::widget_metadata_size() const {
  return _internal_widget_metadata_size();
}
inline void WidgetConfig::clear_widget_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WidgetConfig::_internal_widget_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WidgetConfig::widget_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.WidgetConfig.widget_metadata)
  return _internal_widget_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* WidgetConfig::_internal_mutable_widget_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WidgetConfig::mutable_widget_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.WidgetConfig.widget_metadata)
  return _internal_mutable_widget_metadata();
}

// string tooltip = 9;
inline void WidgetConfig::clear_tooltip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tooltip_.ClearToEmpty();
}
inline const std::string& WidgetConfig::tooltip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.tooltip)
  return _internal_tooltip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidgetConfig::set_tooltip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tooltip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.tooltip)
}
inline std::string* WidgetConfig::mutable_tooltip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tooltip();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.tooltip)
  return _s;
}
inline const std::string& WidgetConfig::_internal_tooltip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tooltip_.Get();
}
inline void WidgetConfig::_internal_set_tooltip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tooltip_.Set(value, GetArena());
}
inline std::string* WidgetConfig::_internal_mutable_tooltip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tooltip_.Mutable( GetArena());
}
inline std::string* WidgetConfig::release_tooltip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.WidgetConfig.tooltip)
  return _impl_.tooltip_.Release();
}
inline void WidgetConfig::set_allocated_tooltip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tooltip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tooltip_.IsDefault()) {
    _impl_.tooltip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.WidgetConfig.tooltip)
}

// string font_style = 10;
inline void WidgetConfig::clear_font_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_style_.ClearToEmpty();
}
inline const std::string& WidgetConfig::font_style() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.font_style)
  return _internal_font_style();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidgetConfig::set_font_style(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_style_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.font_style)
}
inline std::string* WidgetConfig::mutable_font_style() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_font_style();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.font_style)
  return _s;
}
inline const std::string& WidgetConfig::_internal_font_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.font_style_.Get();
}
inline void WidgetConfig::_internal_set_font_style(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_style_.Set(value, GetArena());
}
inline std::string* WidgetConfig::_internal_mutable_font_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.font_style_.Mutable( GetArena());
}
inline std::string* WidgetConfig::release_font_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.WidgetConfig.font_style)
  return _impl_.font_style_.Release();
}
inline void WidgetConfig::set_allocated_font_style(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_style_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.font_style_.IsDefault()) {
    _impl_.font_style_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.WidgetConfig.font_style)
}

// bool enable_interactivity = 11;
inline void WidgetConfig::clear_enable_interactivity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_interactivity_ = false;
}
inline bool WidgetConfig::enable_interactivity() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.enable_interactivity)
  return _internal_enable_interactivity();
}
inline void WidgetConfig::set_enable_interactivity(bool value) {
  _internal_set_enable_interactivity(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.WidgetConfig.enable_interactivity)
}
inline bool WidgetConfig::_internal_enable_interactivity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_interactivity_;
}
inline void WidgetConfig::_internal_set_enable_interactivity(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_interactivity_ = value;
}

// repeated .seigr.visualization.InteractiveElement interactive_elements = 12;
inline int WidgetConfig::_internal_interactive_elements_size() const {
  return _internal_interactive_elements().size();
}
inline int WidgetConfig::interactive_elements_size() const {
  return _internal_interactive_elements_size();
}
inline void WidgetConfig::clear_interactive_elements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interactive_elements_.Clear();
}
inline ::seigr::visualization::InteractiveElement* WidgetConfig::mutable_interactive_elements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.visualization.WidgetConfig.interactive_elements)
  return _internal_mutable_interactive_elements()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>* WidgetConfig::mutable_interactive_elements()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.visualization.WidgetConfig.interactive_elements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_interactive_elements();
}
inline const ::seigr::visualization::InteractiveElement& WidgetConfig::interactive_elements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.WidgetConfig.interactive_elements)
  return _internal_interactive_elements().Get(index);
}
inline ::seigr::visualization::InteractiveElement* WidgetConfig::add_interactive_elements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::visualization::InteractiveElement* _add = _internal_mutable_interactive_elements()->Add();
  // @@protoc_insertion_point(field_add:seigr.visualization.WidgetConfig.interactive_elements)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>& WidgetConfig::interactive_elements() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.visualization.WidgetConfig.interactive_elements)
  return _internal_interactive_elements();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>&
WidgetConfig::_internal_interactive_elements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interactive_elements_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::InteractiveElement>*
WidgetConfig::_internal_mutable_interactive_elements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.interactive_elements_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DashboardLayout

// string dashboard_id = 1;
inline void DashboardLayout::clear_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.ClearToEmpty();
}
inline const std::string& DashboardLayout::dashboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.dashboard_id)
  return _internal_dashboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_dashboard_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.dashboard_id)
}
inline std::string* DashboardLayout::mutable_dashboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dashboard_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.dashboard_id)
  return _s;
}
inline const std::string& DashboardLayout::_internal_dashboard_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dashboard_id_.Get();
}
inline void DashboardLayout::_internal_set_dashboard_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dashboard_id_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.dashboard_id)
  return _impl_.dashboard_id_.Release();
}
inline void DashboardLayout::set_allocated_dashboard_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dashboard_id_.IsDefault()) {
    _impl_.dashboard_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.dashboard_id)
}

// string dashboard_name = 2;
inline void DashboardLayout::clear_dashboard_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_name_.ClearToEmpty();
}
inline const std::string& DashboardLayout::dashboard_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.dashboard_name)
  return _internal_dashboard_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_dashboard_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.dashboard_name)
}
inline std::string* DashboardLayout::mutable_dashboard_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dashboard_name();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.dashboard_name)
  return _s;
}
inline const std::string& DashboardLayout::_internal_dashboard_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dashboard_name_.Get();
}
inline void DashboardLayout::_internal_set_dashboard_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_name_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_dashboard_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dashboard_name_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_dashboard_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.dashboard_name)
  return _impl_.dashboard_name_.Release();
}
inline void DashboardLayout::set_allocated_dashboard_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dashboard_name_.IsDefault()) {
    _impl_.dashboard_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.dashboard_name)
}

// repeated .seigr.visualization.WidgetConfig widgets = 3;
inline int DashboardLayout::_internal_widgets_size() const {
  return _internal_widgets().size();
}
inline int DashboardLayout::widgets_size() const {
  return _internal_widgets_size();
}
inline void DashboardLayout::clear_widgets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widgets_.Clear();
}
inline ::seigr::visualization::WidgetConfig* DashboardLayout::mutable_widgets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.widgets)
  return _internal_mutable_widgets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>* DashboardLayout::mutable_widgets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.visualization.DashboardLayout.widgets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_widgets();
}
inline const ::seigr::visualization::WidgetConfig& DashboardLayout::widgets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.widgets)
  return _internal_widgets().Get(index);
}
inline ::seigr::visualization::WidgetConfig* DashboardLayout::add_widgets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::visualization::WidgetConfig* _add = _internal_mutable_widgets()->Add();
  // @@protoc_insertion_point(field_add:seigr.visualization.DashboardLayout.widgets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>& DashboardLayout::widgets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.visualization.DashboardLayout.widgets)
  return _internal_widgets();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>&
DashboardLayout::_internal_widgets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widgets_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::WidgetConfig>*
DashboardLayout::_internal_mutable_widgets() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.widgets_;
}

// map<string, int32> layout_positions = 4;
inline int DashboardLayout::_internal_layout_positions_size() const {
  return _internal_layout_positions().size();
}
inline int DashboardLayout::layout_positions_size() const {
  return _internal_layout_positions_size();
}
inline void DashboardLayout::clear_layout_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layout_positions_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& DashboardLayout::_internal_layout_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layout_positions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& DashboardLayout::layout_positions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.DashboardLayout.layout_positions)
  return _internal_layout_positions();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* DashboardLayout::_internal_mutable_layout_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.layout_positions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* DashboardLayout::mutable_layout_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.DashboardLayout.layout_positions)
  return _internal_mutable_layout_positions();
}

// string created_by = 5;
inline void DashboardLayout::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& DashboardLayout::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.created_by)
}
inline std::string* DashboardLayout::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.created_by)
  return _s;
}
inline const std::string& DashboardLayout::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void DashboardLayout::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.created_by)
  return _impl_.created_by_.Release();
}
inline void DashboardLayout::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.created_by)
}

// string created_at = 6;
inline void DashboardLayout::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& DashboardLayout::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.created_at)
}
inline std::string* DashboardLayout::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.created_at)
  return _s;
}
inline const std::string& DashboardLayout::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void DashboardLayout::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.created_at)
  return _impl_.created_at_.Release();
}
inline void DashboardLayout::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.created_at)
}

// map<string, string> dashboard_metadata = 7;
inline int DashboardLayout::_internal_dashboard_metadata_size() const {
  return _internal_dashboard_metadata().size();
}
inline int DashboardLayout::dashboard_metadata_size() const {
  return _internal_dashboard_metadata_size();
}
inline void DashboardLayout::clear_dashboard_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DashboardLayout::_internal_dashboard_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dashboard_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DashboardLayout::dashboard_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.DashboardLayout.dashboard_metadata)
  return _internal_dashboard_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* DashboardLayout::_internal_mutable_dashboard_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dashboard_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* DashboardLayout::mutable_dashboard_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.DashboardLayout.dashboard_metadata)
  return _internal_mutable_dashboard_metadata();
}

// string background_image_url = 8;
inline void DashboardLayout::clear_background_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_image_url_.ClearToEmpty();
}
inline const std::string& DashboardLayout::background_image_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.background_image_url)
  return _internal_background_image_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_background_image_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_image_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.background_image_url)
}
inline std::string* DashboardLayout::mutable_background_image_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_background_image_url();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.background_image_url)
  return _s;
}
inline const std::string& DashboardLayout::_internal_background_image_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.background_image_url_.Get();
}
inline void DashboardLayout::_internal_set_background_image_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_image_url_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_background_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.background_image_url_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_background_image_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.background_image_url)
  return _impl_.background_image_url_.Release();
}
inline void DashboardLayout::set_allocated_background_image_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_image_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.background_image_url_.IsDefault()) {
    _impl_.background_image_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.background_image_url)
}

// string theme_id = 9;
inline void DashboardLayout::clear_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.ClearToEmpty();
}
inline const std::string& DashboardLayout::theme_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DashboardLayout.theme_id)
  return _internal_theme_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DashboardLayout::set_theme_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DashboardLayout.theme_id)
}
inline std::string* DashboardLayout::mutable_theme_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DashboardLayout.theme_id)
  return _s;
}
inline const std::string& DashboardLayout::_internal_theme_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_id_.Get();
}
inline void DashboardLayout::_internal_set_theme_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.Set(value, GetArena());
}
inline std::string* DashboardLayout::_internal_mutable_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.theme_id_.Mutable( GetArena());
}
inline std::string* DashboardLayout::release_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DashboardLayout.theme_id)
  return _impl_.theme_id_.Release();
}
inline void DashboardLayout::set_allocated_theme_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_id_.IsDefault()) {
    _impl_.theme_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DashboardLayout.theme_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ThemeSettings

// string theme_id = 1;
inline void ThemeSettings::clear_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.ClearToEmpty();
}
inline const std::string& ThemeSettings::theme_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.theme_id)
  return _internal_theme_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_theme_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.theme_id)
}
inline std::string* ThemeSettings::mutable_theme_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.theme_id)
  return _s;
}
inline const std::string& ThemeSettings::_internal_theme_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_id_.Get();
}
inline void ThemeSettings::_internal_set_theme_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.theme_id_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_theme_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.theme_id)
  return _impl_.theme_id_.Release();
}
inline void ThemeSettings::set_allocated_theme_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_id_.IsDefault()) {
    _impl_.theme_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.theme_id)
}

// string theme_name = 2;
inline void ThemeSettings::clear_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.ClearToEmpty();
}
inline const std::string& ThemeSettings::theme_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.theme_name)
  return _internal_theme_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_theme_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.theme_name)
}
inline std::string* ThemeSettings::mutable_theme_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.theme_name)
  return _s;
}
inline const std::string& ThemeSettings::_internal_theme_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_name_.Get();
}
inline void ThemeSettings::_internal_set_theme_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.theme_name_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.theme_name)
  return _impl_.theme_name_.Release();
}
inline void ThemeSettings::set_allocated_theme_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_name_.IsDefault()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.theme_name)
}

// string primary_color = 3;
inline void ThemeSettings::clear_primary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_color_.ClearToEmpty();
}
inline const std::string& ThemeSettings::primary_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.primary_color)
  return _internal_primary_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_primary_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.primary_color)
}
inline std::string* ThemeSettings::mutable_primary_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_color();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.primary_color)
  return _s;
}
inline const std::string& ThemeSettings::_internal_primary_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_color_.Get();
}
inline void ThemeSettings::_internal_set_primary_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_color_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_primary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_color_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_primary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.primary_color)
  return _impl_.primary_color_.Release();
}
inline void ThemeSettings::set_allocated_primary_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_color_.IsDefault()) {
    _impl_.primary_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.primary_color)
}

// string secondary_color = 4;
inline void ThemeSettings::clear_secondary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_color_.ClearToEmpty();
}
inline const std::string& ThemeSettings::secondary_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.secondary_color)
  return _internal_secondary_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_secondary_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.secondary_color)
}
inline std::string* ThemeSettings::mutable_secondary_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secondary_color();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.secondary_color)
  return _s;
}
inline const std::string& ThemeSettings::_internal_secondary_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secondary_color_.Get();
}
inline void ThemeSettings::_internal_set_secondary_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_color_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_secondary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secondary_color_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_secondary_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.secondary_color)
  return _impl_.secondary_color_.Release();
}
inline void ThemeSettings::set_allocated_secondary_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secondary_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secondary_color_.IsDefault()) {
    _impl_.secondary_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.secondary_color)
}

// string background_color = 5;
inline void ThemeSettings::clear_background_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_color_.ClearToEmpty();
}
inline const std::string& ThemeSettings::background_color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.background_color)
  return _internal_background_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_background_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.background_color)
}
inline std::string* ThemeSettings::mutable_background_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_background_color();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.background_color)
  return _s;
}
inline const std::string& ThemeSettings::_internal_background_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.background_color_.Get();
}
inline void ThemeSettings::_internal_set_background_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_color_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_background_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.background_color_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_background_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.background_color)
  return _impl_.background_color_.Release();
}
inline void ThemeSettings::set_allocated_background_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.background_color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.background_color_.IsDefault()) {
    _impl_.background_color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.background_color)
}

// string font_family = 6;
inline void ThemeSettings::clear_font_family() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_family_.ClearToEmpty();
}
inline const std::string& ThemeSettings::font_family() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.font_family)
  return _internal_font_family();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_font_family(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_family_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.font_family)
}
inline std::string* ThemeSettings::mutable_font_family() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_font_family();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.font_family)
  return _s;
}
inline const std::string& ThemeSettings::_internal_font_family() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.font_family_.Get();
}
inline void ThemeSettings::_internal_set_font_family(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_family_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_font_family() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.font_family_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_font_family() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.font_family)
  return _impl_.font_family_.Release();
}
inline void ThemeSettings::set_allocated_font_family(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_family_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.font_family_.IsDefault()) {
    _impl_.font_family_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.font_family)
}

// string font_size = 7;
inline void ThemeSettings::clear_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_size_.ClearToEmpty();
}
inline const std::string& ThemeSettings::font_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.font_size)
  return _internal_font_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThemeSettings::set_font_size(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.font_size)
}
inline std::string* ThemeSettings::mutable_font_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_font_size();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.ThemeSettings.font_size)
  return _s;
}
inline const std::string& ThemeSettings::_internal_font_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.font_size_.Get();
}
inline void ThemeSettings::_internal_set_font_size(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_size_.Set(value, GetArena());
}
inline std::string* ThemeSettings::_internal_mutable_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.font_size_.Mutable( GetArena());
}
inline std::string* ThemeSettings::release_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.ThemeSettings.font_size)
  return _impl_.font_size_.Release();
}
inline void ThemeSettings::set_allocated_font_size(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_size_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.font_size_.IsDefault()) {
    _impl_.font_size_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.ThemeSettings.font_size)
}

// map<string, string> additional_styles = 8;
inline int ThemeSettings::_internal_additional_styles_size() const {
  return _internal_additional_styles().size();
}
inline int ThemeSettings::additional_styles_size() const {
  return _internal_additional_styles_size();
}
inline void ThemeSettings::clear_additional_styles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.additional_styles_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ThemeSettings::_internal_additional_styles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.additional_styles_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ThemeSettings::additional_styles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.ThemeSettings.additional_styles)
  return _internal_additional_styles();
}
inline ::google::protobuf::Map<std::string, std::string>* ThemeSettings::_internal_mutable_additional_styles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.additional_styles_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ThemeSettings::mutable_additional_styles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.ThemeSettings.additional_styles)
  return _internal_mutable_additional_styles();
}

// bool is_dark_mode = 9;
inline void ThemeSettings::clear_is_dark_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_dark_mode_ = false;
}
inline bool ThemeSettings::is_dark_mode() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.ThemeSettings.is_dark_mode)
  return _internal_is_dark_mode();
}
inline void ThemeSettings::set_is_dark_mode(bool value) {
  _internal_set_is_dark_mode(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.ThemeSettings.is_dark_mode)
}
inline bool ThemeSettings::_internal_is_dark_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_dark_mode_;
}
inline void ThemeSettings::_internal_set_is_dark_mode(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_dark_mode_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VisualizationConfig

// string user_id = 1;
inline void VisualizationConfig::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& VisualizationConfig::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationConfig.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationConfig::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationConfig.user_id)
}
inline std::string* VisualizationConfig::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationConfig.user_id)
  return _s;
}
inline const std::string& VisualizationConfig::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void VisualizationConfig::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* VisualizationConfig::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* VisualizationConfig::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationConfig.user_id)
  return _impl_.user_id_.Release();
}
inline void VisualizationConfig::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationConfig.user_id)
}

// .seigr.visualization.DashboardLayout default_dashboard = 2;
inline bool VisualizationConfig::has_default_dashboard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_dashboard_ != nullptr);
  return value;
}
inline void VisualizationConfig::clear_default_dashboard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_dashboard_ != nullptr) _impl_.default_dashboard_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::visualization::DashboardLayout& VisualizationConfig::_internal_default_dashboard() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::visualization::DashboardLayout* p = _impl_.default_dashboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::visualization::DashboardLayout&>(::seigr::visualization::_DashboardLayout_default_instance_);
}
inline const ::seigr::visualization::DashboardLayout& VisualizationConfig::default_dashboard() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationConfig.default_dashboard)
  return _internal_default_dashboard();
}
inline void VisualizationConfig::unsafe_arena_set_allocated_default_dashboard(::seigr::visualization::DashboardLayout* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_dashboard_);
  }
  _impl_.default_dashboard_ = reinterpret_cast<::seigr::visualization::DashboardLayout*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.visualization.VisualizationConfig.default_dashboard)
}
inline ::seigr::visualization::DashboardLayout* VisualizationConfig::release_default_dashboard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::visualization::DashboardLayout* released = _impl_.default_dashboard_;
  _impl_.default_dashboard_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::visualization::DashboardLayout* VisualizationConfig::unsafe_arena_release_default_dashboard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationConfig.default_dashboard)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::visualization::DashboardLayout* temp = _impl_.default_dashboard_;
  _impl_.default_dashboard_ = nullptr;
  return temp;
}
inline ::seigr::visualization::DashboardLayout* VisualizationConfig::_internal_mutable_default_dashboard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_dashboard_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::visualization::DashboardLayout>(GetArena());
    _impl_.default_dashboard_ = reinterpret_cast<::seigr::visualization::DashboardLayout*>(p);
  }
  return _impl_.default_dashboard_;
}
inline ::seigr::visualization::DashboardLayout* VisualizationConfig::mutable_default_dashboard() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::visualization::DashboardLayout* _msg = _internal_mutable_default_dashboard();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationConfig.default_dashboard)
  return _msg;
}
inline void VisualizationConfig::set_allocated_default_dashboard(::seigr::visualization::DashboardLayout* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.default_dashboard_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default_dashboard_ = reinterpret_cast<::seigr::visualization::DashboardLayout*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationConfig.default_dashboard)
}

// .seigr.visualization.ThemeSettings theme_settings = 3;
inline bool VisualizationConfig::has_theme_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_settings_ != nullptr);
  return value;
}
inline void VisualizationConfig::clear_theme_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.theme_settings_ != nullptr) _impl_.theme_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::seigr::visualization::ThemeSettings& VisualizationConfig::_internal_theme_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::visualization::ThemeSettings* p = _impl_.theme_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::visualization::ThemeSettings&>(::seigr::visualization::_ThemeSettings_default_instance_);
}
inline const ::seigr::visualization::ThemeSettings& VisualizationConfig::theme_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationConfig.theme_settings)
  return _internal_theme_settings();
}
inline void VisualizationConfig::unsafe_arena_set_allocated_theme_settings(::seigr::visualization::ThemeSettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.theme_settings_);
  }
  _impl_.theme_settings_ = reinterpret_cast<::seigr::visualization::ThemeSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.visualization.VisualizationConfig.theme_settings)
}
inline ::seigr::visualization::ThemeSettings* VisualizationConfig::release_theme_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::seigr::visualization::ThemeSettings* released = _impl_.theme_settings_;
  _impl_.theme_settings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::visualization::ThemeSettings* VisualizationConfig::unsafe_arena_release_theme_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationConfig.theme_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::seigr::visualization::ThemeSettings* temp = _impl_.theme_settings_;
  _impl_.theme_settings_ = nullptr;
  return temp;
}
inline ::seigr::visualization::ThemeSettings* VisualizationConfig::_internal_mutable_theme_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.theme_settings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::visualization::ThemeSettings>(GetArena());
    _impl_.theme_settings_ = reinterpret_cast<::seigr::visualization::ThemeSettings*>(p);
  }
  return _impl_.theme_settings_;
}
inline ::seigr::visualization::ThemeSettings* VisualizationConfig::mutable_theme_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::seigr::visualization::ThemeSettings* _msg = _internal_mutable_theme_settings();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationConfig.theme_settings)
  return _msg;
}
inline void VisualizationConfig::set_allocated_theme_settings(::seigr::visualization::ThemeSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.theme_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.theme_settings_ = reinterpret_cast<::seigr::visualization::ThemeSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationConfig.theme_settings)
}

// bool enable_real_time_updates = 4;
inline void VisualizationConfig::clear_enable_real_time_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_real_time_updates_ = false;
}
inline bool VisualizationConfig::enable_real_time_updates() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationConfig.enable_real_time_updates)
  return _internal_enable_real_time_updates();
}
inline void VisualizationConfig::set_enable_real_time_updates(bool value) {
  _internal_set_enable_real_time_updates(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationConfig.enable_real_time_updates)
}
inline bool VisualizationConfig::_internal_enable_real_time_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_real_time_updates_;
}
inline void VisualizationConfig::_internal_set_enable_real_time_updates(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_real_time_updates_ = value;
}

// map<string, string> config_metadata = 5;
inline int VisualizationConfig::_internal_config_metadata_size() const {
  return _internal_config_metadata().size();
}
inline int VisualizationConfig::config_metadata_size() const {
  return _internal_config_metadata_size();
}
inline void VisualizationConfig::clear_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.config_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& VisualizationConfig::_internal_config_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.config_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& VisualizationConfig::config_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.VisualizationConfig.config_metadata)
  return _internal_config_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* VisualizationConfig::_internal_mutable_config_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.config_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* VisualizationConfig::mutable_config_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.VisualizationConfig.config_metadata)
  return _internal_mutable_config_metadata();
}

// repeated string favorite_dashboards = 6;
inline int VisualizationConfig::_internal_favorite_dashboards_size() const {
  return _internal_favorite_dashboards().size();
}
inline int VisualizationConfig::favorite_dashboards_size() const {
  return _internal_favorite_dashboards_size();
}
inline void VisualizationConfig::clear_favorite_dashboards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.favorite_dashboards_.Clear();
}
inline std::string* VisualizationConfig::add_favorite_dashboards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_favorite_dashboards()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.visualization.VisualizationConfig.favorite_dashboards)
  return _s;
}
inline const std::string& VisualizationConfig::favorite_dashboards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationConfig.favorite_dashboards)
  return _internal_favorite_dashboards().Get(index);
}
inline std::string* VisualizationConfig::mutable_favorite_dashboards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationConfig.favorite_dashboards)
  return _internal_mutable_favorite_dashboards()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void VisualizationConfig::set_favorite_dashboards(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_favorite_dashboards()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationConfig.favorite_dashboards)
}
template <typename Arg_, typename... Args_>
inline void VisualizationConfig::add_favorite_dashboards(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_favorite_dashboards(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.visualization.VisualizationConfig.favorite_dashboards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VisualizationConfig::favorite_dashboards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.visualization.VisualizationConfig.favorite_dashboards)
  return _internal_favorite_dashboards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VisualizationConfig::mutable_favorite_dashboards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.visualization.VisualizationConfig.favorite_dashboards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_favorite_dashboards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VisualizationConfig::_internal_favorite_dashboards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.favorite_dashboards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VisualizationConfig::_internal_mutable_favorite_dashboards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.favorite_dashboards_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataPoint

// string label = 1;
inline void DataPoint::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& DataPoint::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DataPoint.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPoint::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DataPoint.label)
}
inline std::string* DataPoint::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DataPoint.label)
  return _s;
}
inline const std::string& DataPoint::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void DataPoint::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* DataPoint::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* DataPoint::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DataPoint.label)
  return _impl_.label_.Release();
}
inline void DataPoint::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DataPoint.label)
}

// double value = 2;
inline void DataPoint::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double DataPoint::value() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.DataPoint.value)
  return _internal_value();
}
inline void DataPoint::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.DataPoint.value)
}
inline double DataPoint::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void DataPoint::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// map<string, string> attributes = 3;
inline int DataPoint::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int DataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline void DataPoint::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataPoint::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataPoint::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.DataPoint.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* DataPoint::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* DataPoint::mutable_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.DataPoint.attributes)
  return _internal_mutable_attributes();
}

// string color = 4;
inline void DataPoint::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.ClearToEmpty();
}
inline const std::string& DataPoint::color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DataPoint.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPoint::set_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DataPoint.color)
}
inline std::string* DataPoint::mutable_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DataPoint.color)
  return _s;
}
inline const std::string& DataPoint::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_.Get();
}
inline void DataPoint::_internal_set_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(value, GetArena());
}
inline std::string* DataPoint::_internal_mutable_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.color_.Mutable( GetArena());
}
inline std::string* DataPoint::release_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DataPoint.color)
  return _impl_.color_.Release();
}
inline void DataPoint::set_allocated_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DataPoint.color)
}

// string icon = 5;
inline void DataPoint::clear_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& DataPoint::icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.DataPoint.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPoint::set_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.DataPoint.icon)
}
inline std::string* DataPoint::mutable_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.DataPoint.icon)
  return _s;
}
inline const std::string& DataPoint::_internal_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.icon_.Get();
}
inline void DataPoint::_internal_set_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(value, GetArena());
}
inline std::string* DataPoint::_internal_mutable_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.icon_.Mutable( GetArena());
}
inline std::string* DataPoint::release_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.DataPoint.icon)
  return _impl_.icon_.Release();
}
inline void DataPoint::set_allocated_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.DataPoint.icon)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VisualizationData

// string data_source_id = 1;
inline void VisualizationData::clear_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& VisualizationData::data_source_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationData.data_source_id)
  return _internal_data_source_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationData::set_data_source_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationData.data_source_id)
}
inline std::string* VisualizationData::mutable_data_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationData.data_source_id)
  return _s;
}
inline const std::string& VisualizationData::_internal_data_source_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_id_.Get();
}
inline void VisualizationData::_internal_set_data_source_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(value, GetArena());
}
inline std::string* VisualizationData::_internal_mutable_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_source_id_.Mutable( GetArena());
}
inline std::string* VisualizationData::release_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationData.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void VisualizationData::set_allocated_data_source_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationData.data_source_id)
}

// string widget_id = 2;
inline void VisualizationData::clear_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.ClearToEmpty();
}
inline const std::string& VisualizationData::widget_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationData.widget_id)
  return _internal_widget_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationData::set_widget_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationData.widget_id)
}
inline std::string* VisualizationData::mutable_widget_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_widget_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationData.widget_id)
  return _s;
}
inline const std::string& VisualizationData::_internal_widget_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_id_.Get();
}
inline void VisualizationData::_internal_set_widget_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(value, GetArena());
}
inline std::string* VisualizationData::_internal_mutable_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_id_.Mutable( GetArena());
}
inline std::string* VisualizationData::release_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationData.widget_id)
  return _impl_.widget_id_.Release();
}
inline void VisualizationData::set_allocated_widget_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.widget_id_.IsDefault()) {
    _impl_.widget_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationData.widget_id)
}

// repeated .seigr.visualization.DataPoint data_points = 3;
inline int VisualizationData::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int VisualizationData::data_points_size() const {
  return _internal_data_points_size();
}
inline void VisualizationData::clear_data_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_points_.Clear();
}
inline ::seigr::visualization::DataPoint* VisualizationData::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationData.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>* VisualizationData::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.visualization.VisualizationData.data_points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data_points();
}
inline const ::seigr::visualization::DataPoint& VisualizationData::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationData.data_points)
  return _internal_data_points().Get(index);
}
inline ::seigr::visualization::DataPoint* VisualizationData::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::visualization::DataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:seigr.visualization.VisualizationData.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>& VisualizationData::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.visualization.VisualizationData.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>&
VisualizationData::_internal_data_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::visualization::DataPoint>*
VisualizationData::_internal_mutable_data_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_points_;
}

// string timestamp = 4;
inline void VisualizationData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& VisualizationData::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationData.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationData::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationData.timestamp)
}
inline std::string* VisualizationData::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationData.timestamp)
  return _s;
}
inline const std::string& VisualizationData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void VisualizationData::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* VisualizationData::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* VisualizationData::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationData.timestamp)
  return _impl_.timestamp_.Release();
}
inline void VisualizationData::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationData.timestamp)
}

// map<string, string> data_metadata = 5;
inline int VisualizationData::_internal_data_metadata_size() const {
  return _internal_data_metadata().size();
}
inline int VisualizationData::data_metadata_size() const {
  return _internal_data_metadata_size();
}
inline void VisualizationData::clear_data_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& VisualizationData::_internal_data_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& VisualizationData::data_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.visualization.VisualizationData.data_metadata)
  return _internal_data_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* VisualizationData::_internal_mutable_data_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* VisualizationData::mutable_data_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.visualization.VisualizationData.data_metadata)
  return _internal_mutable_data_metadata();
}

// bool is_historical_data = 6;
inline void VisualizationData::clear_is_historical_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_historical_data_ = false;
}
inline bool VisualizationData::is_historical_data() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationData.is_historical_data)
  return _internal_is_historical_data();
}
inline void VisualizationData::set_is_historical_data(bool value) {
  _internal_set_is_historical_data(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationData.is_historical_data)
}
inline bool VisualizationData::_internal_is_historical_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_historical_data_;
}
inline void VisualizationData::_internal_set_is_historical_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_historical_data_ = value;
}

// -------------------------------------------------------------------

// VisualizationUsageStats

// string user_id = 1;
inline void VisualizationUsageStats::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& VisualizationUsageStats::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationUsageStats.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationUsageStats::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationUsageStats.user_id)
}
inline std::string* VisualizationUsageStats::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationUsageStats.user_id)
  return _s;
}
inline const std::string& VisualizationUsageStats::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void VisualizationUsageStats::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* VisualizationUsageStats::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* VisualizationUsageStats::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationUsageStats.user_id)
  return _impl_.user_id_.Release();
}
inline void VisualizationUsageStats::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationUsageStats.user_id)
}

// string dashboard_id = 2;
inline void VisualizationUsageStats::clear_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.ClearToEmpty();
}
inline const std::string& VisualizationUsageStats::dashboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationUsageStats.dashboard_id)
  return _internal_dashboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationUsageStats::set_dashboard_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationUsageStats.dashboard_id)
}
inline std::string* VisualizationUsageStats::mutable_dashboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dashboard_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationUsageStats.dashboard_id)
  return _s;
}
inline const std::string& VisualizationUsageStats::_internal_dashboard_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dashboard_id_.Get();
}
inline void VisualizationUsageStats::_internal_set_dashboard_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.Set(value, GetArena());
}
inline std::string* VisualizationUsageStats::_internal_mutable_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dashboard_id_.Mutable( GetArena());
}
inline std::string* VisualizationUsageStats::release_dashboard_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationUsageStats.dashboard_id)
  return _impl_.dashboard_id_.Release();
}
inline void VisualizationUsageStats::set_allocated_dashboard_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dashboard_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dashboard_id_.IsDefault()) {
    _impl_.dashboard_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationUsageStats.dashboard_id)
}

// string widget_id = 3;
inline void VisualizationUsageStats::clear_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.ClearToEmpty();
}
inline const std::string& VisualizationUsageStats::widget_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationUsageStats.widget_id)
  return _internal_widget_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationUsageStats::set_widget_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationUsageStats.widget_id)
}
inline std::string* VisualizationUsageStats::mutable_widget_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_widget_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationUsageStats.widget_id)
  return _s;
}
inline const std::string& VisualizationUsageStats::_internal_widget_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_id_.Get();
}
inline void VisualizationUsageStats::_internal_set_widget_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(value, GetArena());
}
inline std::string* VisualizationUsageStats::_internal_mutable_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_id_.Mutable( GetArena());
}
inline std::string* VisualizationUsageStats::release_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationUsageStats.widget_id)
  return _impl_.widget_id_.Release();
}
inline void VisualizationUsageStats::set_allocated_widget_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.widget_id_.IsDefault()) {
    _impl_.widget_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationUsageStats.widget_id)
}

// int32 view_count = 4;
inline void VisualizationUsageStats::clear_view_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.view_count_ = 0;
}
inline ::int32_t VisualizationUsageStats::view_count() const {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationUsageStats.view_count)
  return _internal_view_count();
}
inline void VisualizationUsageStats::set_view_count(::int32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationUsageStats.view_count)
}
inline ::int32_t VisualizationUsageStats::_internal_view_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.view_count_;
}
inline void VisualizationUsageStats::_internal_set_view_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.view_count_ = value;
}

// string last_accessed = 5;
inline void VisualizationUsageStats::clear_last_accessed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_.ClearToEmpty();
}
inline const std::string& VisualizationUsageStats::last_accessed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationUsageStats.last_accessed)
  return _internal_last_accessed();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationUsageStats::set_last_accessed(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationUsageStats.last_accessed)
}
inline std::string* VisualizationUsageStats::mutable_last_accessed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_accessed();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationUsageStats.last_accessed)
  return _s;
}
inline const std::string& VisualizationUsageStats::_internal_last_accessed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_accessed_.Get();
}
inline void VisualizationUsageStats::_internal_set_last_accessed(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_.Set(value, GetArena());
}
inline std::string* VisualizationUsageStats::_internal_mutable_last_accessed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_accessed_.Mutable( GetArena());
}
inline std::string* VisualizationUsageStats::release_last_accessed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationUsageStats.last_accessed)
  return _impl_.last_accessed_.Release();
}
inline void VisualizationUsageStats::set_allocated_last_accessed(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_accessed_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_accessed_.IsDefault()) {
    _impl_.last_accessed_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationUsageStats.last_accessed)
}

// -------------------------------------------------------------------

// VisualizationErrorLog

// string error_id = 1;
inline void VisualizationErrorLog::clear_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.ClearToEmpty();
}
inline const std::string& VisualizationErrorLog::error_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationErrorLog.error_id)
  return _internal_error_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationErrorLog::set_error_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationErrorLog.error_id)
}
inline std::string* VisualizationErrorLog::mutable_error_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationErrorLog.error_id)
  return _s;
}
inline const std::string& VisualizationErrorLog::_internal_error_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_id_.Get();
}
inline void VisualizationErrorLog::_internal_set_error_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.Set(value, GetArena());
}
inline std::string* VisualizationErrorLog::_internal_mutable_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_id_.Mutable( GetArena());
}
inline std::string* VisualizationErrorLog::release_error_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationErrorLog.error_id)
  return _impl_.error_id_.Release();
}
inline void VisualizationErrorLog::set_allocated_error_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_id_.IsDefault()) {
    _impl_.error_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationErrorLog.error_id)
}

// string widget_id = 2;
inline void VisualizationErrorLog::clear_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.ClearToEmpty();
}
inline const std::string& VisualizationErrorLog::widget_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationErrorLog.widget_id)
  return _internal_widget_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationErrorLog::set_widget_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationErrorLog.widget_id)
}
inline std::string* VisualizationErrorLog::mutable_widget_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_widget_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationErrorLog.widget_id)
  return _s;
}
inline const std::string& VisualizationErrorLog::_internal_widget_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.widget_id_.Get();
}
inline void VisualizationErrorLog::_internal_set_widget_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.Set(value, GetArena());
}
inline std::string* VisualizationErrorLog::_internal_mutable_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.widget_id_.Mutable( GetArena());
}
inline std::string* VisualizationErrorLog::release_widget_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationErrorLog.widget_id)
  return _impl_.widget_id_.Release();
}
inline void VisualizationErrorLog::set_allocated_widget_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.widget_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.widget_id_.IsDefault()) {
    _impl_.widget_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationErrorLog.widget_id)
}

// string data_source_id = 3;
inline void VisualizationErrorLog::clear_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& VisualizationErrorLog::data_source_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationErrorLog.data_source_id)
  return _internal_data_source_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationErrorLog::set_data_source_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationErrorLog.data_source_id)
}
inline std::string* VisualizationErrorLog::mutable_data_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationErrorLog.data_source_id)
  return _s;
}
inline const std::string& VisualizationErrorLog::_internal_data_source_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_id_.Get();
}
inline void VisualizationErrorLog::_internal_set_data_source_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(value, GetArena());
}
inline std::string* VisualizationErrorLog::_internal_mutable_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_source_id_.Mutable( GetArena());
}
inline std::string* VisualizationErrorLog::release_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationErrorLog.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void VisualizationErrorLog::set_allocated_data_source_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationErrorLog.data_source_id)
}

// string error_message = 4;
inline void VisualizationErrorLog::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& VisualizationErrorLog::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationErrorLog.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationErrorLog::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationErrorLog.error_message)
}
inline std::string* VisualizationErrorLog::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationErrorLog.error_message)
  return _s;
}
inline const std::string& VisualizationErrorLog::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void VisualizationErrorLog::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* VisualizationErrorLog::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* VisualizationErrorLog::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationErrorLog.error_message)
  return _impl_.error_message_.Release();
}
inline void VisualizationErrorLog::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationErrorLog.error_message)
}

// string timestamp = 5;
inline void VisualizationErrorLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& VisualizationErrorLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.visualization.VisualizationErrorLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VisualizationErrorLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.visualization.VisualizationErrorLog.timestamp)
}
inline std::string* VisualizationErrorLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.visualization.VisualizationErrorLog.timestamp)
  return _s;
}
inline const std::string& VisualizationErrorLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void VisualizationErrorLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* VisualizationErrorLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* VisualizationErrorLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.visualization.VisualizationErrorLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void VisualizationErrorLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.visualization.VisualizationErrorLog.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace visualization
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::visualization::WidgetType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::visualization::WidgetType>() {
  return ::seigr::visualization::WidgetType_descriptor();
}
template <>
struct is_proto_enum<::seigr::visualization::ChartType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::visualization::ChartType>() {
  return ::seigr::visualization::ChartType_descriptor();
}
template <>
struct is_proto_enum<::seigr::visualization::ExportFormat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::visualization::ExportFormat>() {
  return ::seigr::visualization::ExportFormat_descriptor();
}
template <>
struct is_proto_enum<::seigr::visualization::StreamingState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::visualization::StreamingState>() {
  return ::seigr::visualization::StreamingState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // visualization_2eproto_2epb_2eh
