// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: policy.proto
// Protobuf C++ Version: 5.29.2

#ifndef policy_2eproto_2epb_2eh
#define policy_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_policy_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_policy_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_policy_2eproto;
namespace seigr {
namespace policy {
class ComplianceAudit;
struct ComplianceAuditDefaultTypeInternal;
extern ComplianceAuditDefaultTypeInternal _ComplianceAudit_default_instance_;
class ComplianceAuditRequest;
struct ComplianceAuditRequestDefaultTypeInternal;
extern ComplianceAuditRequestDefaultTypeInternal _ComplianceAuditRequest_default_instance_;
class ComplianceAuditResponse;
struct ComplianceAuditResponseDefaultTypeInternal;
extern ComplianceAuditResponseDefaultTypeInternal _ComplianceAuditResponse_default_instance_;
class ComplianceAudit_AuditMetadataEntry_DoNotUse;
struct ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal;
extern ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal _ComplianceAudit_AuditMetadataEntry_DoNotUse_default_instance_;
class ComplianceCheckRequest;
struct ComplianceCheckRequestDefaultTypeInternal;
extern ComplianceCheckRequestDefaultTypeInternal _ComplianceCheckRequest_default_instance_;
class ComplianceCheckResponse;
struct ComplianceCheckResponseDefaultTypeInternal;
extern ComplianceCheckResponseDefaultTypeInternal _ComplianceCheckResponse_default_instance_;
class PolicyDefinitionRequest;
struct PolicyDefinitionRequestDefaultTypeInternal;
extern PolicyDefinitionRequestDefaultTypeInternal _PolicyDefinitionRequest_default_instance_;
class PolicyDefinitionResponse;
struct PolicyDefinitionResponseDefaultTypeInternal;
extern PolicyDefinitionResponseDefaultTypeInternal _PolicyDefinitionResponse_default_instance_;
class PolicyEnforcement;
struct PolicyEnforcementDefaultTypeInternal;
extern PolicyEnforcementDefaultTypeInternal _PolicyEnforcement_default_instance_;
class PolicyEnforcementRequest;
struct PolicyEnforcementRequestDefaultTypeInternal;
extern PolicyEnforcementRequestDefaultTypeInternal _PolicyEnforcementRequest_default_instance_;
class PolicyEnforcementResponse;
struct PolicyEnforcementResponseDefaultTypeInternal;
extern PolicyEnforcementResponseDefaultTypeInternal _PolicyEnforcementResponse_default_instance_;
class PolicyEnforcement_EnforcementMetadataEntry_DoNotUse;
struct PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal _PolicyEnforcement_EnforcementMetadataEntry_DoNotUse_default_instance_;
class PolicyRule;
struct PolicyRuleDefaultTypeInternal;
extern PolicyRuleDefaultTypeInternal _PolicyRule_default_instance_;
class PolicyRule_PenaltyConditionsEntry_DoNotUse;
struct PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal;
extern PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal _PolicyRule_PenaltyConditionsEntry_DoNotUse_default_instance_;
class PolicyRule_RuleConditionsEntry_DoNotUse;
struct PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal;
extern PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal _PolicyRule_RuleConditionsEntry_DoNotUse_default_instance_;
class PolicyRule_RuleMetadataEntry_DoNotUse;
struct PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal _PolicyRule_RuleMetadataEntry_DoNotUse_default_instance_;
class PolicyUpdateRequest;
struct PolicyUpdateRequestDefaultTypeInternal;
extern PolicyUpdateRequestDefaultTypeInternal _PolicyUpdateRequest_default_instance_;
class PolicyUpdateResponse;
struct PolicyUpdateResponseDefaultTypeInternal;
extern PolicyUpdateResponseDefaultTypeInternal _PolicyUpdateResponse_default_instance_;
class PolicyViolation;
struct PolicyViolationDefaultTypeInternal;
extern PolicyViolationDefaultTypeInternal _PolicyViolation_default_instance_;
class PolicyViolationLogRequest;
struct PolicyViolationLogRequestDefaultTypeInternal;
extern PolicyViolationLogRequestDefaultTypeInternal _PolicyViolationLogRequest_default_instance_;
class PolicyViolationLogResponse;
struct PolicyViolationLogResponseDefaultTypeInternal;
extern PolicyViolationLogResponseDefaultTypeInternal _PolicyViolationLogResponse_default_instance_;
class PolicyViolation_ViolationMetadataEntry_DoNotUse;
struct PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal;
extern PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal _PolicyViolation_ViolationMetadataEntry_DoNotUse_default_instance_;
class SystemPolicy;
struct SystemPolicyDefaultTypeInternal;
extern SystemPolicyDefaultTypeInternal _SystemPolicy_default_instance_;
class SystemPolicy_PolicyMetadataEntry_DoNotUse;
struct SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal;
extern SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal _SystemPolicy_PolicyMetadataEntry_DoNotUse_default_instance_;
}  // namespace policy
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace policy {
enum GovernanceAction : int {
  ACTION_UNDEFINED = 0,
  ACTION_REVIEW = 1,
  ACTION_ESCALATE = 2,
  ACTION_APPROVE = 3,
  ACTION_REJECT = 4,
  ACTION_NOTIFY = 5,
  ACTION_WARN = 6,
  ACTION_REVOKE_ACCESS = 7,
  ACTION_TERMINATE_PROCESS = 8,
  GovernanceAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GovernanceAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GovernanceAction_IsValid(int value);
extern const uint32_t GovernanceAction_internal_data_[];
constexpr GovernanceAction GovernanceAction_MIN = static_cast<GovernanceAction>(0);
constexpr GovernanceAction GovernanceAction_MAX = static_cast<GovernanceAction>(8);
constexpr int GovernanceAction_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
GovernanceAction_descriptor();
template <typename T>
const std::string& GovernanceAction_Name(T value) {
  static_assert(std::is_same<T, GovernanceAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GovernanceAction_Name().");
  return GovernanceAction_Name(static_cast<GovernanceAction>(value));
}
template <>
inline const std::string& GovernanceAction_Name(GovernanceAction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GovernanceAction_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool GovernanceAction_Parse(absl::string_view name, GovernanceAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GovernanceAction>(
      GovernanceAction_descriptor(), name, value);
}
enum PolicyRuleType : int {
  POLICY_RULE_UNDEFINED = 0,
  ACCESS_RULE = 1,
  DATA_RETENTION_RULE = 2,
  RESOURCE_ALLOCATION_RULE = 3,
  USER_ACTIVITY_RULE = 4,
  PRIVACY_RULE = 5,
  COMPLIANCE_RULE = 6,
  CUSTOM_RULE = 7,
  PolicyRuleType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PolicyRuleType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PolicyRuleType_IsValid(int value);
extern const uint32_t PolicyRuleType_internal_data_[];
constexpr PolicyRuleType PolicyRuleType_MIN = static_cast<PolicyRuleType>(0);
constexpr PolicyRuleType PolicyRuleType_MAX = static_cast<PolicyRuleType>(7);
constexpr int PolicyRuleType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
PolicyRuleType_descriptor();
template <typename T>
const std::string& PolicyRuleType_Name(T value) {
  static_assert(std::is_same<T, PolicyRuleType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PolicyRuleType_Name().");
  return PolicyRuleType_Name(static_cast<PolicyRuleType>(value));
}
template <>
inline const std::string& PolicyRuleType_Name(PolicyRuleType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PolicyRuleType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool PolicyRuleType_Parse(absl::string_view name, PolicyRuleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolicyRuleType>(
      PolicyRuleType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SystemPolicy_PolicyMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SystemPolicy_PolicyMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPolicy_PolicyMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SystemPolicy_PolicyMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SystemPolicy_PolicyMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SystemPolicy_PolicyMetadataEntry_DoNotUse*>(
        &_SystemPolicy_PolicyMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyViolationLogResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyViolationLogResponse) */ {
 public:
  inline PolicyViolationLogResponse() : PolicyViolationLogResponse(nullptr) {}
  ~PolicyViolationLogResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyViolationLogResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyViolationLogResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyViolationLogResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyViolationLogResponse(const PolicyViolationLogResponse& from) : PolicyViolationLogResponse(nullptr, from) {}
  inline PolicyViolationLogResponse(PolicyViolationLogResponse&& from) noexcept
      : PolicyViolationLogResponse(nullptr, std::move(from)) {}
  inline PolicyViolationLogResponse& operator=(const PolicyViolationLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyViolationLogResponse& operator=(PolicyViolationLogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyViolationLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyViolationLogResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyViolationLogResponse*>(
        &_PolicyViolationLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(PolicyViolationLogResponse& a, PolicyViolationLogResponse& b) { a.Swap(&b); }
  inline void Swap(PolicyViolationLogResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyViolationLogResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyViolationLogResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyViolationLogResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyViolationLogResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyViolationLogResponse& from) { PolicyViolationLogResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyViolationLogResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyViolationLogResponse"; }

 protected:
  explicit PolicyViolationLogResponse(::google::protobuf::Arena* arena);
  PolicyViolationLogResponse(::google::protobuf::Arena* arena, const PolicyViolationLogResponse& from);
  PolicyViolationLogResponse(::google::protobuf::Arena* arena, PolicyViolationLogResponse&& from) noexcept
      : PolicyViolationLogResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyViolationLogResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyViolationLogResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyViolation_ViolationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyViolation_ViolationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyViolation_ViolationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyViolation_ViolationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyViolation_ViolationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyViolation_ViolationMetadataEntry_DoNotUse*>(
        &_PolicyViolation_ViolationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyUpdateResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyUpdateResponse) */ {
 public:
  inline PolicyUpdateResponse() : PolicyUpdateResponse(nullptr) {}
  ~PolicyUpdateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyUpdateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyUpdateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyUpdateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyUpdateResponse(const PolicyUpdateResponse& from) : PolicyUpdateResponse(nullptr, from) {}
  inline PolicyUpdateResponse(PolicyUpdateResponse&& from) noexcept
      : PolicyUpdateResponse(nullptr, std::move(from)) {}
  inline PolicyUpdateResponse& operator=(const PolicyUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUpdateResponse& operator=(PolicyUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyUpdateResponse*>(
        &_PolicyUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(PolicyUpdateResponse& a, PolicyUpdateResponse& b) { a.Swap(&b); }
  inline void Swap(PolicyUpdateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyUpdateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyUpdateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyUpdateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyUpdateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyUpdateResponse& from) { PolicyUpdateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyUpdateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyUpdateResponse"; }

 protected:
  explicit PolicyUpdateResponse(::google::protobuf::Arena* arena);
  PolicyUpdateResponse(::google::protobuf::Arena* arena, const PolicyUpdateResponse& from);
  PolicyUpdateResponse(::google::protobuf::Arena* arena, PolicyUpdateResponse&& from) noexcept
      : PolicyUpdateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyUpdateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyUpdateResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyRule_RuleMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyRule_RuleMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRule_RuleMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyRule_RuleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyRule_RuleMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyRule_RuleMetadataEntry_DoNotUse*>(
        &_PolicyRule_RuleMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyRule_RuleConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyRule_RuleConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRule_RuleConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyRule_RuleConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyRule_RuleConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyRule_RuleConditionsEntry_DoNotUse*>(
        &_PolicyRule_RuleConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyRule_PenaltyConditionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyRule_PenaltyConditionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRule_PenaltyConditionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyRule_PenaltyConditionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyRule_PenaltyConditionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyRule_PenaltyConditionsEntry_DoNotUse*>(
        &_PolicyRule_PenaltyConditionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyEnforcementResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyEnforcementResponse) */ {
 public:
  inline PolicyEnforcementResponse() : PolicyEnforcementResponse(nullptr) {}
  ~PolicyEnforcementResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyEnforcementResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyEnforcementResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEnforcementResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyEnforcementResponse(const PolicyEnforcementResponse& from) : PolicyEnforcementResponse(nullptr, from) {}
  inline PolicyEnforcementResponse(PolicyEnforcementResponse&& from) noexcept
      : PolicyEnforcementResponse(nullptr, std::move(from)) {}
  inline PolicyEnforcementResponse& operator=(const PolicyEnforcementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyEnforcementResponse& operator=(PolicyEnforcementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyEnforcementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyEnforcementResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyEnforcementResponse*>(
        &_PolicyEnforcementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(PolicyEnforcementResponse& a, PolicyEnforcementResponse& b) { a.Swap(&b); }
  inline void Swap(PolicyEnforcementResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyEnforcementResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyEnforcementResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyEnforcementResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyEnforcementResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyEnforcementResponse& from) { PolicyEnforcementResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyEnforcementResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyEnforcementResponse"; }

 protected:
  explicit PolicyEnforcementResponse(::google::protobuf::Arena* arena);
  PolicyEnforcementResponse(::google::protobuf::Arena* arena, const PolicyEnforcementResponse& from);
  PolicyEnforcementResponse(::google::protobuf::Arena* arena, PolicyEnforcementResponse&& from) noexcept
      : PolicyEnforcementResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnforcementIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string enforcement_id = 2;
  void clear_enforcement_id() ;
  const std::string& enforcement_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enforcement_id(Arg_&& arg, Args_... args);
  std::string* mutable_enforcement_id();
  PROTOBUF_NODISCARD std::string* release_enforcement_id();
  void set_allocated_enforcement_id(std::string* value);

  private:
  const std::string& _internal_enforcement_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enforcement_id(
      const std::string& value);
  std::string* _internal_mutable_enforcement_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyEnforcementResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyEnforcementResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr enforcement_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyEnforcement_EnforcementMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  PolicyEnforcement_EnforcementMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PolicyEnforcement_EnforcementMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PolicyEnforcement_EnforcementMetadataEntry_DoNotUse*>(
        &_PolicyEnforcement_EnforcementMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyDefinitionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyDefinitionResponse) */ {
 public:
  inline PolicyDefinitionResponse() : PolicyDefinitionResponse(nullptr) {}
  ~PolicyDefinitionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyDefinitionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyDefinitionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyDefinitionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyDefinitionResponse(const PolicyDefinitionResponse& from) : PolicyDefinitionResponse(nullptr, from) {}
  inline PolicyDefinitionResponse(PolicyDefinitionResponse&& from) noexcept
      : PolicyDefinitionResponse(nullptr, std::move(from)) {}
  inline PolicyDefinitionResponse& operator=(const PolicyDefinitionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDefinitionResponse& operator=(PolicyDefinitionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyDefinitionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyDefinitionResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyDefinitionResponse*>(
        &_PolicyDefinitionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PolicyDefinitionResponse& a, PolicyDefinitionResponse& b) { a.Swap(&b); }
  inline void Swap(PolicyDefinitionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDefinitionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyDefinitionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyDefinitionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyDefinitionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyDefinitionResponse& from) { PolicyDefinitionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyDefinitionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyDefinitionResponse"; }

 protected:
  explicit PolicyDefinitionResponse(::google::protobuf::Arena* arena);
  PolicyDefinitionResponse(::google::protobuf::Arena* arena, const PolicyDefinitionResponse& from);
  PolicyDefinitionResponse(::google::protobuf::Arena* arena, PolicyDefinitionResponse&& from) noexcept
      : PolicyDefinitionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPolicyIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyDefinitionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyDefinitionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceCheckResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.ComplianceCheckResponse) */ {
 public:
  inline ComplianceCheckResponse() : ComplianceCheckResponse(nullptr) {}
  ~ComplianceCheckResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ComplianceCheckResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ComplianceCheckResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceCheckResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplianceCheckResponse(const ComplianceCheckResponse& from) : ComplianceCheckResponse(nullptr, from) {}
  inline ComplianceCheckResponse(ComplianceCheckResponse&& from) noexcept
      : ComplianceCheckResponse(nullptr, std::move(from)) {}
  inline ComplianceCheckResponse& operator=(const ComplianceCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceCheckResponse& operator=(ComplianceCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplianceCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplianceCheckResponse* internal_default_instance() {
    return reinterpret_cast<const ComplianceCheckResponse*>(
        &_ComplianceCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ComplianceCheckResponse& a, ComplianceCheckResponse& b) { a.Swap(&b); }
  inline void Swap(ComplianceCheckResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplianceCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ComplianceCheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplianceCheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplianceCheckResponse& from) { ComplianceCheckResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ComplianceCheckResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.ComplianceCheckResponse"; }

 protected:
  explicit ComplianceCheckResponse(::google::protobuf::Arena* arena);
  ComplianceCheckResponse(::google::protobuf::Arena* arena, const ComplianceCheckResponse& from);
  ComplianceCheckResponse(::google::protobuf::Arena* arena, ComplianceCheckResponse&& from) noexcept
      : ComplianceCheckResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kIsCompliantFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool is_compliant = 1;
  void clear_is_compliant() ;
  bool is_compliant() const;
  void set_is_compliant(bool value);

  private:
  bool _internal_is_compliant() const;
  void _internal_set_is_compliant(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.ComplianceCheckResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComplianceCheckResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool is_compliant_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceCheckRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.ComplianceCheckRequest) */ {
 public:
  inline ComplianceCheckRequest() : ComplianceCheckRequest(nullptr) {}
  ~ComplianceCheckRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ComplianceCheckRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ComplianceCheckRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceCheckRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplianceCheckRequest(const ComplianceCheckRequest& from) : ComplianceCheckRequest(nullptr, from) {}
  inline ComplianceCheckRequest(ComplianceCheckRequest&& from) noexcept
      : ComplianceCheckRequest(nullptr, std::move(from)) {}
  inline ComplianceCheckRequest& operator=(const ComplianceCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceCheckRequest& operator=(ComplianceCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplianceCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplianceCheckRequest* internal_default_instance() {
    return reinterpret_cast<const ComplianceCheckRequest*>(
        &_ComplianceCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ComplianceCheckRequest& a, ComplianceCheckRequest& b) { a.Swap(&b); }
  inline void Swap(ComplianceCheckRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceCheckRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplianceCheckRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ComplianceCheckRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplianceCheckRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplianceCheckRequest& from) { ComplianceCheckRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ComplianceCheckRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.ComplianceCheckRequest"; }

 protected:
  explicit ComplianceCheckRequest(::google::protobuf::Arena* arena);
  ComplianceCheckRequest(::google::protobuf::Arena* arena, const ComplianceCheckRequest& from);
  ComplianceCheckRequest(::google::protobuf::Arena* arena, ComplianceCheckRequest&& from) noexcept
      : ComplianceCheckRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kPolicyIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.ComplianceCheckRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComplianceCheckRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceAuditResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.ComplianceAuditResponse) */ {
 public:
  inline ComplianceAuditResponse() : ComplianceAuditResponse(nullptr) {}
  ~ComplianceAuditResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ComplianceAuditResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ComplianceAuditResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceAuditResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplianceAuditResponse(const ComplianceAuditResponse& from) : ComplianceAuditResponse(nullptr, from) {}
  inline ComplianceAuditResponse(ComplianceAuditResponse&& from) noexcept
      : ComplianceAuditResponse(nullptr, std::move(from)) {}
  inline ComplianceAuditResponse& operator=(const ComplianceAuditResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceAuditResponse& operator=(ComplianceAuditResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplianceAuditResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplianceAuditResponse* internal_default_instance() {
    return reinterpret_cast<const ComplianceAuditResponse*>(
        &_ComplianceAuditResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(ComplianceAuditResponse& a, ComplianceAuditResponse& b) { a.Swap(&b); }
  inline void Swap(ComplianceAuditResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceAuditResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplianceAuditResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ComplianceAuditResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplianceAuditResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplianceAuditResponse& from) { ComplianceAuditResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ComplianceAuditResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.ComplianceAuditResponse"; }

 protected:
  explicit ComplianceAuditResponse(::google::protobuf::Arena* arena);
  ComplianceAuditResponse(::google::protobuf::Arena* arena, const ComplianceAuditResponse& from);
  ComplianceAuditResponse(::google::protobuf::Arena* arena, ComplianceAuditResponse&& from) noexcept
      : ComplianceAuditResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.ComplianceAuditResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComplianceAuditResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceAudit_AuditMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ComplianceAudit_AuditMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceAudit_AuditMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ComplianceAudit_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ComplianceAudit_AuditMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ComplianceAudit_AuditMetadataEntry_DoNotUse*>(
        &_ComplianceAudit_AuditMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_policy_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PolicyViolation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyViolation) */ {
 public:
  inline PolicyViolation() : PolicyViolation(nullptr) {}
  ~PolicyViolation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyViolation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyViolation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyViolation(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyViolation(const PolicyViolation& from) : PolicyViolation(nullptr, from) {}
  inline PolicyViolation(PolicyViolation&& from) noexcept
      : PolicyViolation(nullptr, std::move(from)) {}
  inline PolicyViolation& operator=(const PolicyViolation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyViolation& operator=(PolicyViolation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyViolation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyViolation* internal_default_instance() {
    return reinterpret_cast<const PolicyViolation*>(
        &_PolicyViolation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(PolicyViolation& a, PolicyViolation& b) { a.Swap(&b); }
  inline void Swap(PolicyViolation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyViolation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyViolation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyViolation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyViolation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyViolation& from) { PolicyViolation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyViolation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyViolation"; }

 protected:
  explicit PolicyViolation(::google::protobuf::Arena* arena);
  PolicyViolation(::google::protobuf::Arena* arena, const PolicyViolation& from);
  PolicyViolation(::google::protobuf::Arena* arena, PolicyViolation&& from) noexcept
      : PolicyViolation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kViolationMetadataFieldNumber = 9,
    kViolationIdFieldNumber = 1,
    kPolicyIdFieldNumber = 2,
    kRuleIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kResolutionStatusFieldNumber = 7,
    kEscalatedToFieldNumber = 8,
    kResponseActionFieldNumber = 6,
  };
  // map<string, string> violation_metadata = 9;
  int violation_metadata_size() const;
  private:
  int _internal_violation_metadata_size() const;

  public:
  void clear_violation_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& violation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_violation_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_violation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_violation_metadata();

  public:
  // string violation_id = 1;
  void clear_violation_id() ;
  const std::string& violation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_violation_id(Arg_&& arg, Args_... args);
  std::string* mutable_violation_id();
  PROTOBUF_NODISCARD std::string* release_violation_id();
  void set_allocated_violation_id(std::string* value);

  private:
  const std::string& _internal_violation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_violation_id(
      const std::string& value);
  std::string* _internal_mutable_violation_id();

  public:
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string rule_id = 3;
  void clear_rule_id() ;
  const std::string& rule_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* value);

  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(
      const std::string& value);
  std::string* _internal_mutable_rule_id();

  public:
  // string user_id = 4;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string resolution_status = 7;
  void clear_resolution_status() ;
  const std::string& resolution_status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resolution_status(Arg_&& arg, Args_... args);
  std::string* mutable_resolution_status();
  PROTOBUF_NODISCARD std::string* release_resolution_status();
  void set_allocated_resolution_status(std::string* value);

  private:
  const std::string& _internal_resolution_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution_status(
      const std::string& value);
  std::string* _internal_mutable_resolution_status();

  public:
  // string escalated_to = 8;
  void clear_escalated_to() ;
  const std::string& escalated_to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalated_to(Arg_&& arg, Args_... args);
  std::string* mutable_escalated_to();
  PROTOBUF_NODISCARD std::string* release_escalated_to();
  void set_allocated_escalated_to(std::string* value);

  private:
  const std::string& _internal_escalated_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalated_to(
      const std::string& value);
  std::string* _internal_mutable_escalated_to();

  public:
  // .seigr.policy.GovernanceAction response_action = 6;
  void clear_response_action() ;
  ::seigr::policy::GovernanceAction response_action() const;
  void set_response_action(::seigr::policy::GovernanceAction value);

  private:
  ::seigr::policy::GovernanceAction _internal_response_action() const;
  void _internal_set_response_action(::seigr::policy::GovernanceAction value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyViolation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 1,
      136, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyViolation& from_msg);
    ::google::protobuf::internal::MapField<PolicyViolation_ViolationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        violation_metadata_;
    ::google::protobuf::internal::ArenaStringPtr violation_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr rule_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr resolution_status_;
    ::google::protobuf::internal::ArenaStringPtr escalated_to_;
    int response_action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyRule) */ {
 public:
  inline PolicyRule() : PolicyRule(nullptr) {}
  ~PolicyRule() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyRule* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyRule));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyRule(const PolicyRule& from) : PolicyRule(nullptr, from) {}
  inline PolicyRule(PolicyRule&& from) noexcept
      : PolicyRule(nullptr, std::move(from)) {}
  inline PolicyRule& operator=(const PolicyRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRule& operator=(PolicyRule&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRule* internal_default_instance() {
    return reinterpret_cast<const PolicyRule*>(
        &_PolicyRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PolicyRule& a, PolicyRule& b) { a.Swap(&b); }
  inline void Swap(PolicyRule* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRule* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyRule& from) { PolicyRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyRule* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyRule"; }

 protected:
  explicit PolicyRule(::google::protobuf::Arena* arena);
  PolicyRule(::google::protobuf::Arena* arena, const PolicyRule& from);
  PolicyRule(::google::protobuf::Arena* arena, PolicyRule&& from) noexcept
      : PolicyRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionsFieldNumber = 4,
    kRuleConditionsFieldNumber = 7,
    kPenaltyConditionsFieldNumber = 8,
    kRuleMetadataFieldNumber = 10,
    kRuleIdFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCreatedAtFieldNumber = 5,
    kLastModifiedFieldNumber = 6,
    kRuleTypeFieldNumber = 2,
    kIsActiveFieldNumber = 9,
  };
  // repeated .seigr.policy.GovernanceAction actions = 4;
  int actions_size() const;
  private:
  int _internal_actions_size() const;

  public:
  void clear_actions() ;
  public:
  ::seigr::policy::GovernanceAction actions(int index) const;
  void set_actions(int index, ::seigr::policy::GovernanceAction value);
  void add_actions(::seigr::policy::GovernanceAction value);
  const ::google::protobuf::RepeatedField<int>& actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_actions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_actions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_actions();

  public:
  // map<string, string> rule_conditions = 7;
  int rule_conditions_size() const;
  private:
  int _internal_rule_conditions_size() const;

  public:
  void clear_rule_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& rule_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_rule_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_rule_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_rule_conditions();

  public:
  // map<string, string> penalty_conditions = 8;
  int penalty_conditions_size() const;
  private:
  int _internal_penalty_conditions_size() const;

  public:
  void clear_penalty_conditions() ;
  const ::google::protobuf::Map<std::string, std::string>& penalty_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_penalty_conditions();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_penalty_conditions() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_penalty_conditions();

  public:
  // map<string, string> rule_metadata = 10;
  int rule_metadata_size() const;
  private:
  int _internal_rule_metadata_size() const;

  public:
  void clear_rule_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& rule_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_rule_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_rule_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_rule_metadata();

  public:
  // string rule_id = 1;
  void clear_rule_id() ;
  const std::string& rule_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* value);

  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(
      const std::string& value);
  std::string* _internal_mutable_rule_id();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string created_at = 5;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string last_modified = 6;
  void clear_last_modified() ;
  const std::string& last_modified() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_modified(Arg_&& arg, Args_... args);
  std::string* mutable_last_modified();
  PROTOBUF_NODISCARD std::string* release_last_modified();
  void set_allocated_last_modified(std::string* value);

  private:
  const std::string& _internal_last_modified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified(
      const std::string& value);
  std::string* _internal_mutable_last_modified();

  public:
  // .seigr.policy.PolicyRuleType rule_type = 2;
  void clear_rule_type() ;
  ::seigr::policy::PolicyRuleType rule_type() const;
  void set_rule_type(::seigr::policy::PolicyRuleType value);

  private:
  ::seigr::policy::PolicyRuleType _internal_rule_type() const;
  void _internal_set_rule_type(::seigr::policy::PolicyRuleType value);

  public:
  // bool is_active = 9;
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyRule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      127, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyRule& from_msg);
    ::google::protobuf::RepeatedField<int> actions_;
    ::google::protobuf::internal::CachedSize _actions_cached_byte_size_;
    ::google::protobuf::internal::MapField<PolicyRule_RuleConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        rule_conditions_;
    ::google::protobuf::internal::MapField<PolicyRule_PenaltyConditionsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        penalty_conditions_;
    ::google::protobuf::internal::MapField<PolicyRule_RuleMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        rule_metadata_;
    ::google::protobuf::internal::ArenaStringPtr rule_id_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr last_modified_;
    int rule_type_;
    bool is_active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceAudit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.ComplianceAudit) */ {
 public:
  inline ComplianceAudit() : ComplianceAudit(nullptr) {}
  ~ComplianceAudit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ComplianceAudit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ComplianceAudit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceAudit(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplianceAudit(const ComplianceAudit& from) : ComplianceAudit(nullptr, from) {}
  inline ComplianceAudit(ComplianceAudit&& from) noexcept
      : ComplianceAudit(nullptr, std::move(from)) {}
  inline ComplianceAudit& operator=(const ComplianceAudit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceAudit& operator=(ComplianceAudit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplianceAudit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplianceAudit* internal_default_instance() {
    return reinterpret_cast<const ComplianceAudit*>(
        &_ComplianceAudit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ComplianceAudit& a, ComplianceAudit& b) { a.Swap(&b); }
  inline void Swap(ComplianceAudit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceAudit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplianceAudit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ComplianceAudit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplianceAudit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplianceAudit& from) { ComplianceAudit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ComplianceAudit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.ComplianceAudit"; }

 protected:
  explicit ComplianceAudit(::google::protobuf::Arena* arena);
  ComplianceAudit(::google::protobuf::Arena* arena, const ComplianceAudit& from);
  ComplianceAudit(::google::protobuf::Arena* arena, ComplianceAudit&& from) noexcept
      : ComplianceAudit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuditMetadataFieldNumber = 8,
    kAuditIdFieldNumber = 1,
    kPolicyIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kViolationDescriptionFieldNumber = 6,
    kComplianceStatusFieldNumber = 5,
    kRecommendedActionFieldNumber = 7,
  };
  // map<string, string> audit_metadata = 8;
  int audit_metadata_size() const;
  private:
  int _internal_audit_metadata_size() const;

  public:
  void clear_audit_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_audit_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_audit_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_audit_metadata();

  public:
  // string audit_id = 1;
  void clear_audit_id() ;
  const std::string& audit_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audit_id(Arg_&& arg, Args_... args);
  std::string* mutable_audit_id();
  PROTOBUF_NODISCARD std::string* release_audit_id();
  void set_allocated_audit_id(std::string* value);

  private:
  const std::string& _internal_audit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audit_id(
      const std::string& value);
  std::string* _internal_mutable_audit_id();

  public:
  // string policy_id = 2;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string user_id = 3;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string violation_description = 6;
  void clear_violation_description() ;
  const std::string& violation_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_violation_description(Arg_&& arg, Args_... args);
  std::string* mutable_violation_description();
  PROTOBUF_NODISCARD std::string* release_violation_description();
  void set_allocated_violation_description(std::string* value);

  private:
  const std::string& _internal_violation_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_violation_description(
      const std::string& value);
  std::string* _internal_mutable_violation_description();

  public:
  // bool compliance_status = 5;
  void clear_compliance_status() ;
  bool compliance_status() const;
  void set_compliance_status(bool value);

  private:
  bool _internal_compliance_status() const;
  void _internal_set_compliance_status(bool value);

  public:
  // .seigr.policy.GovernanceAction recommended_action = 7;
  void clear_recommended_action() ;
  ::seigr::policy::GovernanceAction recommended_action() const;
  void set_recommended_action(::seigr::policy::GovernanceAction value);

  private:
  ::seigr::policy::GovernanceAction _internal_recommended_action() const;
  void _internal_set_recommended_action(::seigr::policy::GovernanceAction value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.ComplianceAudit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      113, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComplianceAudit& from_msg);
    ::google::protobuf::internal::MapField<ComplianceAudit_AuditMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        audit_metadata_;
    ::google::protobuf::internal::ArenaStringPtr audit_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr violation_description_;
    bool compliance_status_;
    int recommended_action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class SystemPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.SystemPolicy) */ {
 public:
  inline SystemPolicy() : SystemPolicy(nullptr) {}
  ~SystemPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SystemPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SystemPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline SystemPolicy(const SystemPolicy& from) : SystemPolicy(nullptr, from) {}
  inline SystemPolicy(SystemPolicy&& from) noexcept
      : SystemPolicy(nullptr, std::move(from)) {}
  inline SystemPolicy& operator=(const SystemPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPolicy& operator=(SystemPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPolicy* internal_default_instance() {
    return reinterpret_cast<const SystemPolicy*>(
        &_SystemPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SystemPolicy& a, SystemPolicy& b) { a.Swap(&b); }
  inline void Swap(SystemPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SystemPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SystemPolicy& from) { SystemPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SystemPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.SystemPolicy"; }

 protected:
  explicit SystemPolicy(::google::protobuf::Arena* arena);
  SystemPolicy(::google::protobuf::Arena* arena, const SystemPolicy& from);
  SystemPolicy(::google::protobuf::Arena* arena, SystemPolicy&& from) noexcept
      : SystemPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRulesFieldNumber = 4,
    kPolicyMetadataFieldNumber = 6,
    kPolicyIdFieldNumber = 1,
    kPolicyNameFieldNumber = 2,
    kPolicyScopeFieldNumber = 3,
    kCreatedByFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kModifiedAtFieldNumber = 9,
    kAssociatedComplianceIdFieldNumber = 10,
    kMandatoryFieldNumber = 5,
  };
  // repeated .seigr.policy.PolicyRule rules = 4;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::seigr::policy::PolicyRule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* mutable_rules();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& _internal_rules() const;
  ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* _internal_mutable_rules();
  public:
  const ::seigr::policy::PolicyRule& rules(int index) const;
  ::seigr::policy::PolicyRule* add_rules();
  const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& rules() const;
  // map<string, string> policy_metadata = 6;
  int policy_metadata_size() const;
  private:
  int _internal_policy_metadata_size() const;

  public:
  void clear_policy_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_policy_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_policy_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_policy_metadata();

  public:
  // string policy_id = 1;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string policy_name = 2;
  void clear_policy_name() ;
  const std::string& policy_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_name(Arg_&& arg, Args_... args);
  std::string* mutable_policy_name();
  PROTOBUF_NODISCARD std::string* release_policy_name();
  void set_allocated_policy_name(std::string* value);

  private:
  const std::string& _internal_policy_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_name(
      const std::string& value);
  std::string* _internal_mutable_policy_name();

  public:
  // string policy_scope = 3;
  void clear_policy_scope() ;
  const std::string& policy_scope() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_scope(Arg_&& arg, Args_... args);
  std::string* mutable_policy_scope();
  PROTOBUF_NODISCARD std::string* release_policy_scope();
  void set_allocated_policy_scope(std::string* value);

  private:
  const std::string& _internal_policy_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_scope(
      const std::string& value);
  std::string* _internal_mutable_policy_scope();

  public:
  // string created_by = 7;
  void clear_created_by() ;
  const std::string& created_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_by(Arg_&& arg, Args_... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* value);

  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(
      const std::string& value);
  std::string* _internal_mutable_created_by();

  public:
  // string created_at = 8;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // string modified_at = 9;
  void clear_modified_at() ;
  const std::string& modified_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modified_at(Arg_&& arg, Args_... args);
  std::string* mutable_modified_at();
  PROTOBUF_NODISCARD std::string* release_modified_at();
  void set_allocated_modified_at(std::string* value);

  private:
  const std::string& _internal_modified_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modified_at(
      const std::string& value);
  std::string* _internal_mutable_modified_at();

  public:
  // string associated_compliance_id = 10;
  void clear_associated_compliance_id() ;
  const std::string& associated_compliance_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_associated_compliance_id(Arg_&& arg, Args_... args);
  std::string* mutable_associated_compliance_id();
  PROTOBUF_NODISCARD std::string* release_associated_compliance_id();
  void set_allocated_associated_compliance_id(std::string* value);

  private:
  const std::string& _internal_associated_compliance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_compliance_id(
      const std::string& value);
  std::string* _internal_mutable_associated_compliance_id();

  public:
  // bool mandatory = 5;
  void clear_mandatory() ;
  bool mandatory() const;
  void set_mandatory(bool value);

  private:
  bool _internal_mandatory() const;
  void _internal_set_mandatory(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.SystemPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      144, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SystemPolicy& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::policy::PolicyRule > rules_;
    ::google::protobuf::internal::MapField<SystemPolicy_PolicyMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        policy_metadata_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_name_;
    ::google::protobuf::internal::ArenaStringPtr policy_scope_;
    ::google::protobuf::internal::ArenaStringPtr created_by_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    ::google::protobuf::internal::ArenaStringPtr modified_at_;
    ::google::protobuf::internal::ArenaStringPtr associated_compliance_id_;
    bool mandatory_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyViolationLogRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyViolationLogRequest) */ {
 public:
  inline PolicyViolationLogRequest() : PolicyViolationLogRequest(nullptr) {}
  ~PolicyViolationLogRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyViolationLogRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyViolationLogRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyViolationLogRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyViolationLogRequest(const PolicyViolationLogRequest& from) : PolicyViolationLogRequest(nullptr, from) {}
  inline PolicyViolationLogRequest(PolicyViolationLogRequest&& from) noexcept
      : PolicyViolationLogRequest(nullptr, std::move(from)) {}
  inline PolicyViolationLogRequest& operator=(const PolicyViolationLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyViolationLogRequest& operator=(PolicyViolationLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyViolationLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyViolationLogRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyViolationLogRequest*>(
        &_PolicyViolationLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(PolicyViolationLogRequest& a, PolicyViolationLogRequest& b) { a.Swap(&b); }
  inline void Swap(PolicyViolationLogRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyViolationLogRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyViolationLogRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyViolationLogRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyViolationLogRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyViolationLogRequest& from) { PolicyViolationLogRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyViolationLogRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyViolationLogRequest"; }

 protected:
  explicit PolicyViolationLogRequest(::google::protobuf::Arena* arena);
  PolicyViolationLogRequest(::google::protobuf::Arena* arena, const PolicyViolationLogRequest& from);
  PolicyViolationLogRequest(::google::protobuf::Arena* arena, PolicyViolationLogRequest&& from) noexcept
      : PolicyViolationLogRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kViolationFieldNumber = 1,
  };
  // .seigr.policy.PolicyViolation violation = 1;
  bool has_violation() const;
  void clear_violation() ;
  const ::seigr::policy::PolicyViolation& violation() const;
  PROTOBUF_NODISCARD ::seigr::policy::PolicyViolation* release_violation();
  ::seigr::policy::PolicyViolation* mutable_violation();
  void set_allocated_violation(::seigr::policy::PolicyViolation* value);
  void unsafe_arena_set_allocated_violation(::seigr::policy::PolicyViolation* value);
  ::seigr::policy::PolicyViolation* unsafe_arena_release_violation();

  private:
  const ::seigr::policy::PolicyViolation& _internal_violation() const;
  ::seigr::policy::PolicyViolation* _internal_mutable_violation();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyViolationLogRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyViolationLogRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::seigr::policy::PolicyViolation* violation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyEnforcement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyEnforcement) */ {
 public:
  inline PolicyEnforcement() : PolicyEnforcement(nullptr) {}
  ~PolicyEnforcement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyEnforcement* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyEnforcement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEnforcement(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyEnforcement(const PolicyEnforcement& from) : PolicyEnforcement(nullptr, from) {}
  inline PolicyEnforcement(PolicyEnforcement&& from) noexcept
      : PolicyEnforcement(nullptr, std::move(from)) {}
  inline PolicyEnforcement& operator=(const PolicyEnforcement& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyEnforcement& operator=(PolicyEnforcement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyEnforcement& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyEnforcement* internal_default_instance() {
    return reinterpret_cast<const PolicyEnforcement*>(
        &_PolicyEnforcement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PolicyEnforcement& a, PolicyEnforcement& b) { a.Swap(&b); }
  inline void Swap(PolicyEnforcement* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyEnforcement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyEnforcement* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyEnforcement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyEnforcement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyEnforcement& from) { PolicyEnforcement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyEnforcement* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyEnforcement"; }

 protected:
  explicit PolicyEnforcement(::google::protobuf::Arena* arena);
  PolicyEnforcement(::google::protobuf::Arena* arena, const PolicyEnforcement& from);
  PolicyEnforcement(::google::protobuf::Arena* arena, PolicyEnforcement&& from) noexcept
      : PolicyEnforcement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRulesFieldNumber = 3,
    kEnforcementMetadataFieldNumber = 6,
    kPolicyIdFieldNumber = 1,
    kTargetComponentIdFieldNumber = 2,
    kEnforcementLevelFieldNumber = 5,
    kInitiatedByFieldNumber = 7,
    kInitiatedAtFieldNumber = 8,
    kEnforceImmediatelyFieldNumber = 4,
  };
  // repeated .seigr.policy.PolicyRule rules = 3;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::seigr::policy::PolicyRule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* mutable_rules();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& _internal_rules() const;
  ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* _internal_mutable_rules();
  public:
  const ::seigr::policy::PolicyRule& rules(int index) const;
  ::seigr::policy::PolicyRule* add_rules();
  const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& rules() const;
  // map<string, string> enforcement_metadata = 6;
  int enforcement_metadata_size() const;
  private:
  int _internal_enforcement_metadata_size() const;

  public:
  void clear_enforcement_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& enforcement_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_enforcement_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_enforcement_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_enforcement_metadata();

  public:
  // string policy_id = 1;
  void clear_policy_id() ;
  const std::string& policy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy_id(Arg_&& arg, Args_... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* value);

  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(
      const std::string& value);
  std::string* _internal_mutable_policy_id();

  public:
  // string target_component_id = 2;
  void clear_target_component_id() ;
  const std::string& target_component_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_component_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_component_id();
  PROTOBUF_NODISCARD std::string* release_target_component_id();
  void set_allocated_target_component_id(std::string* value);

  private:
  const std::string& _internal_target_component_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_component_id(
      const std::string& value);
  std::string* _internal_mutable_target_component_id();

  public:
  // string enforcement_level = 5;
  void clear_enforcement_level() ;
  const std::string& enforcement_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enforcement_level(Arg_&& arg, Args_... args);
  std::string* mutable_enforcement_level();
  PROTOBUF_NODISCARD std::string* release_enforcement_level();
  void set_allocated_enforcement_level(std::string* value);

  private:
  const std::string& _internal_enforcement_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enforcement_level(
      const std::string& value);
  std::string* _internal_mutable_enforcement_level();

  public:
  // string initiated_by = 7;
  void clear_initiated_by() ;
  const std::string& initiated_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initiated_by(Arg_&& arg, Args_... args);
  std::string* mutable_initiated_by();
  PROTOBUF_NODISCARD std::string* release_initiated_by();
  void set_allocated_initiated_by(std::string* value);

  private:
  const std::string& _internal_initiated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiated_by(
      const std::string& value);
  std::string* _internal_mutable_initiated_by();

  public:
  // string initiated_at = 8;
  void clear_initiated_at() ;
  const std::string& initiated_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initiated_at(Arg_&& arg, Args_... args);
  std::string* mutable_initiated_at();
  PROTOBUF_NODISCARD std::string* release_initiated_at();
  void set_allocated_initiated_at(std::string* value);

  private:
  const std::string& _internal_initiated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiated_at(
      const std::string& value);
  std::string* _internal_mutable_initiated_at();

  public:
  // bool enforce_immediately = 4;
  void clear_enforce_immediately() ;
  bool enforce_immediately() const;
  void set_enforce_immediately(bool value);

  private:
  bool _internal_enforce_immediately() const;
  void _internal_set_enforce_immediately(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyEnforcement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      136, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyEnforcement& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::policy::PolicyRule > rules_;
    ::google::protobuf::internal::MapField<PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        enforcement_metadata_;
    ::google::protobuf::internal::ArenaStringPtr policy_id_;
    ::google::protobuf::internal::ArenaStringPtr target_component_id_;
    ::google::protobuf::internal::ArenaStringPtr enforcement_level_;
    ::google::protobuf::internal::ArenaStringPtr initiated_by_;
    ::google::protobuf::internal::ArenaStringPtr initiated_at_;
    bool enforce_immediately_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class ComplianceAuditRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.ComplianceAuditRequest) */ {
 public:
  inline ComplianceAuditRequest() : ComplianceAuditRequest(nullptr) {}
  ~ComplianceAuditRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ComplianceAuditRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ComplianceAuditRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplianceAuditRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplianceAuditRequest(const ComplianceAuditRequest& from) : ComplianceAuditRequest(nullptr, from) {}
  inline ComplianceAuditRequest(ComplianceAuditRequest&& from) noexcept
      : ComplianceAuditRequest(nullptr, std::move(from)) {}
  inline ComplianceAuditRequest& operator=(const ComplianceAuditRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceAuditRequest& operator=(ComplianceAuditRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplianceAuditRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplianceAuditRequest* internal_default_instance() {
    return reinterpret_cast<const ComplianceAuditRequest*>(
        &_ComplianceAuditRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(ComplianceAuditRequest& a, ComplianceAuditRequest& b) { a.Swap(&b); }
  inline void Swap(ComplianceAuditRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceAuditRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplianceAuditRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ComplianceAuditRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplianceAuditRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplianceAuditRequest& from) { ComplianceAuditRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ComplianceAuditRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.ComplianceAuditRequest"; }

 protected:
  explicit ComplianceAuditRequest(::google::protobuf::Arena* arena);
  ComplianceAuditRequest(::google::protobuf::Arena* arena, const ComplianceAuditRequest& from);
  ComplianceAuditRequest(::google::protobuf::Arena* arena, ComplianceAuditRequest&& from) noexcept
      : ComplianceAuditRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuditFieldNumber = 1,
  };
  // .seigr.policy.ComplianceAudit audit = 1;
  bool has_audit() const;
  void clear_audit() ;
  const ::seigr::policy::ComplianceAudit& audit() const;
  PROTOBUF_NODISCARD ::seigr::policy::ComplianceAudit* release_audit();
  ::seigr::policy::ComplianceAudit* mutable_audit();
  void set_allocated_audit(::seigr::policy::ComplianceAudit* value);
  void unsafe_arena_set_allocated_audit(::seigr::policy::ComplianceAudit* value);
  ::seigr::policy::ComplianceAudit* unsafe_arena_release_audit();

  private:
  const ::seigr::policy::ComplianceAudit& _internal_audit() const;
  ::seigr::policy::ComplianceAudit* _internal_mutable_audit();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.ComplianceAuditRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComplianceAuditRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::seigr::policy::ComplianceAudit* audit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyUpdateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyUpdateRequest) */ {
 public:
  inline PolicyUpdateRequest() : PolicyUpdateRequest(nullptr) {}
  ~PolicyUpdateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyUpdateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyUpdateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyUpdateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyUpdateRequest(const PolicyUpdateRequest& from) : PolicyUpdateRequest(nullptr, from) {}
  inline PolicyUpdateRequest(PolicyUpdateRequest&& from) noexcept
      : PolicyUpdateRequest(nullptr, std::move(from)) {}
  inline PolicyUpdateRequest& operator=(const PolicyUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUpdateRequest& operator=(PolicyUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyUpdateRequest*>(
        &_PolicyUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PolicyUpdateRequest& a, PolicyUpdateRequest& b) { a.Swap(&b); }
  inline void Swap(PolicyUpdateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyUpdateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyUpdateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyUpdateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyUpdateRequest& from) { PolicyUpdateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyUpdateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyUpdateRequest"; }

 protected:
  explicit PolicyUpdateRequest(::google::protobuf::Arena* arena);
  PolicyUpdateRequest(::google::protobuf::Arena* arena, const PolicyUpdateRequest& from);
  PolicyUpdateRequest(::google::protobuf::Arena* arena, PolicyUpdateRequest&& from) noexcept
      : PolicyUpdateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatedPolicyFieldNumber = 1,
  };
  // .seigr.policy.SystemPolicy updated_policy = 1;
  bool has_updated_policy() const;
  void clear_updated_policy() ;
  const ::seigr::policy::SystemPolicy& updated_policy() const;
  PROTOBUF_NODISCARD ::seigr::policy::SystemPolicy* release_updated_policy();
  ::seigr::policy::SystemPolicy* mutable_updated_policy();
  void set_allocated_updated_policy(::seigr::policy::SystemPolicy* value);
  void unsafe_arena_set_allocated_updated_policy(::seigr::policy::SystemPolicy* value);
  ::seigr::policy::SystemPolicy* unsafe_arena_release_updated_policy();

  private:
  const ::seigr::policy::SystemPolicy& _internal_updated_policy() const;
  ::seigr::policy::SystemPolicy* _internal_mutable_updated_policy();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyUpdateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyUpdateRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::seigr::policy::SystemPolicy* updated_policy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyEnforcementRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyEnforcementRequest) */ {
 public:
  inline PolicyEnforcementRequest() : PolicyEnforcementRequest(nullptr) {}
  ~PolicyEnforcementRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyEnforcementRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyEnforcementRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyEnforcementRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyEnforcementRequest(const PolicyEnforcementRequest& from) : PolicyEnforcementRequest(nullptr, from) {}
  inline PolicyEnforcementRequest(PolicyEnforcementRequest&& from) noexcept
      : PolicyEnforcementRequest(nullptr, std::move(from)) {}
  inline PolicyEnforcementRequest& operator=(const PolicyEnforcementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyEnforcementRequest& operator=(PolicyEnforcementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyEnforcementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyEnforcementRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyEnforcementRequest*>(
        &_PolicyEnforcementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(PolicyEnforcementRequest& a, PolicyEnforcementRequest& b) { a.Swap(&b); }
  inline void Swap(PolicyEnforcementRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyEnforcementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyEnforcementRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyEnforcementRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyEnforcementRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyEnforcementRequest& from) { PolicyEnforcementRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyEnforcementRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyEnforcementRequest"; }

 protected:
  explicit PolicyEnforcementRequest(::google::protobuf::Arena* arena);
  PolicyEnforcementRequest(::google::protobuf::Arena* arena, const PolicyEnforcementRequest& from);
  PolicyEnforcementRequest(::google::protobuf::Arena* arena, PolicyEnforcementRequest&& from) noexcept
      : PolicyEnforcementRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnforcementFieldNumber = 1,
  };
  // .seigr.policy.PolicyEnforcement enforcement = 1;
  bool has_enforcement() const;
  void clear_enforcement() ;
  const ::seigr::policy::PolicyEnforcement& enforcement() const;
  PROTOBUF_NODISCARD ::seigr::policy::PolicyEnforcement* release_enforcement();
  ::seigr::policy::PolicyEnforcement* mutable_enforcement();
  void set_allocated_enforcement(::seigr::policy::PolicyEnforcement* value);
  void unsafe_arena_set_allocated_enforcement(::seigr::policy::PolicyEnforcement* value);
  ::seigr::policy::PolicyEnforcement* unsafe_arena_release_enforcement();

  private:
  const ::seigr::policy::PolicyEnforcement& _internal_enforcement() const;
  ::seigr::policy::PolicyEnforcement* _internal_mutable_enforcement();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyEnforcementRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyEnforcementRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::seigr::policy::PolicyEnforcement* enforcement_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};
// -------------------------------------------------------------------

class PolicyDefinitionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.policy.PolicyDefinitionRequest) */ {
 public:
  inline PolicyDefinitionRequest() : PolicyDefinitionRequest(nullptr) {}
  ~PolicyDefinitionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyDefinitionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyDefinitionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyDefinitionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyDefinitionRequest(const PolicyDefinitionRequest& from) : PolicyDefinitionRequest(nullptr, from) {}
  inline PolicyDefinitionRequest(PolicyDefinitionRequest&& from) noexcept
      : PolicyDefinitionRequest(nullptr, std::move(from)) {}
  inline PolicyDefinitionRequest& operator=(const PolicyDefinitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDefinitionRequest& operator=(PolicyDefinitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyDefinitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyDefinitionRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyDefinitionRequest*>(
        &_PolicyDefinitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PolicyDefinitionRequest& a, PolicyDefinitionRequest& b) { a.Swap(&b); }
  inline void Swap(PolicyDefinitionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDefinitionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyDefinitionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyDefinitionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyDefinitionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyDefinitionRequest& from) { PolicyDefinitionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyDefinitionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.policy.PolicyDefinitionRequest"; }

 protected:
  explicit PolicyDefinitionRequest(::google::protobuf::Arena* arena);
  PolicyDefinitionRequest(::google::protobuf::Arena* arena, const PolicyDefinitionRequest& from);
  PolicyDefinitionRequest(::google::protobuf::Arena* arena, PolicyDefinitionRequest&& from) noexcept
      : PolicyDefinitionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPolicyFieldNumber = 1,
  };
  // .seigr.policy.SystemPolicy policy = 1;
  bool has_policy() const;
  void clear_policy() ;
  const ::seigr::policy::SystemPolicy& policy() const;
  PROTOBUF_NODISCARD ::seigr::policy::SystemPolicy* release_policy();
  ::seigr::policy::SystemPolicy* mutable_policy();
  void set_allocated_policy(::seigr::policy::SystemPolicy* value);
  void unsafe_arena_set_allocated_policy(::seigr::policy::SystemPolicy* value);
  ::seigr::policy::SystemPolicy* unsafe_arena_release_policy();

  private:
  const ::seigr::policy::SystemPolicy& _internal_policy() const;
  ::seigr::policy::SystemPolicy* _internal_mutable_policy();

  public:
  // @@protoc_insertion_point(class_scope:seigr.policy.PolicyDefinitionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyDefinitionRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::seigr::policy::SystemPolicy* policy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_policy_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyRule

// string rule_id = 1;
inline void PolicyRule::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.ClearToEmpty();
}
inline const std::string& PolicyRule::rule_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.rule_id)
  return _internal_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyRule::set_rule_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.rule_id)
}
inline std::string* PolicyRule::mutable_rule_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyRule.rule_id)
  return _s;
}
inline const std::string& PolicyRule::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_.Get();
}
inline void PolicyRule::_internal_set_rule_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(value, GetArena());
}
inline std::string* PolicyRule::_internal_mutable_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_id_.Mutable( GetArena());
}
inline std::string* PolicyRule::release_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyRule.rule_id)
  return _impl_.rule_id_.Release();
}
inline void PolicyRule::set_allocated_rule_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rule_id_.IsDefault()) {
    _impl_.rule_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyRule.rule_id)
}

// .seigr.policy.PolicyRuleType rule_type = 2;
inline void PolicyRule::clear_rule_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_type_ = 0;
}
inline ::seigr::policy::PolicyRuleType PolicyRule::rule_type() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.rule_type)
  return _internal_rule_type();
}
inline void PolicyRule::set_rule_type(::seigr::policy::PolicyRuleType value) {
  _internal_set_rule_type(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.rule_type)
}
inline ::seigr::policy::PolicyRuleType PolicyRule::_internal_rule_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::policy::PolicyRuleType>(_impl_.rule_type_);
}
inline void PolicyRule::_internal_set_rule_type(::seigr::policy::PolicyRuleType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_type_ = value;
}

// string description = 3;
inline void PolicyRule::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PolicyRule::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyRule::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.description)
}
inline std::string* PolicyRule::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyRule.description)
  return _s;
}
inline const std::string& PolicyRule::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void PolicyRule::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* PolicyRule::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* PolicyRule::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyRule.description)
  return _impl_.description_.Release();
}
inline void PolicyRule::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyRule.description)
}

// repeated .seigr.policy.GovernanceAction actions = 4;
inline int PolicyRule::_internal_actions_size() const {
  return _internal_actions().size();
}
inline int PolicyRule::actions_size() const {
  return _internal_actions_size();
}
inline void PolicyRule::clear_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actions_.Clear();
}
inline ::seigr::policy::GovernanceAction PolicyRule::actions(int index) const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.actions)
  return static_cast<::seigr::policy::GovernanceAction>(_internal_actions().Get(index));
}
inline void PolicyRule::set_actions(int index, ::seigr::policy::GovernanceAction value) {
  _internal_mutable_actions()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.actions)
}
inline void PolicyRule::add_actions(::seigr::policy::GovernanceAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_actions()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.policy.PolicyRule.actions)
}
inline const ::google::protobuf::RepeatedField<int>& PolicyRule::actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.policy.PolicyRule.actions)
  return _internal_actions();
}
inline ::google::protobuf::RepeatedField<int>* PolicyRule::mutable_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.policy.PolicyRule.actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actions();
}
inline const ::google::protobuf::RepeatedField<int>& PolicyRule::_internal_actions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actions_;
}
inline ::google::protobuf::RepeatedField<int>* PolicyRule::_internal_mutable_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actions_;
}

// string created_at = 5;
inline void PolicyRule::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& PolicyRule::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyRule::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.created_at)
}
inline std::string* PolicyRule::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyRule.created_at)
  return _s;
}
inline const std::string& PolicyRule::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void PolicyRule::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* PolicyRule::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* PolicyRule::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyRule.created_at)
  return _impl_.created_at_.Release();
}
inline void PolicyRule::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyRule.created_at)
}

// string last_modified = 6;
inline void PolicyRule::clear_last_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_.ClearToEmpty();
}
inline const std::string& PolicyRule::last_modified() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.last_modified)
  return _internal_last_modified();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyRule::set_last_modified(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.last_modified)
}
inline std::string* PolicyRule::mutable_last_modified() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_modified();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyRule.last_modified)
  return _s;
}
inline const std::string& PolicyRule::_internal_last_modified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_.Get();
}
inline void PolicyRule::_internal_set_last_modified(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_.Set(value, GetArena());
}
inline std::string* PolicyRule::_internal_mutable_last_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_modified_.Mutable( GetArena());
}
inline std::string* PolicyRule::release_last_modified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyRule.last_modified)
  return _impl_.last_modified_.Release();
}
inline void PolicyRule::set_allocated_last_modified(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_modified_.IsDefault()) {
    _impl_.last_modified_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyRule.last_modified)
}

// map<string, string> rule_conditions = 7;
inline int PolicyRule::_internal_rule_conditions_size() const {
  return _internal_rule_conditions().size();
}
inline int PolicyRule::rule_conditions_size() const {
  return _internal_rule_conditions_size();
}
inline void PolicyRule::clear_rule_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::_internal_rule_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::rule_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.PolicyRule.rule_conditions)
  return _internal_rule_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::_internal_mutable_rule_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::mutable_rule_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.PolicyRule.rule_conditions)
  return _internal_mutable_rule_conditions();
}

// map<string, string> penalty_conditions = 8;
inline int PolicyRule::_internal_penalty_conditions_size() const {
  return _internal_penalty_conditions().size();
}
inline int PolicyRule::penalty_conditions_size() const {
  return _internal_penalty_conditions_size();
}
inline void PolicyRule::clear_penalty_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.penalty_conditions_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::_internal_penalty_conditions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.penalty_conditions_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::penalty_conditions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.PolicyRule.penalty_conditions)
  return _internal_penalty_conditions();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::_internal_mutable_penalty_conditions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.penalty_conditions_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::mutable_penalty_conditions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.PolicyRule.penalty_conditions)
  return _internal_mutable_penalty_conditions();
}

// bool is_active = 9;
inline void PolicyRule::clear_is_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = false;
}
inline bool PolicyRule::is_active() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyRule.is_active)
  return _internal_is_active();
}
inline void PolicyRule::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyRule.is_active)
}
inline bool PolicyRule::_internal_is_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_active_;
}
inline void PolicyRule::_internal_set_is_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = value;
}

// map<string, string> rule_metadata = 10;
inline int PolicyRule::_internal_rule_metadata_size() const {
  return _internal_rule_metadata().size();
}
inline int PolicyRule::rule_metadata_size() const {
  return _internal_rule_metadata_size();
}
inline void PolicyRule::clear_rule_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::_internal_rule_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyRule::rule_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.PolicyRule.rule_metadata)
  return _internal_rule_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::_internal_mutable_rule_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyRule::mutable_rule_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.PolicyRule.rule_metadata)
  return _internal_mutable_rule_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemPolicy

// string policy_id = 1;
inline void SystemPolicy::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& SystemPolicy::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.policy_id)
}
inline std::string* SystemPolicy::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.policy_id)
  return _s;
}
inline const std::string& SystemPolicy::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void SystemPolicy::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.policy_id)
  return _impl_.policy_id_.Release();
}
inline void SystemPolicy::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.policy_id)
}

// string policy_name = 2;
inline void SystemPolicy::clear_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.ClearToEmpty();
}
inline const std::string& SystemPolicy::policy_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.policy_name)
  return _internal_policy_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_policy_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.policy_name)
}
inline std::string* SystemPolicy::mutable_policy_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_name();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.policy_name)
  return _s;
}
inline const std::string& SystemPolicy::_internal_policy_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_name_.Get();
}
inline void SystemPolicy::_internal_set_policy_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_name_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_policy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.policy_name)
  return _impl_.policy_name_.Release();
}
inline void SystemPolicy::set_allocated_policy_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_name_.IsDefault()) {
    _impl_.policy_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.policy_name)
}

// string policy_scope = 3;
inline void SystemPolicy::clear_policy_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_scope_.ClearToEmpty();
}
inline const std::string& SystemPolicy::policy_scope() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.policy_scope)
  return _internal_policy_scope();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_policy_scope(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_scope_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.policy_scope)
}
inline std::string* SystemPolicy::mutable_policy_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_scope();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.policy_scope)
  return _s;
}
inline const std::string& SystemPolicy::_internal_policy_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_scope_.Get();
}
inline void SystemPolicy::_internal_set_policy_scope(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_scope_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_policy_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_scope_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_policy_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.policy_scope)
  return _impl_.policy_scope_.Release();
}
inline void SystemPolicy::set_allocated_policy_scope(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_scope_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_scope_.IsDefault()) {
    _impl_.policy_scope_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.policy_scope)
}

// repeated .seigr.policy.PolicyRule rules = 4;
inline int SystemPolicy::_internal_rules_size() const {
  return _internal_rules().size();
}
inline int SystemPolicy::rules_size() const {
  return _internal_rules_size();
}
inline void SystemPolicy::clear_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rules_.Clear();
}
inline ::seigr::policy::PolicyRule* SystemPolicy::mutable_rules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* SystemPolicy::mutable_rules()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.policy.SystemPolicy.rules)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rules();
}
inline const ::seigr::policy::PolicyRule& SystemPolicy::rules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.rules)
  return _internal_rules().Get(index);
}
inline ::seigr::policy::PolicyRule* SystemPolicy::add_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::policy::PolicyRule* _add = _internal_mutable_rules()->Add();
  // @@protoc_insertion_point(field_add:seigr.policy.SystemPolicy.rules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& SystemPolicy::rules() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.policy.SystemPolicy.rules)
  return _internal_rules();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>&
SystemPolicy::_internal_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rules_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>*
SystemPolicy::_internal_mutable_rules() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rules_;
}

// bool mandatory = 5;
inline void SystemPolicy::clear_mandatory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mandatory_ = false;
}
inline bool SystemPolicy::mandatory() const {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.mandatory)
  return _internal_mandatory();
}
inline void SystemPolicy::set_mandatory(bool value) {
  _internal_set_mandatory(value);
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.mandatory)
}
inline bool SystemPolicy::_internal_mandatory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mandatory_;
}
inline void SystemPolicy::_internal_set_mandatory(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mandatory_ = value;
}

// map<string, string> policy_metadata = 6;
inline int SystemPolicy::_internal_policy_metadata_size() const {
  return _internal_policy_metadata().size();
}
inline int SystemPolicy::policy_metadata_size() const {
  return _internal_policy_metadata_size();
}
inline void SystemPolicy::clear_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemPolicy::_internal_policy_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemPolicy::policy_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.SystemPolicy.policy_metadata)
  return _internal_policy_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemPolicy::_internal_mutable_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemPolicy::mutable_policy_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.SystemPolicy.policy_metadata)
  return _internal_mutable_policy_metadata();
}

// string created_by = 7;
inline void SystemPolicy::clear_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& SystemPolicy::created_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.created_by)
  return _internal_created_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_created_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.created_by)
}
inline std::string* SystemPolicy::mutable_created_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.created_by)
  return _s;
}
inline const std::string& SystemPolicy::_internal_created_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_by_.Get();
}
inline void SystemPolicy::_internal_set_created_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_by_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_created_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.created_by)
  return _impl_.created_by_.Release();
}
inline void SystemPolicy::set_allocated_created_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.created_by)
}

// string created_at = 8;
inline void SystemPolicy::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& SystemPolicy::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.created_at)
}
inline std::string* SystemPolicy::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.created_at)
  return _s;
}
inline const std::string& SystemPolicy::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void SystemPolicy::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.created_at)
  return _impl_.created_at_.Release();
}
inline void SystemPolicy::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.created_at)
}

// string modified_at = 9;
inline void SystemPolicy::clear_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modified_at_.ClearToEmpty();
}
inline const std::string& SystemPolicy::modified_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.modified_at)
  return _internal_modified_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_modified_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modified_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.modified_at)
}
inline std::string* SystemPolicy::mutable_modified_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_modified_at();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.modified_at)
  return _s;
}
inline const std::string& SystemPolicy::_internal_modified_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modified_at_.Get();
}
inline void SystemPolicy::_internal_set_modified_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modified_at_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.modified_at_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_modified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.modified_at)
  return _impl_.modified_at_.Release();
}
inline void SystemPolicy::set_allocated_modified_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modified_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.modified_at_.IsDefault()) {
    _impl_.modified_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.modified_at)
}

// string associated_compliance_id = 10;
inline void SystemPolicy::clear_associated_compliance_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_compliance_id_.ClearToEmpty();
}
inline const std::string& SystemPolicy::associated_compliance_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.SystemPolicy.associated_compliance_id)
  return _internal_associated_compliance_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPolicy::set_associated_compliance_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_compliance_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.SystemPolicy.associated_compliance_id)
}
inline std::string* SystemPolicy::mutable_associated_compliance_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_associated_compliance_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.SystemPolicy.associated_compliance_id)
  return _s;
}
inline const std::string& SystemPolicy::_internal_associated_compliance_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.associated_compliance_id_.Get();
}
inline void SystemPolicy::_internal_set_associated_compliance_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_compliance_id_.Set(value, GetArena());
}
inline std::string* SystemPolicy::_internal_mutable_associated_compliance_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.associated_compliance_id_.Mutable( GetArena());
}
inline std::string* SystemPolicy::release_associated_compliance_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.SystemPolicy.associated_compliance_id)
  return _impl_.associated_compliance_id_.Release();
}
inline void SystemPolicy::set_allocated_associated_compliance_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.associated_compliance_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.associated_compliance_id_.IsDefault()) {
    _impl_.associated_compliance_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.SystemPolicy.associated_compliance_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyEnforcement

// string policy_id = 1;
inline void PolicyEnforcement::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& PolicyEnforcement::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcement::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.policy_id)
}
inline std::string* PolicyEnforcement::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.policy_id)
  return _s;
}
inline const std::string& PolicyEnforcement::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void PolicyEnforcement::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* PolicyEnforcement::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* PolicyEnforcement::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcement.policy_id)
  return _impl_.policy_id_.Release();
}
inline void PolicyEnforcement::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcement.policy_id)
}

// string target_component_id = 2;
inline void PolicyEnforcement::clear_target_component_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_component_id_.ClearToEmpty();
}
inline const std::string& PolicyEnforcement::target_component_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.target_component_id)
  return _internal_target_component_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcement::set_target_component_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_component_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.target_component_id)
}
inline std::string* PolicyEnforcement::mutable_target_component_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_component_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.target_component_id)
  return _s;
}
inline const std::string& PolicyEnforcement::_internal_target_component_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_component_id_.Get();
}
inline void PolicyEnforcement::_internal_set_target_component_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_component_id_.Set(value, GetArena());
}
inline std::string* PolicyEnforcement::_internal_mutable_target_component_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_component_id_.Mutable( GetArena());
}
inline std::string* PolicyEnforcement::release_target_component_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcement.target_component_id)
  return _impl_.target_component_id_.Release();
}
inline void PolicyEnforcement::set_allocated_target_component_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_component_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_component_id_.IsDefault()) {
    _impl_.target_component_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcement.target_component_id)
}

// repeated .seigr.policy.PolicyRule rules = 3;
inline int PolicyEnforcement::_internal_rules_size() const {
  return _internal_rules().size();
}
inline int PolicyEnforcement::rules_size() const {
  return _internal_rules_size();
}
inline void PolicyEnforcement::clear_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rules_.Clear();
}
inline ::seigr::policy::PolicyRule* PolicyEnforcement::mutable_rules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>* PolicyEnforcement::mutable_rules()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.policy.PolicyEnforcement.rules)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rules();
}
inline const ::seigr::policy::PolicyRule& PolicyEnforcement::rules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.rules)
  return _internal_rules().Get(index);
}
inline ::seigr::policy::PolicyRule* PolicyEnforcement::add_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::policy::PolicyRule* _add = _internal_mutable_rules()->Add();
  // @@protoc_insertion_point(field_add:seigr.policy.PolicyEnforcement.rules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>& PolicyEnforcement::rules() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.policy.PolicyEnforcement.rules)
  return _internal_rules();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>&
PolicyEnforcement::_internal_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rules_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::policy::PolicyRule>*
PolicyEnforcement::_internal_mutable_rules() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rules_;
}

// bool enforce_immediately = 4;
inline void PolicyEnforcement::clear_enforce_immediately() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_immediately_ = false;
}
inline bool PolicyEnforcement::enforce_immediately() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.enforce_immediately)
  return _internal_enforce_immediately();
}
inline void PolicyEnforcement::set_enforce_immediately(bool value) {
  _internal_set_enforce_immediately(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.enforce_immediately)
}
inline bool PolicyEnforcement::_internal_enforce_immediately() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforce_immediately_;
}
inline void PolicyEnforcement::_internal_set_enforce_immediately(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforce_immediately_ = value;
}

// string enforcement_level = 5;
inline void PolicyEnforcement::clear_enforcement_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_level_.ClearToEmpty();
}
inline const std::string& PolicyEnforcement::enforcement_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.enforcement_level)
  return _internal_enforcement_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcement::set_enforcement_level(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.enforcement_level)
}
inline std::string* PolicyEnforcement::mutable_enforcement_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_enforcement_level();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.enforcement_level)
  return _s;
}
inline const std::string& PolicyEnforcement::_internal_enforcement_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforcement_level_.Get();
}
inline void PolicyEnforcement::_internal_set_enforcement_level(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_level_.Set(value, GetArena());
}
inline std::string* PolicyEnforcement::_internal_mutable_enforcement_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.enforcement_level_.Mutable( GetArena());
}
inline std::string* PolicyEnforcement::release_enforcement_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcement.enforcement_level)
  return _impl_.enforcement_level_.Release();
}
inline void PolicyEnforcement::set_allocated_enforcement_level(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_level_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.enforcement_level_.IsDefault()) {
    _impl_.enforcement_level_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcement.enforcement_level)
}

// map<string, string> enforcement_metadata = 6;
inline int PolicyEnforcement::_internal_enforcement_metadata_size() const {
  return _internal_enforcement_metadata().size();
}
inline int PolicyEnforcement::enforcement_metadata_size() const {
  return _internal_enforcement_metadata_size();
}
inline void PolicyEnforcement::clear_enforcement_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyEnforcement::_internal_enforcement_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforcement_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyEnforcement::enforcement_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.PolicyEnforcement.enforcement_metadata)
  return _internal_enforcement_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyEnforcement::_internal_mutable_enforcement_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.enforcement_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyEnforcement::mutable_enforcement_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.PolicyEnforcement.enforcement_metadata)
  return _internal_mutable_enforcement_metadata();
}

// string initiated_by = 7;
inline void PolicyEnforcement::clear_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.ClearToEmpty();
}
inline const std::string& PolicyEnforcement::initiated_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.initiated_by)
  return _internal_initiated_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcement::set_initiated_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.initiated_by)
}
inline std::string* PolicyEnforcement::mutable_initiated_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initiated_by();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.initiated_by)
  return _s;
}
inline const std::string& PolicyEnforcement::_internal_initiated_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initiated_by_.Get();
}
inline void PolicyEnforcement::_internal_set_initiated_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.Set(value, GetArena());
}
inline std::string* PolicyEnforcement::_internal_mutable_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initiated_by_.Mutable( GetArena());
}
inline std::string* PolicyEnforcement::release_initiated_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcement.initiated_by)
  return _impl_.initiated_by_.Release();
}
inline void PolicyEnforcement::set_allocated_initiated_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initiated_by_.IsDefault()) {
    _impl_.initiated_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcement.initiated_by)
}

// string initiated_at = 8;
inline void PolicyEnforcement::clear_initiated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_at_.ClearToEmpty();
}
inline const std::string& PolicyEnforcement::initiated_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcement.initiated_at)
  return _internal_initiated_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcement::set_initiated_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcement.initiated_at)
}
inline std::string* PolicyEnforcement::mutable_initiated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initiated_at();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcement.initiated_at)
  return _s;
}
inline const std::string& PolicyEnforcement::_internal_initiated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initiated_at_.Get();
}
inline void PolicyEnforcement::_internal_set_initiated_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_at_.Set(value, GetArena());
}
inline std::string* PolicyEnforcement::_internal_mutable_initiated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initiated_at_.Mutable( GetArena());
}
inline std::string* PolicyEnforcement::release_initiated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcement.initiated_at)
  return _impl_.initiated_at_.Release();
}
inline void PolicyEnforcement::set_allocated_initiated_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initiated_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initiated_at_.IsDefault()) {
    _impl_.initiated_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcement.initiated_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplianceAudit

// string audit_id = 1;
inline void ComplianceAudit::clear_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.ClearToEmpty();
}
inline const std::string& ComplianceAudit::audit_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.audit_id)
  return _internal_audit_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAudit::set_audit_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.audit_id)
}
inline std::string* ComplianceAudit::mutable_audit_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audit_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAudit.audit_id)
  return _s;
}
inline const std::string& ComplianceAudit::_internal_audit_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_id_.Get();
}
inline void ComplianceAudit::_internal_set_audit_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.Set(value, GetArena());
}
inline std::string* ComplianceAudit::_internal_mutable_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audit_id_.Mutable( GetArena());
}
inline std::string* ComplianceAudit::release_audit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAudit.audit_id)
  return _impl_.audit_id_.Release();
}
inline void ComplianceAudit::set_allocated_audit_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audit_id_.IsDefault()) {
    _impl_.audit_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAudit.audit_id)
}

// string policy_id = 2;
inline void ComplianceAudit::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& ComplianceAudit::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAudit::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.policy_id)
}
inline std::string* ComplianceAudit::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAudit.policy_id)
  return _s;
}
inline const std::string& ComplianceAudit::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void ComplianceAudit::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* ComplianceAudit::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* ComplianceAudit::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAudit.policy_id)
  return _impl_.policy_id_.Release();
}
inline void ComplianceAudit::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAudit.policy_id)
}

// string user_id = 3;
inline void ComplianceAudit::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ComplianceAudit::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAudit::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.user_id)
}
inline std::string* ComplianceAudit::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAudit.user_id)
  return _s;
}
inline const std::string& ComplianceAudit::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void ComplianceAudit::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* ComplianceAudit::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* ComplianceAudit::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAudit.user_id)
  return _impl_.user_id_.Release();
}
inline void ComplianceAudit::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAudit.user_id)
}

// string timestamp = 4;
inline void ComplianceAudit::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& ComplianceAudit::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAudit::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.timestamp)
}
inline std::string* ComplianceAudit::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAudit.timestamp)
  return _s;
}
inline const std::string& ComplianceAudit::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void ComplianceAudit::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* ComplianceAudit::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* ComplianceAudit::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAudit.timestamp)
  return _impl_.timestamp_.Release();
}
inline void ComplianceAudit::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAudit.timestamp)
}

// bool compliance_status = 5;
inline void ComplianceAudit::clear_compliance_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_status_ = false;
}
inline bool ComplianceAudit::compliance_status() const {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.compliance_status)
  return _internal_compliance_status();
}
inline void ComplianceAudit::set_compliance_status(bool value) {
  _internal_set_compliance_status(value);
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.compliance_status)
}
inline bool ComplianceAudit::_internal_compliance_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_status_;
}
inline void ComplianceAudit::_internal_set_compliance_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_status_ = value;
}

// string violation_description = 6;
inline void ComplianceAudit::clear_violation_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_description_.ClearToEmpty();
}
inline const std::string& ComplianceAudit::violation_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.violation_description)
  return _internal_violation_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAudit::set_violation_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.violation_description)
}
inline std::string* ComplianceAudit::mutable_violation_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_violation_description();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAudit.violation_description)
  return _s;
}
inline const std::string& ComplianceAudit::_internal_violation_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violation_description_.Get();
}
inline void ComplianceAudit::_internal_set_violation_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_description_.Set(value, GetArena());
}
inline std::string* ComplianceAudit::_internal_mutable_violation_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.violation_description_.Mutable( GetArena());
}
inline std::string* ComplianceAudit::release_violation_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAudit.violation_description)
  return _impl_.violation_description_.Release();
}
inline void ComplianceAudit::set_allocated_violation_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.violation_description_.IsDefault()) {
    _impl_.violation_description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAudit.violation_description)
}

// .seigr.policy.GovernanceAction recommended_action = 7;
inline void ComplianceAudit::clear_recommended_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_ = 0;
}
inline ::seigr::policy::GovernanceAction ComplianceAudit::recommended_action() const {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAudit.recommended_action)
  return _internal_recommended_action();
}
inline void ComplianceAudit::set_recommended_action(::seigr::policy::GovernanceAction value) {
  _internal_set_recommended_action(value);
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAudit.recommended_action)
}
inline ::seigr::policy::GovernanceAction ComplianceAudit::_internal_recommended_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::policy::GovernanceAction>(_impl_.recommended_action_);
}
inline void ComplianceAudit::_internal_set_recommended_action(::seigr::policy::GovernanceAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_action_ = value;
}

// map<string, string> audit_metadata = 8;
inline int ComplianceAudit::_internal_audit_metadata_size() const {
  return _internal_audit_metadata().size();
}
inline int ComplianceAudit::audit_metadata_size() const {
  return _internal_audit_metadata_size();
}
inline void ComplianceAudit::clear_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audit_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ComplianceAudit::_internal_audit_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audit_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ComplianceAudit::audit_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.ComplianceAudit.audit_metadata)
  return _internal_audit_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ComplianceAudit::_internal_mutable_audit_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audit_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ComplianceAudit::mutable_audit_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.ComplianceAudit.audit_metadata)
  return _internal_mutable_audit_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PolicyViolation

// string violation_id = 1;
inline void PolicyViolation::clear_violation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_id_.ClearToEmpty();
}
inline const std::string& PolicyViolation::violation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.violation_id)
  return _internal_violation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_violation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.violation_id)
}
inline std::string* PolicyViolation::mutable_violation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_violation_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.violation_id)
  return _s;
}
inline const std::string& PolicyViolation::_internal_violation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violation_id_.Get();
}
inline void PolicyViolation::_internal_set_violation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_id_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_violation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.violation_id_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_violation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.violation_id)
  return _impl_.violation_id_.Release();
}
inline void PolicyViolation::set_allocated_violation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.violation_id_.IsDefault()) {
    _impl_.violation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.violation_id)
}

// string policy_id = 2;
inline void PolicyViolation::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& PolicyViolation::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.policy_id)
}
inline std::string* PolicyViolation::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.policy_id)
  return _s;
}
inline const std::string& PolicyViolation::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void PolicyViolation::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.policy_id)
  return _impl_.policy_id_.Release();
}
inline void PolicyViolation::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.policy_id)
}

// string rule_id = 3;
inline void PolicyViolation::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.ClearToEmpty();
}
inline const std::string& PolicyViolation::rule_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.rule_id)
  return _internal_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_rule_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.rule_id)
}
inline std::string* PolicyViolation::mutable_rule_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.rule_id)
  return _s;
}
inline const std::string& PolicyViolation::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_.Get();
}
inline void PolicyViolation::_internal_set_rule_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_id_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.rule_id)
  return _impl_.rule_id_.Release();
}
inline void PolicyViolation::set_allocated_rule_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rule_id_.IsDefault()) {
    _impl_.rule_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.rule_id)
}

// string user_id = 4;
inline void PolicyViolation::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& PolicyViolation::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.user_id)
}
inline std::string* PolicyViolation::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.user_id)
  return _s;
}
inline const std::string& PolicyViolation::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void PolicyViolation::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.user_id)
  return _impl_.user_id_.Release();
}
inline void PolicyViolation::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.user_id)
}

// string timestamp = 5;
inline void PolicyViolation::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& PolicyViolation::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.timestamp)
}
inline std::string* PolicyViolation::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.timestamp)
  return _s;
}
inline const std::string& PolicyViolation::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void PolicyViolation::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.timestamp)
  return _impl_.timestamp_.Release();
}
inline void PolicyViolation::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.timestamp)
}

// .seigr.policy.GovernanceAction response_action = 6;
inline void PolicyViolation::clear_response_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_action_ = 0;
}
inline ::seigr::policy::GovernanceAction PolicyViolation::response_action() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.response_action)
  return _internal_response_action();
}
inline void PolicyViolation::set_response_action(::seigr::policy::GovernanceAction value) {
  _internal_set_response_action(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.response_action)
}
inline ::seigr::policy::GovernanceAction PolicyViolation::_internal_response_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::policy::GovernanceAction>(_impl_.response_action_);
}
inline void PolicyViolation::_internal_set_response_action(::seigr::policy::GovernanceAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_action_ = value;
}

// string resolution_status = 7;
inline void PolicyViolation::clear_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.ClearToEmpty();
}
inline const std::string& PolicyViolation::resolution_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.resolution_status)
  return _internal_resolution_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_resolution_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.resolution_status)
}
inline std::string* PolicyViolation::mutable_resolution_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resolution_status();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.resolution_status)
  return _s;
}
inline const std::string& PolicyViolation::_internal_resolution_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resolution_status_.Get();
}
inline void PolicyViolation::_internal_set_resolution_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.resolution_status_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_resolution_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.resolution_status)
  return _impl_.resolution_status_.Release();
}
inline void PolicyViolation::set_allocated_resolution_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resolution_status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.resolution_status_.IsDefault()) {
    _impl_.resolution_status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.resolution_status)
}

// string escalated_to = 8;
inline void PolicyViolation::clear_escalated_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalated_to_.ClearToEmpty();
}
inline const std::string& PolicyViolation::escalated_to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolation.escalated_to)
  return _internal_escalated_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolation::set_escalated_to(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalated_to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolation.escalated_to)
}
inline std::string* PolicyViolation::mutable_escalated_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalated_to();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolation.escalated_to)
  return _s;
}
inline const std::string& PolicyViolation::_internal_escalated_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalated_to_.Get();
}
inline void PolicyViolation::_internal_set_escalated_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalated_to_.Set(value, GetArena());
}
inline std::string* PolicyViolation::_internal_mutable_escalated_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalated_to_.Mutable( GetArena());
}
inline std::string* PolicyViolation::release_escalated_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolation.escalated_to)
  return _impl_.escalated_to_.Release();
}
inline void PolicyViolation::set_allocated_escalated_to(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalated_to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalated_to_.IsDefault()) {
    _impl_.escalated_to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolation.escalated_to)
}

// map<string, string> violation_metadata = 9;
inline int PolicyViolation::_internal_violation_metadata_size() const {
  return _internal_violation_metadata().size();
}
inline int PolicyViolation::violation_metadata_size() const {
  return _internal_violation_metadata_size();
}
inline void PolicyViolation::clear_violation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyViolation::_internal_violation_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violation_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& PolicyViolation::violation_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.policy.PolicyViolation.violation_metadata)
  return _internal_violation_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyViolation::_internal_mutable_violation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.violation_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PolicyViolation::mutable_violation_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.policy.PolicyViolation.violation_metadata)
  return _internal_mutable_violation_metadata();
}

// -------------------------------------------------------------------

// PolicyDefinitionRequest

// .seigr.policy.SystemPolicy policy = 1;
inline bool PolicyDefinitionRequest::has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.policy_ != nullptr);
  return value;
}
inline void PolicyDefinitionRequest::clear_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.policy_ != nullptr) _impl_.policy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::policy::SystemPolicy& PolicyDefinitionRequest::_internal_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::policy::SystemPolicy* p = _impl_.policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::policy::SystemPolicy&>(::seigr::policy::_SystemPolicy_default_instance_);
}
inline const ::seigr::policy::SystemPolicy& PolicyDefinitionRequest::policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyDefinitionRequest.policy)
  return _internal_policy();
}
inline void PolicyDefinitionRequest::unsafe_arena_set_allocated_policy(::seigr::policy::SystemPolicy* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.policy_);
  }
  _impl_.policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.policy.PolicyDefinitionRequest.policy)
}
inline ::seigr::policy::SystemPolicy* PolicyDefinitionRequest::release_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::SystemPolicy* released = _impl_.policy_;
  _impl_.policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::policy::SystemPolicy* PolicyDefinitionRequest::unsafe_arena_release_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyDefinitionRequest.policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::SystemPolicy* temp = _impl_.policy_;
  _impl_.policy_ = nullptr;
  return temp;
}
inline ::seigr::policy::SystemPolicy* PolicyDefinitionRequest::_internal_mutable_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::policy::SystemPolicy>(GetArena());
    _impl_.policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(p);
  }
  return _impl_.policy_;
}
inline ::seigr::policy::SystemPolicy* PolicyDefinitionRequest::mutable_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::policy::SystemPolicy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyDefinitionRequest.policy)
  return _msg;
}
inline void PolicyDefinitionRequest::set_allocated_policy(::seigr::policy::SystemPolicy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyDefinitionRequest.policy)
}

// -------------------------------------------------------------------

// PolicyDefinitionResponse

// bool success = 1;
inline void PolicyDefinitionResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PolicyDefinitionResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyDefinitionResponse.success)
  return _internal_success();
}
inline void PolicyDefinitionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyDefinitionResponse.success)
}
inline bool PolicyDefinitionResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PolicyDefinitionResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string policy_id = 2;
inline void PolicyDefinitionResponse::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& PolicyDefinitionResponse::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyDefinitionResponse.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyDefinitionResponse::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyDefinitionResponse.policy_id)
}
inline std::string* PolicyDefinitionResponse::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyDefinitionResponse.policy_id)
  return _s;
}
inline const std::string& PolicyDefinitionResponse::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void PolicyDefinitionResponse::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* PolicyDefinitionResponse::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* PolicyDefinitionResponse::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyDefinitionResponse.policy_id)
  return _impl_.policy_id_.Release();
}
inline void PolicyDefinitionResponse::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyDefinitionResponse.policy_id)
}

// string message = 3;
inline void PolicyDefinitionResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PolicyDefinitionResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyDefinitionResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyDefinitionResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyDefinitionResponse.message)
}
inline std::string* PolicyDefinitionResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyDefinitionResponse.message)
  return _s;
}
inline const std::string& PolicyDefinitionResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PolicyDefinitionResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PolicyDefinitionResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PolicyDefinitionResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyDefinitionResponse.message)
  return _impl_.message_.Release();
}
inline void PolicyDefinitionResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyDefinitionResponse.message)
}

// -------------------------------------------------------------------

// PolicyUpdateRequest

// .seigr.policy.SystemPolicy updated_policy = 1;
inline bool PolicyUpdateRequest::has_updated_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_policy_ != nullptr);
  return value;
}
inline void PolicyUpdateRequest::clear_updated_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_policy_ != nullptr) _impl_.updated_policy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::policy::SystemPolicy& PolicyUpdateRequest::_internal_updated_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::policy::SystemPolicy* p = _impl_.updated_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::policy::SystemPolicy&>(::seigr::policy::_SystemPolicy_default_instance_);
}
inline const ::seigr::policy::SystemPolicy& PolicyUpdateRequest::updated_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyUpdateRequest.updated_policy)
  return _internal_updated_policy();
}
inline void PolicyUpdateRequest::unsafe_arena_set_allocated_updated_policy(::seigr::policy::SystemPolicy* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_policy_);
  }
  _impl_.updated_policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.policy.PolicyUpdateRequest.updated_policy)
}
inline ::seigr::policy::SystemPolicy* PolicyUpdateRequest::release_updated_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::SystemPolicy* released = _impl_.updated_policy_;
  _impl_.updated_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::policy::SystemPolicy* PolicyUpdateRequest::unsafe_arena_release_updated_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyUpdateRequest.updated_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::SystemPolicy* temp = _impl_.updated_policy_;
  _impl_.updated_policy_ = nullptr;
  return temp;
}
inline ::seigr::policy::SystemPolicy* PolicyUpdateRequest::_internal_mutable_updated_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::policy::SystemPolicy>(GetArena());
    _impl_.updated_policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(p);
  }
  return _impl_.updated_policy_;
}
inline ::seigr::policy::SystemPolicy* PolicyUpdateRequest::mutable_updated_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::policy::SystemPolicy* _msg = _internal_mutable_updated_policy();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyUpdateRequest.updated_policy)
  return _msg;
}
inline void PolicyUpdateRequest::set_allocated_updated_policy(::seigr::policy::SystemPolicy* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.updated_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.updated_policy_ = reinterpret_cast<::seigr::policy::SystemPolicy*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyUpdateRequest.updated_policy)
}

// -------------------------------------------------------------------

// PolicyUpdateResponse

// bool success = 1;
inline void PolicyUpdateResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PolicyUpdateResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyUpdateResponse.success)
  return _internal_success();
}
inline void PolicyUpdateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyUpdateResponse.success)
}
inline bool PolicyUpdateResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PolicyUpdateResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void PolicyUpdateResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PolicyUpdateResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyUpdateResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyUpdateResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyUpdateResponse.message)
}
inline std::string* PolicyUpdateResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyUpdateResponse.message)
  return _s;
}
inline const std::string& PolicyUpdateResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PolicyUpdateResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PolicyUpdateResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PolicyUpdateResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyUpdateResponse.message)
  return _impl_.message_.Release();
}
inline void PolicyUpdateResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyUpdateResponse.message)
}

// -------------------------------------------------------------------

// PolicyEnforcementRequest

// .seigr.policy.PolicyEnforcement enforcement = 1;
inline bool PolicyEnforcementRequest::has_enforcement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enforcement_ != nullptr);
  return value;
}
inline void PolicyEnforcementRequest::clear_enforcement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enforcement_ != nullptr) _impl_.enforcement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::policy::PolicyEnforcement& PolicyEnforcementRequest::_internal_enforcement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::policy::PolicyEnforcement* p = _impl_.enforcement_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::policy::PolicyEnforcement&>(::seigr::policy::_PolicyEnforcement_default_instance_);
}
inline const ::seigr::policy::PolicyEnforcement& PolicyEnforcementRequest::enforcement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcementRequest.enforcement)
  return _internal_enforcement();
}
inline void PolicyEnforcementRequest::unsafe_arena_set_allocated_enforcement(::seigr::policy::PolicyEnforcement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enforcement_);
  }
  _impl_.enforcement_ = reinterpret_cast<::seigr::policy::PolicyEnforcement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.policy.PolicyEnforcementRequest.enforcement)
}
inline ::seigr::policy::PolicyEnforcement* PolicyEnforcementRequest::release_enforcement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::PolicyEnforcement* released = _impl_.enforcement_;
  _impl_.enforcement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::policy::PolicyEnforcement* PolicyEnforcementRequest::unsafe_arena_release_enforcement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcementRequest.enforcement)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::PolicyEnforcement* temp = _impl_.enforcement_;
  _impl_.enforcement_ = nullptr;
  return temp;
}
inline ::seigr::policy::PolicyEnforcement* PolicyEnforcementRequest::_internal_mutable_enforcement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enforcement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::policy::PolicyEnforcement>(GetArena());
    _impl_.enforcement_ = reinterpret_cast<::seigr::policy::PolicyEnforcement*>(p);
  }
  return _impl_.enforcement_;
}
inline ::seigr::policy::PolicyEnforcement* PolicyEnforcementRequest::mutable_enforcement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::policy::PolicyEnforcement* _msg = _internal_mutable_enforcement();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcementRequest.enforcement)
  return _msg;
}
inline void PolicyEnforcementRequest::set_allocated_enforcement(::seigr::policy::PolicyEnforcement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.enforcement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.enforcement_ = reinterpret_cast<::seigr::policy::PolicyEnforcement*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcementRequest.enforcement)
}

// -------------------------------------------------------------------

// PolicyEnforcementResponse

// bool success = 1;
inline void PolicyEnforcementResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PolicyEnforcementResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcementResponse.success)
  return _internal_success();
}
inline void PolicyEnforcementResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcementResponse.success)
}
inline bool PolicyEnforcementResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PolicyEnforcementResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string enforcement_id = 2;
inline void PolicyEnforcementResponse::clear_enforcement_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_id_.ClearToEmpty();
}
inline const std::string& PolicyEnforcementResponse::enforcement_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcementResponse.enforcement_id)
  return _internal_enforcement_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcementResponse::set_enforcement_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcementResponse.enforcement_id)
}
inline std::string* PolicyEnforcementResponse::mutable_enforcement_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_enforcement_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcementResponse.enforcement_id)
  return _s;
}
inline const std::string& PolicyEnforcementResponse::_internal_enforcement_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enforcement_id_.Get();
}
inline void PolicyEnforcementResponse::_internal_set_enforcement_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_id_.Set(value, GetArena());
}
inline std::string* PolicyEnforcementResponse::_internal_mutable_enforcement_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.enforcement_id_.Mutable( GetArena());
}
inline std::string* PolicyEnforcementResponse::release_enforcement_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcementResponse.enforcement_id)
  return _impl_.enforcement_id_.Release();
}
inline void PolicyEnforcementResponse::set_allocated_enforcement_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enforcement_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.enforcement_id_.IsDefault()) {
    _impl_.enforcement_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcementResponse.enforcement_id)
}

// string message = 3;
inline void PolicyEnforcementResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PolicyEnforcementResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyEnforcementResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyEnforcementResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyEnforcementResponse.message)
}
inline std::string* PolicyEnforcementResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyEnforcementResponse.message)
  return _s;
}
inline const std::string& PolicyEnforcementResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PolicyEnforcementResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PolicyEnforcementResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PolicyEnforcementResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyEnforcementResponse.message)
  return _impl_.message_.Release();
}
inline void PolicyEnforcementResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyEnforcementResponse.message)
}

// -------------------------------------------------------------------

// ComplianceCheckRequest

// string user_id = 1;
inline void ComplianceCheckRequest::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ComplianceCheckRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceCheckRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceCheckRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceCheckRequest.user_id)
}
inline std::string* ComplianceCheckRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceCheckRequest.user_id)
  return _s;
}
inline const std::string& ComplianceCheckRequest::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void ComplianceCheckRequest::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* ComplianceCheckRequest::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* ComplianceCheckRequest::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceCheckRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ComplianceCheckRequest::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceCheckRequest.user_id)
}

// string policy_id = 2;
inline void ComplianceCheckRequest::clear_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.ClearToEmpty();
}
inline const std::string& ComplianceCheckRequest::policy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceCheckRequest.policy_id)
  return _internal_policy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceCheckRequest::set_policy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceCheckRequest.policy_id)
}
inline std::string* ComplianceCheckRequest::mutable_policy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceCheckRequest.policy_id)
  return _s;
}
inline const std::string& ComplianceCheckRequest::_internal_policy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.policy_id_.Get();
}
inline void ComplianceCheckRequest::_internal_set_policy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.Set(value, GetArena());
}
inline std::string* ComplianceCheckRequest::_internal_mutable_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.policy_id_.Mutable( GetArena());
}
inline std::string* ComplianceCheckRequest::release_policy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceCheckRequest.policy_id)
  return _impl_.policy_id_.Release();
}
inline void ComplianceCheckRequest::set_allocated_policy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.policy_id_.IsDefault()) {
    _impl_.policy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceCheckRequest.policy_id)
}

// -------------------------------------------------------------------

// ComplianceCheckResponse

// bool is_compliant = 1;
inline void ComplianceCheckResponse::clear_is_compliant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compliant_ = false;
}
inline bool ComplianceCheckResponse::is_compliant() const {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceCheckResponse.is_compliant)
  return _internal_is_compliant();
}
inline void ComplianceCheckResponse::set_is_compliant(bool value) {
  _internal_set_is_compliant(value);
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceCheckResponse.is_compliant)
}
inline bool ComplianceCheckResponse::_internal_is_compliant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_compliant_;
}
inline void ComplianceCheckResponse::_internal_set_is_compliant(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compliant_ = value;
}

// string message = 2;
inline void ComplianceCheckResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ComplianceCheckResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceCheckResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceCheckResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceCheckResponse.message)
}
inline std::string* ComplianceCheckResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceCheckResponse.message)
  return _s;
}
inline const std::string& ComplianceCheckResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ComplianceCheckResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ComplianceCheckResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ComplianceCheckResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceCheckResponse.message)
  return _impl_.message_.Release();
}
inline void ComplianceCheckResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceCheckResponse.message)
}

// -------------------------------------------------------------------

// PolicyViolationLogRequest

// .seigr.policy.PolicyViolation violation = 1;
inline bool PolicyViolationLogRequest::has_violation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.violation_ != nullptr);
  return value;
}
inline void PolicyViolationLogRequest::clear_violation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.violation_ != nullptr) _impl_.violation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::policy::PolicyViolation& PolicyViolationLogRequest::_internal_violation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::policy::PolicyViolation* p = _impl_.violation_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::policy::PolicyViolation&>(::seigr::policy::_PolicyViolation_default_instance_);
}
inline const ::seigr::policy::PolicyViolation& PolicyViolationLogRequest::violation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolationLogRequest.violation)
  return _internal_violation();
}
inline void PolicyViolationLogRequest::unsafe_arena_set_allocated_violation(::seigr::policy::PolicyViolation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.violation_);
  }
  _impl_.violation_ = reinterpret_cast<::seigr::policy::PolicyViolation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.policy.PolicyViolationLogRequest.violation)
}
inline ::seigr::policy::PolicyViolation* PolicyViolationLogRequest::release_violation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::PolicyViolation* released = _impl_.violation_;
  _impl_.violation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::policy::PolicyViolation* PolicyViolationLogRequest::unsafe_arena_release_violation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolationLogRequest.violation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::PolicyViolation* temp = _impl_.violation_;
  _impl_.violation_ = nullptr;
  return temp;
}
inline ::seigr::policy::PolicyViolation* PolicyViolationLogRequest::_internal_mutable_violation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.violation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::policy::PolicyViolation>(GetArena());
    _impl_.violation_ = reinterpret_cast<::seigr::policy::PolicyViolation*>(p);
  }
  return _impl_.violation_;
}
inline ::seigr::policy::PolicyViolation* PolicyViolationLogRequest::mutable_violation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::policy::PolicyViolation* _msg = _internal_mutable_violation();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolationLogRequest.violation)
  return _msg;
}
inline void PolicyViolationLogRequest::set_allocated_violation(::seigr::policy::PolicyViolation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.violation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.violation_ = reinterpret_cast<::seigr::policy::PolicyViolation*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolationLogRequest.violation)
}

// -------------------------------------------------------------------

// PolicyViolationLogResponse

// bool success = 1;
inline void PolicyViolationLogResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PolicyViolationLogResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolationLogResponse.success)
  return _internal_success();
}
inline void PolicyViolationLogResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolationLogResponse.success)
}
inline bool PolicyViolationLogResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PolicyViolationLogResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void PolicyViolationLogResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PolicyViolationLogResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.PolicyViolationLogResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PolicyViolationLogResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.PolicyViolationLogResponse.message)
}
inline std::string* PolicyViolationLogResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.PolicyViolationLogResponse.message)
  return _s;
}
inline const std::string& PolicyViolationLogResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PolicyViolationLogResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PolicyViolationLogResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PolicyViolationLogResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.PolicyViolationLogResponse.message)
  return _impl_.message_.Release();
}
inline void PolicyViolationLogResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.PolicyViolationLogResponse.message)
}

// -------------------------------------------------------------------

// ComplianceAuditRequest

// .seigr.policy.ComplianceAudit audit = 1;
inline bool ComplianceAuditRequest::has_audit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audit_ != nullptr);
  return value;
}
inline void ComplianceAuditRequest::clear_audit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audit_ != nullptr) _impl_.audit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::seigr::policy::ComplianceAudit& ComplianceAuditRequest::_internal_audit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::seigr::policy::ComplianceAudit* p = _impl_.audit_;
  return p != nullptr ? *p : reinterpret_cast<const ::seigr::policy::ComplianceAudit&>(::seigr::policy::_ComplianceAudit_default_instance_);
}
inline const ::seigr::policy::ComplianceAudit& ComplianceAuditRequest::audit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAuditRequest.audit)
  return _internal_audit();
}
inline void ComplianceAuditRequest::unsafe_arena_set_allocated_audit(::seigr::policy::ComplianceAudit* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audit_);
  }
  _impl_.audit_ = reinterpret_cast<::seigr::policy::ComplianceAudit*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seigr.policy.ComplianceAuditRequest.audit)
}
inline ::seigr::policy::ComplianceAudit* ComplianceAuditRequest::release_audit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::ComplianceAudit* released = _impl_.audit_;
  _impl_.audit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::seigr::policy::ComplianceAudit* ComplianceAuditRequest::unsafe_arena_release_audit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAuditRequest.audit)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::seigr::policy::ComplianceAudit* temp = _impl_.audit_;
  _impl_.audit_ = nullptr;
  return temp;
}
inline ::seigr::policy::ComplianceAudit* ComplianceAuditRequest::_internal_mutable_audit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::seigr::policy::ComplianceAudit>(GetArena());
    _impl_.audit_ = reinterpret_cast<::seigr::policy::ComplianceAudit*>(p);
  }
  return _impl_.audit_;
}
inline ::seigr::policy::ComplianceAudit* ComplianceAuditRequest::mutable_audit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::seigr::policy::ComplianceAudit* _msg = _internal_mutable_audit();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAuditRequest.audit)
  return _msg;
}
inline void ComplianceAuditRequest::set_allocated_audit(::seigr::policy::ComplianceAudit* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.audit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audit_ = reinterpret_cast<::seigr::policy::ComplianceAudit*>(value);
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAuditRequest.audit)
}

// -------------------------------------------------------------------

// ComplianceAuditResponse

// bool success = 1;
inline void ComplianceAuditResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ComplianceAuditResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAuditResponse.success)
  return _internal_success();
}
inline void ComplianceAuditResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAuditResponse.success)
}
inline bool ComplianceAuditResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ComplianceAuditResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ComplianceAuditResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ComplianceAuditResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.policy.ComplianceAuditResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplianceAuditResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.policy.ComplianceAuditResponse.message)
}
inline std::string* ComplianceAuditResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.policy.ComplianceAuditResponse.message)
  return _s;
}
inline const std::string& ComplianceAuditResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ComplianceAuditResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ComplianceAuditResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ComplianceAuditResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.policy.ComplianceAuditResponse.message)
  return _impl_.message_.Release();
}
inline void ComplianceAuditResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.policy.ComplianceAuditResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::policy::GovernanceAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::policy::GovernanceAction>() {
  return ::seigr::policy::GovernanceAction_descriptor();
}
template <>
struct is_proto_enum<::seigr::policy::PolicyRuleType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::policy::PolicyRuleType>() {
  return ::seigr::policy::PolicyRuleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // policy_2eproto_2epb_2eh
