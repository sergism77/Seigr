syntax = "proto3";

package seigr.encryption;

import "hashing.proto"; // Shared hash-related definitions for consistency.

/**
 * Encryption Protocol
 * 
 * This protocol defines structures, types, and operations for managing encryption,
 * cryptographic key lifecycles, signature verification, and integrity checks.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing the lifecycle status of cryptographic keys.
 */
enum KeyStatus {
    KEY_STATUS_UNDEFINED = 0;  // Undefined status, used as a default.
    KEY_STATUS_ACTIVE = 1;     // Key is active and ready for use.
    KEY_STATUS_INACTIVE = 2;   // Key is inactive but retained.
    KEY_STATUS_REVOKED = 3;    // Key has been revoked and should not be used.
}

/**
 * Enum representing types of encryption methodologies.
 */
enum EncryptionType {
    ENCRYPTION_TYPE_UNDEFINED = 0;  // Undefined encryption type.
    ENCRYPTION_TYPE_SYMMETRIC = 1;  // Symmetric encryption (e.g., AES).
    ENCRYPTION_TYPE_ASYMMETRIC = 2; // Asymmetric encryption (e.g., RSA).
    ENCRYPTION_TYPE_HYBRID = 3;     // Combines symmetric and asymmetric encryption.
}

/**
 * Enum for types of cryptographic operations.
 */
enum CryptographicOperationType {
    OPERATION_TYPE_UNDEFINED = 0;  // Undefined operation type.
    OPERATION_TYPE_ENCRYPTION = 1; // Data encryption operation.
    OPERATION_TYPE_DECRYPTION = 2; // Data decryption operation.
    OPERATION_TYPE_SIGNING = 3;    // Digital signature creation.
    OPERATION_TYPE_VERIFICATION = 4; // Digital signature verification.
    OPERATION_TYPE_KEY_ROTATION = 5; // Rotation of encryption keys.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Represents a symmetric encryption key and its metadata.
 */
message SymmetricKey {
    string key_id = 1;                         // Unique key identifier.
    bytes key = 2;                             // Raw symmetric key bytes.
    bytes salt = 3;                            // Salt for key derivation.
    string algorithm = 4;                      // Encryption algorithm (e.g., "AES-256-GCM").
    string creation_timestamp = 5;             // Key creation timestamp (ISO format).
    string expiration_timestamp = 6;           // Key expiration timestamp (ISO format, optional).
    KeyStatus status = 7;                      // Lifecycle status of the key.
    string rotation_frequency = 8;             // Key rotation schedule (e.g., "monthly").
    string key_source = 9;                     // Source of the key (e.g., "HSM", "software").
    string custodian = 10;                     // Custodian responsible for managing the key.
    map<string, string> metadata = 11;         // Additional key metadata (e.g., policy requirements).
    string compliance_requirements = 12;       // Compliance standards (e.g., "GDPR").
}

/**
 * Represents an asymmetric cryptographic key pair.
 */
message AsymmetricKeyPair {
    string key_pair_id = 1;                    // Unique identifier for the key pair.
    bytes public_key = 2;                      // Public key in PEM format.
    bytes private_key = 3;                     // Private key in PEM format (optional).
    string algorithm = 4;                      // Key algorithm (e.g., "RSA-2048").
    string creation_timestamp = 5;             // Creation timestamp (ISO format).
    string expiration_timestamp = 6;           // Expiration timestamp (ISO format, optional).
    string lifecycle_status = 7;               // Status of the key pair (e.g., "active").
    string rotation_policy = 8;                // Key rotation policy.
    map<string, string> metadata = 9;          // Metadata for usage policies.
    string compliance_requirements = 10;       // Compliance standards (e.g., "FIPS").
}

/**
 * Represents a hybrid encryption key structure.
 */
message HybridEncryptionKey {
    string key_id = 1;                         // Unique identifier for the hybrid key.
    SymmetricKey symmetric_key = 2;            // Symmetric key component.
    AsymmetricKeyPair asymmetric_keys = 3;     // Asymmetric key component.
    string creation_timestamp = 4;             // Key creation timestamp (ISO format).
    map<string, string> metadata = 5;          // Metadata for hybrid key management.
    string compliance_requirements = 6;        // Compliance standards (e.g., "HIPAA").
}

/**
 * Represents encrypted data with associated metadata.
 */
message EncryptedData {
    bytes ciphertext = 1;                      // Encrypted content.
    bytes iv = 2;                              // Initialization vector for encryption.
    EncryptionType encryption_type = 3;        // Encryption methodology used.
    string key_id = 4;                         // Key used for encryption.
    map<string, string> metadata = 5;          // Additional metadata (e.g., encoding).
    string encryption_timestamp = 6;           // Timestamp of encryption (ISO format).
    string encryption_policy_id = 7;           // Associated encryption policy.
}

/**
 * Represents a digital signature log for data verification.
 */
message SignatureLog {
    string log_id = 1;                         // Unique log identifier.
    string signer_id = 2;                      // User or system ID of the signer.
    bytes signature = 3;                       // Digital signature.
    string signing_algorithm = 4;              // Signing algorithm (e.g., "RSA-SHA256").
    string signed_data_hash = 5;               // Hash of the signed data.
    string timestamp = 6;                      // Signing timestamp (ISO format).
    string key_provenance = 7;                 // Origin or provenance of the signing key.
    map<string, string> metadata = 8;          // Additional metadata for verification.
    string compliance_note = 9;                // Compliance-related notes.
}

/**
 * Represents a verification log for data integrity checks.
 */
message IntegrityVerificationLog {
    string verification_id = 1;                // Unique verification identifier.
    string segment_id = 2;                     // Segment being verified.
    HashAlgorithm hash_algorithm = 3;          // Hash algorithm used.
    VerificationStatus verified_status = 4;    // Verification status (e.g., VERIFIED, COMPROMISED).
    string verification_timestamp = 5;         // Verification timestamp (ISO format).
    string verification_depth = 6;             // Depth in verification hierarchy.
    string error_message = 7;                  // Error message, if verification failed.
    string parent_verification_id = 8;         // Parent verification entry (if nested).
    int32 retry_attempts = 9;                  // Retry count for verification.
    map<string, string> metadata = 10;         // Additional metadata for verification context.
}

/**
 * Represents a cryptographic operation request and result.
 */
message CryptographicOperation {
    string operation_id = 1;                   // Unique operation identifier.
    EncryptionType encryption_type = 2;        // Type of encryption used.
    CryptographicOperationType operation_type = 3; // Type of operation.
    bytes input_data = 4;                      // Input data for the operation.
    bytes result_data = 5;                     // Result data from the operation.
    string key_id = 6;                         // Key used for the operation.
    string operation_timestamp = 7;            // Timestamp of the operation (ISO format).
    string operation_result_status = 8;        // Result status (e.g., SUCCESS, FAILURE).
    string error_code = 9;                     // Error code for failures.
    double operation_duration_seconds = 10;    // Operation duration in seconds.
    map<string, string> metadata = 11;         // Metadata for operation context.
}
