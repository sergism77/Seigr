// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: incident.proto
// Protobuf C++ Version: 5.29.2

#ifndef incident_2eproto_2epb_2eh
#define incident_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_incident_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_incident_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_incident_2eproto;
namespace seigr {
namespace incident {
class IncidentEscalation;
struct IncidentEscalationDefaultTypeInternal;
extern IncidentEscalationDefaultTypeInternal _IncidentEscalation_default_instance_;
class IncidentEscalation_EscalationMetadataEntry_DoNotUse;
struct IncidentEscalation_EscalationMetadataEntry_DoNotUseDefaultTypeInternal;
extern IncidentEscalation_EscalationMetadataEntry_DoNotUseDefaultTypeInternal _IncidentEscalation_EscalationMetadataEntry_DoNotUse_default_instance_;
class IncidentReport;
struct IncidentReportDefaultTypeInternal;
extern IncidentReportDefaultTypeInternal _IncidentReport_default_instance_;
class IncidentReport_MetadataEntry_DoNotUse;
struct IncidentReport_MetadataEntry_DoNotUseDefaultTypeInternal;
extern IncidentReport_MetadataEntry_DoNotUseDefaultTypeInternal _IncidentReport_MetadataEntry_DoNotUse_default_instance_;
class IncidentResponsePlan;
struct IncidentResponsePlanDefaultTypeInternal;
extern IncidentResponsePlanDefaultTypeInternal _IncidentResponsePlan_default_instance_;
class IncidentResponsePlan_RolesEntry_DoNotUse;
struct IncidentResponsePlan_RolesEntry_DoNotUseDefaultTypeInternal;
extern IncidentResponsePlan_RolesEntry_DoNotUseDefaultTypeInternal _IncidentResponsePlan_RolesEntry_DoNotUse_default_instance_;
}  // namespace incident
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace incident {
enum IncidentSeverity : int {
  INCIDENT_SEVERITY_UNDEFINED = 0,
  INCIDENT_LOW = 1,
  INCIDENT_MEDIUM = 2,
  INCIDENT_HIGH = 3,
  INCIDENT_CRITICAL = 4,
  IncidentSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IncidentSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IncidentSeverity_IsValid(int value);
extern const uint32_t IncidentSeverity_internal_data_[];
constexpr IncidentSeverity IncidentSeverity_MIN = static_cast<IncidentSeverity>(0);
constexpr IncidentSeverity IncidentSeverity_MAX = static_cast<IncidentSeverity>(4);
constexpr int IncidentSeverity_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
IncidentSeverity_descriptor();
template <typename T>
const std::string& IncidentSeverity_Name(T value) {
  static_assert(std::is_same<T, IncidentSeverity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IncidentSeverity_Name().");
  return IncidentSeverity_Name(static_cast<IncidentSeverity>(value));
}
template <>
inline const std::string& IncidentSeverity_Name(IncidentSeverity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IncidentSeverity_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool IncidentSeverity_Parse(absl::string_view name, IncidentSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IncidentSeverity>(
      IncidentSeverity_descriptor(), name, value);
}
enum IncidentStatus : int {
  INCIDENT_STATUS_UNDEFINED = 0,
  INCIDENT_OPEN = 1,
  INCIDENT_IN_PROGRESS = 2,
  INCIDENT_RESOLVED = 3,
  INCIDENT_ESCALATED = 4,
  INCIDENT_CLOSED = 5,
  IncidentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IncidentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IncidentStatus_IsValid(int value);
extern const uint32_t IncidentStatus_internal_data_[];
constexpr IncidentStatus IncidentStatus_MIN = static_cast<IncidentStatus>(0);
constexpr IncidentStatus IncidentStatus_MAX = static_cast<IncidentStatus>(5);
constexpr int IncidentStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
IncidentStatus_descriptor();
template <typename T>
const std::string& IncidentStatus_Name(T value) {
  static_assert(std::is_same<T, IncidentStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IncidentStatus_Name().");
  return IncidentStatus_Name(static_cast<IncidentStatus>(value));
}
template <>
inline const std::string& IncidentStatus_Name(IncidentStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IncidentStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool IncidentStatus_Parse(absl::string_view name, IncidentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IncidentStatus>(
      IncidentStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IncidentResponsePlan_RolesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IncidentResponsePlan_RolesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentResponsePlan_RolesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IncidentResponsePlan_RolesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IncidentResponsePlan_RolesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IncidentResponsePlan_RolesEntry_DoNotUse*>(
        &_IncidentResponsePlan_RolesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_incident_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IncidentReport_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IncidentReport_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentReport_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IncidentReport_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IncidentReport_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IncidentReport_MetadataEntry_DoNotUse*>(
        &_IncidentReport_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_incident_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IncidentEscalation_EscalationMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IncidentEscalation_EscalationMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentEscalation_EscalationMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IncidentEscalation_EscalationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IncidentEscalation_EscalationMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IncidentEscalation_EscalationMetadataEntry_DoNotUse*>(
        &_IncidentEscalation_EscalationMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_incident_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IncidentResponsePlan final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.incident.IncidentResponsePlan) */ {
 public:
  inline IncidentResponsePlan() : IncidentResponsePlan(nullptr) {}
  ~IncidentResponsePlan() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncidentResponsePlan* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncidentResponsePlan));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentResponsePlan(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncidentResponsePlan(const IncidentResponsePlan& from) : IncidentResponsePlan(nullptr, from) {}
  inline IncidentResponsePlan(IncidentResponsePlan&& from) noexcept
      : IncidentResponsePlan(nullptr, std::move(from)) {}
  inline IncidentResponsePlan& operator=(const IncidentResponsePlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentResponsePlan& operator=(IncidentResponsePlan&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidentResponsePlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentResponsePlan* internal_default_instance() {
    return reinterpret_cast<const IncidentResponsePlan*>(
        &_IncidentResponsePlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IncidentResponsePlan& a, IncidentResponsePlan& b) { a.Swap(&b); }
  inline void Swap(IncidentResponsePlan* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentResponsePlan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentResponsePlan* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncidentResponsePlan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncidentResponsePlan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncidentResponsePlan& from) { IncidentResponsePlan::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncidentResponsePlan* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.incident.IncidentResponsePlan"; }

 protected:
  explicit IncidentResponsePlan(::google::protobuf::Arena* arena);
  IncidentResponsePlan(::google::protobuf::Arena* arena, const IncidentResponsePlan& from);
  IncidentResponsePlan(::google::protobuf::Arena* arena, IncidentResponsePlan&& from) noexcept
      : IncidentResponsePlan(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStepsFieldNumber = 3,
    kRolesFieldNumber = 4,
    kPlanIdFieldNumber = 1,
    kIncidentIdFieldNumber = 2,
  };
  // repeated string steps = 3;
  int steps_size() const;
  private:
  int _internal_steps_size() const;

  public:
  void clear_steps() ;
  const std::string& steps(int index) const;
  std::string* mutable_steps(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_steps(int index, Arg_&& value, Args_... args);
  std::string* add_steps();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_steps(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& steps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_steps();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_steps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_steps();

  public:
  // map<string, string> roles = 4;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const ::google::protobuf::Map<std::string, std::string>& roles() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_roles();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_roles() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_roles();

  public:
  // string plan_id = 1;
  void clear_plan_id() ;
  const std::string& plan_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_plan_id(Arg_&& arg, Args_... args);
  std::string* mutable_plan_id();
  PROTOBUF_NODISCARD std::string* release_plan_id();
  void set_allocated_plan_id(std::string* value);

  private:
  const std::string& _internal_plan_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plan_id(
      const std::string& value);
  std::string* _internal_mutable_plan_id();

  public:
  // string incident_id = 2;
  void clear_incident_id() ;
  const std::string& incident_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_incident_id(Arg_&& arg, Args_... args);
  std::string* mutable_incident_id();
  PROTOBUF_NODISCARD std::string* release_incident_id();
  void set_allocated_incident_id(std::string* value);

  private:
  const std::string& _internal_incident_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incident_id(
      const std::string& value);
  std::string* _internal_mutable_incident_id();

  public:
  // @@protoc_insertion_point(class_scope:seigr.incident.IncidentResponsePlan)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncidentResponsePlan& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> steps_;
    ::google::protobuf::internal::MapField<IncidentResponsePlan_RolesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        roles_;
    ::google::protobuf::internal::ArenaStringPtr plan_id_;
    ::google::protobuf::internal::ArenaStringPtr incident_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incident_2eproto;
};
// -------------------------------------------------------------------

class IncidentReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.incident.IncidentReport) */ {
 public:
  inline IncidentReport() : IncidentReport(nullptr) {}
  ~IncidentReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncidentReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncidentReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncidentReport(const IncidentReport& from) : IncidentReport(nullptr, from) {}
  inline IncidentReport(IncidentReport&& from) noexcept
      : IncidentReport(nullptr, std::move(from)) {}
  inline IncidentReport& operator=(const IncidentReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentReport& operator=(IncidentReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidentReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentReport* internal_default_instance() {
    return reinterpret_cast<const IncidentReport*>(
        &_IncidentReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IncidentReport& a, IncidentReport& b) { a.Swap(&b); }
  inline void Swap(IncidentReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncidentReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncidentReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncidentReport& from) { IncidentReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncidentReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.incident.IncidentReport"; }

 protected:
  explicit IncidentReport(::google::protobuf::Arena* arena);
  IncidentReport(::google::protobuf::Arena* arena, const IncidentReport& from);
  IncidentReport(::google::protobuf::Arena* arena, IncidentReport&& from) noexcept
      : IncidentReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 8,
    kStakeholdersFieldNumber = 9,
    kIncidentIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kReportedByFieldNumber = 6,
    kReportedAtFieldNumber = 7,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // map<string, string> metadata = 8;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // repeated string stakeholders = 9;
  int stakeholders_size() const;
  private:
  int _internal_stakeholders_size() const;

  public:
  void clear_stakeholders() ;
  const std::string& stakeholders(int index) const;
  std::string* mutable_stakeholders(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stakeholders(int index, Arg_&& value, Args_... args);
  std::string* add_stakeholders();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_stakeholders(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& stakeholders() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_stakeholders();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_stakeholders() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_stakeholders();

  public:
  // string incident_id = 1;
  void clear_incident_id() ;
  const std::string& incident_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_incident_id(Arg_&& arg, Args_... args);
  std::string* mutable_incident_id();
  PROTOBUF_NODISCARD std::string* release_incident_id();
  void set_allocated_incident_id(std::string* value);

  private:
  const std::string& _internal_incident_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incident_id(
      const std::string& value);
  std::string* _internal_mutable_incident_id();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string reported_by = 6;
  void clear_reported_by() ;
  const std::string& reported_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reported_by(Arg_&& arg, Args_... args);
  std::string* mutable_reported_by();
  PROTOBUF_NODISCARD std::string* release_reported_by();
  void set_allocated_reported_by(std::string* value);

  private:
  const std::string& _internal_reported_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reported_by(
      const std::string& value);
  std::string* _internal_mutable_reported_by();

  public:
  // string reported_at = 7;
  void clear_reported_at() ;
  const std::string& reported_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reported_at(Arg_&& arg, Args_... args);
  std::string* mutable_reported_at();
  PROTOBUF_NODISCARD std::string* release_reported_at();
  void set_allocated_reported_at(std::string* value);

  private:
  const std::string& _internal_reported_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reported_at(
      const std::string& value);
  std::string* _internal_mutable_reported_at();

  public:
  // .seigr.incident.IncidentSeverity severity = 4;
  void clear_severity() ;
  ::seigr::incident::IncidentSeverity severity() const;
  void set_severity(::seigr::incident::IncidentSeverity value);

  private:
  ::seigr::incident::IncidentSeverity _internal_severity() const;
  void _internal_set_severity(::seigr::incident::IncidentSeverity value);

  public:
  // .seigr.incident.IncidentStatus status = 5;
  void clear_status() ;
  ::seigr::incident::IncidentStatus status() const;
  void set_status(::seigr::incident::IncidentStatus value);

  private:
  ::seigr::incident::IncidentStatus _internal_status() const;
  void _internal_set_status(::seigr::incident::IncidentStatus value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.incident.IncidentReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      115, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncidentReport& from_msg);
    ::google::protobuf::internal::MapField<IncidentReport_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::RepeatedPtrField<std::string> stakeholders_;
    ::google::protobuf::internal::ArenaStringPtr incident_id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr reported_by_;
    ::google::protobuf::internal::ArenaStringPtr reported_at_;
    int severity_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incident_2eproto;
};
// -------------------------------------------------------------------

class IncidentEscalation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.incident.IncidentEscalation) */ {
 public:
  inline IncidentEscalation() : IncidentEscalation(nullptr) {}
  ~IncidentEscalation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncidentEscalation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncidentEscalation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentEscalation(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncidentEscalation(const IncidentEscalation& from) : IncidentEscalation(nullptr, from) {}
  inline IncidentEscalation(IncidentEscalation&& from) noexcept
      : IncidentEscalation(nullptr, std::move(from)) {}
  inline IncidentEscalation& operator=(const IncidentEscalation& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentEscalation& operator=(IncidentEscalation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidentEscalation& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentEscalation* internal_default_instance() {
    return reinterpret_cast<const IncidentEscalation*>(
        &_IncidentEscalation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(IncidentEscalation& a, IncidentEscalation& b) { a.Swap(&b); }
  inline void Swap(IncidentEscalation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentEscalation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentEscalation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncidentEscalation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncidentEscalation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncidentEscalation& from) { IncidentEscalation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncidentEscalation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.incident.IncidentEscalation"; }

 protected:
  explicit IncidentEscalation(::google::protobuf::Arena* arena);
  IncidentEscalation(::google::protobuf::Arena* arena, const IncidentEscalation& from);
  IncidentEscalation(::google::protobuf::Arena* arena, IncidentEscalation&& from) noexcept
      : IncidentEscalation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEscalationMetadataFieldNumber = 6,
    kEscalationIdFieldNumber = 1,
    kIncidentIdFieldNumber = 2,
    kEscalationTriggerFieldNumber = 3,
    kEscalationTargetFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // map<string, string> escalation_metadata = 6;
  int escalation_metadata_size() const;
  private:
  int _internal_escalation_metadata_size() const;

  public:
  void clear_escalation_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& escalation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_escalation_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_escalation_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_escalation_metadata();

  public:
  // string escalation_id = 1;
  void clear_escalation_id() ;
  const std::string& escalation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_id(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_id();
  PROTOBUF_NODISCARD std::string* release_escalation_id();
  void set_allocated_escalation_id(std::string* value);

  private:
  const std::string& _internal_escalation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_id(
      const std::string& value);
  std::string* _internal_mutable_escalation_id();

  public:
  // string incident_id = 2;
  void clear_incident_id() ;
  const std::string& incident_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_incident_id(Arg_&& arg, Args_... args);
  std::string* mutable_incident_id();
  PROTOBUF_NODISCARD std::string* release_incident_id();
  void set_allocated_incident_id(std::string* value);

  private:
  const std::string& _internal_incident_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incident_id(
      const std::string& value);
  std::string* _internal_mutable_incident_id();

  public:
  // string escalation_trigger = 3;
  void clear_escalation_trigger() ;
  const std::string& escalation_trigger() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_trigger(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_trigger();
  PROTOBUF_NODISCARD std::string* release_escalation_trigger();
  void set_allocated_escalation_trigger(std::string* value);

  private:
  const std::string& _internal_escalation_trigger() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_trigger(
      const std::string& value);
  std::string* _internal_mutable_escalation_trigger();

  public:
  // string escalation_target = 4;
  void clear_escalation_target() ;
  const std::string& escalation_target() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escalation_target(Arg_&& arg, Args_... args);
  std::string* mutable_escalation_target();
  PROTOBUF_NODISCARD std::string* release_escalation_target();
  void set_allocated_escalation_target(std::string* value);

  private:
  const std::string& _internal_escalation_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escalation_target(
      const std::string& value);
  std::string* _internal_mutable_escalation_target();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.incident.IncidentEscalation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      129, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncidentEscalation& from_msg);
    ::google::protobuf::internal::MapField<IncidentEscalation_EscalationMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        escalation_metadata_;
    ::google::protobuf::internal::ArenaStringPtr escalation_id_;
    ::google::protobuf::internal::ArenaStringPtr incident_id_;
    ::google::protobuf::internal::ArenaStringPtr escalation_trigger_;
    ::google::protobuf::internal::ArenaStringPtr escalation_target_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incident_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IncidentReport

// string incident_id = 1;
inline void IncidentReport::clear_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.ClearToEmpty();
}
inline const std::string& IncidentReport::incident_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.incident_id)
  return _internal_incident_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentReport::set_incident_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.incident_id)
}
inline std::string* IncidentReport::mutable_incident_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_incident_id();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.incident_id)
  return _s;
}
inline const std::string& IncidentReport::_internal_incident_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incident_id_.Get();
}
inline void IncidentReport::_internal_set_incident_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(value, GetArena());
}
inline std::string* IncidentReport::_internal_mutable_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.incident_id_.Mutable( GetArena());
}
inline std::string* IncidentReport::release_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentReport.incident_id)
  return _impl_.incident_id_.Release();
}
inline void IncidentReport::set_allocated_incident_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.incident_id_.IsDefault()) {
    _impl_.incident_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentReport.incident_id)
}

// string title = 2;
inline void IncidentReport::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& IncidentReport::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentReport::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.title)
}
inline std::string* IncidentReport::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.title)
  return _s;
}
inline const std::string& IncidentReport::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void IncidentReport::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* IncidentReport::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* IncidentReport::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentReport.title)
  return _impl_.title_.Release();
}
inline void IncidentReport::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentReport.title)
}

// string description = 3;
inline void IncidentReport::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& IncidentReport::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentReport::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.description)
}
inline std::string* IncidentReport::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.description)
  return _s;
}
inline const std::string& IncidentReport::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void IncidentReport::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* IncidentReport::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* IncidentReport::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentReport.description)
  return _impl_.description_.Release();
}
inline void IncidentReport::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentReport.description)
}

// .seigr.incident.IncidentSeverity severity = 4;
inline void IncidentReport::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = 0;
}
inline ::seigr::incident::IncidentSeverity IncidentReport::severity() const {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.severity)
  return _internal_severity();
}
inline void IncidentReport::set_severity(::seigr::incident::IncidentSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.severity)
}
inline ::seigr::incident::IncidentSeverity IncidentReport::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::incident::IncidentSeverity>(_impl_.severity_);
}
inline void IncidentReport::_internal_set_severity(::seigr::incident::IncidentSeverity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = value;
}

// .seigr.incident.IncidentStatus status = 5;
inline void IncidentReport::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::incident::IncidentStatus IncidentReport::status() const {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.status)
  return _internal_status();
}
inline void IncidentReport::set_status(::seigr::incident::IncidentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.status)
}
inline ::seigr::incident::IncidentStatus IncidentReport::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::incident::IncidentStatus>(_impl_.status_);
}
inline void IncidentReport::_internal_set_status(::seigr::incident::IncidentStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string reported_by = 6;
inline void IncidentReport::clear_reported_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_by_.ClearToEmpty();
}
inline const std::string& IncidentReport::reported_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.reported_by)
  return _internal_reported_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentReport::set_reported_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.reported_by)
}
inline std::string* IncidentReport::mutable_reported_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reported_by();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.reported_by)
  return _s;
}
inline const std::string& IncidentReport::_internal_reported_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reported_by_.Get();
}
inline void IncidentReport::_internal_set_reported_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_by_.Set(value, GetArena());
}
inline std::string* IncidentReport::_internal_mutable_reported_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reported_by_.Mutable( GetArena());
}
inline std::string* IncidentReport::release_reported_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentReport.reported_by)
  return _impl_.reported_by_.Release();
}
inline void IncidentReport::set_allocated_reported_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reported_by_.IsDefault()) {
    _impl_.reported_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentReport.reported_by)
}

// string reported_at = 7;
inline void IncidentReport::clear_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_at_.ClearToEmpty();
}
inline const std::string& IncidentReport::reported_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.reported_at)
  return _internal_reported_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentReport::set_reported_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.reported_at)
}
inline std::string* IncidentReport::mutable_reported_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reported_at();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.reported_at)
  return _s;
}
inline const std::string& IncidentReport::_internal_reported_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reported_at_.Get();
}
inline void IncidentReport::_internal_set_reported_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_at_.Set(value, GetArena());
}
inline std::string* IncidentReport::_internal_mutable_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reported_at_.Mutable( GetArena());
}
inline std::string* IncidentReport::release_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentReport.reported_at)
  return _impl_.reported_at_.Release();
}
inline void IncidentReport::set_allocated_reported_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reported_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reported_at_.IsDefault()) {
    _impl_.reported_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentReport.reported_at)
}

// map<string, string> metadata = 8;
inline int IncidentReport::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int IncidentReport::metadata_size() const {
  return _internal_metadata_size();
}
inline void IncidentReport::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentReport::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentReport::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.incident.IncidentReport.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentReport::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentReport::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.incident.IncidentReport.metadata)
  return _internal_mutable_metadata();
}

// repeated string stakeholders = 9;
inline int IncidentReport::_internal_stakeholders_size() const {
  return _internal_stakeholders().size();
}
inline int IncidentReport::stakeholders_size() const {
  return _internal_stakeholders_size();
}
inline void IncidentReport::clear_stakeholders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stakeholders_.Clear();
}
inline std::string* IncidentReport::add_stakeholders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_stakeholders()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.incident.IncidentReport.stakeholders)
  return _s;
}
inline const std::string& IncidentReport::stakeholders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentReport.stakeholders)
  return _internal_stakeholders().Get(index);
}
inline std::string* IncidentReport::mutable_stakeholders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentReport.stakeholders)
  return _internal_mutable_stakeholders()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void IncidentReport::set_stakeholders(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_stakeholders()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentReport.stakeholders)
}
template <typename Arg_, typename... Args_>
inline void IncidentReport::add_stakeholders(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_stakeholders(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.incident.IncidentReport.stakeholders)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentReport::stakeholders() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.incident.IncidentReport.stakeholders)
  return _internal_stakeholders();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentReport::mutable_stakeholders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.incident.IncidentReport.stakeholders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_stakeholders();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentReport::_internal_stakeholders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stakeholders_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentReport::_internal_mutable_stakeholders() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.stakeholders_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IncidentResponsePlan

// string plan_id = 1;
inline void IncidentResponsePlan::clear_plan_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_id_.ClearToEmpty();
}
inline const std::string& IncidentResponsePlan::plan_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentResponsePlan.plan_id)
  return _internal_plan_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentResponsePlan::set_plan_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentResponsePlan.plan_id)
}
inline std::string* IncidentResponsePlan::mutable_plan_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_plan_id();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentResponsePlan.plan_id)
  return _s;
}
inline const std::string& IncidentResponsePlan::_internal_plan_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.plan_id_.Get();
}
inline void IncidentResponsePlan::_internal_set_plan_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_id_.Set(value, GetArena());
}
inline std::string* IncidentResponsePlan::_internal_mutable_plan_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.plan_id_.Mutable( GetArena());
}
inline std::string* IncidentResponsePlan::release_plan_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentResponsePlan.plan_id)
  return _impl_.plan_id_.Release();
}
inline void IncidentResponsePlan::set_allocated_plan_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plan_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.plan_id_.IsDefault()) {
    _impl_.plan_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentResponsePlan.plan_id)
}

// string incident_id = 2;
inline void IncidentResponsePlan::clear_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.ClearToEmpty();
}
inline const std::string& IncidentResponsePlan::incident_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentResponsePlan.incident_id)
  return _internal_incident_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentResponsePlan::set_incident_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentResponsePlan.incident_id)
}
inline std::string* IncidentResponsePlan::mutable_incident_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_incident_id();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentResponsePlan.incident_id)
  return _s;
}
inline const std::string& IncidentResponsePlan::_internal_incident_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incident_id_.Get();
}
inline void IncidentResponsePlan::_internal_set_incident_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(value, GetArena());
}
inline std::string* IncidentResponsePlan::_internal_mutable_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.incident_id_.Mutable( GetArena());
}
inline std::string* IncidentResponsePlan::release_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentResponsePlan.incident_id)
  return _impl_.incident_id_.Release();
}
inline void IncidentResponsePlan::set_allocated_incident_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.incident_id_.IsDefault()) {
    _impl_.incident_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentResponsePlan.incident_id)
}

// repeated string steps = 3;
inline int IncidentResponsePlan::_internal_steps_size() const {
  return _internal_steps().size();
}
inline int IncidentResponsePlan::steps_size() const {
  return _internal_steps_size();
}
inline void IncidentResponsePlan::clear_steps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steps_.Clear();
}
inline std::string* IncidentResponsePlan::add_steps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_steps()->Add();
  // @@protoc_insertion_point(field_add_mutable:seigr.incident.IncidentResponsePlan.steps)
  return _s;
}
inline const std::string& IncidentResponsePlan::steps(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentResponsePlan.steps)
  return _internal_steps().Get(index);
}
inline std::string* IncidentResponsePlan::mutable_steps(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentResponsePlan.steps)
  return _internal_mutable_steps()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void IncidentResponsePlan::set_steps(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_steps()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentResponsePlan.steps)
}
template <typename Arg_, typename... Args_>
inline void IncidentResponsePlan::add_steps(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_steps(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:seigr.incident.IncidentResponsePlan.steps)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentResponsePlan::steps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.incident.IncidentResponsePlan.steps)
  return _internal_steps();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentResponsePlan::mutable_steps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.incident.IncidentResponsePlan.steps)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_steps();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentResponsePlan::_internal_steps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steps_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentResponsePlan::_internal_mutable_steps() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.steps_;
}

// map<string, string> roles = 4;
inline int IncidentResponsePlan::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int IncidentResponsePlan::roles_size() const {
  return _internal_roles_size();
}
inline void IncidentResponsePlan::clear_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roles_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentResponsePlan::_internal_roles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roles_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentResponsePlan::roles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.incident.IncidentResponsePlan.roles)
  return _internal_roles();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentResponsePlan::_internal_mutable_roles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.roles_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentResponsePlan::mutable_roles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.incident.IncidentResponsePlan.roles)
  return _internal_mutable_roles();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IncidentEscalation

// string escalation_id = 1;
inline void IncidentEscalation::clear_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.ClearToEmpty();
}
inline const std::string& IncidentEscalation::escalation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentEscalation.escalation_id)
  return _internal_escalation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentEscalation::set_escalation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentEscalation.escalation_id)
}
inline std::string* IncidentEscalation::mutable_escalation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_id();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentEscalation.escalation_id)
  return _s;
}
inline const std::string& IncidentEscalation::_internal_escalation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_id_.Get();
}
inline void IncidentEscalation::_internal_set_escalation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.Set(value, GetArena());
}
inline std::string* IncidentEscalation::_internal_mutable_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_id_.Mutable( GetArena());
}
inline std::string* IncidentEscalation::release_escalation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentEscalation.escalation_id)
  return _impl_.escalation_id_.Release();
}
inline void IncidentEscalation::set_allocated_escalation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_id_.IsDefault()) {
    _impl_.escalation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentEscalation.escalation_id)
}

// string incident_id = 2;
inline void IncidentEscalation::clear_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.ClearToEmpty();
}
inline const std::string& IncidentEscalation::incident_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentEscalation.incident_id)
  return _internal_incident_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentEscalation::set_incident_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentEscalation.incident_id)
}
inline std::string* IncidentEscalation::mutable_incident_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_incident_id();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentEscalation.incident_id)
  return _s;
}
inline const std::string& IncidentEscalation::_internal_incident_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.incident_id_.Get();
}
inline void IncidentEscalation::_internal_set_incident_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.Set(value, GetArena());
}
inline std::string* IncidentEscalation::_internal_mutable_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.incident_id_.Mutable( GetArena());
}
inline std::string* IncidentEscalation::release_incident_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentEscalation.incident_id)
  return _impl_.incident_id_.Release();
}
inline void IncidentEscalation::set_allocated_incident_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.incident_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.incident_id_.IsDefault()) {
    _impl_.incident_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentEscalation.incident_id)
}

// string escalation_trigger = 3;
inline void IncidentEscalation::clear_escalation_trigger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_trigger_.ClearToEmpty();
}
inline const std::string& IncidentEscalation::escalation_trigger() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentEscalation.escalation_trigger)
  return _internal_escalation_trigger();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentEscalation::set_escalation_trigger(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_trigger_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentEscalation.escalation_trigger)
}
inline std::string* IncidentEscalation::mutable_escalation_trigger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_trigger();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentEscalation.escalation_trigger)
  return _s;
}
inline const std::string& IncidentEscalation::_internal_escalation_trigger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_trigger_.Get();
}
inline void IncidentEscalation::_internal_set_escalation_trigger(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_trigger_.Set(value, GetArena());
}
inline std::string* IncidentEscalation::_internal_mutable_escalation_trigger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_trigger_.Mutable( GetArena());
}
inline std::string* IncidentEscalation::release_escalation_trigger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentEscalation.escalation_trigger)
  return _impl_.escalation_trigger_.Release();
}
inline void IncidentEscalation::set_allocated_escalation_trigger(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_trigger_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_trigger_.IsDefault()) {
    _impl_.escalation_trigger_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentEscalation.escalation_trigger)
}

// string escalation_target = 4;
inline void IncidentEscalation::clear_escalation_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_target_.ClearToEmpty();
}
inline const std::string& IncidentEscalation::escalation_target() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentEscalation.escalation_target)
  return _internal_escalation_target();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentEscalation::set_escalation_target(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_target_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentEscalation.escalation_target)
}
inline std::string* IncidentEscalation::mutable_escalation_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_escalation_target();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentEscalation.escalation_target)
  return _s;
}
inline const std::string& IncidentEscalation::_internal_escalation_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_target_.Get();
}
inline void IncidentEscalation::_internal_set_escalation_target(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_target_.Set(value, GetArena());
}
inline std::string* IncidentEscalation::_internal_mutable_escalation_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_target_.Mutable( GetArena());
}
inline std::string* IncidentEscalation::release_escalation_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentEscalation.escalation_target)
  return _impl_.escalation_target_.Release();
}
inline void IncidentEscalation::set_allocated_escalation_target(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_target_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.escalation_target_.IsDefault()) {
    _impl_.escalation_target_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentEscalation.escalation_target)
}

// string timestamp = 5;
inline void IncidentEscalation::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& IncidentEscalation::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.incident.IncidentEscalation.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentEscalation::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.incident.IncidentEscalation.timestamp)
}
inline std::string* IncidentEscalation::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.incident.IncidentEscalation.timestamp)
  return _s;
}
inline const std::string& IncidentEscalation::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void IncidentEscalation::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* IncidentEscalation::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* IncidentEscalation::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.incident.IncidentEscalation.timestamp)
  return _impl_.timestamp_.Release();
}
inline void IncidentEscalation::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.incident.IncidentEscalation.timestamp)
}

// map<string, string> escalation_metadata = 6;
inline int IncidentEscalation::_internal_escalation_metadata_size() const {
  return _internal_escalation_metadata().size();
}
inline int IncidentEscalation::escalation_metadata_size() const {
  return _internal_escalation_metadata_size();
}
inline void IncidentEscalation::clear_escalation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.escalation_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentEscalation::_internal_escalation_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.escalation_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IncidentEscalation::escalation_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.incident.IncidentEscalation.escalation_metadata)
  return _internal_escalation_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentEscalation::_internal_mutable_escalation_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.escalation_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IncidentEscalation::mutable_escalation_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.incident.IncidentEscalation.escalation_metadata)
  return _internal_mutable_escalation_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace incident
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::incident::IncidentSeverity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::incident::IncidentSeverity>() {
  return ::seigr::incident::IncidentSeverity_descriptor();
}
template <>
struct is_proto_enum<::seigr::incident::IncidentStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::incident::IncidentStatus>() {
  return ::seigr::incident::IncidentStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // incident_2eproto_2epb_2eh
