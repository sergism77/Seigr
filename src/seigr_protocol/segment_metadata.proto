syntax = "proto3";

package seigr.segment_metadata;

import "google/protobuf/timestamp.proto";
import "common.proto"; // For ThreatLevel and other shared definitions (LineageEntry...)


// ===========================
// ENUMERATIONS
// ===========================

/**
 * Defines lifecycle stages of a segment for operational control and archival.
 */
enum SegmentOperationStatus {
    SEGMENT_STATUS_UNDEFINED = 0;     // Status is undefined or unknown
    SEGMENT_ACTIVE = 1;               // Segment is active and operational
    SEGMENT_INACTIVE = 2;             // Segment is inactive or paused
    SEGMENT_ARCHIVED = 3;             // Segment is archived for long-term storage
    SEGMENT_DECOMMISSIONED = 4;       // Segment is retired and no longer in use
}

/**
 * Defines levels of redundancy based on the criticality of the segment.
 */
enum ReplicationLevel {
    REPLICATION_LEVEL_UNDEFINED = 0;  // Undefined replication level
    REPLICATION_LEVEL_LOW = 1;        // Minimal redundancy
    REPLICATION_LEVEL_MEDIUM = 2;     // Standard redundancy
    REPLICATION_LEVEL_HIGH = 3;       // High redundancy
    REPLICATION_LEVEL_MAXIMUM = 4;    // Critical redundancy
    REPLICATION_LEVEL_DYNAMIC = 5;    // Adaptive redundancy based on conditions
}

/**
 * Defines encryption status for segment security.
 */
enum EncryptionStatus {
    ENCRYPTION_UNDEFINED = 0;         // Encryption status is undefined
    ENCRYPTED = 1;                    // Segment is encrypted
    UNENCRYPTED = 2;                  // Segment is not encrypted
}

// ===========================
// SEGMENT STATUS
// ===========================

/**
 * Represents the current status, threat analysis, and monitoring insights for a segment.
 */
message SegmentStatus {
    string segment_hash = 1;                   // Unique hash of the monitored segment
    seigr.common.ThreatLevel threat_level = 2;              // Current threat level
    bool integrity_check_passed = 3;           // Indicates if integrity check succeeded
    int32 threat_count = 4;                    // Count of recorded threats
    int32 replication_count = 5;               // Active replica count
    string last_checked = 6;                   // Timestamp of the last integrity verification
    map<string, string> metadata = 7;          // Additional monitoring details
    string last_updated_by = 8;                // ID of last entity updating this segment
    float resource_efficiency_score = 9;       // Efficiency score for eco-monitoring
    string performance_status = 10;            // Performance state (e.g., "OPTIMAL", "DEGRADED")
    EncryptionStatus encryption_status = 11;   // Encryption status of the segment
    string access_pattern = 12;                // Access pattern (e.g., "FREQUENT", "RARE")
}

// ===========================
// SEGMENT METADATA
// ===========================

message SegmentMetadata {
    // Identification and Structure
    int32 segment_index = 1;                   // Index in the file sequence
    int32 segment_size = 2;                    // Size in bytes
    string segment_hash = 3;                   // Unique hash for integrity validation

    // Operational State
    SegmentOperationStatus status = 4;         // Current operational status
    ReplicationLevel replication_level = 5;    // Replication level
    EncryptionStatus encryption_status = 6;    // Encryption state
    string creation_timestamp = 7;             // Creation timestamp

    // Connectivity
    string primary_link = 8;                   // Main link for continuity
    repeated string secondary_links = 9;       // Backup redundancy links

    // Metadata and Monitoring
    map<string, string> metadata = 10;         // Additional metadata
    int32 access_frequency = 11;               // Frequency of access
    string last_accessed = 12;                 // Last accessed timestamp
    string integrity_level = 13;               // Integrity validation requirement
    string performance_profile = 14;           // Profile for expected performance metrics

    // Adaptive Management
    bool adaptive_replication_enabled = 15;    // Enables adaptive replication
    string recovery_strategy = 16;             // Strategy for data recovery
    string archival_policy = 17;               // Archival rules and policies
    bool sustainability_flag = 18;             // Indicates alignment with sustainability targets

    // Lineage and Temporal Layers
    repeated seigr.common.LineageEntry lineage_entries = 19; // Lineage entries for segment modifications.
    string temporal_layer = 20;               // Temporal layer for time-sensitive indexing.

    // Compliance and Versioning
    map<string, string> compliance_attributes = 21; // Compliance and regulatory context.
    map<string, string> version_metadata = 22;      // Versioning information for the segment.
}

// ===========================
// SEGMENT RECOVERY DETAILS
// ===========================

/**
 * Tracks segment recovery processes, strategies, and results.
 */
message SegmentRecovery {
    string segment_hash = 1;                   // Hash of the segment under recovery
    string recovery_initiated_by = 2;          // User or system triggering recovery
    string recovery_started_at = 3;            // Timestamp when recovery began
    string recovery_completed_at = 4;          // Timestamp when recovery completed
    string recovery_strategy = 5;             // Recovery strategy applied
    bool recovery_successful = 6;              // Indicates if recovery succeeded
    string failure_reason = 7;                 // Reason for failure, if applicable
    map<string, string> metadata = 8;          // Additional metadata for recovery context
    repeated string dependent_segments = 9;    // List of segments affected by this segment's recovery.
    bool rollback_required = 10;               // Indicates if rollback is necessary.
    string rollback_strategy = 11;             // Strategy for rollback operations.
}

// ===========================
// SEGMENT PERFORMANCE METRICS
// ===========================

/**
 * Tracks performance-related metrics for segment optimization.
 */
message SegmentPerformance {
    string segment_hash = 1;                   // Hash of the monitored segment
    float read_latency_ms = 2;                 // Read latency in milliseconds
    float write_latency_ms = 3;                // Write latency in milliseconds
    float access_frequency_score = 4;          // Score for access frequency patterns
    float replication_efficiency_score = 5;    // Score for replication efficiency
    float resource_utilization_score = 6;      // Overall resource efficiency
    float sustainability_index = 7;            // Eco-friendly performance index
    string last_updated = 8;                   // Last metrics update timestamp
    map<string, string> metadata = 9;          // Additional metadata
    float anomaly_score = 10;                  // Anomaly detection score for segment performance.
    string predictive_failure_estimate = 11;   // Estimated failure timestamp based on current trends.
    bool requires_immediate_attention = 12;    // Flag for urgent action.
}

// ===========================
// SEGMENT LIFECYCLE SERVICES
// ===========================

/**
 * RPC services for managing, validating, and optimizing segment metadata and status.
 */
service SegmentService {
    rpc GetSegmentStatus (SegmentStatusRequest) returns (SegmentStatusResponse); // Fetch current segment status
    rpc UpdateSegmentMetadata (UpdateSegmentMetadataRequest) returns (UpdateSegmentMetadataResponse); // Update segment metadata
    rpc ValidateSegmentIntegrity (ValidateSegmentRequest) returns (ValidateSegmentResponse); // Validate segment integrity
    rpc InitiateSegmentRecovery (SegmentRecoveryRequest) returns (SegmentRecoveryResponse); // Start recovery
    rpc DetectAnomalies (AnomalyDetectionRequest) returns (AnomalyDetectionResponse);       // Anomaly detection
    rpc SendRealTimeAlert (RealTimeAlertRequest) returns (RealTimeAlertResponse);           // Send segment-related alerts
    rpc UpdateLineage (UpdateLineageRequest) returns (UpdateLineageResponse);               // Update lineage tracking
}

// ===========================
// SERVICE REQUESTS & RESPONSES
// ===========================

/**
 * Request for fetching segment status.
 */
message SegmentStatusRequest {
    string segment_hash = 1;                   // Target segment hash
}

/**
 * Response with segment status details.
 */
message SegmentStatusResponse {
    bool success = 1;                           // Operation success status
    SegmentStatus status = 2;                   // Current status of the segment
    string message = 3;                         // Additional details
}

/**
 * Request to update segment metadata.
 */
message UpdateSegmentMetadataRequest {
    string segment_hash = 1;                   // Segment hash to update
    map<string, string> updated_metadata = 2;  // Updated metadata
}

/**
 * Response for metadata update.
 */
message UpdateSegmentMetadataResponse {
    bool success = 1;                          // Operation success flag
    string message = 2;                        // Update details
}

/**
 * Request to validate segment integrity.
 */
message ValidateSegmentRequest {
    string segment_hash = 1;                   // Target segment hash
}

/**
 * Response to integrity validation.
 */
message ValidateSegmentResponse {
    bool success = 1;                          // Validation success status
    string message = 2;                        // Validation results
}

/**
 * Request for segment recovery.
 */
message SegmentRecoveryRequest {
    string segment_hash = 1;                   // Segment hash for recovery
}

/**
 * Response to segment recovery initiation.
 */
message SegmentRecoveryResponse {
    bool success = 1;                          // Recovery success flag
    string message = 2;                        // Details on recovery
}

/**
 * Request for anomaly detection.
 */
message AnomalyDetectionRequest {
    string segment_hash = 1;                   // Target segment hash
}

/**
 * Response for anomaly detection.
 */
message AnomalyDetectionResponse {
    bool success = 1;                          // Success flag for anomaly detection
    map<string, string> anomalies_detected = 2; // Detected anomalies and details
}

/**
 * Represents a real-time alert related to a segment's state, integrity, or performance.
 * This message is designed for seamless integration into the Seigr ecosystem,
 * supporting extensibility, metadata enrichment, and actionable responses.
 */
message RealTimeSegmentAlert {
    // Identification and Categorization
    string alert_id = 1;                      // Unique identifier for the alert.
    string segment_hash = 2;                  // Associated segment's hash.
    string alert_name = 3;                    // Human-readable name for the alert.
    string alert_type = 4;                    // Type/category of the alert (e.g., "INTEGRITY", "PERFORMANCE").

    // Operational Context
    seigr.common.ThreatLevel threat_level = 5; // Severity level of the alert.
    google.protobuf.Timestamp triggered_at = 6; // Timestamp when the alert was triggered.
    string triggered_by = 7;                   // Entity (user/system) that triggered the alert.
    map<string, string> conditions = 8;        // Conditions leading to the alert (e.g., "threshold_breach").

    // Response and Mitigation
    bool requires_immediate_attention = 9;    // Whether the alert requires immediate action.
    repeated string suggested_responses = 10; // List of suggested actions (e.g., "ESCALATE", "ROLLBACK").
    string escalation_policy = 11;            // Policy governing escalation (e.g., "HIGH-PRIORITY").
    google.protobuf.Timestamp resolution_deadline = 12; // Deadline for resolving the alert, if applicable.

    // Metadata and Monitoring
    map<string, string> metadata = 13;        // Additional metadata for extended context.
    map<string, float> performance_metrics = 14; // Performance metrics at the time of alert (e.g., latency).

    // Audit and Tracking
    repeated string linked_alerts = 15;       // References to related alerts for contextual analysis.
    bool resolved = 16;                       // Whether the alert has been resolved.
    google.protobuf.Timestamp resolved_at = 17; // Timestamp of resolution, if resolved.
    string resolution_details = 18;           // Description of the resolution or mitigation actions taken.
}


/**
 * Request for sending real-time alerts.
 */
message RealTimeAlertRequest {
    RealTimeSegmentAlert alert = 1;            // Alert details
}

/**
 * Response to real-time alert requests.
 */
message RealTimeAlertResponse {
    bool success = 1;                          // Success flag for sending alerts
    string message = 2;                        // Response details
}

/**
 * Request to update lineage.
 */
message UpdateLineageRequest {
    string segment_hash = 1;                   // Target segment hash
    repeated seigr.common.LineageEntry lineage_updates = 2; // Lineage entries to update
}

/**
 * Response for lineage updates.
 */
message UpdateLineageResponse {
    bool success = 1;                          // Lineage update success flag
    string message = 2;                        // Update feedback
}
