syntax = "proto3";

package seigr;

// =======================
// ðŸŽ¯ Enums
// =======================

// Enum defining error severity levels
enum ErrorSeverity {
    ERROR_SEVERITY_UNDEFINED = 0;
    ERROR_SEVERITY_LOW = 1;
    ERROR_SEVERITY_MEDIUM = 2;
    ERROR_SEVERITY_HIGH = 3;
    ERROR_SEVERITY_CRITICAL = 4;
    ERROR_SEVERITY_DISASTER = 5;
}

// Enum defining automated error handling strategies
enum ErrorResolutionStrategy {
    ERROR_STRATEGY_UNDEFINED = 0;
    ERROR_STRATEGY_RETRY = 1;
    ERROR_STRATEGY_LOG_AND_CONTINUE = 2;
    ERROR_STRATEGY_TERMINATE = 3;
    ERROR_STRATEGY_ALERT_AND_PAUSE = 4;
    ERROR_STRATEGY_FALLBACK_OPERATION = 5;
    ERROR_STRATEGY_ESCALATE_IMMEDIATELY = 6;
    ERROR_STRATEGY_ROLLING_BACK_DEPENDENCIES = 7;
    ERROR_STRATEGY_ADAPTIVE_RETRY = 8;
}

// Enum defining the source of the error
enum ErrorSource {
    ERROR_SOURCE_UNDEFINED = 0;
    ERROR_SOURCE_INTERNAL = 1;     // Error caused by internal system issues
    ERROR_SOURCE_EXTERNAL = 2;     // Error caused by external dependencies
    ERROR_SOURCE_USER = 3;         // User-initiated error
}

// Enum for error lifecycle states
enum ErrorLifecycleState {
    ERROR_STATE_UNDEFINED = 0;
    ERROR_STATE_REPORTED = 1;      // Error has been reported
    ERROR_STATE_ACKNOWLEDGED = 2;  // Error has been acknowledged
    ERROR_STATE_RESOLVED = 3;      // Error has been resolved
    ERROR_STATE_ESCALATED = 4;     // Error has been escalated
}

// =======================
// ðŸ“¦ Messages
// =======================

// Key-value metadata pair for errors
message ErrorMetadata {
    string key = 1;
    string value = 2;
}

// Contextual information about an error
message ErrorContext {
    string environment = 1;        // Environment (e.g., production, staging)
    string request_id = 2;         // Trace or request identifier
    string session_id = 3;         // User or system session identifier
    string user_id = 4;            // User identifier if applicable
    map<string, string> additional_context = 5; // Additional key-value pairs for context
}

// Lifecycle tracking for errors
message ErrorLifecycle {
    string reported_at = 1;        // When the error was first reported
    string acknowledged_at = 2;    // When the error was acknowledged
    string resolved_at = 3;        // When the error was resolved
    ErrorLifecycleState state = 4; // Current state of the error lifecycle
}

// Impact analysis for errors
message ErrorImpactAnalysis {
    string affected_service = 1;   // Which service was affected
    string affected_users = 2;     // Approximate number of affected users
    string performance_impact = 3; // Impact on system performance (e.g., latency)
    string outage_duration = 4;    // Duration of the outage caused by the error
    string recovery_time = 5;      // Time taken to recover
    map<string, string> additional_impact_details = 6; // Additional key-value impact details
}

// Detailed resolution audit log
message ResolutionAuditLog {
    string action_taken = 1;       // Action performed for resolution
    string performed_by = 2;       // User or system responsible for the action
    string action_timestamp = 3;   // When the action was performed
    map<string, string> metadata = 4; // Additional action details
}

// Detailed log for each error
message ErrorLogEntry {
    string error_id = 1;         
    ErrorSeverity severity = 2;
    ErrorSource source = 3;       // Source of the error
    string component = 4;         
    string message = 5;          
    string details = 6;          
    string timestamp = 7;        
    bool resolved = 8;           
    string resolution_timestamp = 9; 
    ErrorResolutionStrategy resolution_strategy = 10; 
    repeated string dependency_ids = 11;
    string user_impact_level = 12; 
    string error_code = 13;       
    string source_trace = 14;    
    string impact_scope = 15;    
    ErrorContext context = 16;   
    ErrorLifecycle lifecycle = 17;
    ErrorImpactAnalysis impact_analysis = 18;
    repeated ResolutionAuditLog resolution_audit_logs = 19;
    map<string, string> metadata = 20;
}

// Error statistics for monitoring and diagnostics
message ErrorStats {
    int32 total_errors = 1;
    int32 unresolved_errors = 2;
    map<string, int32> severity_counts = 3;
    string most_recent_error = 4;
    map<string, int32> component_error_counts = 5;
    map<string, int32> resolution_counts = 6;
    string error_trend = 7;
    double avg_resolution_time_seconds = 8;
    int32 disaster_error_count = 9;
}

// Trend analysis for error recurrence
message ErrorTrendAnalysis {
    string trend_analysis_id = 1;
    string component = 2;
    int32 recurring_error_count = 3;
    string trend_description = 4;
    string time_period = 5;
    map<string, string> additional_metadata = 6;
    string recurrence_pattern = 7;
    bool auto_adjusted_severity = 8;
}

// Recovery configuration for automated error handling
message RecoveryConfig {
    string component = 1;
    ErrorSeverity max_severity_to_retry = 2;
    int32 max_retry_attempts = 3;
    int32 retry_interval_seconds = 4;
    bool notify_on_failure = 5;
    ErrorResolutionStrategy default_strategy = 6;
    map<string, ErrorResolutionStrategy> severity_strategies = 7;
    string escalation_contact = 8;
    string recovery_playbook = 9;
    bool enable_adaptive_strategy = 10;
    bool enable_dynamic_recovery = 11; // New dynamic recovery flag
}

// Notifications triggered on critical errors
message ErrorNotification {
    string error_id = 1;
    ErrorSeverity severity = 2;
    string affected_component = 3;
    string alert_message = 4;
    string contact_info = 5;
    string triggered_at = 6;
    map<string, string> alert_metadata = 7;
    repeated string escalation_pathways = 8;
    repeated string recent_error_history = 9;
    repeated ResolutionAuditLog notification_audit_logs = 10; 
}
