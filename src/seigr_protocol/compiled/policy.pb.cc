// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: policy.proto
// Protobuf C++ Version: 5.29.2

#include "policy.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace seigr {
namespace policy {
              template <typename>
PROTOBUF_CONSTEXPR SystemPolicy_PolicyMetadataEntry_DoNotUse::SystemPolicy_PolicyMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : SystemPolicy_PolicyMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : SystemPolicy_PolicyMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemPolicy_PolicyMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPolicy_PolicyMetadataEntry_DoNotUseDefaultTypeInternal _SystemPolicy_PolicyMetadataEntry_DoNotUse_default_instance_;

inline constexpr PolicyViolationLogResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyViolationLogResponse::PolicyViolationLogResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyViolationLogResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyViolationLogResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyViolationLogResponseDefaultTypeInternal() {}
  union {
    PolicyViolationLogResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyViolationLogResponseDefaultTypeInternal _PolicyViolationLogResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyViolation_ViolationMetadataEntry_DoNotUse::PolicyViolation_ViolationMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyViolation_ViolationMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyViolation_ViolationMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyViolation_ViolationMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyViolation_ViolationMetadataEntry_DoNotUseDefaultTypeInternal _PolicyViolation_ViolationMetadataEntry_DoNotUse_default_instance_;

inline constexpr PolicyUpdateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyUpdateResponse::PolicyUpdateResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyUpdateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyUpdateResponseDefaultTypeInternal() {}
  union {
    PolicyUpdateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyUpdateResponseDefaultTypeInternal _PolicyUpdateResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyRule_RuleMetadataEntry_DoNotUse::PolicyRule_RuleMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyRule_RuleMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyRule_RuleMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyRule_RuleMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyRule_RuleMetadataEntry_DoNotUseDefaultTypeInternal _PolicyRule_RuleMetadataEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyRule_RuleConditionsEntry_DoNotUse::PolicyRule_RuleConditionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyRule_RuleConditionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyRule_RuleConditionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyRule_RuleConditionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyRule_RuleConditionsEntry_DoNotUseDefaultTypeInternal _PolicyRule_RuleConditionsEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyRule_PenaltyConditionsEntry_DoNotUse::PolicyRule_PenaltyConditionsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyRule_PenaltyConditionsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyRule_PenaltyConditionsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyRule_PenaltyConditionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyRule_PenaltyConditionsEntry_DoNotUseDefaultTypeInternal _PolicyRule_PenaltyConditionsEntry_DoNotUse_default_instance_;

inline constexpr PolicyEnforcementResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : enforcement_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyEnforcementResponse::PolicyEnforcementResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyEnforcementResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEnforcementResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEnforcementResponseDefaultTypeInternal() {}
  union {
    PolicyEnforcementResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEnforcementResponseDefaultTypeInternal _PolicyEnforcementResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PolicyEnforcement_EnforcementMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEnforcement_EnforcementMetadataEntry_DoNotUseDefaultTypeInternal _PolicyEnforcement_EnforcementMetadataEntry_DoNotUse_default_instance_;

inline constexpr PolicyDefinitionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyDefinitionResponse::PolicyDefinitionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyDefinitionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyDefinitionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyDefinitionResponseDefaultTypeInternal() {}
  union {
    PolicyDefinitionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyDefinitionResponseDefaultTypeInternal _PolicyDefinitionResponse_default_instance_;

inline constexpr ComplianceCheckResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_compliant_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplianceCheckResponse::ComplianceCheckResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComplianceCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceCheckResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceCheckResponseDefaultTypeInternal() {}
  union {
    ComplianceCheckResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceCheckResponseDefaultTypeInternal _ComplianceCheckResponse_default_instance_;

inline constexpr ComplianceCheckRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplianceCheckRequest::ComplianceCheckRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComplianceCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceCheckRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceCheckRequestDefaultTypeInternal() {}
  union {
    ComplianceCheckRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceCheckRequestDefaultTypeInternal _ComplianceCheckRequest_default_instance_;

inline constexpr ComplianceAuditResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplianceAuditResponse::ComplianceAuditResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComplianceAuditResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceAuditResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceAuditResponseDefaultTypeInternal() {}
  union {
    ComplianceAuditResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceAuditResponseDefaultTypeInternal _ComplianceAuditResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ComplianceAudit_AuditMetadataEntry_DoNotUse::ComplianceAudit_AuditMetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ComplianceAudit_AuditMetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ComplianceAudit_AuditMetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplianceAudit_AuditMetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceAudit_AuditMetadataEntry_DoNotUseDefaultTypeInternal _ComplianceAudit_AuditMetadataEntry_DoNotUse_default_instance_;

inline constexpr PolicyViolation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : violation_metadata_{},
        violation_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rule_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resolution_status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        escalated_to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        response_action_{static_cast< ::seigr::policy::GovernanceAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyViolation::PolicyViolation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyViolationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyViolationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyViolationDefaultTypeInternal() {}
  union {
    PolicyViolation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyViolationDefaultTypeInternal _PolicyViolation_default_instance_;

inline constexpr PolicyRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        _actions_cached_byte_size_{0},
        rule_conditions_{},
        penalty_conditions_{},
        rule_metadata_{},
        rule_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_modified_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rule_type_{static_cast< ::seigr::policy::PolicyRuleType >(0)},
        is_active_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyRule::PolicyRule(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyRuleDefaultTypeInternal() {}
  union {
    PolicyRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyRuleDefaultTypeInternal _PolicyRule_default_instance_;

inline constexpr ComplianceAudit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : audit_metadata_{},
        audit_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        violation_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compliance_status_{false},
        recommended_action_{static_cast< ::seigr::policy::GovernanceAction >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplianceAudit::ComplianceAudit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComplianceAuditDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceAuditDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceAuditDefaultTypeInternal() {}
  union {
    ComplianceAudit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceAuditDefaultTypeInternal _ComplianceAudit_default_instance_;

inline constexpr SystemPolicy::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rules_{},
        policy_metadata_{},
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        policy_scope_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_by_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        modified_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        associated_compliance_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mandatory_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SystemPolicy::SystemPolicy(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SystemPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPolicyDefaultTypeInternal() {}
  union {
    SystemPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPolicyDefaultTypeInternal _SystemPolicy_default_instance_;

inline constexpr PolicyViolationLogRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        violation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyViolationLogRequest::PolicyViolationLogRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyViolationLogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyViolationLogRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyViolationLogRequestDefaultTypeInternal() {}
  union {
    PolicyViolationLogRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyViolationLogRequestDefaultTypeInternal _PolicyViolationLogRequest_default_instance_;

inline constexpr PolicyEnforcement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rules_{},
        enforcement_metadata_{},
        policy_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_component_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enforcement_level_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initiated_by_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initiated_at_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enforce_immediately_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyEnforcement::PolicyEnforcement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyEnforcementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEnforcementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEnforcementDefaultTypeInternal() {}
  union {
    PolicyEnforcement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEnforcementDefaultTypeInternal _PolicyEnforcement_default_instance_;

inline constexpr ComplianceAuditRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audit_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ComplianceAuditRequest::ComplianceAuditRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComplianceAuditRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplianceAuditRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplianceAuditRequestDefaultTypeInternal() {}
  union {
    ComplianceAuditRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplianceAuditRequestDefaultTypeInternal _ComplianceAuditRequest_default_instance_;

inline constexpr PolicyUpdateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        updated_policy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyUpdateRequest::PolicyUpdateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyUpdateRequestDefaultTypeInternal() {}
  union {
    PolicyUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyUpdateRequestDefaultTypeInternal _PolicyUpdateRequest_default_instance_;

inline constexpr PolicyEnforcementRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enforcement_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyEnforcementRequest::PolicyEnforcementRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyEnforcementRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyEnforcementRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyEnforcementRequestDefaultTypeInternal() {}
  union {
    PolicyEnforcementRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyEnforcementRequestDefaultTypeInternal _PolicyEnforcementRequest_default_instance_;

inline constexpr PolicyDefinitionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        policy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyDefinitionRequest::PolicyDefinitionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyDefinitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyDefinitionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyDefinitionRequestDefaultTypeInternal() {}
  union {
    PolicyDefinitionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyDefinitionRequestDefaultTypeInternal _PolicyDefinitionRequest_default_instance_;
}  // namespace policy
}  // namespace seigr
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_policy_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_policy_2eproto = nullptr;
const ::uint32_t
    TableStruct_policy_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.rule_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.rule_type_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.actions_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.last_modified_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.rule_conditions_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.penalty_conditions_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.is_active_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyRule, _impl_.rule_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.policy_name_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.policy_scope_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.rules_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.mandatory_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.policy_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.created_by_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.modified_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::SystemPolicy, _impl_.associated_compliance_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.target_component_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.rules_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.enforce_immediately_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.enforcement_level_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.enforcement_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.initiated_by_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcement, _impl_.initiated_at_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.audit_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.user_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.compliance_status_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.violation_description_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.recommended_action_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAudit, _impl_.audit_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.violation_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.rule_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.user_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.response_action_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.resolution_status_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.escalated_to_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolation, _impl_.violation_metadata_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionRequest, _impl_.policy_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionResponse, _impl_.policy_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyDefinitionResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateRequest, _impl_.updated_policy_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyUpdateResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementRequest, _impl_.enforcement_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementResponse, _impl_.enforcement_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyEnforcementResponse, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckRequest, _impl_.user_id_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckRequest, _impl_.policy_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckResponse, _impl_.is_compliant_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceCheckResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogRequest, _impl_.violation_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::PolicyViolationLogResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditRequest, _impl_.audit_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::seigr::policy::ComplianceAuditResponse, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse)},
        {12, 22, -1, sizeof(::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse)},
        {24, 34, -1, sizeof(::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse)},
        {36, -1, -1, sizeof(::seigr::policy::PolicyRule)},
        {54, 64, -1, sizeof(::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse)},
        {66, -1, -1, sizeof(::seigr::policy::SystemPolicy)},
        {84, 94, -1, sizeof(::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse)},
        {96, -1, -1, sizeof(::seigr::policy::PolicyEnforcement)},
        {112, 122, -1, sizeof(::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse)},
        {124, -1, -1, sizeof(::seigr::policy::ComplianceAudit)},
        {140, 150, -1, sizeof(::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse)},
        {152, -1, -1, sizeof(::seigr::policy::PolicyViolation)},
        {169, 178, -1, sizeof(::seigr::policy::PolicyDefinitionRequest)},
        {179, -1, -1, sizeof(::seigr::policy::PolicyDefinitionResponse)},
        {190, 199, -1, sizeof(::seigr::policy::PolicyUpdateRequest)},
        {200, -1, -1, sizeof(::seigr::policy::PolicyUpdateResponse)},
        {210, 219, -1, sizeof(::seigr::policy::PolicyEnforcementRequest)},
        {220, -1, -1, sizeof(::seigr::policy::PolicyEnforcementResponse)},
        {231, -1, -1, sizeof(::seigr::policy::ComplianceCheckRequest)},
        {241, -1, -1, sizeof(::seigr::policy::ComplianceCheckResponse)},
        {251, 260, -1, sizeof(::seigr::policy::PolicyViolationLogRequest)},
        {261, -1, -1, sizeof(::seigr::policy::PolicyViolationLogResponse)},
        {271, 280, -1, sizeof(::seigr::policy::ComplianceAuditRequest)},
        {281, -1, -1, sizeof(::seigr::policy::ComplianceAuditResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::seigr::policy::_PolicyRule_RuleConditionsEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_PolicyRule_PenaltyConditionsEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_PolicyRule_RuleMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_PolicyRule_default_instance_._instance,
    &::seigr::policy::_SystemPolicy_PolicyMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_SystemPolicy_default_instance_._instance,
    &::seigr::policy::_PolicyEnforcement_EnforcementMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_PolicyEnforcement_default_instance_._instance,
    &::seigr::policy::_ComplianceAudit_AuditMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_ComplianceAudit_default_instance_._instance,
    &::seigr::policy::_PolicyViolation_ViolationMetadataEntry_DoNotUse_default_instance_._instance,
    &::seigr::policy::_PolicyViolation_default_instance_._instance,
    &::seigr::policy::_PolicyDefinitionRequest_default_instance_._instance,
    &::seigr::policy::_PolicyDefinitionResponse_default_instance_._instance,
    &::seigr::policy::_PolicyUpdateRequest_default_instance_._instance,
    &::seigr::policy::_PolicyUpdateResponse_default_instance_._instance,
    &::seigr::policy::_PolicyEnforcementRequest_default_instance_._instance,
    &::seigr::policy::_PolicyEnforcementResponse_default_instance_._instance,
    &::seigr::policy::_ComplianceCheckRequest_default_instance_._instance,
    &::seigr::policy::_ComplianceCheckResponse_default_instance_._instance,
    &::seigr::policy::_PolicyViolationLogRequest_default_instance_._instance,
    &::seigr::policy::_PolicyViolationLogResponse_default_instance_._instance,
    &::seigr::policy::_ComplianceAuditRequest_default_instance_._instance,
    &::seigr::policy::_ComplianceAuditResponse_default_instance_._instance,
};
const char descriptor_table_protodef_policy_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014policy.proto\022\014seigr.policy\"\317\004\n\nPolicyR"
    "ule\022\017\n\007rule_id\030\001 \001(\t\022/\n\trule_type\030\002 \001(\0162"
    "\034.seigr.policy.PolicyRuleType\022\023\n\013descrip"
    "tion\030\003 \001(\t\022/\n\007actions\030\004 \003(\0162\036.seigr.poli"
    "cy.GovernanceAction\022\022\n\ncreated_at\030\005 \001(\t\022"
    "\025\n\rlast_modified\030\006 \001(\t\022E\n\017rule_condition"
    "s\030\007 \003(\0132,.seigr.policy.PolicyRule.RuleCo"
    "nditionsEntry\022K\n\022penalty_conditions\030\010 \003("
    "\0132/.seigr.policy.PolicyRule.PenaltyCondi"
    "tionsEntry\022\021\n\tis_active\030\t \001(\010\022A\n\rrule_me"
    "tadata\030\n \003(\0132*.seigr.policy.PolicyRule.R"
    "uleMetadataEntry\0325\n\023RuleConditionsEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026Penal"
    "tyConditionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\t:\0028\001\0323\n\021RuleMetadataEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\347\002\n\014SystemPolicy\022"
    "\021\n\tpolicy_id\030\001 \001(\t\022\023\n\013policy_name\030\002 \001(\t\022"
    "\024\n\014policy_scope\030\003 \001(\t\022\'\n\005rules\030\004 \003(\0132\030.s"
    "eigr.policy.PolicyRule\022\021\n\tmandatory\030\005 \001("
    "\010\022G\n\017policy_metadata\030\006 \003(\0132..seigr.polic"
    "y.SystemPolicy.PolicyMetadataEntry\022\022\n\ncr"
    "eated_by\030\007 \001(\t\022\022\n\ncreated_at\030\010 \001(\t\022\023\n\013mo"
    "dified_at\030\t \001(\t\022 \n\030associated_compliance"
    "_id\030\n \001(\t\0325\n\023PolicyMetadataEntry\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\344\002\n\021PolicyEnfor"
    "cement\022\021\n\tpolicy_id\030\001 \001(\t\022\033\n\023target_comp"
    "onent_id\030\002 \001(\t\022\'\n\005rules\030\003 \003(\0132\030.seigr.po"
    "licy.PolicyRule\022\033\n\023enforce_immediately\030\004"
    " \001(\010\022\031\n\021enforcement_level\030\005 \001(\t\022V\n\024enfor"
    "cement_metadata\030\006 \003(\01328.seigr.policy.Pol"
    "icyEnforcement.EnforcementMetadataEntry\022"
    "\024\n\014initiated_by\030\007 \001(\t\022\024\n\014initiated_at\030\010 "
    "\001(\t\032:\n\030EnforcementMetadataEntry\022\013\n\003key\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\320\002\n\017ComplianceAu"
    "dit\022\020\n\010audit_id\030\001 \001(\t\022\021\n\tpolicy_id\030\002 \001(\t"
    "\022\017\n\007user_id\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\t\022\031\n\021"
    "compliance_status\030\005 \001(\010\022\035\n\025violation_des"
    "cription\030\006 \001(\t\022:\n\022recommended_action\030\007 \001"
    "(\0162\036.seigr.policy.GovernanceAction\022H\n\016au"
    "dit_metadata\030\010 \003(\01320.seigr.policy.Compli"
    "anceAudit.AuditMetadataEntry\0324\n\022AuditMet"
    "adataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"\345\002\n\017PolicyViolation\022\024\n\014violation_id\030\001"
    " \001(\t\022\021\n\tpolicy_id\030\002 \001(\t\022\017\n\007rule_id\030\003 \001(\t"
    "\022\017\n\007user_id\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\t\0227\n\017"
    "response_action\030\006 \001(\0162\036.seigr.policy.Gov"
    "ernanceAction\022\031\n\021resolution_status\030\007 \001(\t"
    "\022\024\n\014escalated_to\030\010 \001(\t\022P\n\022violation_meta"
    "data\030\t \003(\01324.seigr.policy.PolicyViolatio"
    "n.ViolationMetadataEntry\0328\n\026ViolationMet"
    "adataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"E\n\027PolicyDefinitionRequest\022*\n\006policy\030"
    "\001 \001(\0132\032.seigr.policy.SystemPolicy\"O\n\030Pol"
    "icyDefinitionResponse\022\017\n\007success\030\001 \001(\010\022\021"
    "\n\tpolicy_id\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"I\n\023Po"
    "licyUpdateRequest\0222\n\016updated_policy\030\001 \001("
    "\0132\032.seigr.policy.SystemPolicy\"8\n\024PolicyU"
    "pdateResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007messag"
    "e\030\002 \001(\t\"P\n\030PolicyEnforcementRequest\0224\n\013e"
    "nforcement\030\001 \001(\0132\037.seigr.policy.PolicyEn"
    "forcement\"U\n\031PolicyEnforcementResponse\022\017"
    "\n\007success\030\001 \001(\010\022\026\n\016enforcement_id\030\002 \001(\t\022"
    "\017\n\007message\030\003 \001(\t\"<\n\026ComplianceCheckReque"
    "st\022\017\n\007user_id\030\001 \001(\t\022\021\n\tpolicy_id\030\002 \001(\t\"@"
    "\n\027ComplianceCheckResponse\022\024\n\014is_complian"
    "t\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"M\n\031PolicyViolat"
    "ionLogRequest\0220\n\tviolation\030\001 \001(\0132\035.seigr"
    ".policy.PolicyViolation\">\n\032PolicyViolati"
    "onLogResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007messag"
    "e\030\002 \001(\t\"F\n\026ComplianceAuditRequest\022,\n\005aud"
    "it\030\001 \001(\0132\035.seigr.policy.ComplianceAudit\""
    ";\n\027ComplianceAuditResponse\022\017\n\007success\030\001 "
    "\001(\010\022\017\n\007message\030\002 \001(\t*\323\001\n\020GovernanceActio"
    "n\022\024\n\020ACTION_UNDEFINED\020\000\022\021\n\rACTION_REVIEW"
    "\020\001\022\023\n\017ACTION_ESCALATE\020\002\022\022\n\016ACTION_APPROV"
    "E\020\003\022\021\n\rACTION_REJECT\020\004\022\021\n\rACTION_NOTIFY\020"
    "\005\022\017\n\013ACTION_WARN\020\006\022\030\n\024ACTION_REVOKE_ACCE"
    "SS\020\007\022\034\n\030ACTION_TERMINATE_PROCESS\020\010*\303\001\n\016P"
    "olicyRuleType\022\031\n\025POLICY_RULE_UNDEFINED\020\000"
    "\022\017\n\013ACCESS_RULE\020\001\022\027\n\023DATA_RETENTION_RULE"
    "\020\002\022\034\n\030RESOURCE_ALLOCATION_RULE\020\003\022\026\n\022USER"
    "_ACTIVITY_RULE\020\004\022\020\n\014PRIVACY_RULE\020\005\022\023\n\017CO"
    "MPLIANCE_RULE\020\006\022\017\n\013CUSTOM_RULE\020\0072\332\004\n\027Pol"
    "icyManagementService\022]\n\014CreatePolicy\022%.s"
    "eigr.policy.PolicyDefinitionRequest\032&.se"
    "igr.policy.PolicyDefinitionResponse\022U\n\014U"
    "pdatePolicy\022!.seigr.policy.PolicyUpdateR"
    "equest\032\".seigr.policy.PolicyUpdateRespon"
    "se\022`\n\rEnforcePolicy\022&.seigr.policy.Polic"
    "yEnforcementRequest\032\'.seigr.policy.Polic"
    "yEnforcementResponse\022^\n\017CheckCompliance\022"
    "$.seigr.policy.ComplianceCheckRequest\032%."
    "seigr.policy.ComplianceCheckResponse\022a\n\014"
    "LogViolation\022\'.seigr.policy.PolicyViolat"
    "ionLogRequest\032(.seigr.policy.PolicyViola"
    "tionLogResponse\022d\n\025AuditPolicyCompliance"
    "\022$.seigr.policy.ComplianceAuditRequest\032%"
    ".seigr.policy.ComplianceAuditResponseb\006p"
    "roto3"
};
static ::absl::once_flag descriptor_table_policy_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_policy_2eproto = {
    false,
    false,
    3925,
    descriptor_table_protodef_policy_2eproto,
    "policy.proto",
    &descriptor_table_policy_2eproto_once,
    nullptr,
    0,
    24,
    schemas,
    file_default_instances,
    TableStruct_policy_2eproto::offsets,
    file_level_enum_descriptors_policy_2eproto,
    file_level_service_descriptors_policy_2eproto,
};
namespace seigr {
namespace policy {
const ::google::protobuf::EnumDescriptor* GovernanceAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_policy_2eproto);
  return file_level_enum_descriptors_policy_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GovernanceAction_internal_data_[] = {
    589824u, 0u, };
bool GovernanceAction_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* PolicyRuleType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_policy_2eproto);
  return file_level_enum_descriptors_policy_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t PolicyRuleType_internal_data_[] = {
    524288u, 0u, };
bool PolicyRuleType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyRule_RuleConditionsEntry_DoNotUse::PolicyRule_RuleConditionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyRule_RuleConditionsEntry_DoNotUse::PolicyRule_RuleConditionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyRule_RuleConditionsEntry_DoNotUse::PolicyRule_RuleConditionsEntry_DoNotUse() : SuperType() {}
              PolicyRule_RuleConditionsEntry_DoNotUse::PolicyRule_RuleConditionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyRule_RuleConditionsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyRule_RuleConditionsEntry_DoNotUse(arena);
              }
              constexpr auto PolicyRule_RuleConditionsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyRule_RuleConditionsEntry_DoNotUse),
                                                          alignof(PolicyRule_RuleConditionsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyRule_RuleConditionsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyRule_RuleConditionsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyRule_RuleConditionsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyRule_RuleConditionsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyRule_RuleConditionsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyRule_RuleConditionsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyRule_RuleConditionsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyRule_RuleConditionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> PolicyRule_RuleConditionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule_RuleConditionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_RuleConditionsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\3\5\0\0\0\0\0"
    "seigr.policy.PolicyRule.RuleConditionsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyRule_PenaltyConditionsEntry_DoNotUse::PolicyRule_PenaltyConditionsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyRule_PenaltyConditionsEntry_DoNotUse::PolicyRule_PenaltyConditionsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyRule_PenaltyConditionsEntry_DoNotUse::PolicyRule_PenaltyConditionsEntry_DoNotUse() : SuperType() {}
              PolicyRule_PenaltyConditionsEntry_DoNotUse::PolicyRule_PenaltyConditionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyRule_PenaltyConditionsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyRule_PenaltyConditionsEntry_DoNotUse(arena);
              }
              constexpr auto PolicyRule_PenaltyConditionsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyRule_PenaltyConditionsEntry_DoNotUse),
                                                          alignof(PolicyRule_PenaltyConditionsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyRule_PenaltyConditionsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyRule_PenaltyConditionsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyRule_PenaltyConditionsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyRule_PenaltyConditionsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyRule_PenaltyConditionsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyRule_PenaltyConditionsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyRule_PenaltyConditionsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyRule_PenaltyConditionsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 63, 2> PolicyRule_PenaltyConditionsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule_PenaltyConditionsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_PenaltyConditionsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\56\3\5\0\0\0\0\0"
    "seigr.policy.PolicyRule.PenaltyConditionsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyRule_RuleMetadataEntry_DoNotUse::PolicyRule_RuleMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyRule_RuleMetadataEntry_DoNotUse::PolicyRule_RuleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyRule_RuleMetadataEntry_DoNotUse::PolicyRule_RuleMetadataEntry_DoNotUse() : SuperType() {}
              PolicyRule_RuleMetadataEntry_DoNotUse::PolicyRule_RuleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyRule_RuleMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyRule_RuleMetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyRule_RuleMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyRule_RuleMetadataEntry_DoNotUse),
                                                          alignof(PolicyRule_RuleMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyRule_RuleMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyRule_RuleMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyRule_RuleMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyRule_RuleMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyRule_RuleMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyRule_RuleMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyRule_RuleMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyRule_RuleMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2> PolicyRule_RuleMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule_RuleMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyRule_RuleMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\51\3\5\0\0\0\0\0"
    "seigr.policy.PolicyRule.RuleMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyRule::_Internal {
 public:
};

PolicyRule::PolicyRule(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyRule)
}
inline PROTOBUF_NDEBUG_INLINE PolicyRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyRule& from_msg)
      : actions_{visibility, arena, from.actions_},
        _actions_cached_byte_size_{0},
        rule_conditions_{visibility, arena, from.rule_conditions_},
        penalty_conditions_{visibility, arena, from.penalty_conditions_},
        rule_metadata_{visibility, arena, from.rule_metadata_},
        rule_id_(arena, from.rule_id_),
        description_(arena, from.description_),
        created_at_(arena, from.created_at_),
        last_modified_(arena, from.last_modified_),
        _cached_size_{0} {}

PolicyRule::PolicyRule(
    ::google::protobuf::Arena* arena,
    const PolicyRule& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rule_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rule_type_),
           offsetof(Impl_, is_active_) -
               offsetof(Impl_, rule_type_) +
               sizeof(Impl_::is_active_));

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyRule)
}
inline PROTOBUF_NDEBUG_INLINE PolicyRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actions_{visibility, arena},
        _actions_cached_byte_size_{0},
        rule_conditions_{visibility, arena},
        penalty_conditions_{visibility, arena},
        rule_metadata_{visibility, arena},
        rule_id_(arena),
        description_(arena),
        created_at_(arena),
        last_modified_(arena),
        _cached_size_{0} {}

inline void PolicyRule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rule_type_),
           0,
           offsetof(Impl_, is_active_) -
               offsetof(Impl_, rule_type_) +
               sizeof(Impl_::is_active_));
}
PolicyRule::~PolicyRule() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyRule)
  SharedDtor(*this);
}
inline void PolicyRule::SharedDtor(MessageLite& self) {
  PolicyRule& this_ = static_cast<PolicyRule&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.rule_id_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.created_at_.Destroy();
  this_._impl_.last_modified_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyRule::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyRule(arena);
}
constexpr auto PolicyRule::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.actions_) +
          decltype(PolicyRule::_impl_.actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_conditions_) +
          decltype(PolicyRule::_impl_.rule_conditions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_conditions_) +
          decltype(PolicyRule::_impl_.rule_conditions_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.penalty_conditions_) +
          decltype(PolicyRule::_impl_.penalty_conditions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.penalty_conditions_) +
          decltype(PolicyRule::_impl_.penalty_conditions_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_metadata_) +
          decltype(PolicyRule::_impl_.rule_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_metadata_) +
          decltype(PolicyRule::_impl_.rule_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyRule), alignof(PolicyRule), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyRule::PlacementNew_,
                                 sizeof(PolicyRule),
                                 alignof(PolicyRule));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyRule::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyRule_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyRule::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyRule>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyRule::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyRule>(), &PolicyRule::ByteSizeLong,
            &PolicyRule::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_._cached_size_),
        false,
    },
    &PolicyRule::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyRule::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 127, 2> PolicyRule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string rule_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_id_)}},
    // .seigr.policy.PolicyRuleType rule_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PolicyRule, _impl_.rule_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_type_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.description_)}},
    // repeated .seigr.policy.GovernanceAction actions = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.actions_)}},
    // string created_at = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.created_at_)}},
    // string last_modified = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.last_modified_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_active = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyRule, _impl_.is_active_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.is_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string rule_id = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.policy.PolicyRuleType rule_type = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.policy.GovernanceAction actions = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // string created_at = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string last_modified = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.last_modified_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> rule_conditions = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_conditions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, string> penalty_conditions = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.penalty_conditions_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool is_active = 9;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.is_active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> rule_metadata = 10;
    {PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_metadata_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyRule()._impl_.rule_conditions_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyRule()._impl_.penalty_conditions_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyRule()._impl_.rule_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\27\7\0\13\0\12\15\17\22\0\15\0\0\0\0\0"
    "seigr.policy.PolicyRule"
    "rule_id"
    "description"
    "created_at"
    "last_modified"
    "rule_conditions"
    "penalty_conditions"
    "rule_metadata"
  }},
};

PROTOBUF_NOINLINE void PolicyRule::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyRule)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _impl_.rule_conditions_.Clear();
  _impl_.penalty_conditions_.Clear();
  _impl_.rule_metadata_.Clear();
  _impl_.rule_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.last_modified_.ClearToEmpty();
  ::memset(&_impl_.rule_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_active_) -
      reinterpret_cast<char*>(&_impl_.rule_type_)) + sizeof(_impl_.is_active_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyRule::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyRule& this_ = static_cast<const PolicyRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyRule::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyRule)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string rule_id = 1;
          if (!this_._internal_rule_id().empty()) {
            const std::string& _s = this_._internal_rule_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .seigr.policy.PolicyRuleType rule_type = 2;
          if (this_._internal_rule_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_rule_type(), target);
          }

          // string description = 3;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .seigr.policy.GovernanceAction actions = 4;
          {
            std::size_t byte_size =
                                              this_._impl_._actions_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  4, this_._internal_actions(), byte_size, target);
            }
          }

          // string created_at = 5;
          if (!this_._internal_created_at().empty()) {
            const std::string& _s = this_._internal_created_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.created_at");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string last_modified = 6;
          if (!this_._internal_last_modified().empty()) {
            const std::string& _s = this_._internal_last_modified();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.last_modified");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // map<string, string> rule_conditions = 7;
          if (!this_._internal_rule_conditions().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_rule_conditions();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_conditions");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_conditions");
              }
            }
          }

          // map<string, string> penalty_conditions = 8;
          if (!this_._internal_penalty_conditions().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_penalty_conditions();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.penalty_conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.penalty_conditions");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.penalty_conditions");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.penalty_conditions");
              }
            }
          }

          // bool is_active = 9;
          if (this_._internal_is_active() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_is_active(), target);
          }

          // map<string, string> rule_metadata = 10;
          if (!this_._internal_rule_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_rule_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyRule.rule_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyRule)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyRule::ByteSizeLong(const MessageLite& base) {
          const PolicyRule& this_ = static_cast<const PolicyRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyRule::ByteSizeLong() const {
          const PolicyRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyRule)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.policy.GovernanceAction actions = 4;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_actions(), 1, this_._impl_._actions_cached_byte_size_);
            }
            // map<string, string> rule_conditions = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_rule_conditions_size());
              for (const auto& entry : this_._internal_rule_conditions()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> penalty_conditions = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_penalty_conditions_size());
              for (const auto& entry : this_._internal_penalty_conditions()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> rule_metadata = 10;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_rule_metadata_size());
              for (const auto& entry : this_._internal_rule_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string rule_id = 1;
            if (!this_._internal_rule_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rule_id());
            }
            // string description = 3;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string created_at = 5;
            if (!this_._internal_created_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_created_at());
            }
            // string last_modified = 6;
            if (!this_._internal_last_modified().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_modified());
            }
            // .seigr.policy.PolicyRuleType rule_type = 2;
            if (this_._internal_rule_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_rule_type());
            }
            // bool is_active = 9;
            if (this_._internal_is_active() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyRule::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyRule*>(&to_msg);
  auto& from = static_cast<const PolicyRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(from._internal_actions());
  _this->_impl_.rule_conditions_.MergeFrom(from._impl_.rule_conditions_);
  _this->_impl_.penalty_conditions_.MergeFrom(from._impl_.penalty_conditions_);
  _this->_impl_.rule_metadata_.MergeFrom(from._impl_.rule_metadata_);
  if (!from._internal_rule_id().empty()) {
    _this->_internal_set_rule_id(from._internal_rule_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_last_modified().empty()) {
    _this->_internal_set_last_modified(from._internal_last_modified());
  }
  if (from._internal_rule_type() != 0) {
    _this->_impl_.rule_type_ = from._impl_.rule_type_;
  }
  if (from._internal_is_active() != 0) {
    _this->_impl_.is_active_ = from._impl_.is_active_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyRule::CopyFrom(const PolicyRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyRule::InternalSwap(PolicyRule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
  _impl_.rule_conditions_.InternalSwap(&other->_impl_.rule_conditions_);
  _impl_.penalty_conditions_.InternalSwap(&other->_impl_.penalty_conditions_);
  _impl_.rule_metadata_.InternalSwap(&other->_impl_.rule_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_id_, &other->_impl_.rule_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, &other->_impl_.created_at_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_modified_, &other->_impl_.last_modified_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.is_active_)
      + sizeof(PolicyRule::_impl_.is_active_)
      - PROTOBUF_FIELD_OFFSET(PolicyRule, _impl_.rule_type_)>(
          reinterpret_cast<char*>(&_impl_.rule_type_),
          reinterpret_cast<char*>(&other->_impl_.rule_type_));
}

::google::protobuf::Metadata PolicyRule::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              SystemPolicy_PolicyMetadataEntry_DoNotUse::SystemPolicy_PolicyMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              SystemPolicy_PolicyMetadataEntry_DoNotUse::SystemPolicy_PolicyMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              SystemPolicy_PolicyMetadataEntry_DoNotUse::SystemPolicy_PolicyMetadataEntry_DoNotUse() : SuperType() {}
              SystemPolicy_PolicyMetadataEntry_DoNotUse::SystemPolicy_PolicyMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* SystemPolicy_PolicyMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) SystemPolicy_PolicyMetadataEntry_DoNotUse(arena);
              }
              constexpr auto SystemPolicy_PolicyMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SystemPolicy_PolicyMetadataEntry_DoNotUse),
                                                          alignof(SystemPolicy_PolicyMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull SystemPolicy_PolicyMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_SystemPolicy_PolicyMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &SystemPolicy_PolicyMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<SystemPolicy_PolicyMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &SystemPolicy_PolicyMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &SystemPolicy_PolicyMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &SystemPolicy_PolicyMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* SystemPolicy_PolicyMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> SystemPolicy_PolicyMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::SystemPolicy_PolicyMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy_PolicyMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\3\5\0\0\0\0\0"
    "seigr.policy.SystemPolicy.PolicyMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class SystemPolicy::_Internal {
 public:
};

SystemPolicy::SystemPolicy(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.SystemPolicy)
}
inline PROTOBUF_NDEBUG_INLINE SystemPolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::SystemPolicy& from_msg)
      : rules_{visibility, arena, from.rules_},
        policy_metadata_{visibility, arena, from.policy_metadata_},
        policy_id_(arena, from.policy_id_),
        policy_name_(arena, from.policy_name_),
        policy_scope_(arena, from.policy_scope_),
        created_by_(arena, from.created_by_),
        created_at_(arena, from.created_at_),
        modified_at_(arena, from.modified_at_),
        associated_compliance_id_(arena, from.associated_compliance_id_),
        _cached_size_{0} {}

SystemPolicy::SystemPolicy(
    ::google::protobuf::Arena* arena,
    const SystemPolicy& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SystemPolicy* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.mandatory_ = from._impl_.mandatory_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.SystemPolicy)
}
inline PROTOBUF_NDEBUG_INLINE SystemPolicy::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rules_{visibility, arena},
        policy_metadata_{visibility, arena},
        policy_id_(arena),
        policy_name_(arena),
        policy_scope_(arena),
        created_by_(arena),
        created_at_(arena),
        modified_at_(arena),
        associated_compliance_id_(arena),
        _cached_size_{0} {}

inline void SystemPolicy::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mandatory_ = {};
}
SystemPolicy::~SystemPolicy() {
  // @@protoc_insertion_point(destructor:seigr.policy.SystemPolicy)
  SharedDtor(*this);
}
inline void SystemPolicy::SharedDtor(MessageLite& self) {
  SystemPolicy& this_ = static_cast<SystemPolicy&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.policy_id_.Destroy();
  this_._impl_.policy_name_.Destroy();
  this_._impl_.policy_scope_.Destroy();
  this_._impl_.created_by_.Destroy();
  this_._impl_.created_at_.Destroy();
  this_._impl_.modified_at_.Destroy();
  this_._impl_.associated_compliance_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SystemPolicy::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SystemPolicy(arena);
}
constexpr auto SystemPolicy::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.rules_) +
          decltype(SystemPolicy::_impl_.rules_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_metadata_) +
          decltype(SystemPolicy::_impl_.policy_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_metadata_) +
          decltype(SystemPolicy::_impl_.policy_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SystemPolicy), alignof(SystemPolicy), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SystemPolicy::PlacementNew_,
                                 sizeof(SystemPolicy),
                                 alignof(SystemPolicy));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SystemPolicy::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SystemPolicy_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SystemPolicy::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SystemPolicy>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SystemPolicy::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SystemPolicy>(), &SystemPolicy::ByteSizeLong,
            &SystemPolicy::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_._cached_size_),
        false,
    },
    &SystemPolicy::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SystemPolicy::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 144, 2> SystemPolicy::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::SystemPolicy>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string policy_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_id_)}},
    // string policy_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_name_)}},
    // string policy_scope = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_scope_)}},
    // repeated .seigr.policy.PolicyRule rules = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.rules_)}},
    // bool mandatory = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemPolicy, _impl_.mandatory_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.mandatory_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string created_by = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.created_by_)}},
    // string created_at = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.created_at_)}},
    // string modified_at = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.modified_at_)}},
    // string associated_compliance_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.associated_compliance_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string policy_id = 1;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_name = 2;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_scope = 3;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_scope_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.policy.PolicyRule rules = 4;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.rules_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool mandatory = 5;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.mandatory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> policy_metadata = 6;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.policy_metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string created_by = 7;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.created_by_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string created_at = 8;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string modified_at = 9;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.modified_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string associated_compliance_id = 10;
    {PROTOBUF_FIELD_OFFSET(SystemPolicy, _impl_.associated_compliance_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(SystemPolicy()._impl_.policy_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\31\11\13\14\0\0\17\12\12\13\30\0\0\0\0\0"
    "seigr.policy.SystemPolicy"
    "policy_id"
    "policy_name"
    "policy_scope"
    "policy_metadata"
    "created_by"
    "created_at"
    "modified_at"
    "associated_compliance_id"
  }},
};

PROTOBUF_NOINLINE void SystemPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.SystemPolicy)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.policy_metadata_.Clear();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.policy_name_.ClearToEmpty();
  _impl_.policy_scope_.ClearToEmpty();
  _impl_.created_by_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.modified_at_.ClearToEmpty();
  _impl_.associated_compliance_id_.ClearToEmpty();
  _impl_.mandatory_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SystemPolicy::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SystemPolicy& this_ = static_cast<const SystemPolicy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SystemPolicy::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SystemPolicy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.SystemPolicy)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string policy_id = 1;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string policy_name = 2;
          if (!this_._internal_policy_name().empty()) {
            const std::string& _s = this_._internal_policy_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string policy_scope = 3;
          if (!this_._internal_policy_scope().empty()) {
            const std::string& _s = this_._internal_policy_scope();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_scope");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .seigr.policy.PolicyRule rules = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_rules_size());
               i < n; i++) {
            const auto& repfield = this_._internal_rules().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool mandatory = 5;
          if (this_._internal_mandatory() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_mandatory(), target);
          }

          // map<string, string> policy_metadata = 6;
          if (!this_._internal_policy_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_policy_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.policy_metadata");
              }
            }
          }

          // string created_by = 7;
          if (!this_._internal_created_by().empty()) {
            const std::string& _s = this_._internal_created_by();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.created_by");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string created_at = 8;
          if (!this_._internal_created_at().empty()) {
            const std::string& _s = this_._internal_created_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.created_at");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // string modified_at = 9;
          if (!this_._internal_modified_at().empty()) {
            const std::string& _s = this_._internal_modified_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.modified_at");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string associated_compliance_id = 10;
          if (!this_._internal_associated_compliance_id().empty()) {
            const std::string& _s = this_._internal_associated_compliance_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.SystemPolicy.associated_compliance_id");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.SystemPolicy)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SystemPolicy::ByteSizeLong(const MessageLite& base) {
          const SystemPolicy& this_ = static_cast<const SystemPolicy&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SystemPolicy::ByteSizeLong() const {
          const SystemPolicy& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.SystemPolicy)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.policy.PolicyRule rules = 4;
            {
              total_size += 1UL * this_._internal_rules_size();
              for (const auto& msg : this_._internal_rules()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> policy_metadata = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_policy_metadata_size());
              for (const auto& entry : this_._internal_policy_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string policy_id = 1;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string policy_name = 2;
            if (!this_._internal_policy_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_name());
            }
            // string policy_scope = 3;
            if (!this_._internal_policy_scope().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_scope());
            }
            // string created_by = 7;
            if (!this_._internal_created_by().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_created_by());
            }
            // string created_at = 8;
            if (!this_._internal_created_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_created_at());
            }
            // string modified_at = 9;
            if (!this_._internal_modified_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_modified_at());
            }
            // string associated_compliance_id = 10;
            if (!this_._internal_associated_compliance_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_associated_compliance_id());
            }
            // bool mandatory = 5;
            if (this_._internal_mandatory() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SystemPolicy::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SystemPolicy*>(&to_msg);
  auto& from = static_cast<const SystemPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.SystemPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rules()->MergeFrom(
      from._internal_rules());
  _this->_impl_.policy_metadata_.MergeFrom(from._impl_.policy_metadata_);
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_policy_name().empty()) {
    _this->_internal_set_policy_name(from._internal_policy_name());
  }
  if (!from._internal_policy_scope().empty()) {
    _this->_internal_set_policy_scope(from._internal_policy_scope());
  }
  if (!from._internal_created_by().empty()) {
    _this->_internal_set_created_by(from._internal_created_by());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_modified_at().empty()) {
    _this->_internal_set_modified_at(from._internal_modified_at());
  }
  if (!from._internal_associated_compliance_id().empty()) {
    _this->_internal_set_associated_compliance_id(from._internal_associated_compliance_id());
  }
  if (from._internal_mandatory() != 0) {
    _this->_impl_.mandatory_ = from._impl_.mandatory_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPolicy::CopyFrom(const SystemPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.SystemPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SystemPolicy::InternalSwap(SystemPolicy* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  _impl_.policy_metadata_.InternalSwap(&other->_impl_.policy_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_name_, &other->_impl_.policy_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_scope_, &other->_impl_.policy_scope_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_by_, &other->_impl_.created_by_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, &other->_impl_.created_at_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modified_at_, &other->_impl_.modified_at_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.associated_compliance_id_, &other->_impl_.associated_compliance_id_, arena);
        swap(_impl_.mandatory_, other->_impl_.mandatory_);
}

::google::protobuf::Metadata SystemPolicy::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse() : SuperType() {}
              PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyEnforcement_EnforcementMetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse),
                                                          alignof(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyEnforcement_EnforcementMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyEnforcement_EnforcementMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 72, 2> PolicyEnforcement_EnforcementMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyEnforcement_EnforcementMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement_EnforcementMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\67\3\5\0\0\0\0\0"
    "seigr.policy.PolicyEnforcement.EnforcementMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyEnforcement::_Internal {
 public:
};

PolicyEnforcement::PolicyEnforcement(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyEnforcement)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyEnforcement& from_msg)
      : rules_{visibility, arena, from.rules_},
        enforcement_metadata_{visibility, arena, from.enforcement_metadata_},
        policy_id_(arena, from.policy_id_),
        target_component_id_(arena, from.target_component_id_),
        enforcement_level_(arena, from.enforcement_level_),
        initiated_by_(arena, from.initiated_by_),
        initiated_at_(arena, from.initiated_at_),
        _cached_size_{0} {}

PolicyEnforcement::PolicyEnforcement(
    ::google::protobuf::Arena* arena,
    const PolicyEnforcement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyEnforcement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.enforce_immediately_ = from._impl_.enforce_immediately_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyEnforcement)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rules_{visibility, arena},
        enforcement_metadata_{visibility, arena},
        policy_id_(arena),
        target_component_id_(arena),
        enforcement_level_(arena),
        initiated_by_(arena),
        initiated_at_(arena),
        _cached_size_{0} {}

inline void PolicyEnforcement::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enforce_immediately_ = {};
}
PolicyEnforcement::~PolicyEnforcement() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyEnforcement)
  SharedDtor(*this);
}
inline void PolicyEnforcement::SharedDtor(MessageLite& self) {
  PolicyEnforcement& this_ = static_cast<PolicyEnforcement&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.policy_id_.Destroy();
  this_._impl_.target_component_id_.Destroy();
  this_._impl_.enforcement_level_.Destroy();
  this_._impl_.initiated_by_.Destroy();
  this_._impl_.initiated_at_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyEnforcement::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyEnforcement(arena);
}
constexpr auto PolicyEnforcement::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.rules_) +
          decltype(PolicyEnforcement::_impl_.rules_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforcement_metadata_) +
          decltype(PolicyEnforcement::_impl_.enforcement_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforcement_metadata_) +
          decltype(PolicyEnforcement::_impl_.enforcement_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyEnforcement), alignof(PolicyEnforcement), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyEnforcement::PlacementNew_,
                                 sizeof(PolicyEnforcement),
                                 alignof(PolicyEnforcement));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyEnforcement::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyEnforcement_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyEnforcement::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyEnforcement>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyEnforcement::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyEnforcement>(), &PolicyEnforcement::ByteSizeLong,
            &PolicyEnforcement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_._cached_size_),
        false,
    },
    &PolicyEnforcement::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyEnforcement::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 136, 2> PolicyEnforcement::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyEnforcement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string initiated_at = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.initiated_at_)}},
    // string policy_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.policy_id_)}},
    // string target_component_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.target_component_id_)}},
    // repeated .seigr.policy.PolicyRule rules = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.rules_)}},
    // bool enforce_immediately = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyEnforcement, _impl_.enforce_immediately_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforce_immediately_)}},
    // string enforcement_level = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforcement_level_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string initiated_by = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.initiated_by_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string policy_id = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_component_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.target_component_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .seigr.policy.PolicyRule rules = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.rules_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool enforce_immediately = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforce_immediately_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string enforcement_level = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforcement_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> enforcement_metadata = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.enforcement_metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string initiated_by = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.initiated_by_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string initiated_at = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcement, _impl_.initiated_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::PolicyRule>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyEnforcement()._impl_.enforcement_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\36\11\23\0\0\21\24\14\14\0\0\0\0\0\0\0"
    "seigr.policy.PolicyEnforcement"
    "policy_id"
    "target_component_id"
    "enforcement_level"
    "enforcement_metadata"
    "initiated_by"
    "initiated_at"
  }},
};

PROTOBUF_NOINLINE void PolicyEnforcement::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyEnforcement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.enforcement_metadata_.Clear();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.target_component_id_.ClearToEmpty();
  _impl_.enforcement_level_.ClearToEmpty();
  _impl_.initiated_by_.ClearToEmpty();
  _impl_.initiated_at_.ClearToEmpty();
  _impl_.enforce_immediately_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyEnforcement::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyEnforcement& this_ = static_cast<const PolicyEnforcement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyEnforcement::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyEnforcement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyEnforcement)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string policy_id = 1;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.policy_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string target_component_id = 2;
          if (!this_._internal_target_component_id().empty()) {
            const std::string& _s = this_._internal_target_component_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.target_component_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated .seigr.policy.PolicyRule rules = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_rules_size());
               i < n; i++) {
            const auto& repfield = this_._internal_rules().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool enforce_immediately = 4;
          if (this_._internal_enforce_immediately() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_enforce_immediately(), target);
          }

          // string enforcement_level = 5;
          if (!this_._internal_enforcement_level().empty()) {
            const std::string& _s = this_._internal_enforcement_level();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.enforcement_level");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // map<string, string> enforcement_metadata = 6;
          if (!this_._internal_enforcement_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_enforcement_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.enforcement_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.enforcement_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    6, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.enforcement_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.enforcement_metadata");
              }
            }
          }

          // string initiated_by = 7;
          if (!this_._internal_initiated_by().empty()) {
            const std::string& _s = this_._internal_initiated_by();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.initiated_by");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string initiated_at = 8;
          if (!this_._internal_initiated_at().empty()) {
            const std::string& _s = this_._internal_initiated_at();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcement.initiated_at");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyEnforcement)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyEnforcement::ByteSizeLong(const MessageLite& base) {
          const PolicyEnforcement& this_ = static_cast<const PolicyEnforcement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyEnforcement::ByteSizeLong() const {
          const PolicyEnforcement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyEnforcement)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .seigr.policy.PolicyRule rules = 3;
            {
              total_size += 1UL * this_._internal_rules_size();
              for (const auto& msg : this_._internal_rules()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> enforcement_metadata = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_enforcement_metadata_size());
              for (const auto& entry : this_._internal_enforcement_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string policy_id = 1;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string target_component_id = 2;
            if (!this_._internal_target_component_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_component_id());
            }
            // string enforcement_level = 5;
            if (!this_._internal_enforcement_level().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_enforcement_level());
            }
            // string initiated_by = 7;
            if (!this_._internal_initiated_by().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_initiated_by());
            }
            // string initiated_at = 8;
            if (!this_._internal_initiated_at().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_initiated_at());
            }
            // bool enforce_immediately = 4;
            if (this_._internal_enforce_immediately() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyEnforcement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyEnforcement*>(&to_msg);
  auto& from = static_cast<const PolicyEnforcement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyEnforcement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rules()->MergeFrom(
      from._internal_rules());
  _this->_impl_.enforcement_metadata_.MergeFrom(from._impl_.enforcement_metadata_);
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_target_component_id().empty()) {
    _this->_internal_set_target_component_id(from._internal_target_component_id());
  }
  if (!from._internal_enforcement_level().empty()) {
    _this->_internal_set_enforcement_level(from._internal_enforcement_level());
  }
  if (!from._internal_initiated_by().empty()) {
    _this->_internal_set_initiated_by(from._internal_initiated_by());
  }
  if (!from._internal_initiated_at().empty()) {
    _this->_internal_set_initiated_at(from._internal_initiated_at());
  }
  if (from._internal_enforce_immediately() != 0) {
    _this->_impl_.enforce_immediately_ = from._impl_.enforce_immediately_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyEnforcement::CopyFrom(const PolicyEnforcement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyEnforcement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyEnforcement::InternalSwap(PolicyEnforcement* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  _impl_.enforcement_metadata_.InternalSwap(&other->_impl_.enforcement_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_component_id_, &other->_impl_.target_component_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.enforcement_level_, &other->_impl_.enforcement_level_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initiated_by_, &other->_impl_.initiated_by_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initiated_at_, &other->_impl_.initiated_at_, arena);
        swap(_impl_.enforce_immediately_, other->_impl_.enforce_immediately_);
}

::google::protobuf::Metadata PolicyEnforcement::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ComplianceAudit_AuditMetadataEntry_DoNotUse::ComplianceAudit_AuditMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ComplianceAudit_AuditMetadataEntry_DoNotUse::ComplianceAudit_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ComplianceAudit_AuditMetadataEntry_DoNotUse::ComplianceAudit_AuditMetadataEntry_DoNotUse() : SuperType() {}
              ComplianceAudit_AuditMetadataEntry_DoNotUse::ComplianceAudit_AuditMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ComplianceAudit_AuditMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ComplianceAudit_AuditMetadataEntry_DoNotUse(arena);
              }
              constexpr auto ComplianceAudit_AuditMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ComplianceAudit_AuditMetadataEntry_DoNotUse),
                                                          alignof(ComplianceAudit_AuditMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ComplianceAudit_AuditMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ComplianceAudit_AuditMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ComplianceAudit_AuditMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ComplianceAudit_AuditMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ComplianceAudit_AuditMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ComplianceAudit_AuditMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ComplianceAudit_AuditMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ComplianceAudit_AuditMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 64, 2> ComplianceAudit_AuditMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceAudit_AuditMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit_AuditMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\57\3\5\0\0\0\0\0"
    "seigr.policy.ComplianceAudit.AuditMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ComplianceAudit::_Internal {
 public:
};

ComplianceAudit::ComplianceAudit(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.ComplianceAudit)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAudit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::ComplianceAudit& from_msg)
      : audit_metadata_{visibility, arena, from.audit_metadata_},
        audit_id_(arena, from.audit_id_),
        policy_id_(arena, from.policy_id_),
        user_id_(arena, from.user_id_),
        timestamp_(arena, from.timestamp_),
        violation_description_(arena, from.violation_description_),
        _cached_size_{0} {}

ComplianceAudit::ComplianceAudit(
    ::google::protobuf::Arena* arena,
    const ComplianceAudit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComplianceAudit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compliance_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, compliance_status_),
           offsetof(Impl_, recommended_action_) -
               offsetof(Impl_, compliance_status_) +
               sizeof(Impl_::recommended_action_));

  // @@protoc_insertion_point(copy_constructor:seigr.policy.ComplianceAudit)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAudit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : audit_metadata_{visibility, arena},
        audit_id_(arena),
        policy_id_(arena),
        user_id_(arena),
        timestamp_(arena),
        violation_description_(arena),
        _cached_size_{0} {}

inline void ComplianceAudit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compliance_status_),
           0,
           offsetof(Impl_, recommended_action_) -
               offsetof(Impl_, compliance_status_) +
               sizeof(Impl_::recommended_action_));
}
ComplianceAudit::~ComplianceAudit() {
  // @@protoc_insertion_point(destructor:seigr.policy.ComplianceAudit)
  SharedDtor(*this);
}
inline void ComplianceAudit::SharedDtor(MessageLite& self) {
  ComplianceAudit& this_ = static_cast<ComplianceAudit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.audit_id_.Destroy();
  this_._impl_.policy_id_.Destroy();
  this_._impl_.user_id_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.violation_description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ComplianceAudit::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ComplianceAudit(arena);
}
constexpr auto ComplianceAudit::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.audit_metadata_) +
          decltype(ComplianceAudit::_impl_.audit_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.audit_metadata_) +
          decltype(ComplianceAudit::_impl_.audit_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ComplianceAudit), alignof(ComplianceAudit), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ComplianceAudit::PlacementNew_,
                                 sizeof(ComplianceAudit),
                                 alignof(ComplianceAudit));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ComplianceAudit::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ComplianceAudit_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ComplianceAudit::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ComplianceAudit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ComplianceAudit::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ComplianceAudit>(), &ComplianceAudit::ByteSizeLong,
            &ComplianceAudit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_._cached_size_),
        false,
    },
    &ComplianceAudit::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ComplianceAudit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 113, 2> ComplianceAudit::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceAudit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string audit_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.audit_id_)}},
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.policy_id_)}},
    // string user_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.user_id_)}},
    // string timestamp = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.timestamp_)}},
    // bool compliance_status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ComplianceAudit, _impl_.compliance_status_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.compliance_status_)}},
    // string violation_description = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.violation_description_)}},
    // .seigr.policy.GovernanceAction recommended_action = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ComplianceAudit, _impl_.recommended_action_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.recommended_action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string audit_id = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.audit_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_id = 3;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool compliance_status = 5;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.compliance_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string violation_description = 6;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.violation_description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.policy.GovernanceAction recommended_action = 7;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.recommended_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> audit_metadata = 8;
    {PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.audit_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ComplianceAudit()._impl_.audit_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\34\10\11\7\11\0\25\0\16\0\0\0\0\0\0\0"
    "seigr.policy.ComplianceAudit"
    "audit_id"
    "policy_id"
    "user_id"
    "timestamp"
    "violation_description"
    "audit_metadata"
  }},
};

PROTOBUF_NOINLINE void ComplianceAudit::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.ComplianceAudit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audit_metadata_.Clear();
  _impl_.audit_id_.ClearToEmpty();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.violation_description_.ClearToEmpty();
  ::memset(&_impl_.compliance_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.recommended_action_) -
      reinterpret_cast<char*>(&_impl_.compliance_status_)) + sizeof(_impl_.recommended_action_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComplianceAudit::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComplianceAudit& this_ = static_cast<const ComplianceAudit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComplianceAudit::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComplianceAudit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.ComplianceAudit)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string audit_id = 1;
          if (!this_._internal_audit_id().empty()) {
            const std::string& _s = this_._internal_audit_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.audit_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string user_id = 3;
          if (!this_._internal_user_id().empty()) {
            const std::string& _s = this_._internal_user_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.user_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string timestamp = 4;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.timestamp");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool compliance_status = 5;
          if (this_._internal_compliance_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_compliance_status(), target);
          }

          // string violation_description = 6;
          if (!this_._internal_violation_description().empty()) {
            const std::string& _s = this_._internal_violation_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.violation_description");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // .seigr.policy.GovernanceAction recommended_action = 7;
          if (this_._internal_recommended_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_recommended_action(), target);
          }

          // map<string, string> audit_metadata = 8;
          if (!this_._internal_audit_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_audit_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.audit_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.audit_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.audit_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAudit.audit_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.ComplianceAudit)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComplianceAudit::ByteSizeLong(const MessageLite& base) {
          const ComplianceAudit& this_ = static_cast<const ComplianceAudit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComplianceAudit::ByteSizeLong() const {
          const ComplianceAudit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.ComplianceAudit)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> audit_metadata = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_audit_metadata_size());
              for (const auto& entry : this_._internal_audit_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string audit_id = 1;
            if (!this_._internal_audit_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_audit_id());
            }
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string user_id = 3;
            if (!this_._internal_user_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_id());
            }
            // string timestamp = 4;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string violation_description = 6;
            if (!this_._internal_violation_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_violation_description());
            }
            // bool compliance_status = 5;
            if (this_._internal_compliance_status() != 0) {
              total_size += 2;
            }
            // .seigr.policy.GovernanceAction recommended_action = 7;
            if (this_._internal_recommended_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_recommended_action());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComplianceAudit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplianceAudit*>(&to_msg);
  auto& from = static_cast<const ComplianceAudit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.ComplianceAudit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audit_metadata_.MergeFrom(from._impl_.audit_metadata_);
  if (!from._internal_audit_id().empty()) {
    _this->_internal_set_audit_id(from._internal_audit_id());
  }
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_violation_description().empty()) {
    _this->_internal_set_violation_description(from._internal_violation_description());
  }
  if (from._internal_compliance_status() != 0) {
    _this->_impl_.compliance_status_ = from._impl_.compliance_status_;
  }
  if (from._internal_recommended_action() != 0) {
    _this->_impl_.recommended_action_ = from._impl_.recommended_action_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplianceAudit::CopyFrom(const ComplianceAudit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.ComplianceAudit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComplianceAudit::InternalSwap(ComplianceAudit* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.audit_metadata_.InternalSwap(&other->_impl_.audit_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audit_id_, &other->_impl_.audit_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.violation_description_, &other->_impl_.violation_description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.recommended_action_)
      + sizeof(ComplianceAudit::_impl_.recommended_action_)
      - PROTOBUF_FIELD_OFFSET(ComplianceAudit, _impl_.compliance_status_)>(
          reinterpret_cast<char*>(&_impl_.compliance_status_),
          reinterpret_cast<char*>(&other->_impl_.compliance_status_));
}

::google::protobuf::Metadata ComplianceAudit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              PolicyViolation_ViolationMetadataEntry_DoNotUse::PolicyViolation_ViolationMetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              PolicyViolation_ViolationMetadataEntry_DoNotUse::PolicyViolation_ViolationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              PolicyViolation_ViolationMetadataEntry_DoNotUse::PolicyViolation_ViolationMetadataEntry_DoNotUse() : SuperType() {}
              PolicyViolation_ViolationMetadataEntry_DoNotUse::PolicyViolation_ViolationMetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* PolicyViolation_ViolationMetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) PolicyViolation_ViolationMetadataEntry_DoNotUse(arena);
              }
              constexpr auto PolicyViolation_ViolationMetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyViolation_ViolationMetadataEntry_DoNotUse),
                                                          alignof(PolicyViolation_ViolationMetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull PolicyViolation_ViolationMetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_PolicyViolation_ViolationMetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &PolicyViolation_ViolationMetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<PolicyViolation_ViolationMetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &PolicyViolation_ViolationMetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &PolicyViolation_ViolationMetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &PolicyViolation_ViolationMetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_policy_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* PolicyViolation_ViolationMetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 68, 2> PolicyViolation_ViolationMetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyViolation_ViolationMetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation_ViolationMetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\63\3\5\0\0\0\0\0"
    "seigr.policy.PolicyViolation.ViolationMetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class PolicyViolation::_Internal {
 public:
};

PolicyViolation::PolicyViolation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyViolation)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyViolation& from_msg)
      : violation_metadata_{visibility, arena, from.violation_metadata_},
        violation_id_(arena, from.violation_id_),
        policy_id_(arena, from.policy_id_),
        rule_id_(arena, from.rule_id_),
        user_id_(arena, from.user_id_),
        timestamp_(arena, from.timestamp_),
        resolution_status_(arena, from.resolution_status_),
        escalated_to_(arena, from.escalated_to_),
        _cached_size_{0} {}

PolicyViolation::PolicyViolation(
    ::google::protobuf::Arena* arena,
    const PolicyViolation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyViolation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.response_action_ = from._impl_.response_action_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyViolation)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : violation_metadata_{visibility, arena},
        violation_id_(arena),
        policy_id_(arena),
        rule_id_(arena),
        user_id_(arena),
        timestamp_(arena),
        resolution_status_(arena),
        escalated_to_(arena),
        _cached_size_{0} {}

inline void PolicyViolation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.response_action_ = {};
}
PolicyViolation::~PolicyViolation() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyViolation)
  SharedDtor(*this);
}
inline void PolicyViolation::SharedDtor(MessageLite& self) {
  PolicyViolation& this_ = static_cast<PolicyViolation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.violation_id_.Destroy();
  this_._impl_.policy_id_.Destroy();
  this_._impl_.rule_id_.Destroy();
  this_._impl_.user_id_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.resolution_status_.Destroy();
  this_._impl_.escalated_to_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyViolation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyViolation(arena);
}
constexpr auto PolicyViolation::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.violation_metadata_) +
          decltype(PolicyViolation::_impl_.violation_metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.violation_metadata_) +
          decltype(PolicyViolation::_impl_.violation_metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PolicyViolation), alignof(PolicyViolation), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyViolation::PlacementNew_,
                                 sizeof(PolicyViolation),
                                 alignof(PolicyViolation));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyViolation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyViolation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyViolation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyViolation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyViolation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyViolation>(), &PolicyViolation::ByteSizeLong,
            &PolicyViolation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_._cached_size_),
        false,
    },
    &PolicyViolation::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyViolation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 9, 1, 136, 2> PolicyViolation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyViolation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string escalated_to = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.escalated_to_)}},
    // string violation_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.violation_id_)}},
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.policy_id_)}},
    // string rule_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.rule_id_)}},
    // string user_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.user_id_)}},
    // string timestamp = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.timestamp_)}},
    // .seigr.policy.GovernanceAction response_action = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PolicyViolation, _impl_.response_action_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.response_action_)}},
    // string resolution_status = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.resolution_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string violation_id = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.violation_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rule_id = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.rule_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_id = 4;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .seigr.policy.GovernanceAction response_action = 6;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.response_action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string resolution_status = 7;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.resolution_status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string escalated_to = 8;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.escalated_to_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> violation_metadata = 9;
    {PROTOBUF_FIELD_OFFSET(PolicyViolation, _impl_.violation_metadata_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PolicyViolation()._impl_.violation_metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\34\14\11\7\7\11\0\21\14\22\0\0\0\0\0\0"
    "seigr.policy.PolicyViolation"
    "violation_id"
    "policy_id"
    "rule_id"
    "user_id"
    "timestamp"
    "resolution_status"
    "escalated_to"
    "violation_metadata"
  }},
};

PROTOBUF_NOINLINE void PolicyViolation::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyViolation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.violation_metadata_.Clear();
  _impl_.violation_id_.ClearToEmpty();
  _impl_.policy_id_.ClearToEmpty();
  _impl_.rule_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.resolution_status_.ClearToEmpty();
  _impl_.escalated_to_.ClearToEmpty();
  _impl_.response_action_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyViolation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyViolation& this_ = static_cast<const PolicyViolation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyViolation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyViolation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyViolation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string violation_id = 1;
          if (!this_._internal_violation_id().empty()) {
            const std::string& _s = this_._internal_violation_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.violation_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string rule_id = 3;
          if (!this_._internal_rule_id().empty()) {
            const std::string& _s = this_._internal_rule_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.rule_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string user_id = 4;
          if (!this_._internal_user_id().empty()) {
            const std::string& _s = this_._internal_user_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.user_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string timestamp = 5;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.timestamp");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .seigr.policy.GovernanceAction response_action = 6;
          if (this_._internal_response_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_response_action(), target);
          }

          // string resolution_status = 7;
          if (!this_._internal_resolution_status().empty()) {
            const std::string& _s = this_._internal_resolution_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.resolution_status");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string escalated_to = 8;
          if (!this_._internal_escalated_to().empty()) {
            const std::string& _s = this_._internal_escalated_to();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.escalated_to");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // map<string, string> violation_metadata = 9;
          if (!this_._internal_violation_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_violation_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.violation_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.violation_metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.violation_metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolation.violation_metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyViolation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyViolation::ByteSizeLong(const MessageLite& base) {
          const PolicyViolation& this_ = static_cast<const PolicyViolation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyViolation::ByteSizeLong() const {
          const PolicyViolation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyViolation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> violation_metadata = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_violation_metadata_size());
              for (const auto& entry : this_._internal_violation_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string violation_id = 1;
            if (!this_._internal_violation_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_violation_id());
            }
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string rule_id = 3;
            if (!this_._internal_rule_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rule_id());
            }
            // string user_id = 4;
            if (!this_._internal_user_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_id());
            }
            // string timestamp = 5;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string resolution_status = 7;
            if (!this_._internal_resolution_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_resolution_status());
            }
            // string escalated_to = 8;
            if (!this_._internal_escalated_to().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_escalated_to());
            }
            // .seigr.policy.GovernanceAction response_action = 6;
            if (this_._internal_response_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_response_action());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyViolation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyViolation*>(&to_msg);
  auto& from = static_cast<const PolicyViolation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyViolation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.violation_metadata_.MergeFrom(from._impl_.violation_metadata_);
  if (!from._internal_violation_id().empty()) {
    _this->_internal_set_violation_id(from._internal_violation_id());
  }
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_rule_id().empty()) {
    _this->_internal_set_rule_id(from._internal_rule_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_resolution_status().empty()) {
    _this->_internal_set_resolution_status(from._internal_resolution_status());
  }
  if (!from._internal_escalated_to().empty()) {
    _this->_internal_set_escalated_to(from._internal_escalated_to());
  }
  if (from._internal_response_action() != 0) {
    _this->_impl_.response_action_ = from._impl_.response_action_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyViolation::CopyFrom(const PolicyViolation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyViolation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyViolation::InternalSwap(PolicyViolation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.violation_metadata_.InternalSwap(&other->_impl_.violation_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.violation_id_, &other->_impl_.violation_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_id_, &other->_impl_.rule_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resolution_status_, &other->_impl_.resolution_status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.escalated_to_, &other->_impl_.escalated_to_, arena);
  swap(_impl_.response_action_, other->_impl_.response_action_);
}

::google::protobuf::Metadata PolicyViolation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyDefinitionRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PolicyDefinitionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PolicyDefinitionRequest, _impl_._has_bits_);
};

PolicyDefinitionRequest::PolicyDefinitionRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyDefinitionRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDefinitionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyDefinitionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PolicyDefinitionRequest::PolicyDefinitionRequest(
    ::google::protobuf::Arena* arena,
    const PolicyDefinitionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyDefinitionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.policy_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::policy::SystemPolicy>(
                              arena, *from._impl_.policy_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyDefinitionRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDefinitionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PolicyDefinitionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.policy_ = {};
}
PolicyDefinitionRequest::~PolicyDefinitionRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyDefinitionRequest)
  SharedDtor(*this);
}
inline void PolicyDefinitionRequest::SharedDtor(MessageLite& self) {
  PolicyDefinitionRequest& this_ = static_cast<PolicyDefinitionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.policy_;
  this_._impl_.~Impl_();
}

inline void* PolicyDefinitionRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyDefinitionRequest(arena);
}
constexpr auto PolicyDefinitionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PolicyDefinitionRequest),
                                            alignof(PolicyDefinitionRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyDefinitionRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyDefinitionRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyDefinitionRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyDefinitionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyDefinitionRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyDefinitionRequest>(), &PolicyDefinitionRequest::ByteSizeLong,
            &PolicyDefinitionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyDefinitionRequest, _impl_._cached_size_),
        false,
    },
    &PolicyDefinitionRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyDefinitionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PolicyDefinitionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyDefinitionRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyDefinitionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seigr.policy.SystemPolicy policy = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PolicyDefinitionRequest, _impl_.policy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.policy.SystemPolicy policy = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyDefinitionRequest, _impl_.policy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::SystemPolicy>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PolicyDefinitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyDefinitionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.policy_ != nullptr);
    _impl_.policy_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyDefinitionRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyDefinitionRequest& this_ = static_cast<const PolicyDefinitionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyDefinitionRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyDefinitionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyDefinitionRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.policy.SystemPolicy policy = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.policy_, this_._impl_.policy_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyDefinitionRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyDefinitionRequest::ByteSizeLong(const MessageLite& base) {
          const PolicyDefinitionRequest& this_ = static_cast<const PolicyDefinitionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyDefinitionRequest::ByteSizeLong() const {
          const PolicyDefinitionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyDefinitionRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .seigr.policy.SystemPolicy policy = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.policy_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyDefinitionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyDefinitionRequest*>(&to_msg);
  auto& from = static_cast<const PolicyDefinitionRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyDefinitionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.policy_ != nullptr);
    if (_this->_impl_.policy_ == nullptr) {
      _this->_impl_.policy_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::policy::SystemPolicy>(arena, *from._impl_.policy_);
    } else {
      _this->_impl_.policy_->MergeFrom(*from._impl_.policy_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyDefinitionRequest::CopyFrom(const PolicyDefinitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyDefinitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyDefinitionRequest::InternalSwap(PolicyDefinitionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.policy_, other->_impl_.policy_);
}

::google::protobuf::Metadata PolicyDefinitionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyDefinitionResponse::_Internal {
 public:
};

PolicyDefinitionResponse::PolicyDefinitionResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyDefinitionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDefinitionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyDefinitionResponse& from_msg)
      : policy_id_(arena, from.policy_id_),
        message_(arena, from.message_),
        _cached_size_{0} {}

PolicyDefinitionResponse::PolicyDefinitionResponse(
    ::google::protobuf::Arena* arena,
    const PolicyDefinitionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyDefinitionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyDefinitionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDefinitionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : policy_id_(arena),
        message_(arena),
        _cached_size_{0} {}

inline void PolicyDefinitionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
PolicyDefinitionResponse::~PolicyDefinitionResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyDefinitionResponse)
  SharedDtor(*this);
}
inline void PolicyDefinitionResponse::SharedDtor(MessageLite& self) {
  PolicyDefinitionResponse& this_ = static_cast<PolicyDefinitionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.policy_id_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyDefinitionResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyDefinitionResponse(arena);
}
constexpr auto PolicyDefinitionResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyDefinitionResponse),
                                            alignof(PolicyDefinitionResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyDefinitionResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyDefinitionResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyDefinitionResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyDefinitionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyDefinitionResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyDefinitionResponse>(), &PolicyDefinitionResponse::ByteSizeLong,
            &PolicyDefinitionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_._cached_size_),
        false,
    },
    &PolicyDefinitionResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyDefinitionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 62, 2> PolicyDefinitionResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyDefinitionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyDefinitionResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.success_)}},
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.policy_id_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyDefinitionResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\0\11\7\0\0\0\0"
    "seigr.policy.PolicyDefinitionResponse"
    "policy_id"
    "message"
  }},
};

PROTOBUF_NOINLINE void PolicyDefinitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyDefinitionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.policy_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyDefinitionResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyDefinitionResponse& this_ = static_cast<const PolicyDefinitionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyDefinitionResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyDefinitionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyDefinitionResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyDefinitionResponse.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyDefinitionResponse.message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyDefinitionResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyDefinitionResponse::ByteSizeLong(const MessageLite& base) {
          const PolicyDefinitionResponse& this_ = static_cast<const PolicyDefinitionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyDefinitionResponse::ByteSizeLong() const {
          const PolicyDefinitionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyDefinitionResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
            // string message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyDefinitionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyDefinitionResponse*>(&to_msg);
  auto& from = static_cast<const PolicyDefinitionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyDefinitionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyDefinitionResponse::CopyFrom(const PolicyDefinitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyDefinitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyDefinitionResponse::InternalSwap(PolicyDefinitionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata PolicyDefinitionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyUpdateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PolicyUpdateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PolicyUpdateRequest, _impl_._has_bits_);
};

PolicyUpdateRequest::PolicyUpdateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyUpdateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PolicyUpdateRequest::PolicyUpdateRequest(
    ::google::protobuf::Arena* arena,
    const PolicyUpdateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyUpdateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.updated_policy_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::policy::SystemPolicy>(
                              arena, *from._impl_.updated_policy_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PolicyUpdateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.updated_policy_ = {};
}
PolicyUpdateRequest::~PolicyUpdateRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyUpdateRequest)
  SharedDtor(*this);
}
inline void PolicyUpdateRequest::SharedDtor(MessageLite& self) {
  PolicyUpdateRequest& this_ = static_cast<PolicyUpdateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.updated_policy_;
  this_._impl_.~Impl_();
}

inline void* PolicyUpdateRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyUpdateRequest(arena);
}
constexpr auto PolicyUpdateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PolicyUpdateRequest),
                                            alignof(PolicyUpdateRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyUpdateRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyUpdateRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyUpdateRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyUpdateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyUpdateRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyUpdateRequest>(), &PolicyUpdateRequest::ByteSizeLong,
            &PolicyUpdateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyUpdateRequest, _impl_._cached_size_),
        false,
    },
    &PolicyUpdateRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyUpdateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PolicyUpdateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyUpdateRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyUpdateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seigr.policy.SystemPolicy updated_policy = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PolicyUpdateRequest, _impl_.updated_policy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.policy.SystemPolicy updated_policy = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyUpdateRequest, _impl_.updated_policy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::SystemPolicy>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PolicyUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyUpdateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.updated_policy_ != nullptr);
    _impl_.updated_policy_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyUpdateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyUpdateRequest& this_ = static_cast<const PolicyUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyUpdateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyUpdateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.policy.SystemPolicy updated_policy = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.updated_policy_, this_._impl_.updated_policy_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyUpdateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyUpdateRequest::ByteSizeLong(const MessageLite& base) {
          const PolicyUpdateRequest& this_ = static_cast<const PolicyUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyUpdateRequest::ByteSizeLong() const {
          const PolicyUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyUpdateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .seigr.policy.SystemPolicy updated_policy = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_policy_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyUpdateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyUpdateRequest*>(&to_msg);
  auto& from = static_cast<const PolicyUpdateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.updated_policy_ != nullptr);
    if (_this->_impl_.updated_policy_ == nullptr) {
      _this->_impl_.updated_policy_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::policy::SystemPolicy>(arena, *from._impl_.updated_policy_);
    } else {
      _this->_impl_.updated_policy_->MergeFrom(*from._impl_.updated_policy_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyUpdateRequest::CopyFrom(const PolicyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyUpdateRequest::InternalSwap(PolicyUpdateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.updated_policy_, other->_impl_.updated_policy_);
}

::google::protobuf::Metadata PolicyUpdateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyUpdateResponse::_Internal {
 public:
};

PolicyUpdateResponse::PolicyUpdateResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyUpdateResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyUpdateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyUpdateResponse& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

PolicyUpdateResponse::PolicyUpdateResponse(
    ::google::protobuf::Arena* arena,
    const PolicyUpdateResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyUpdateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyUpdateResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyUpdateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void PolicyUpdateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
PolicyUpdateResponse::~PolicyUpdateResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyUpdateResponse)
  SharedDtor(*this);
}
inline void PolicyUpdateResponse::SharedDtor(MessageLite& self) {
  PolicyUpdateResponse& this_ = static_cast<PolicyUpdateResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyUpdateResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyUpdateResponse(arena);
}
constexpr auto PolicyUpdateResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyUpdateResponse),
                                            alignof(PolicyUpdateResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyUpdateResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyUpdateResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyUpdateResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyUpdateResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyUpdateResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyUpdateResponse>(), &PolicyUpdateResponse::ByteSizeLong,
            &PolicyUpdateResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyUpdateResponse, _impl_._cached_size_),
        false,
    },
    &PolicyUpdateResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyUpdateResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> PolicyUpdateResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyUpdateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyUpdateResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyUpdateResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyUpdateResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyUpdateResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyUpdateResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\0\7\0\0\0\0\0"
    "seigr.policy.PolicyUpdateResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void PolicyUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyUpdateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyUpdateResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyUpdateResponse& this_ = static_cast<const PolicyUpdateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyUpdateResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyUpdateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyUpdateResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyUpdateResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyUpdateResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyUpdateResponse::ByteSizeLong(const MessageLite& base) {
          const PolicyUpdateResponse& this_ = static_cast<const PolicyUpdateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyUpdateResponse::ByteSizeLong() const {
          const PolicyUpdateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyUpdateResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyUpdateResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyUpdateResponse*>(&to_msg);
  auto& from = static_cast<const PolicyUpdateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyUpdateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyUpdateResponse::CopyFrom(const PolicyUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyUpdateResponse::InternalSwap(PolicyUpdateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata PolicyUpdateResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyEnforcementRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PolicyEnforcementRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PolicyEnforcementRequest, _impl_._has_bits_);
};

PolicyEnforcementRequest::PolicyEnforcementRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyEnforcementRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcementRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyEnforcementRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PolicyEnforcementRequest::PolicyEnforcementRequest(
    ::google::protobuf::Arena* arena,
    const PolicyEnforcementRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyEnforcementRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.enforcement_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::policy::PolicyEnforcement>(
                              arena, *from._impl_.enforcement_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyEnforcementRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcementRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PolicyEnforcementRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enforcement_ = {};
}
PolicyEnforcementRequest::~PolicyEnforcementRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyEnforcementRequest)
  SharedDtor(*this);
}
inline void PolicyEnforcementRequest::SharedDtor(MessageLite& self) {
  PolicyEnforcementRequest& this_ = static_cast<PolicyEnforcementRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.enforcement_;
  this_._impl_.~Impl_();
}

inline void* PolicyEnforcementRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyEnforcementRequest(arena);
}
constexpr auto PolicyEnforcementRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PolicyEnforcementRequest),
                                            alignof(PolicyEnforcementRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyEnforcementRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyEnforcementRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyEnforcementRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyEnforcementRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyEnforcementRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyEnforcementRequest>(), &PolicyEnforcementRequest::ByteSizeLong,
            &PolicyEnforcementRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyEnforcementRequest, _impl_._cached_size_),
        false,
    },
    &PolicyEnforcementRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyEnforcementRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PolicyEnforcementRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyEnforcementRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyEnforcementRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seigr.policy.PolicyEnforcement enforcement = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcementRequest, _impl_.enforcement_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.policy.PolicyEnforcement enforcement = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcementRequest, _impl_.enforcement_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::PolicyEnforcement>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PolicyEnforcementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyEnforcementRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.enforcement_ != nullptr);
    _impl_.enforcement_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyEnforcementRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyEnforcementRequest& this_ = static_cast<const PolicyEnforcementRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyEnforcementRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyEnforcementRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyEnforcementRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.policy.PolicyEnforcement enforcement = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.enforcement_, this_._impl_.enforcement_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyEnforcementRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyEnforcementRequest::ByteSizeLong(const MessageLite& base) {
          const PolicyEnforcementRequest& this_ = static_cast<const PolicyEnforcementRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyEnforcementRequest::ByteSizeLong() const {
          const PolicyEnforcementRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyEnforcementRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .seigr.policy.PolicyEnforcement enforcement = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.enforcement_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyEnforcementRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyEnforcementRequest*>(&to_msg);
  auto& from = static_cast<const PolicyEnforcementRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyEnforcementRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.enforcement_ != nullptr);
    if (_this->_impl_.enforcement_ == nullptr) {
      _this->_impl_.enforcement_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::policy::PolicyEnforcement>(arena, *from._impl_.enforcement_);
    } else {
      _this->_impl_.enforcement_->MergeFrom(*from._impl_.enforcement_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyEnforcementRequest::CopyFrom(const PolicyEnforcementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyEnforcementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyEnforcementRequest::InternalSwap(PolicyEnforcementRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enforcement_, other->_impl_.enforcement_);
}

::google::protobuf::Metadata PolicyEnforcementRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyEnforcementResponse::_Internal {
 public:
};

PolicyEnforcementResponse::PolicyEnforcementResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyEnforcementResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcementResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyEnforcementResponse& from_msg)
      : enforcement_id_(arena, from.enforcement_id_),
        message_(arena, from.message_),
        _cached_size_{0} {}

PolicyEnforcementResponse::PolicyEnforcementResponse(
    ::google::protobuf::Arena* arena,
    const PolicyEnforcementResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyEnforcementResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyEnforcementResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyEnforcementResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : enforcement_id_(arena),
        message_(arena),
        _cached_size_{0} {}

inline void PolicyEnforcementResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
PolicyEnforcementResponse::~PolicyEnforcementResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyEnforcementResponse)
  SharedDtor(*this);
}
inline void PolicyEnforcementResponse::SharedDtor(MessageLite& self) {
  PolicyEnforcementResponse& this_ = static_cast<PolicyEnforcementResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.enforcement_id_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyEnforcementResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyEnforcementResponse(arena);
}
constexpr auto PolicyEnforcementResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyEnforcementResponse),
                                            alignof(PolicyEnforcementResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyEnforcementResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyEnforcementResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyEnforcementResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyEnforcementResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyEnforcementResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyEnforcementResponse>(), &PolicyEnforcementResponse::ByteSizeLong,
            &PolicyEnforcementResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_._cached_size_),
        false,
    },
    &PolicyEnforcementResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyEnforcementResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 68, 2> PolicyEnforcementResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyEnforcementResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyEnforcementResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.success_)}},
    // string enforcement_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.enforcement_id_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string enforcement_id = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.enforcement_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(PolicyEnforcementResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\16\7\0\0\0\0"
    "seigr.policy.PolicyEnforcementResponse"
    "enforcement_id"
    "message"
  }},
};

PROTOBUF_NOINLINE void PolicyEnforcementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyEnforcementResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enforcement_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyEnforcementResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyEnforcementResponse& this_ = static_cast<const PolicyEnforcementResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyEnforcementResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyEnforcementResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyEnforcementResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string enforcement_id = 2;
          if (!this_._internal_enforcement_id().empty()) {
            const std::string& _s = this_._internal_enforcement_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcementResponse.enforcement_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyEnforcementResponse.message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyEnforcementResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyEnforcementResponse::ByteSizeLong(const MessageLite& base) {
          const PolicyEnforcementResponse& this_ = static_cast<const PolicyEnforcementResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyEnforcementResponse::ByteSizeLong() const {
          const PolicyEnforcementResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyEnforcementResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string enforcement_id = 2;
            if (!this_._internal_enforcement_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_enforcement_id());
            }
            // string message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyEnforcementResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyEnforcementResponse*>(&to_msg);
  auto& from = static_cast<const PolicyEnforcementResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyEnforcementResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_enforcement_id().empty()) {
    _this->_internal_set_enforcement_id(from._internal_enforcement_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyEnforcementResponse::CopyFrom(const PolicyEnforcementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyEnforcementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyEnforcementResponse::InternalSwap(PolicyEnforcementResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.enforcement_id_, &other->_impl_.enforcement_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata PolicyEnforcementResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComplianceCheckRequest::_Internal {
 public:
};

ComplianceCheckRequest::ComplianceCheckRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.ComplianceCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::ComplianceCheckRequest& from_msg)
      : user_id_(arena, from.user_id_),
        policy_id_(arena, from.policy_id_),
        _cached_size_{0} {}

ComplianceCheckRequest::ComplianceCheckRequest(
    ::google::protobuf::Arena* arena,
    const ComplianceCheckRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComplianceCheckRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:seigr.policy.ComplianceCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : user_id_(arena),
        policy_id_(arena),
        _cached_size_{0} {}

inline void ComplianceCheckRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ComplianceCheckRequest::~ComplianceCheckRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.ComplianceCheckRequest)
  SharedDtor(*this);
}
inline void ComplianceCheckRequest::SharedDtor(MessageLite& self) {
  ComplianceCheckRequest& this_ = static_cast<ComplianceCheckRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.user_id_.Destroy();
  this_._impl_.policy_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ComplianceCheckRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ComplianceCheckRequest(arena);
}
constexpr auto ComplianceCheckRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ComplianceCheckRequest),
                                            alignof(ComplianceCheckRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ComplianceCheckRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ComplianceCheckRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ComplianceCheckRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ComplianceCheckRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ComplianceCheckRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ComplianceCheckRequest>(), &ComplianceCheckRequest::ByteSizeLong,
            &ComplianceCheckRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ComplianceCheckRequest, _impl_._cached_size_),
        false,
    },
    &ComplianceCheckRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ComplianceCheckRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> ComplianceCheckRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceCheckRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string policy_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceCheckRequest, _impl_.policy_id_)}},
    // string user_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceCheckRequest, _impl_.user_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string user_id = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceCheckRequest, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string policy_id = 2;
    {PROTOBUF_FIELD_OFFSET(ComplianceCheckRequest, _impl_.policy_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\7\11\0\0\0\0\0"
    "seigr.policy.ComplianceCheckRequest"
    "user_id"
    "policy_id"
  }},
};

PROTOBUF_NOINLINE void ComplianceCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.ComplianceCheckRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.policy_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComplianceCheckRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComplianceCheckRequest& this_ = static_cast<const ComplianceCheckRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComplianceCheckRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComplianceCheckRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.ComplianceCheckRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string user_id = 1;
          if (!this_._internal_user_id().empty()) {
            const std::string& _s = this_._internal_user_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceCheckRequest.user_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string policy_id = 2;
          if (!this_._internal_policy_id().empty()) {
            const std::string& _s = this_._internal_policy_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceCheckRequest.policy_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.ComplianceCheckRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComplianceCheckRequest::ByteSizeLong(const MessageLite& base) {
          const ComplianceCheckRequest& this_ = static_cast<const ComplianceCheckRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComplianceCheckRequest::ByteSizeLong() const {
          const ComplianceCheckRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.ComplianceCheckRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string user_id = 1;
            if (!this_._internal_user_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_id());
            }
            // string policy_id = 2;
            if (!this_._internal_policy_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_policy_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComplianceCheckRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplianceCheckRequest*>(&to_msg);
  auto& from = static_cast<const ComplianceCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.ComplianceCheckRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_policy_id().empty()) {
    _this->_internal_set_policy_id(from._internal_policy_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplianceCheckRequest::CopyFrom(const ComplianceCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.ComplianceCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComplianceCheckRequest::InternalSwap(ComplianceCheckRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.policy_id_, &other->_impl_.policy_id_, arena);
}

::google::protobuf::Metadata ComplianceCheckRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComplianceCheckResponse::_Internal {
 public:
};

ComplianceCheckResponse::ComplianceCheckResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.ComplianceCheckResponse)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceCheckResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::ComplianceCheckResponse& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

ComplianceCheckResponse::ComplianceCheckResponse(
    ::google::protobuf::Arena* arena,
    const ComplianceCheckResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComplianceCheckResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.is_compliant_ = from._impl_.is_compliant_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.ComplianceCheckResponse)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceCheckResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void ComplianceCheckResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_compliant_ = {};
}
ComplianceCheckResponse::~ComplianceCheckResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.ComplianceCheckResponse)
  SharedDtor(*this);
}
inline void ComplianceCheckResponse::SharedDtor(MessageLite& self) {
  ComplianceCheckResponse& this_ = static_cast<ComplianceCheckResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ComplianceCheckResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ComplianceCheckResponse(arena);
}
constexpr auto ComplianceCheckResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ComplianceCheckResponse),
                                            alignof(ComplianceCheckResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ComplianceCheckResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ComplianceCheckResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ComplianceCheckResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ComplianceCheckResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ComplianceCheckResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ComplianceCheckResponse>(), &ComplianceCheckResponse::ByteSizeLong,
            &ComplianceCheckResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ComplianceCheckResponse, _impl_._cached_size_),
        false,
    },
    &ComplianceCheckResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ComplianceCheckResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 52, 2> ComplianceCheckResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceCheckResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceCheckResponse, _impl_.message_)}},
    // bool is_compliant = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ComplianceCheckResponse, _impl_.is_compliant_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceCheckResponse, _impl_.is_compliant_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_compliant = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceCheckResponse, _impl_.is_compliant_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ComplianceCheckResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\0\7\0\0\0\0\0"
    "seigr.policy.ComplianceCheckResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void ComplianceCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.ComplianceCheckResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.is_compliant_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComplianceCheckResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComplianceCheckResponse& this_ = static_cast<const ComplianceCheckResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComplianceCheckResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComplianceCheckResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.ComplianceCheckResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_compliant = 1;
          if (this_._internal_is_compliant() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_compliant(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceCheckResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.ComplianceCheckResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComplianceCheckResponse::ByteSizeLong(const MessageLite& base) {
          const ComplianceCheckResponse& this_ = static_cast<const ComplianceCheckResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComplianceCheckResponse::ByteSizeLong() const {
          const ComplianceCheckResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.ComplianceCheckResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool is_compliant = 1;
            if (this_._internal_is_compliant() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComplianceCheckResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplianceCheckResponse*>(&to_msg);
  auto& from = static_cast<const ComplianceCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.ComplianceCheckResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_is_compliant() != 0) {
    _this->_impl_.is_compliant_ = from._impl_.is_compliant_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplianceCheckResponse::CopyFrom(const ComplianceCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.ComplianceCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComplianceCheckResponse::InternalSwap(ComplianceCheckResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.is_compliant_, other->_impl_.is_compliant_);
}

::google::protobuf::Metadata ComplianceCheckResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyViolationLogRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PolicyViolationLogRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PolicyViolationLogRequest, _impl_._has_bits_);
};

PolicyViolationLogRequest::PolicyViolationLogRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyViolationLogRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolationLogRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyViolationLogRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PolicyViolationLogRequest::PolicyViolationLogRequest(
    ::google::protobuf::Arena* arena,
    const PolicyViolationLogRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyViolationLogRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.violation_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::policy::PolicyViolation>(
                              arena, *from._impl_.violation_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyViolationLogRequest)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolationLogRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PolicyViolationLogRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.violation_ = {};
}
PolicyViolationLogRequest::~PolicyViolationLogRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyViolationLogRequest)
  SharedDtor(*this);
}
inline void PolicyViolationLogRequest::SharedDtor(MessageLite& self) {
  PolicyViolationLogRequest& this_ = static_cast<PolicyViolationLogRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.violation_;
  this_._impl_.~Impl_();
}

inline void* PolicyViolationLogRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyViolationLogRequest(arena);
}
constexpr auto PolicyViolationLogRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PolicyViolationLogRequest),
                                            alignof(PolicyViolationLogRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyViolationLogRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyViolationLogRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyViolationLogRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyViolationLogRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyViolationLogRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyViolationLogRequest>(), &PolicyViolationLogRequest::ByteSizeLong,
            &PolicyViolationLogRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyViolationLogRequest, _impl_._cached_size_),
        false,
    },
    &PolicyViolationLogRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyViolationLogRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PolicyViolationLogRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PolicyViolationLogRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyViolationLogRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seigr.policy.PolicyViolation violation = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PolicyViolationLogRequest, _impl_.violation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.policy.PolicyViolation violation = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyViolationLogRequest, _impl_.violation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::PolicyViolation>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PolicyViolationLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyViolationLogRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.violation_ != nullptr);
    _impl_.violation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyViolationLogRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyViolationLogRequest& this_ = static_cast<const PolicyViolationLogRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyViolationLogRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyViolationLogRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyViolationLogRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.policy.PolicyViolation violation = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.violation_, this_._impl_.violation_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyViolationLogRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyViolationLogRequest::ByteSizeLong(const MessageLite& base) {
          const PolicyViolationLogRequest& this_ = static_cast<const PolicyViolationLogRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyViolationLogRequest::ByteSizeLong() const {
          const PolicyViolationLogRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyViolationLogRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .seigr.policy.PolicyViolation violation = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.violation_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyViolationLogRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyViolationLogRequest*>(&to_msg);
  auto& from = static_cast<const PolicyViolationLogRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyViolationLogRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.violation_ != nullptr);
    if (_this->_impl_.violation_ == nullptr) {
      _this->_impl_.violation_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::policy::PolicyViolation>(arena, *from._impl_.violation_);
    } else {
      _this->_impl_.violation_->MergeFrom(*from._impl_.violation_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyViolationLogRequest::CopyFrom(const PolicyViolationLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyViolationLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyViolationLogRequest::InternalSwap(PolicyViolationLogRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.violation_, other->_impl_.violation_);
}

::google::protobuf::Metadata PolicyViolationLogRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PolicyViolationLogResponse::_Internal {
 public:
};

PolicyViolationLogResponse::PolicyViolationLogResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.PolicyViolationLogResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolationLogResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::PolicyViolationLogResponse& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

PolicyViolationLogResponse::PolicyViolationLogResponse(
    ::google::protobuf::Arena* arena,
    const PolicyViolationLogResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyViolationLogResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.PolicyViolationLogResponse)
}
inline PROTOBUF_NDEBUG_INLINE PolicyViolationLogResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void PolicyViolationLogResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
PolicyViolationLogResponse::~PolicyViolationLogResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.PolicyViolationLogResponse)
  SharedDtor(*this);
}
inline void PolicyViolationLogResponse::SharedDtor(MessageLite& self) {
  PolicyViolationLogResponse& this_ = static_cast<PolicyViolationLogResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PolicyViolationLogResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyViolationLogResponse(arena);
}
constexpr auto PolicyViolationLogResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PolicyViolationLogResponse),
                                            alignof(PolicyViolationLogResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyViolationLogResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyViolationLogResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyViolationLogResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyViolationLogResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyViolationLogResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyViolationLogResponse>(), &PolicyViolationLogResponse::ByteSizeLong,
            &PolicyViolationLogResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyViolationLogResponse, _impl_._cached_size_),
        false,
    },
    &PolicyViolationLogResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyViolationLogResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 55, 2> PolicyViolationLogResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::PolicyViolationLogResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolationLogResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyViolationLogResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyViolationLogResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(PolicyViolationLogResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(PolicyViolationLogResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\0\7\0\0\0\0\0"
    "seigr.policy.PolicyViolationLogResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void PolicyViolationLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.PolicyViolationLogResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyViolationLogResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyViolationLogResponse& this_ = static_cast<const PolicyViolationLogResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyViolationLogResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyViolationLogResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.PolicyViolationLogResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.PolicyViolationLogResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.PolicyViolationLogResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyViolationLogResponse::ByteSizeLong(const MessageLite& base) {
          const PolicyViolationLogResponse& this_ = static_cast<const PolicyViolationLogResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyViolationLogResponse::ByteSizeLong() const {
          const PolicyViolationLogResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.PolicyViolationLogResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyViolationLogResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyViolationLogResponse*>(&to_msg);
  auto& from = static_cast<const PolicyViolationLogResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.PolicyViolationLogResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyViolationLogResponse::CopyFrom(const PolicyViolationLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.PolicyViolationLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyViolationLogResponse::InternalSwap(PolicyViolationLogResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata PolicyViolationLogResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComplianceAuditRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ComplianceAuditRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ComplianceAuditRequest, _impl_._has_bits_);
};

ComplianceAuditRequest::ComplianceAuditRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.ComplianceAuditRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAuditRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::ComplianceAuditRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ComplianceAuditRequest::ComplianceAuditRequest(
    ::google::protobuf::Arena* arena,
    const ComplianceAuditRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComplianceAuditRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audit_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::seigr::policy::ComplianceAudit>(
                              arena, *from._impl_.audit_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.ComplianceAuditRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAuditRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ComplianceAuditRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.audit_ = {};
}
ComplianceAuditRequest::~ComplianceAuditRequest() {
  // @@protoc_insertion_point(destructor:seigr.policy.ComplianceAuditRequest)
  SharedDtor(*this);
}
inline void ComplianceAuditRequest::SharedDtor(MessageLite& self) {
  ComplianceAuditRequest& this_ = static_cast<ComplianceAuditRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.audit_;
  this_._impl_.~Impl_();
}

inline void* ComplianceAuditRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ComplianceAuditRequest(arena);
}
constexpr auto ComplianceAuditRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ComplianceAuditRequest),
                                            alignof(ComplianceAuditRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ComplianceAuditRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ComplianceAuditRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ComplianceAuditRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ComplianceAuditRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ComplianceAuditRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ComplianceAuditRequest>(), &ComplianceAuditRequest::ByteSizeLong,
            &ComplianceAuditRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ComplianceAuditRequest, _impl_._cached_size_),
        false,
    },
    &ComplianceAuditRequest::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ComplianceAuditRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ComplianceAuditRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComplianceAuditRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceAuditRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .seigr.policy.ComplianceAudit audit = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ComplianceAuditRequest, _impl_.audit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .seigr.policy.ComplianceAudit audit = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceAuditRequest, _impl_.audit_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::seigr::policy::ComplianceAudit>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ComplianceAuditRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.ComplianceAuditRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.audit_ != nullptr);
    _impl_.audit_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComplianceAuditRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComplianceAuditRequest& this_ = static_cast<const ComplianceAuditRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComplianceAuditRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComplianceAuditRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.ComplianceAuditRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .seigr.policy.ComplianceAudit audit = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.audit_, this_._impl_.audit_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.ComplianceAuditRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComplianceAuditRequest::ByteSizeLong(const MessageLite& base) {
          const ComplianceAuditRequest& this_ = static_cast<const ComplianceAuditRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComplianceAuditRequest::ByteSizeLong() const {
          const ComplianceAuditRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.ComplianceAuditRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .seigr.policy.ComplianceAudit audit = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audit_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComplianceAuditRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplianceAuditRequest*>(&to_msg);
  auto& from = static_cast<const ComplianceAuditRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.ComplianceAuditRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.audit_ != nullptr);
    if (_this->_impl_.audit_ == nullptr) {
      _this->_impl_.audit_ =
          ::google::protobuf::Message::CopyConstruct<::seigr::policy::ComplianceAudit>(arena, *from._impl_.audit_);
    } else {
      _this->_impl_.audit_->MergeFrom(*from._impl_.audit_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplianceAuditRequest::CopyFrom(const ComplianceAuditRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.ComplianceAuditRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComplianceAuditRequest::InternalSwap(ComplianceAuditRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.audit_, other->_impl_.audit_);
}

::google::protobuf::Metadata ComplianceAuditRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComplianceAuditResponse::_Internal {
 public:
};

ComplianceAuditResponse::ComplianceAuditResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:seigr.policy.ComplianceAuditResponse)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAuditResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::seigr::policy::ComplianceAuditResponse& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

ComplianceAuditResponse::ComplianceAuditResponse(
    ::google::protobuf::Arena* arena,
    const ComplianceAuditResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComplianceAuditResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:seigr.policy.ComplianceAuditResponse)
}
inline PROTOBUF_NDEBUG_INLINE ComplianceAuditResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void ComplianceAuditResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
ComplianceAuditResponse::~ComplianceAuditResponse() {
  // @@protoc_insertion_point(destructor:seigr.policy.ComplianceAuditResponse)
  SharedDtor(*this);
}
inline void ComplianceAuditResponse::SharedDtor(MessageLite& self) {
  ComplianceAuditResponse& this_ = static_cast<ComplianceAuditResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ComplianceAuditResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ComplianceAuditResponse(arena);
}
constexpr auto ComplianceAuditResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ComplianceAuditResponse),
                                            alignof(ComplianceAuditResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ComplianceAuditResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ComplianceAuditResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ComplianceAuditResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ComplianceAuditResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ComplianceAuditResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ComplianceAuditResponse>(), &ComplianceAuditResponse::ByteSizeLong,
            &ComplianceAuditResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ComplianceAuditResponse, _impl_._cached_size_),
        false,
    },
    &ComplianceAuditResponse::kDescriptorMethods,
    &descriptor_table_policy_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ComplianceAuditResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 52, 2> ComplianceAuditResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::seigr::policy::ComplianceAuditResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAuditResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ComplianceAuditResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ComplianceAuditResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ComplianceAuditResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ComplianceAuditResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\0\7\0\0\0\0\0"
    "seigr.policy.ComplianceAuditResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void ComplianceAuditResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seigr.policy.ComplianceAuditResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComplianceAuditResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComplianceAuditResponse& this_ = static_cast<const ComplianceAuditResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComplianceAuditResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComplianceAuditResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:seigr.policy.ComplianceAuditResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "seigr.policy.ComplianceAuditResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:seigr.policy.ComplianceAuditResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComplianceAuditResponse::ByteSizeLong(const MessageLite& base) {
          const ComplianceAuditResponse& this_ = static_cast<const ComplianceAuditResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComplianceAuditResponse::ByteSizeLong() const {
          const ComplianceAuditResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:seigr.policy.ComplianceAuditResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComplianceAuditResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplianceAuditResponse*>(&to_msg);
  auto& from = static_cast<const ComplianceAuditResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:seigr.policy.ComplianceAuditResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplianceAuditResponse::CopyFrom(const ComplianceAuditResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seigr.policy.ComplianceAuditResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComplianceAuditResponse::InternalSwap(ComplianceAuditResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata ComplianceAuditResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_policy_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
