// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cross_chain_operations.proto
// Protobuf C++ Version: 5.29.2

#ifndef cross_5fchain_5foperations_2eproto_2epb_2eh
#define cross_5fchain_5foperations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cross_5fchain_5foperations_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cross_5fchain_5foperations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cross_5fchain_5foperations_2eproto;
namespace seigr {
namespace crosschain {
class CrossChainToken;
struct CrossChainTokenDefaultTypeInternal;
extern CrossChainTokenDefaultTypeInternal _CrossChainToken_default_instance_;
class CrossChainToken_TokenMetadataEntry_DoNotUse;
struct CrossChainToken_TokenMetadataEntry_DoNotUseDefaultTypeInternal;
extern CrossChainToken_TokenMetadataEntry_DoNotUseDefaultTypeInternal _CrossChainToken_TokenMetadataEntry_DoNotUse_default_instance_;
class CrossChainTransaction;
struct CrossChainTransactionDefaultTypeInternal;
extern CrossChainTransactionDefaultTypeInternal _CrossChainTransaction_default_instance_;
class GetCrossChainTransactionHistoryRequest;
struct GetCrossChainTransactionHistoryRequestDefaultTypeInternal;
extern GetCrossChainTransactionHistoryRequestDefaultTypeInternal _GetCrossChainTransactionHistoryRequest_default_instance_;
class GetCrossChainTransactionHistoryResponse;
struct GetCrossChainTransactionHistoryResponseDefaultTypeInternal;
extern GetCrossChainTransactionHistoryResponseDefaultTypeInternal _GetCrossChainTransactionHistoryResponse_default_instance_;
class SyncGovernanceRequest;
struct SyncGovernanceRequestDefaultTypeInternal;
extern SyncGovernanceRequestDefaultTypeInternal _SyncGovernanceRequest_default_instance_;
class SyncGovernanceRequest_SyncMetadataEntry_DoNotUse;
struct SyncGovernanceRequest_SyncMetadataEntry_DoNotUseDefaultTypeInternal;
extern SyncGovernanceRequest_SyncMetadataEntry_DoNotUseDefaultTypeInternal _SyncGovernanceRequest_SyncMetadataEntry_DoNotUse_default_instance_;
class SyncGovernanceResponse;
struct SyncGovernanceResponseDefaultTypeInternal;
extern SyncGovernanceResponseDefaultTypeInternal _SyncGovernanceResponse_default_instance_;
class UnwrapTokenRequest;
struct UnwrapTokenRequestDefaultTypeInternal;
extern UnwrapTokenRequestDefaultTypeInternal _UnwrapTokenRequest_default_instance_;
class UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse;
struct UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUseDefaultTypeInternal;
extern UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUseDefaultTypeInternal _UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse_default_instance_;
class UnwrapTokenResponse;
struct UnwrapTokenResponseDefaultTypeInternal;
extern UnwrapTokenResponseDefaultTypeInternal _UnwrapTokenResponse_default_instance_;
class UpdateCrossChainStatusRequest;
struct UpdateCrossChainStatusRequestDefaultTypeInternal;
extern UpdateCrossChainStatusRequestDefaultTypeInternal _UpdateCrossChainStatusRequest_default_instance_;
class UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse;
struct UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUseDefaultTypeInternal;
extern UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUseDefaultTypeInternal _UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse_default_instance_;
class UpdateCrossChainStatusResponse;
struct UpdateCrossChainStatusResponseDefaultTypeInternal;
extern UpdateCrossChainStatusResponseDefaultTypeInternal _UpdateCrossChainStatusResponse_default_instance_;
class WrapTokenRequest;
struct WrapTokenRequestDefaultTypeInternal;
extern WrapTokenRequestDefaultTypeInternal _WrapTokenRequest_default_instance_;
class WrapTokenRequest_WrapMetadataEntry_DoNotUse;
struct WrapTokenRequest_WrapMetadataEntry_DoNotUseDefaultTypeInternal;
extern WrapTokenRequest_WrapMetadataEntry_DoNotUseDefaultTypeInternal _WrapTokenRequest_WrapMetadataEntry_DoNotUse_default_instance_;
class WrapTokenResponse;
struct WrapTokenResponseDefaultTypeInternal;
extern WrapTokenResponseDefaultTypeInternal _WrapTokenResponse_default_instance_;
}  // namespace crosschain
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace crosschain {
enum CrossChainStatus : int {
  CROSS_CHAIN_ACTIVE = 0,
  CROSS_CHAIN_SYNCED = 1,
  CROSS_CHAIN_INACTIVE = 2,
  CROSS_CHAIN_PENDING_WRAP = 3,
  CROSS_CHAIN_PENDING_UNWRAP = 4,
  CROSS_CHAIN_FAILED = 5,
  CrossChainStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CrossChainStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CrossChainStatus_IsValid(int value);
extern const uint32_t CrossChainStatus_internal_data_[];
constexpr CrossChainStatus CrossChainStatus_MIN = static_cast<CrossChainStatus>(0);
constexpr CrossChainStatus CrossChainStatus_MAX = static_cast<CrossChainStatus>(5);
constexpr int CrossChainStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
CrossChainStatus_descriptor();
template <typename T>
const std::string& CrossChainStatus_Name(T value) {
  static_assert(std::is_same<T, CrossChainStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CrossChainStatus_Name().");
  return CrossChainStatus_Name(static_cast<CrossChainStatus>(value));
}
template <>
inline const std::string& CrossChainStatus_Name(CrossChainStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CrossChainStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool CrossChainStatus_Parse(absl::string_view name, CrossChainStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrossChainStatus>(
      CrossChainStatus_descriptor(), name, value);
}
enum TransactionType : int {
  TRANSACTION_TYPE_UNDEFINED = 0,
  TRANSACTION_TYPE_WRAP = 1,
  TRANSACTION_TYPE_UNWRAP = 2,
  TRANSACTION_TYPE_GOVERNANCE_SYNC = 3,
  TRANSACTION_TYPE_STATUS_UPDATE = 4,
  TransactionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TransactionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TransactionType_IsValid(int value);
extern const uint32_t TransactionType_internal_data_[];
constexpr TransactionType TransactionType_MIN = static_cast<TransactionType>(0);
constexpr TransactionType TransactionType_MAX = static_cast<TransactionType>(4);
constexpr int TransactionType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TransactionType_descriptor();
template <typename T>
const std::string& TransactionType_Name(T value) {
  static_assert(std::is_same<T, TransactionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TransactionType_Name().");
  return TransactionType_Name(static_cast<TransactionType>(value));
}
template <>
inline const std::string& TransactionType_Name(TransactionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TransactionType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TransactionType_Parse(absl::string_view name, TransactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionType>(
      TransactionType_descriptor(), name, value);
}
enum ComplianceLevel : int {
  COMPLIANCE_LEVEL_UNDEFINED = 0,
  COMPLIANCE_LEVEL_GDPR = 1,
  COMPLIANCE_LEVEL_CCPA = 2,
  COMPLIANCE_LEVEL_NONE = 3,
  ComplianceLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ComplianceLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ComplianceLevel_IsValid(int value);
extern const uint32_t ComplianceLevel_internal_data_[];
constexpr ComplianceLevel ComplianceLevel_MIN = static_cast<ComplianceLevel>(0);
constexpr ComplianceLevel ComplianceLevel_MAX = static_cast<ComplianceLevel>(3);
constexpr int ComplianceLevel_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ComplianceLevel_descriptor();
template <typename T>
const std::string& ComplianceLevel_Name(T value) {
  static_assert(std::is_same<T, ComplianceLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ComplianceLevel_Name().");
  return ComplianceLevel_Name(static_cast<ComplianceLevel>(value));
}
template <>
inline const std::string& ComplianceLevel_Name(ComplianceLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ComplianceLevel_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ComplianceLevel_Parse(absl::string_view name, ComplianceLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComplianceLevel>(
      ComplianceLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WrapTokenResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.WrapTokenResponse) */ {
 public:
  inline WrapTokenResponse() : WrapTokenResponse(nullptr) {}
  ~WrapTokenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WrapTokenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WrapTokenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WrapTokenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WrapTokenResponse(const WrapTokenResponse& from) : WrapTokenResponse(nullptr, from) {}
  inline WrapTokenResponse(WrapTokenResponse&& from) noexcept
      : WrapTokenResponse(nullptr, std::move(from)) {}
  inline WrapTokenResponse& operator=(const WrapTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapTokenResponse& operator=(WrapTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrapTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrapTokenResponse* internal_default_instance() {
    return reinterpret_cast<const WrapTokenResponse*>(
        &_WrapTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(WrapTokenResponse& a, WrapTokenResponse& b) { a.Swap(&b); }
  inline void Swap(WrapTokenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrapTokenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WrapTokenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WrapTokenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WrapTokenResponse& from) { WrapTokenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WrapTokenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.WrapTokenResponse"; }

 protected:
  explicit WrapTokenResponse(::google::protobuf::Arena* arena);
  WrapTokenResponse(::google::protobuf::Arena* arena, const WrapTokenResponse& from);
  WrapTokenResponse(::google::protobuf::Arena* arena, WrapTokenResponse&& from) noexcept
      : WrapTokenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string transaction_id = 3;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // string error_code = 4;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.WrapTokenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WrapTokenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class WrapTokenRequest_WrapMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  WrapTokenRequest_WrapMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WrapTokenRequest_WrapMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WrapTokenRequest_WrapMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const WrapTokenRequest_WrapMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const WrapTokenRequest_WrapMetadataEntry_DoNotUse*>(
        &_WrapTokenRequest_WrapMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UpdateCrossChainStatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.UpdateCrossChainStatusResponse) */ {
 public:
  inline UpdateCrossChainStatusResponse() : UpdateCrossChainStatusResponse(nullptr) {}
  ~UpdateCrossChainStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateCrossChainStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateCrossChainStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCrossChainStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateCrossChainStatusResponse(const UpdateCrossChainStatusResponse& from) : UpdateCrossChainStatusResponse(nullptr, from) {}
  inline UpdateCrossChainStatusResponse(UpdateCrossChainStatusResponse&& from) noexcept
      : UpdateCrossChainStatusResponse(nullptr, std::move(from)) {}
  inline UpdateCrossChainStatusResponse& operator=(const UpdateCrossChainStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCrossChainStatusResponse& operator=(UpdateCrossChainStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCrossChainStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCrossChainStatusResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateCrossChainStatusResponse*>(
        &_UpdateCrossChainStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(UpdateCrossChainStatusResponse& a, UpdateCrossChainStatusResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateCrossChainStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCrossChainStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCrossChainStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateCrossChainStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateCrossChainStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateCrossChainStatusResponse& from) { UpdateCrossChainStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateCrossChainStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.UpdateCrossChainStatusResponse"; }

 protected:
  explicit UpdateCrossChainStatusResponse(::google::protobuf::Arena* arena);
  UpdateCrossChainStatusResponse(::google::protobuf::Arena* arena, const UpdateCrossChainStatusResponse& from);
  UpdateCrossChainStatusResponse(::google::protobuf::Arena* arena, UpdateCrossChainStatusResponse&& from) noexcept
      : UpdateCrossChainStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string error_code = 3;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.UpdateCrossChainStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      73, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateCrossChainStatusResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse*>(
        &_UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      83, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class UnwrapTokenResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.UnwrapTokenResponse) */ {
 public:
  inline UnwrapTokenResponse() : UnwrapTokenResponse(nullptr) {}
  ~UnwrapTokenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnwrapTokenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnwrapTokenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnwrapTokenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnwrapTokenResponse(const UnwrapTokenResponse& from) : UnwrapTokenResponse(nullptr, from) {}
  inline UnwrapTokenResponse(UnwrapTokenResponse&& from) noexcept
      : UnwrapTokenResponse(nullptr, std::move(from)) {}
  inline UnwrapTokenResponse& operator=(const UnwrapTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnwrapTokenResponse& operator=(UnwrapTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnwrapTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnwrapTokenResponse* internal_default_instance() {
    return reinterpret_cast<const UnwrapTokenResponse*>(
        &_UnwrapTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(UnwrapTokenResponse& a, UnwrapTokenResponse& b) { a.Swap(&b); }
  inline void Swap(UnwrapTokenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnwrapTokenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnwrapTokenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UnwrapTokenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnwrapTokenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UnwrapTokenResponse& from) { UnwrapTokenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UnwrapTokenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.UnwrapTokenResponse"; }

 protected:
  explicit UnwrapTokenResponse(::google::protobuf::Arena* arena);
  UnwrapTokenResponse(::google::protobuf::Arena* arena, const UnwrapTokenResponse& from);
  UnwrapTokenResponse(::google::protobuf::Arena* arena, UnwrapTokenResponse&& from) noexcept
      : UnwrapTokenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string transaction_id = 3;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // string error_code = 4;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.UnwrapTokenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnwrapTokenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse*>(
        &_UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SyncGovernanceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.SyncGovernanceResponse) */ {
 public:
  inline SyncGovernanceResponse() : SyncGovernanceResponse(nullptr) {}
  ~SyncGovernanceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncGovernanceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncGovernanceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncGovernanceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncGovernanceResponse(const SyncGovernanceResponse& from) : SyncGovernanceResponse(nullptr, from) {}
  inline SyncGovernanceResponse(SyncGovernanceResponse&& from) noexcept
      : SyncGovernanceResponse(nullptr, std::move(from)) {}
  inline SyncGovernanceResponse& operator=(const SyncGovernanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGovernanceResponse& operator=(SyncGovernanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGovernanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGovernanceResponse* internal_default_instance() {
    return reinterpret_cast<const SyncGovernanceResponse*>(
        &_SyncGovernanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SyncGovernanceResponse& a, SyncGovernanceResponse& b) { a.Swap(&b); }
  inline void Swap(SyncGovernanceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGovernanceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGovernanceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncGovernanceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncGovernanceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncGovernanceResponse& from) { SyncGovernanceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncGovernanceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.SyncGovernanceResponse"; }

 protected:
  explicit SyncGovernanceResponse(::google::protobuf::Arena* arena);
  SyncGovernanceResponse(::google::protobuf::Arena* arena, const SyncGovernanceResponse& from);
  SyncGovernanceResponse(::google::protobuf::Arena* arena, SyncGovernanceResponse&& from) noexcept
      : SyncGovernanceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string transaction_id = 3;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // string error_code = 4;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.SyncGovernanceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SyncGovernanceResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class SyncGovernanceRequest_SyncMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SyncGovernanceRequest_SyncMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncGovernanceRequest_SyncMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SyncGovernanceRequest_SyncMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SyncGovernanceRequest_SyncMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SyncGovernanceRequest_SyncMetadataEntry_DoNotUse*>(
        &_SyncGovernanceRequest_SyncMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      73, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetCrossChainTransactionHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.GetCrossChainTransactionHistoryRequest) */ {
 public:
  inline GetCrossChainTransactionHistoryRequest() : GetCrossChainTransactionHistoryRequest(nullptr) {}
  ~GetCrossChainTransactionHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetCrossChainTransactionHistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetCrossChainTransactionHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetCrossChainTransactionHistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetCrossChainTransactionHistoryRequest(const GetCrossChainTransactionHistoryRequest& from) : GetCrossChainTransactionHistoryRequest(nullptr, from) {}
  inline GetCrossChainTransactionHistoryRequest(GetCrossChainTransactionHistoryRequest&& from) noexcept
      : GetCrossChainTransactionHistoryRequest(nullptr, std::move(from)) {}
  inline GetCrossChainTransactionHistoryRequest& operator=(const GetCrossChainTransactionHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCrossChainTransactionHistoryRequest& operator=(GetCrossChainTransactionHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCrossChainTransactionHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCrossChainTransactionHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetCrossChainTransactionHistoryRequest*>(
        &_GetCrossChainTransactionHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(GetCrossChainTransactionHistoryRequest& a, GetCrossChainTransactionHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(GetCrossChainTransactionHistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCrossChainTransactionHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCrossChainTransactionHistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetCrossChainTransactionHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCrossChainTransactionHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetCrossChainTransactionHistoryRequest& from) { GetCrossChainTransactionHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetCrossChainTransactionHistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.GetCrossChainTransactionHistoryRequest"; }

 protected:
  explicit GetCrossChainTransactionHistoryRequest(::google::protobuf::Arena* arena);
  GetCrossChainTransactionHistoryRequest(::google::protobuf::Arena* arena, const GetCrossChainTransactionHistoryRequest& from);
  GetCrossChainTransactionHistoryRequest(::google::protobuf::Arena* arena, GetCrossChainTransactionHistoryRequest&& from) noexcept
      : GetCrossChainTransactionHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilterTypesFieldNumber = 3,
    kChainNameFieldNumber = 1,
    kDateRangeStartFieldNumber = 4,
    kDateRangeEndFieldNumber = 5,
    kLimitFieldNumber = 2,
  };
  // repeated .seigr.crosschain.TransactionType filter_types = 3;
  int filter_types_size() const;
  private:
  int _internal_filter_types_size() const;

  public:
  void clear_filter_types() ;
  public:
  ::seigr::crosschain::TransactionType filter_types(int index) const;
  void set_filter_types(int index, ::seigr::crosschain::TransactionType value);
  void add_filter_types(::seigr::crosschain::TransactionType value);
  const ::google::protobuf::RepeatedField<int>& filter_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_filter_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_filter_types() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_filter_types();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string date_range_start = 4;
  void clear_date_range_start() ;
  const std::string& date_range_start() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_start(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_start();
  PROTOBUF_NODISCARD std::string* release_date_range_start();
  void set_allocated_date_range_start(std::string* value);

  private:
  const std::string& _internal_date_range_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_start(
      const std::string& value);
  std::string* _internal_mutable_date_range_start();

  public:
  // string date_range_end = 5;
  void clear_date_range_end() ;
  const std::string& date_range_end() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date_range_end(Arg_&& arg, Args_... args);
  std::string* mutable_date_range_end();
  PROTOBUF_NODISCARD std::string* release_date_range_end();
  void set_allocated_date_range_end(std::string* value);

  private:
  const std::string& _internal_date_range_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_range_end(
      const std::string& value);
  std::string* _internal_mutable_date_range_end();

  public:
  // uint32 limit = 2;
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.GetCrossChainTransactionHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      104, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetCrossChainTransactionHistoryRequest& from_msg);
    ::google::protobuf::RepeatedField<int> filter_types_;
    ::google::protobuf::internal::CachedSize _filter_types_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr date_range_start_;
    ::google::protobuf::internal::ArenaStringPtr date_range_end_;
    ::uint32_t limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class CrossChainTransaction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.CrossChainTransaction) */ {
 public:
  inline CrossChainTransaction() : CrossChainTransaction(nullptr) {}
  ~CrossChainTransaction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CrossChainTransaction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CrossChainTransaction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrossChainTransaction(
      ::google::protobuf::internal::ConstantInitialized);

  inline CrossChainTransaction(const CrossChainTransaction& from) : CrossChainTransaction(nullptr, from) {}
  inline CrossChainTransaction(CrossChainTransaction&& from) noexcept
      : CrossChainTransaction(nullptr, std::move(from)) {}
  inline CrossChainTransaction& operator=(const CrossChainTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossChainTransaction& operator=(CrossChainTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossChainTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossChainTransaction* internal_default_instance() {
    return reinterpret_cast<const CrossChainTransaction*>(
        &_CrossChainTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CrossChainTransaction& a, CrossChainTransaction& b) { a.Swap(&b); }
  inline void Swap(CrossChainTransaction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossChainTransaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossChainTransaction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CrossChainTransaction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CrossChainTransaction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CrossChainTransaction& from) { CrossChainTransaction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CrossChainTransaction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.CrossChainTransaction"; }

 protected:
  explicit CrossChainTransaction(::google::protobuf::Arena* arena);
  CrossChainTransaction(::google::protobuf::Arena* arena, const CrossChainTransaction& from);
  CrossChainTransaction(::google::protobuf::Arena* arena, CrossChainTransaction&& from) noexcept
      : CrossChainTransaction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransactionIdFieldNumber = 1,
    kFromChainFieldNumber = 2,
    kToChainFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kFeeFieldNumber = 8,
    kWalletIdFieldNumber = 9,
    kComplianceNoteFieldNumber = 10,
    kAmountFieldNumber = 4,
    kTypeFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // string transaction_id = 1;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // string from_chain = 2;
  void clear_from_chain() ;
  const std::string& from_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from_chain(Arg_&& arg, Args_... args);
  std::string* mutable_from_chain();
  PROTOBUF_NODISCARD std::string* release_from_chain();
  void set_allocated_from_chain(std::string* value);

  private:
  const std::string& _internal_from_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_chain(
      const std::string& value);
  std::string* _internal_mutable_from_chain();

  public:
  // string to_chain = 3;
  void clear_to_chain() ;
  const std::string& to_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_chain(Arg_&& arg, Args_... args);
  std::string* mutable_to_chain();
  PROTOBUF_NODISCARD std::string* release_to_chain();
  void set_allocated_to_chain(std::string* value);

  private:
  const std::string& _internal_to_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_chain(
      const std::string& value);
  std::string* _internal_mutable_to_chain();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string fee = 8;
  void clear_fee() ;
  const std::string& fee() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fee(Arg_&& arg, Args_... args);
  std::string* mutable_fee();
  PROTOBUF_NODISCARD std::string* release_fee();
  void set_allocated_fee(std::string* value);

  private:
  const std::string& _internal_fee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fee(
      const std::string& value);
  std::string* _internal_mutable_fee();

  public:
  // string wallet_id = 9;
  void clear_wallet_id() ;
  const std::string& wallet_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wallet_id(Arg_&& arg, Args_... args);
  std::string* mutable_wallet_id();
  PROTOBUF_NODISCARD std::string* release_wallet_id();
  void set_allocated_wallet_id(std::string* value);

  private:
  const std::string& _internal_wallet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_id(
      const std::string& value);
  std::string* _internal_mutable_wallet_id();

  public:
  // string compliance_note = 10;
  void clear_compliance_note() ;
  const std::string& compliance_note() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compliance_note(Arg_&& arg, Args_... args);
  std::string* mutable_compliance_note();
  PROTOBUF_NODISCARD std::string* release_compliance_note();
  void set_allocated_compliance_note(std::string* value);

  private:
  const std::string& _internal_compliance_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compliance_note(
      const std::string& value);
  std::string* _internal_mutable_compliance_note();

  public:
  // uint64 amount = 4;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // .seigr.crosschain.TransactionType type = 6;
  void clear_type() ;
  ::seigr::crosschain::TransactionType type() const;
  void set_type(::seigr::crosschain::TransactionType value);

  private:
  ::seigr::crosschain::TransactionType _internal_type() const;
  void _internal_set_type(::seigr::crosschain::TransactionType value);

  public:
  // .seigr.crosschain.CrossChainStatus status = 7;
  void clear_status() ;
  ::seigr::crosschain::CrossChainStatus status() const;
  void set_status(::seigr::crosschain::CrossChainStatus value);

  private:
  ::seigr::crosschain::CrossChainStatus _internal_status() const;
  void _internal_set_status(::seigr::crosschain::CrossChainStatus value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.CrossChainTransaction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      123, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CrossChainTransaction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr from_chain_;
    ::google::protobuf::internal::ArenaStringPtr to_chain_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr fee_;
    ::google::protobuf::internal::ArenaStringPtr wallet_id_;
    ::google::protobuf::internal::ArenaStringPtr compliance_note_;
    ::uint64_t amount_;
    int type_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class CrossChainToken_TokenMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CrossChainToken_TokenMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrossChainToken_TokenMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CrossChainToken_TokenMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CrossChainToken_TokenMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CrossChainToken_TokenMetadataEntry_DoNotUse*>(
        &_CrossChainToken_TokenMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class WrapTokenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.WrapTokenRequest) */ {
 public:
  inline WrapTokenRequest() : WrapTokenRequest(nullptr) {}
  ~WrapTokenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WrapTokenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WrapTokenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WrapTokenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WrapTokenRequest(const WrapTokenRequest& from) : WrapTokenRequest(nullptr, from) {}
  inline WrapTokenRequest(WrapTokenRequest&& from) noexcept
      : WrapTokenRequest(nullptr, std::move(from)) {}
  inline WrapTokenRequest& operator=(const WrapTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapTokenRequest& operator=(WrapTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrapTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrapTokenRequest* internal_default_instance() {
    return reinterpret_cast<const WrapTokenRequest*>(
        &_WrapTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(WrapTokenRequest& a, WrapTokenRequest& b) { a.Swap(&b); }
  inline void Swap(WrapTokenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrapTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WrapTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WrapTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WrapTokenRequest& from) { WrapTokenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WrapTokenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.WrapTokenRequest"; }

 protected:
  explicit WrapTokenRequest(::google::protobuf::Arena* arena);
  WrapTokenRequest(::google::protobuf::Arena* arena, const WrapTokenRequest& from);
  WrapTokenRequest(::google::protobuf::Arena* arena, WrapTokenRequest&& from) noexcept
      : WrapTokenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWrapMetadataFieldNumber = 5,
    kChainNameFieldNumber = 1,
    kDestinationChainFieldNumber = 3,
    kDestinationWalletIdFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // map<string, string> wrap_metadata = 5;
  int wrap_metadata_size() const;
  private:
  int _internal_wrap_metadata_size() const;

  public:
  void clear_wrap_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& wrap_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_wrap_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_wrap_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_wrap_metadata();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string destination_chain = 3;
  void clear_destination_chain() ;
  const std::string& destination_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_chain(Arg_&& arg, Args_... args);
  std::string* mutable_destination_chain();
  PROTOBUF_NODISCARD std::string* release_destination_chain();
  void set_allocated_destination_chain(std::string* value);

  private:
  const std::string& _internal_destination_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_chain(
      const std::string& value);
  std::string* _internal_mutable_destination_chain();

  public:
  // string destination_wallet_id = 4;
  void clear_destination_wallet_id() ;
  const std::string& destination_wallet_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_wallet_id(Arg_&& arg, Args_... args);
  std::string* mutable_destination_wallet_id();
  PROTOBUF_NODISCARD std::string* release_destination_wallet_id();
  void set_allocated_destination_wallet_id(std::string* value);

  private:
  const std::string& _internal_destination_wallet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_wallet_id(
      const std::string& value);
  std::string* _internal_mutable_destination_wallet_id();

  public:
  // uint64 amount = 2;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.WrapTokenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WrapTokenRequest& from_msg);
    ::google::protobuf::internal::MapField<WrapTokenRequest_WrapMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        wrap_metadata_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr destination_chain_;
    ::google::protobuf::internal::ArenaStringPtr destination_wallet_id_;
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class UpdateCrossChainStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.UpdateCrossChainStatusRequest) */ {
 public:
  inline UpdateCrossChainStatusRequest() : UpdateCrossChainStatusRequest(nullptr) {}
  ~UpdateCrossChainStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateCrossChainStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateCrossChainStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateCrossChainStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateCrossChainStatusRequest(const UpdateCrossChainStatusRequest& from) : UpdateCrossChainStatusRequest(nullptr, from) {}
  inline UpdateCrossChainStatusRequest(UpdateCrossChainStatusRequest&& from) noexcept
      : UpdateCrossChainStatusRequest(nullptr, std::move(from)) {}
  inline UpdateCrossChainStatusRequest& operator=(const UpdateCrossChainStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCrossChainStatusRequest& operator=(UpdateCrossChainStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCrossChainStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCrossChainStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCrossChainStatusRequest*>(
        &_UpdateCrossChainStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(UpdateCrossChainStatusRequest& a, UpdateCrossChainStatusRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateCrossChainStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCrossChainStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCrossChainStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateCrossChainStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateCrossChainStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateCrossChainStatusRequest& from) { UpdateCrossChainStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateCrossChainStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.UpdateCrossChainStatusRequest"; }

 protected:
  explicit UpdateCrossChainStatusRequest(::google::protobuf::Arena* arena);
  UpdateCrossChainStatusRequest(::google::protobuf::Arena* arena, const UpdateCrossChainStatusRequest& from);
  UpdateCrossChainStatusRequest(::google::protobuf::Arena* arena, UpdateCrossChainStatusRequest&& from) noexcept
      : UpdateCrossChainStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdateMetadataFieldNumber = 5,
    kChainNameFieldNumber = 1,
    kStatusReasonFieldNumber = 3,
    kNewStatusFieldNumber = 2,
    kRetryCountFieldNumber = 4,
  };
  // map<string, string> update_metadata = 5;
  int update_metadata_size() const;
  private:
  int _internal_update_metadata_size() const;

  public:
  void clear_update_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& update_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_update_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_update_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_update_metadata();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string status_reason = 3;
  void clear_status_reason() ;
  const std::string& status_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_reason(Arg_&& arg, Args_... args);
  std::string* mutable_status_reason();
  PROTOBUF_NODISCARD std::string* release_status_reason();
  void set_allocated_status_reason(std::string* value);

  private:
  const std::string& _internal_status_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_reason(
      const std::string& value);
  std::string* _internal_mutable_status_reason();

  public:
  // .seigr.crosschain.CrossChainStatus new_status = 2;
  void clear_new_status() ;
  ::seigr::crosschain::CrossChainStatus new_status() const;
  void set_new_status(::seigr::crosschain::CrossChainStatus value);

  private:
  ::seigr::crosschain::CrossChainStatus _internal_new_status() const;
  void _internal_set_new_status(::seigr::crosschain::CrossChainStatus value);

  public:
  // int32 retry_count = 4;
  void clear_retry_count() ;
  ::int32_t retry_count() const;
  void set_retry_count(::int32_t value);

  private:
  ::int32_t _internal_retry_count() const;
  void _internal_set_retry_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.UpdateCrossChainStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateCrossChainStatusRequest& from_msg);
    ::google::protobuf::internal::MapField<UpdateCrossChainStatusRequest_UpdateMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        update_metadata_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr status_reason_;
    int new_status_;
    ::int32_t retry_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class UnwrapTokenRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.UnwrapTokenRequest) */ {
 public:
  inline UnwrapTokenRequest() : UnwrapTokenRequest(nullptr) {}
  ~UnwrapTokenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnwrapTokenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnwrapTokenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnwrapTokenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnwrapTokenRequest(const UnwrapTokenRequest& from) : UnwrapTokenRequest(nullptr, from) {}
  inline UnwrapTokenRequest(UnwrapTokenRequest&& from) noexcept
      : UnwrapTokenRequest(nullptr, std::move(from)) {}
  inline UnwrapTokenRequest& operator=(const UnwrapTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnwrapTokenRequest& operator=(UnwrapTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnwrapTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnwrapTokenRequest* internal_default_instance() {
    return reinterpret_cast<const UnwrapTokenRequest*>(
        &_UnwrapTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(UnwrapTokenRequest& a, UnwrapTokenRequest& b) { a.Swap(&b); }
  inline void Swap(UnwrapTokenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnwrapTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnwrapTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UnwrapTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnwrapTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UnwrapTokenRequest& from) { UnwrapTokenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UnwrapTokenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.UnwrapTokenRequest"; }

 protected:
  explicit UnwrapTokenRequest(::google::protobuf::Arena* arena);
  UnwrapTokenRequest(::google::protobuf::Arena* arena, const UnwrapTokenRequest& from);
  UnwrapTokenRequest(::google::protobuf::Arena* arena, UnwrapTokenRequest&& from) noexcept
      : UnwrapTokenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUnwrapMetadataFieldNumber = 5,
    kChainNameFieldNumber = 1,
    kDestinationChainFieldNumber = 3,
    kDestinationWalletIdFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // map<string, string> unwrap_metadata = 5;
  int unwrap_metadata_size() const;
  private:
  int _internal_unwrap_metadata_size() const;

  public:
  void clear_unwrap_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& unwrap_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_unwrap_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_unwrap_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_unwrap_metadata();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string destination_chain = 3;
  void clear_destination_chain() ;
  const std::string& destination_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_chain(Arg_&& arg, Args_... args);
  std::string* mutable_destination_chain();
  PROTOBUF_NODISCARD std::string* release_destination_chain();
  void set_allocated_destination_chain(std::string* value);

  private:
  const std::string& _internal_destination_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_chain(
      const std::string& value);
  std::string* _internal_mutable_destination_chain();

  public:
  // string destination_wallet_id = 4;
  void clear_destination_wallet_id() ;
  const std::string& destination_wallet_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_wallet_id(Arg_&& arg, Args_... args);
  std::string* mutable_destination_wallet_id();
  PROTOBUF_NODISCARD std::string* release_destination_wallet_id();
  void set_allocated_destination_wallet_id(std::string* value);

  private:
  const std::string& _internal_destination_wallet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_wallet_id(
      const std::string& value);
  std::string* _internal_mutable_destination_wallet_id();

  public:
  // uint64 amount = 2;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.UnwrapTokenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      107, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnwrapTokenRequest& from_msg);
    ::google::protobuf::internal::MapField<UnwrapTokenRequest_UnwrapMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        unwrap_metadata_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr destination_chain_;
    ::google::protobuf::internal::ArenaStringPtr destination_wallet_id_;
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class SyncGovernanceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.SyncGovernanceRequest) */ {
 public:
  inline SyncGovernanceRequest() : SyncGovernanceRequest(nullptr) {}
  ~SyncGovernanceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SyncGovernanceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SyncGovernanceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncGovernanceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncGovernanceRequest(const SyncGovernanceRequest& from) : SyncGovernanceRequest(nullptr, from) {}
  inline SyncGovernanceRequest(SyncGovernanceRequest&& from) noexcept
      : SyncGovernanceRequest(nullptr, std::move(from)) {}
  inline SyncGovernanceRequest& operator=(const SyncGovernanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGovernanceRequest& operator=(SyncGovernanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGovernanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGovernanceRequest* internal_default_instance() {
    return reinterpret_cast<const SyncGovernanceRequest*>(
        &_SyncGovernanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SyncGovernanceRequest& a, SyncGovernanceRequest& b) { a.Swap(&b); }
  inline void Swap(SyncGovernanceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGovernanceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGovernanceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SyncGovernanceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncGovernanceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncGovernanceRequest& from) { SyncGovernanceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SyncGovernanceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.SyncGovernanceRequest"; }

 protected:
  explicit SyncGovernanceRequest(::google::protobuf::Arena* arena);
  SyncGovernanceRequest(::google::protobuf::Arena* arena, const SyncGovernanceRequest& from);
  SyncGovernanceRequest(::google::protobuf::Arena* arena, SyncGovernanceRequest&& from) noexcept
      : SyncGovernanceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSyncMetadataFieldNumber = 2,
    kChainNameFieldNumber = 1,
  };
  // map<string, string> sync_metadata = 2;
  int sync_metadata_size() const;
  private:
  int _internal_sync_metadata_size() const;

  public:
  void clear_sync_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& sync_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_sync_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_sync_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_sync_metadata();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.SyncGovernanceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SyncGovernanceRequest& from_msg);
    ::google::protobuf::internal::MapField<SyncGovernanceRequest_SyncMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        sync_metadata_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class GetCrossChainTransactionHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.GetCrossChainTransactionHistoryResponse) */ {
 public:
  inline GetCrossChainTransactionHistoryResponse() : GetCrossChainTransactionHistoryResponse(nullptr) {}
  ~GetCrossChainTransactionHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetCrossChainTransactionHistoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetCrossChainTransactionHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetCrossChainTransactionHistoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetCrossChainTransactionHistoryResponse(const GetCrossChainTransactionHistoryResponse& from) : GetCrossChainTransactionHistoryResponse(nullptr, from) {}
  inline GetCrossChainTransactionHistoryResponse(GetCrossChainTransactionHistoryResponse&& from) noexcept
      : GetCrossChainTransactionHistoryResponse(nullptr, std::move(from)) {}
  inline GetCrossChainTransactionHistoryResponse& operator=(const GetCrossChainTransactionHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCrossChainTransactionHistoryResponse& operator=(GetCrossChainTransactionHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCrossChainTransactionHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCrossChainTransactionHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetCrossChainTransactionHistoryResponse*>(
        &_GetCrossChainTransactionHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetCrossChainTransactionHistoryResponse& a, GetCrossChainTransactionHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(GetCrossChainTransactionHistoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCrossChainTransactionHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCrossChainTransactionHistoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetCrossChainTransactionHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCrossChainTransactionHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetCrossChainTransactionHistoryResponse& from) { GetCrossChainTransactionHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetCrossChainTransactionHistoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.GetCrossChainTransactionHistoryResponse"; }

 protected:
  explicit GetCrossChainTransactionHistoryResponse(::google::protobuf::Arena* arena);
  GetCrossChainTransactionHistoryResponse(::google::protobuf::Arena* arena, const GetCrossChainTransactionHistoryResponse& from);
  GetCrossChainTransactionHistoryResponse(::google::protobuf::Arena* arena, GetCrossChainTransactionHistoryResponse&& from) noexcept
      : GetCrossChainTransactionHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransactionsFieldNumber = 2,
    kChainNameFieldNumber = 1,
  };
  // repeated .seigr.crosschain.CrossChainTransaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;

  public:
  void clear_transactions() ;
  ::seigr::crosschain::CrossChainTransaction* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>* mutable_transactions();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>& _internal_transactions() const;
  ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>* _internal_mutable_transactions();
  public:
  const ::seigr::crosschain::CrossChainTransaction& transactions(int index) const;
  ::seigr::crosschain::CrossChainTransaction* add_transactions();
  const ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>& transactions() const;
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.GetCrossChainTransactionHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetCrossChainTransactionHistoryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::crosschain::CrossChainTransaction > transactions_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};
// -------------------------------------------------------------------

class CrossChainToken final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.crosschain.CrossChainToken) */ {
 public:
  inline CrossChainToken() : CrossChainToken(nullptr) {}
  ~CrossChainToken() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CrossChainToken* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CrossChainToken));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrossChainToken(
      ::google::protobuf::internal::ConstantInitialized);

  inline CrossChainToken(const CrossChainToken& from) : CrossChainToken(nullptr, from) {}
  inline CrossChainToken(CrossChainToken&& from) noexcept
      : CrossChainToken(nullptr, std::move(from)) {}
  inline CrossChainToken& operator=(const CrossChainToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossChainToken& operator=(CrossChainToken&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossChainToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossChainToken* internal_default_instance() {
    return reinterpret_cast<const CrossChainToken*>(
        &_CrossChainToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CrossChainToken& a, CrossChainToken& b) { a.Swap(&b); }
  inline void Swap(CrossChainToken* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossChainToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossChainToken* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CrossChainToken>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CrossChainToken& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CrossChainToken& from) { CrossChainToken::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CrossChainToken* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.crosschain.CrossChainToken"; }

 protected:
  explicit CrossChainToken(::google::protobuf::Arena* arena);
  CrossChainToken(::google::protobuf::Arena* arena, const CrossChainToken& from);
  CrossChainToken(::google::protobuf::Arena* arena, CrossChainToken&& from) noexcept
      : CrossChainToken(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenMetadataFieldNumber = 9,
    kChainNameFieldNumber = 1,
    kWrappedTokenIdFieldNumber = 2,
    kOriginatingChainFieldNumber = 5,
    kDestinationChainFieldNumber = 6,
    kDestinationWalletIdFieldNumber = 8,
    kAmountFieldNumber = 3,
    kStatusFieldNumber = 4,
    kComplianceLevelFieldNumber = 7,
  };
  // map<string, string> token_metadata = 9;
  int token_metadata_size() const;
  private:
  int _internal_token_metadata_size() const;

  public:
  void clear_token_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& token_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_token_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_token_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_token_metadata();

  public:
  // string chain_name = 1;
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string wrapped_token_id = 2;
  void clear_wrapped_token_id() ;
  const std::string& wrapped_token_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wrapped_token_id(Arg_&& arg, Args_... args);
  std::string* mutable_wrapped_token_id();
  PROTOBUF_NODISCARD std::string* release_wrapped_token_id();
  void set_allocated_wrapped_token_id(std::string* value);

  private:
  const std::string& _internal_wrapped_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wrapped_token_id(
      const std::string& value);
  std::string* _internal_mutable_wrapped_token_id();

  public:
  // string originating_chain = 5;
  void clear_originating_chain() ;
  const std::string& originating_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originating_chain(Arg_&& arg, Args_... args);
  std::string* mutable_originating_chain();
  PROTOBUF_NODISCARD std::string* release_originating_chain();
  void set_allocated_originating_chain(std::string* value);

  private:
  const std::string& _internal_originating_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originating_chain(
      const std::string& value);
  std::string* _internal_mutable_originating_chain();

  public:
  // string destination_chain = 6;
  void clear_destination_chain() ;
  const std::string& destination_chain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_chain(Arg_&& arg, Args_... args);
  std::string* mutable_destination_chain();
  PROTOBUF_NODISCARD std::string* release_destination_chain();
  void set_allocated_destination_chain(std::string* value);

  private:
  const std::string& _internal_destination_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_chain(
      const std::string& value);
  std::string* _internal_mutable_destination_chain();

  public:
  // string destination_wallet_id = 8;
  void clear_destination_wallet_id() ;
  const std::string& destination_wallet_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_wallet_id(Arg_&& arg, Args_... args);
  std::string* mutable_destination_wallet_id();
  PROTOBUF_NODISCARD std::string* release_destination_wallet_id();
  void set_allocated_destination_wallet_id(std::string* value);

  private:
  const std::string& _internal_destination_wallet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_wallet_id(
      const std::string& value);
  std::string* _internal_mutable_destination_wallet_id();

  public:
  // uint64 amount = 3;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // .seigr.crosschain.CrossChainStatus status = 4;
  void clear_status() ;
  ::seigr::crosschain::CrossChainStatus status() const;
  void set_status(::seigr::crosschain::CrossChainStatus value);

  private:
  ::seigr::crosschain::CrossChainStatus _internal_status() const;
  void _internal_set_status(::seigr::crosschain::CrossChainStatus value);

  public:
  // .seigr.crosschain.ComplianceLevel compliance_level = 7;
  void clear_compliance_level() ;
  ::seigr::crosschain::ComplianceLevel compliance_level() const;
  void set_compliance_level(::seigr::crosschain::ComplianceLevel value);

  private:
  ::seigr::crosschain::ComplianceLevel _internal_compliance_level() const;
  void _internal_set_compliance_level(::seigr::crosschain::ComplianceLevel value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.crosschain.CrossChainToken)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 1,
      144, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CrossChainToken& from_msg);
    ::google::protobuf::internal::MapField<CrossChainToken_TokenMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        token_metadata_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr wrapped_token_id_;
    ::google::protobuf::internal::ArenaStringPtr originating_chain_;
    ::google::protobuf::internal::ArenaStringPtr destination_chain_;
    ::google::protobuf::internal::ArenaStringPtr destination_wallet_id_;
    ::uint64_t amount_;
    int status_;
    int compliance_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cross_5fchain_5foperations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CrossChainToken

// string chain_name = 1;
inline void CrossChainToken::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& CrossChainToken::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainToken::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.chain_name)
}
inline std::string* CrossChainToken::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainToken.chain_name)
  return _s;
}
inline const std::string& CrossChainToken::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void CrossChainToken::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* CrossChainToken::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* CrossChainToken::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainToken.chain_name)
  return _impl_.chain_name_.Release();
}
inline void CrossChainToken::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainToken.chain_name)
}

// string wrapped_token_id = 2;
inline void CrossChainToken::clear_wrapped_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wrapped_token_id_.ClearToEmpty();
}
inline const std::string& CrossChainToken::wrapped_token_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.wrapped_token_id)
  return _internal_wrapped_token_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainToken::set_wrapped_token_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wrapped_token_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.wrapped_token_id)
}
inline std::string* CrossChainToken::mutable_wrapped_token_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_wrapped_token_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainToken.wrapped_token_id)
  return _s;
}
inline const std::string& CrossChainToken::_internal_wrapped_token_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wrapped_token_id_.Get();
}
inline void CrossChainToken::_internal_set_wrapped_token_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wrapped_token_id_.Set(value, GetArena());
}
inline std::string* CrossChainToken::_internal_mutable_wrapped_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.wrapped_token_id_.Mutable( GetArena());
}
inline std::string* CrossChainToken::release_wrapped_token_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainToken.wrapped_token_id)
  return _impl_.wrapped_token_id_.Release();
}
inline void CrossChainToken::set_allocated_wrapped_token_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wrapped_token_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.wrapped_token_id_.IsDefault()) {
    _impl_.wrapped_token_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainToken.wrapped_token_id)
}

// uint64 amount = 3;
inline void CrossChainToken::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t CrossChainToken::amount() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.amount)
  return _internal_amount();
}
inline void CrossChainToken::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.amount)
}
inline ::uint64_t CrossChainToken::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void CrossChainToken::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// .seigr.crosschain.CrossChainStatus status = 4;
inline void CrossChainToken::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::crosschain::CrossChainStatus CrossChainToken::status() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.status)
  return _internal_status();
}
inline void CrossChainToken::set_status(::seigr::crosschain::CrossChainStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.status)
}
inline ::seigr::crosschain::CrossChainStatus CrossChainToken::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::CrossChainStatus>(_impl_.status_);
}
inline void CrossChainToken::_internal_set_status(::seigr::crosschain::CrossChainStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string originating_chain = 5;
inline void CrossChainToken::clear_originating_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_chain_.ClearToEmpty();
}
inline const std::string& CrossChainToken::originating_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.originating_chain)
  return _internal_originating_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainToken::set_originating_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.originating_chain)
}
inline std::string* CrossChainToken::mutable_originating_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originating_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainToken.originating_chain)
  return _s;
}
inline const std::string& CrossChainToken::_internal_originating_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.originating_chain_.Get();
}
inline void CrossChainToken::_internal_set_originating_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_chain_.Set(value, GetArena());
}
inline std::string* CrossChainToken::_internal_mutable_originating_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.originating_chain_.Mutable( GetArena());
}
inline std::string* CrossChainToken::release_originating_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainToken.originating_chain)
  return _impl_.originating_chain_.Release();
}
inline void CrossChainToken::set_allocated_originating_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.originating_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.originating_chain_.IsDefault()) {
    _impl_.originating_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainToken.originating_chain)
}

// string destination_chain = 6;
inline void CrossChainToken::clear_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.ClearToEmpty();
}
inline const std::string& CrossChainToken::destination_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.destination_chain)
  return _internal_destination_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainToken::set_destination_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.destination_chain)
}
inline std::string* CrossChainToken::mutable_destination_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainToken.destination_chain)
  return _s;
}
inline const std::string& CrossChainToken::_internal_destination_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_chain_.Get();
}
inline void CrossChainToken::_internal_set_destination_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(value, GetArena());
}
inline std::string* CrossChainToken::_internal_mutable_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_chain_.Mutable( GetArena());
}
inline std::string* CrossChainToken::release_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainToken.destination_chain)
  return _impl_.destination_chain_.Release();
}
inline void CrossChainToken::set_allocated_destination_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_chain_.IsDefault()) {
    _impl_.destination_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainToken.destination_chain)
}

// .seigr.crosschain.ComplianceLevel compliance_level = 7;
inline void CrossChainToken::clear_compliance_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_level_ = 0;
}
inline ::seigr::crosschain::ComplianceLevel CrossChainToken::compliance_level() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.compliance_level)
  return _internal_compliance_level();
}
inline void CrossChainToken::set_compliance_level(::seigr::crosschain::ComplianceLevel value) {
  _internal_set_compliance_level(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.compliance_level)
}
inline ::seigr::crosschain::ComplianceLevel CrossChainToken::_internal_compliance_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::ComplianceLevel>(_impl_.compliance_level_);
}
inline void CrossChainToken::_internal_set_compliance_level(::seigr::crosschain::ComplianceLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_level_ = value;
}

// string destination_wallet_id = 8;
inline void CrossChainToken::clear_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.ClearToEmpty();
}
inline const std::string& CrossChainToken::destination_wallet_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainToken.destination_wallet_id)
  return _internal_destination_wallet_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainToken::set_destination_wallet_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainToken.destination_wallet_id)
}
inline std::string* CrossChainToken::mutable_destination_wallet_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_wallet_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainToken.destination_wallet_id)
  return _s;
}
inline const std::string& CrossChainToken::_internal_destination_wallet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_wallet_id_.Get();
}
inline void CrossChainToken::_internal_set_destination_wallet_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(value, GetArena());
}
inline std::string* CrossChainToken::_internal_mutable_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_wallet_id_.Mutable( GetArena());
}
inline std::string* CrossChainToken::release_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainToken.destination_wallet_id)
  return _impl_.destination_wallet_id_.Release();
}
inline void CrossChainToken::set_allocated_destination_wallet_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_wallet_id_.IsDefault()) {
    _impl_.destination_wallet_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainToken.destination_wallet_id)
}

// map<string, string> token_metadata = 9;
inline int CrossChainToken::_internal_token_metadata_size() const {
  return _internal_token_metadata().size();
}
inline int CrossChainToken::token_metadata_size() const {
  return _internal_token_metadata_size();
}
inline void CrossChainToken::clear_token_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CrossChainToken::_internal_token_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CrossChainToken::token_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.crosschain.CrossChainToken.token_metadata)
  return _internal_token_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* CrossChainToken::_internal_mutable_token_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CrossChainToken::mutable_token_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.crosschain.CrossChainToken.token_metadata)
  return _internal_mutable_token_metadata();
}

// -------------------------------------------------------------------

// CrossChainTransaction

// string transaction_id = 1;
inline void CrossChainTransaction::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.transaction_id)
}
inline std::string* CrossChainTransaction::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.transaction_id)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_.Get();
}
inline void CrossChainTransaction::_internal_set_transaction_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void CrossChainTransaction::set_allocated_transaction_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.transaction_id)
}

// string from_chain = 2;
inline void CrossChainTransaction::clear_from_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_chain_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::from_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.from_chain)
  return _internal_from_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_from_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.from_chain)
}
inline std::string* CrossChainTransaction::mutable_from_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.from_chain)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_from_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_chain_.Get();
}
inline void CrossChainTransaction::_internal_set_from_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_chain_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_from_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.from_chain_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_from_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.from_chain)
  return _impl_.from_chain_.Release();
}
inline void CrossChainTransaction::set_allocated_from_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.from_chain_.IsDefault()) {
    _impl_.from_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.from_chain)
}

// string to_chain = 3;
inline void CrossChainTransaction::clear_to_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_chain_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::to_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.to_chain)
  return _internal_to_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_to_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.to_chain)
}
inline std::string* CrossChainTransaction::mutable_to_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.to_chain)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_to_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_chain_.Get();
}
inline void CrossChainTransaction::_internal_set_to_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_chain_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_to_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.to_chain_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_to_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.to_chain)
  return _impl_.to_chain_.Release();
}
inline void CrossChainTransaction::set_allocated_to_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_chain_.IsDefault()) {
    _impl_.to_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.to_chain)
}

// uint64 amount = 4;
inline void CrossChainTransaction::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t CrossChainTransaction::amount() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.amount)
  return _internal_amount();
}
inline void CrossChainTransaction::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.amount)
}
inline ::uint64_t CrossChainTransaction::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void CrossChainTransaction::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string timestamp = 5;
inline void CrossChainTransaction::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.timestamp)
}
inline std::string* CrossChainTransaction::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.timestamp)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void CrossChainTransaction::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.timestamp)
  return _impl_.timestamp_.Release();
}
inline void CrossChainTransaction::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.timestamp)
}

// .seigr.crosschain.TransactionType type = 6;
inline void CrossChainTransaction::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::seigr::crosschain::TransactionType CrossChainTransaction::type() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.type)
  return _internal_type();
}
inline void CrossChainTransaction::set_type(::seigr::crosschain::TransactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.type)
}
inline ::seigr::crosschain::TransactionType CrossChainTransaction::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::TransactionType>(_impl_.type_);
}
inline void CrossChainTransaction::_internal_set_type(::seigr::crosschain::TransactionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .seigr.crosschain.CrossChainStatus status = 7;
inline void CrossChainTransaction::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::crosschain::CrossChainStatus CrossChainTransaction::status() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.status)
  return _internal_status();
}
inline void CrossChainTransaction::set_status(::seigr::crosschain::CrossChainStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.status)
}
inline ::seigr::crosschain::CrossChainStatus CrossChainTransaction::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::CrossChainStatus>(_impl_.status_);
}
inline void CrossChainTransaction::_internal_set_status(::seigr::crosschain::CrossChainStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string fee = 8;
inline void CrossChainTransaction::clear_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::fee() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.fee)
  return _internal_fee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_fee(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.fee)
}
inline std::string* CrossChainTransaction::mutable_fee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.fee)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_fee() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fee_.Get();
}
inline void CrossChainTransaction::_internal_set_fee(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fee_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.fee)
  return _impl_.fee_.Release();
}
inline void CrossChainTransaction::set_allocated_fee(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fee_.IsDefault()) {
    _impl_.fee_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.fee)
}

// string wallet_id = 9;
inline void CrossChainTransaction::clear_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wallet_id_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::wallet_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.wallet_id)
  return _internal_wallet_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_wallet_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wallet_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.wallet_id)
}
inline std::string* CrossChainTransaction::mutable_wallet_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_wallet_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.wallet_id)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_wallet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wallet_id_.Get();
}
inline void CrossChainTransaction::_internal_set_wallet_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wallet_id_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.wallet_id_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.wallet_id)
  return _impl_.wallet_id_.Release();
}
inline void CrossChainTransaction::set_allocated_wallet_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wallet_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.wallet_id_.IsDefault()) {
    _impl_.wallet_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.wallet_id)
}

// string compliance_note = 10;
inline void CrossChainTransaction::clear_compliance_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_note_.ClearToEmpty();
}
inline const std::string& CrossChainTransaction::compliance_note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.CrossChainTransaction.compliance_note)
  return _internal_compliance_note();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CrossChainTransaction::set_compliance_note(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.CrossChainTransaction.compliance_note)
}
inline std::string* CrossChainTransaction::mutable_compliance_note() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_compliance_note();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.CrossChainTransaction.compliance_note)
  return _s;
}
inline const std::string& CrossChainTransaction::_internal_compliance_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compliance_note_.Get();
}
inline void CrossChainTransaction::_internal_set_compliance_note(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_note_.Set(value, GetArena());
}
inline std::string* CrossChainTransaction::_internal_mutable_compliance_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.compliance_note_.Mutable( GetArena());
}
inline std::string* CrossChainTransaction::release_compliance_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.CrossChainTransaction.compliance_note)
  return _impl_.compliance_note_.Release();
}
inline void CrossChainTransaction::set_allocated_compliance_note(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compliance_note_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.compliance_note_.IsDefault()) {
    _impl_.compliance_note_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.CrossChainTransaction.compliance_note)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WrapTokenRequest

// string chain_name = 1;
inline void WrapTokenRequest::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& WrapTokenRequest::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenRequest.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenRequest::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenRequest.chain_name)
}
inline std::string* WrapTokenRequest::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenRequest.chain_name)
  return _s;
}
inline const std::string& WrapTokenRequest::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void WrapTokenRequest::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* WrapTokenRequest::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* WrapTokenRequest::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenRequest.chain_name)
  return _impl_.chain_name_.Release();
}
inline void WrapTokenRequest::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenRequest.chain_name)
}

// uint64 amount = 2;
inline void WrapTokenRequest::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t WrapTokenRequest::amount() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenRequest.amount)
  return _internal_amount();
}
inline void WrapTokenRequest::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenRequest.amount)
}
inline ::uint64_t WrapTokenRequest::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void WrapTokenRequest::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string destination_chain = 3;
inline void WrapTokenRequest::clear_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.ClearToEmpty();
}
inline const std::string& WrapTokenRequest::destination_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenRequest.destination_chain)
  return _internal_destination_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenRequest::set_destination_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenRequest.destination_chain)
}
inline std::string* WrapTokenRequest::mutable_destination_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenRequest.destination_chain)
  return _s;
}
inline const std::string& WrapTokenRequest::_internal_destination_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_chain_.Get();
}
inline void WrapTokenRequest::_internal_set_destination_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(value, GetArena());
}
inline std::string* WrapTokenRequest::_internal_mutable_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_chain_.Mutable( GetArena());
}
inline std::string* WrapTokenRequest::release_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenRequest.destination_chain)
  return _impl_.destination_chain_.Release();
}
inline void WrapTokenRequest::set_allocated_destination_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_chain_.IsDefault()) {
    _impl_.destination_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenRequest.destination_chain)
}

// string destination_wallet_id = 4;
inline void WrapTokenRequest::clear_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.ClearToEmpty();
}
inline const std::string& WrapTokenRequest::destination_wallet_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenRequest.destination_wallet_id)
  return _internal_destination_wallet_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenRequest::set_destination_wallet_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenRequest.destination_wallet_id)
}
inline std::string* WrapTokenRequest::mutable_destination_wallet_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_wallet_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenRequest.destination_wallet_id)
  return _s;
}
inline const std::string& WrapTokenRequest::_internal_destination_wallet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_wallet_id_.Get();
}
inline void WrapTokenRequest::_internal_set_destination_wallet_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(value, GetArena());
}
inline std::string* WrapTokenRequest::_internal_mutable_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_wallet_id_.Mutable( GetArena());
}
inline std::string* WrapTokenRequest::release_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenRequest.destination_wallet_id)
  return _impl_.destination_wallet_id_.Release();
}
inline void WrapTokenRequest::set_allocated_destination_wallet_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_wallet_id_.IsDefault()) {
    _impl_.destination_wallet_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenRequest.destination_wallet_id)
}

// map<string, string> wrap_metadata = 5;
inline int WrapTokenRequest::_internal_wrap_metadata_size() const {
  return _internal_wrap_metadata().size();
}
inline int WrapTokenRequest::wrap_metadata_size() const {
  return _internal_wrap_metadata_size();
}
inline void WrapTokenRequest::clear_wrap_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wrap_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& WrapTokenRequest::_internal_wrap_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wrap_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& WrapTokenRequest::wrap_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.crosschain.WrapTokenRequest.wrap_metadata)
  return _internal_wrap_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* WrapTokenRequest::_internal_mutable_wrap_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.wrap_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* WrapTokenRequest::mutable_wrap_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.crosschain.WrapTokenRequest.wrap_metadata)
  return _internal_mutable_wrap_metadata();
}

// -------------------------------------------------------------------

// WrapTokenResponse

// bool success = 1;
inline void WrapTokenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool WrapTokenResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenResponse.success)
  return _internal_success();
}
inline void WrapTokenResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenResponse.success)
}
inline bool WrapTokenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void WrapTokenResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void WrapTokenResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& WrapTokenResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenResponse.message)
}
inline std::string* WrapTokenResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenResponse.message)
  return _s;
}
inline const std::string& WrapTokenResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void WrapTokenResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* WrapTokenResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* WrapTokenResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenResponse.message)
  return _impl_.message_.Release();
}
inline void WrapTokenResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenResponse.message)
}

// string transaction_id = 3;
inline void WrapTokenResponse::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& WrapTokenResponse::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenResponse.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenResponse::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenResponse.transaction_id)
}
inline std::string* WrapTokenResponse::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenResponse.transaction_id)
  return _s;
}
inline const std::string& WrapTokenResponse::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_.Get();
}
inline void WrapTokenResponse::_internal_set_transaction_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* WrapTokenResponse::_internal_mutable_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* WrapTokenResponse::release_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenResponse.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void WrapTokenResponse::set_allocated_transaction_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenResponse.transaction_id)
}

// string error_code = 4;
inline void WrapTokenResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& WrapTokenResponse::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.WrapTokenResponse.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrapTokenResponse::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.WrapTokenResponse.error_code)
}
inline std::string* WrapTokenResponse::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.WrapTokenResponse.error_code)
  return _s;
}
inline const std::string& WrapTokenResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void WrapTokenResponse::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* WrapTokenResponse::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* WrapTokenResponse::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.WrapTokenResponse.error_code)
  return _impl_.error_code_.Release();
}
inline void WrapTokenResponse::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.WrapTokenResponse.error_code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UnwrapTokenRequest

// string chain_name = 1;
inline void UnwrapTokenRequest::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& UnwrapTokenRequest::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenRequest.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenRequest::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenRequest.chain_name)
}
inline std::string* UnwrapTokenRequest::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenRequest.chain_name)
  return _s;
}
inline const std::string& UnwrapTokenRequest::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void UnwrapTokenRequest::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* UnwrapTokenRequest::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* UnwrapTokenRequest::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenRequest.chain_name)
  return _impl_.chain_name_.Release();
}
inline void UnwrapTokenRequest::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenRequest.chain_name)
}

// uint64 amount = 2;
inline void UnwrapTokenRequest::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t UnwrapTokenRequest::amount() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenRequest.amount)
  return _internal_amount();
}
inline void UnwrapTokenRequest::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenRequest.amount)
}
inline ::uint64_t UnwrapTokenRequest::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void UnwrapTokenRequest::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string destination_chain = 3;
inline void UnwrapTokenRequest::clear_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.ClearToEmpty();
}
inline const std::string& UnwrapTokenRequest::destination_chain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenRequest.destination_chain)
  return _internal_destination_chain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenRequest::set_destination_chain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenRequest.destination_chain)
}
inline std::string* UnwrapTokenRequest::mutable_destination_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_chain();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenRequest.destination_chain)
  return _s;
}
inline const std::string& UnwrapTokenRequest::_internal_destination_chain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_chain_.Get();
}
inline void UnwrapTokenRequest::_internal_set_destination_chain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.Set(value, GetArena());
}
inline std::string* UnwrapTokenRequest::_internal_mutable_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_chain_.Mutable( GetArena());
}
inline std::string* UnwrapTokenRequest::release_destination_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenRequest.destination_chain)
  return _impl_.destination_chain_.Release();
}
inline void UnwrapTokenRequest::set_allocated_destination_chain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_chain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_chain_.IsDefault()) {
    _impl_.destination_chain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenRequest.destination_chain)
}

// string destination_wallet_id = 4;
inline void UnwrapTokenRequest::clear_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.ClearToEmpty();
}
inline const std::string& UnwrapTokenRequest::destination_wallet_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenRequest.destination_wallet_id)
  return _internal_destination_wallet_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenRequest::set_destination_wallet_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenRequest.destination_wallet_id)
}
inline std::string* UnwrapTokenRequest::mutable_destination_wallet_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_wallet_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenRequest.destination_wallet_id)
  return _s;
}
inline const std::string& UnwrapTokenRequest::_internal_destination_wallet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_wallet_id_.Get();
}
inline void UnwrapTokenRequest::_internal_set_destination_wallet_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.Set(value, GetArena());
}
inline std::string* UnwrapTokenRequest::_internal_mutable_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_wallet_id_.Mutable( GetArena());
}
inline std::string* UnwrapTokenRequest::release_destination_wallet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenRequest.destination_wallet_id)
  return _impl_.destination_wallet_id_.Release();
}
inline void UnwrapTokenRequest::set_allocated_destination_wallet_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_wallet_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_wallet_id_.IsDefault()) {
    _impl_.destination_wallet_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenRequest.destination_wallet_id)
}

// map<string, string> unwrap_metadata = 5;
inline int UnwrapTokenRequest::_internal_unwrap_metadata_size() const {
  return _internal_unwrap_metadata().size();
}
inline int UnwrapTokenRequest::unwrap_metadata_size() const {
  return _internal_unwrap_metadata_size();
}
inline void UnwrapTokenRequest::clear_unwrap_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unwrap_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UnwrapTokenRequest::_internal_unwrap_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unwrap_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UnwrapTokenRequest::unwrap_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.crosschain.UnwrapTokenRequest.unwrap_metadata)
  return _internal_unwrap_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UnwrapTokenRequest::_internal_mutable_unwrap_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.unwrap_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UnwrapTokenRequest::mutable_unwrap_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.crosschain.UnwrapTokenRequest.unwrap_metadata)
  return _internal_mutable_unwrap_metadata();
}

// -------------------------------------------------------------------

// UnwrapTokenResponse

// bool success = 1;
inline void UnwrapTokenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UnwrapTokenResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenResponse.success)
  return _internal_success();
}
inline void UnwrapTokenResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenResponse.success)
}
inline bool UnwrapTokenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UnwrapTokenResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void UnwrapTokenResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UnwrapTokenResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenResponse.message)
}
inline std::string* UnwrapTokenResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenResponse.message)
  return _s;
}
inline const std::string& UnwrapTokenResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UnwrapTokenResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UnwrapTokenResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UnwrapTokenResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenResponse.message)
  return _impl_.message_.Release();
}
inline void UnwrapTokenResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenResponse.message)
}

// string transaction_id = 3;
inline void UnwrapTokenResponse::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& UnwrapTokenResponse::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenResponse.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenResponse::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenResponse.transaction_id)
}
inline std::string* UnwrapTokenResponse::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenResponse.transaction_id)
  return _s;
}
inline const std::string& UnwrapTokenResponse::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_.Get();
}
inline void UnwrapTokenResponse::_internal_set_transaction_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* UnwrapTokenResponse::_internal_mutable_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* UnwrapTokenResponse::release_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenResponse.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void UnwrapTokenResponse::set_allocated_transaction_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenResponse.transaction_id)
}

// string error_code = 4;
inline void UnwrapTokenResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& UnwrapTokenResponse::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UnwrapTokenResponse.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnwrapTokenResponse::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UnwrapTokenResponse.error_code)
}
inline std::string* UnwrapTokenResponse::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UnwrapTokenResponse.error_code)
  return _s;
}
inline const std::string& UnwrapTokenResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void UnwrapTokenResponse::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* UnwrapTokenResponse::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* UnwrapTokenResponse::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UnwrapTokenResponse.error_code)
  return _impl_.error_code_.Release();
}
inline void UnwrapTokenResponse::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UnwrapTokenResponse.error_code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SyncGovernanceRequest

// string chain_name = 1;
inline void SyncGovernanceRequest::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& SyncGovernanceRequest::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.SyncGovernanceRequest.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncGovernanceRequest::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.SyncGovernanceRequest.chain_name)
}
inline std::string* SyncGovernanceRequest::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.SyncGovernanceRequest.chain_name)
  return _s;
}
inline const std::string& SyncGovernanceRequest::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void SyncGovernanceRequest::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* SyncGovernanceRequest::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* SyncGovernanceRequest::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.SyncGovernanceRequest.chain_name)
  return _impl_.chain_name_.Release();
}
inline void SyncGovernanceRequest::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.SyncGovernanceRequest.chain_name)
}

// map<string, string> sync_metadata = 2;
inline int SyncGovernanceRequest::_internal_sync_metadata_size() const {
  return _internal_sync_metadata().size();
}
inline int SyncGovernanceRequest::sync_metadata_size() const {
  return _internal_sync_metadata_size();
}
inline void SyncGovernanceRequest::clear_sync_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sync_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SyncGovernanceRequest::_internal_sync_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sync_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SyncGovernanceRequest::sync_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.crosschain.SyncGovernanceRequest.sync_metadata)
  return _internal_sync_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* SyncGovernanceRequest::_internal_mutable_sync_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sync_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SyncGovernanceRequest::mutable_sync_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.crosschain.SyncGovernanceRequest.sync_metadata)
  return _internal_mutable_sync_metadata();
}

// -------------------------------------------------------------------

// SyncGovernanceResponse

// bool success = 1;
inline void SyncGovernanceResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SyncGovernanceResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.SyncGovernanceResponse.success)
  return _internal_success();
}
inline void SyncGovernanceResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.SyncGovernanceResponse.success)
}
inline bool SyncGovernanceResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SyncGovernanceResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void SyncGovernanceResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SyncGovernanceResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.SyncGovernanceResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncGovernanceResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.SyncGovernanceResponse.message)
}
inline std::string* SyncGovernanceResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.SyncGovernanceResponse.message)
  return _s;
}
inline const std::string& SyncGovernanceResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SyncGovernanceResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SyncGovernanceResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SyncGovernanceResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.SyncGovernanceResponse.message)
  return _impl_.message_.Release();
}
inline void SyncGovernanceResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.SyncGovernanceResponse.message)
}

// string transaction_id = 3;
inline void SyncGovernanceResponse::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& SyncGovernanceResponse::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.SyncGovernanceResponse.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncGovernanceResponse::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.SyncGovernanceResponse.transaction_id)
}
inline std::string* SyncGovernanceResponse::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.SyncGovernanceResponse.transaction_id)
  return _s;
}
inline const std::string& SyncGovernanceResponse::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_.Get();
}
inline void SyncGovernanceResponse::_internal_set_transaction_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* SyncGovernanceResponse::_internal_mutable_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* SyncGovernanceResponse::release_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.SyncGovernanceResponse.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void SyncGovernanceResponse::set_allocated_transaction_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.SyncGovernanceResponse.transaction_id)
}

// string error_code = 4;
inline void SyncGovernanceResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& SyncGovernanceResponse::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.SyncGovernanceResponse.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncGovernanceResponse::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.SyncGovernanceResponse.error_code)
}
inline std::string* SyncGovernanceResponse::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.SyncGovernanceResponse.error_code)
  return _s;
}
inline const std::string& SyncGovernanceResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void SyncGovernanceResponse::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* SyncGovernanceResponse::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* SyncGovernanceResponse::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.SyncGovernanceResponse.error_code)
  return _impl_.error_code_.Release();
}
inline void SyncGovernanceResponse::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.SyncGovernanceResponse.error_code)
}

// -------------------------------------------------------------------

// GetCrossChainTransactionHistoryRequest

// string chain_name = 1;
inline void GetCrossChainTransactionHistoryRequest::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& GetCrossChainTransactionHistoryRequest::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryRequest.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCrossChainTransactionHistoryRequest::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryRequest.chain_name)
}
inline std::string* GetCrossChainTransactionHistoryRequest::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.GetCrossChainTransactionHistoryRequest.chain_name)
  return _s;
}
inline const std::string& GetCrossChainTransactionHistoryRequest::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void GetCrossChainTransactionHistoryRequest::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.GetCrossChainTransactionHistoryRequest.chain_name)
  return _impl_.chain_name_.Release();
}
inline void GetCrossChainTransactionHistoryRequest::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.GetCrossChainTransactionHistoryRequest.chain_name)
}

// uint32 limit = 2;
inline void GetCrossChainTransactionHistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0u;
}
inline ::uint32_t GetCrossChainTransactionHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryRequest.limit)
  return _internal_limit();
}
inline void GetCrossChainTransactionHistoryRequest::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryRequest.limit)
}
inline ::uint32_t GetCrossChainTransactionHistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetCrossChainTransactionHistoryRequest::_internal_set_limit(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// repeated .seigr.crosschain.TransactionType filter_types = 3;
inline int GetCrossChainTransactionHistoryRequest::_internal_filter_types_size() const {
  return _internal_filter_types().size();
}
inline int GetCrossChainTransactionHistoryRequest::filter_types_size() const {
  return _internal_filter_types_size();
}
inline void GetCrossChainTransactionHistoryRequest::clear_filter_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filter_types_.Clear();
}
inline ::seigr::crosschain::TransactionType GetCrossChainTransactionHistoryRequest::filter_types(int index) const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryRequest.filter_types)
  return static_cast<::seigr::crosschain::TransactionType>(_internal_filter_types().Get(index));
}
inline void GetCrossChainTransactionHistoryRequest::set_filter_types(int index, ::seigr::crosschain::TransactionType value) {
  _internal_mutable_filter_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryRequest.filter_types)
}
inline void GetCrossChainTransactionHistoryRequest::add_filter_types(::seigr::crosschain::TransactionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filter_types()->Add(value);
  // @@protoc_insertion_point(field_add:seigr.crosschain.GetCrossChainTransactionHistoryRequest.filter_types)
}
inline const ::google::protobuf::RepeatedField<int>& GetCrossChainTransactionHistoryRequest::filter_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.crosschain.GetCrossChainTransactionHistoryRequest.filter_types)
  return _internal_filter_types();
}
inline ::google::protobuf::RepeatedField<int>* GetCrossChainTransactionHistoryRequest::mutable_filter_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.crosschain.GetCrossChainTransactionHistoryRequest.filter_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filter_types();
}
inline const ::google::protobuf::RepeatedField<int>& GetCrossChainTransactionHistoryRequest::_internal_filter_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filter_types_;
}
inline ::google::protobuf::RepeatedField<int>* GetCrossChainTransactionHistoryRequest::_internal_mutable_filter_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filter_types_;
}

// string date_range_start = 4;
inline void GetCrossChainTransactionHistoryRequest::clear_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.ClearToEmpty();
}
inline const std::string& GetCrossChainTransactionHistoryRequest::date_range_start() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_start)
  return _internal_date_range_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCrossChainTransactionHistoryRequest::set_date_range_start(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_start)
}
inline std::string* GetCrossChainTransactionHistoryRequest::mutable_date_range_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_start();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_start)
  return _s;
}
inline const std::string& GetCrossChainTransactionHistoryRequest::_internal_date_range_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_start_.Get();
}
inline void GetCrossChainTransactionHistoryRequest::_internal_set_date_range_start(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.Set(value, GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::_internal_mutable_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_start_.Mutable( GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::release_date_range_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_start)
  return _impl_.date_range_start_.Release();
}
inline void GetCrossChainTransactionHistoryRequest::set_allocated_date_range_start(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_start_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_start_.IsDefault()) {
    _impl_.date_range_start_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_start)
}

// string date_range_end = 5;
inline void GetCrossChainTransactionHistoryRequest::clear_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.ClearToEmpty();
}
inline const std::string& GetCrossChainTransactionHistoryRequest::date_range_end() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_end)
  return _internal_date_range_end();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCrossChainTransactionHistoryRequest::set_date_range_end(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_end)
}
inline std::string* GetCrossChainTransactionHistoryRequest::mutable_date_range_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date_range_end();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_end)
  return _s;
}
inline const std::string& GetCrossChainTransactionHistoryRequest::_internal_date_range_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_range_end_.Get();
}
inline void GetCrossChainTransactionHistoryRequest::_internal_set_date_range_end(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.Set(value, GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::_internal_mutable_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_range_end_.Mutable( GetArena());
}
inline std::string* GetCrossChainTransactionHistoryRequest::release_date_range_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_end)
  return _impl_.date_range_end_.Release();
}
inline void GetCrossChainTransactionHistoryRequest::set_allocated_date_range_end(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_range_end_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_range_end_.IsDefault()) {
    _impl_.date_range_end_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.GetCrossChainTransactionHistoryRequest.date_range_end)
}

// -------------------------------------------------------------------

// GetCrossChainTransactionHistoryResponse

// string chain_name = 1;
inline void GetCrossChainTransactionHistoryResponse::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& GetCrossChainTransactionHistoryResponse::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryResponse.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCrossChainTransactionHistoryResponse::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.GetCrossChainTransactionHistoryResponse.chain_name)
}
inline std::string* GetCrossChainTransactionHistoryResponse::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.GetCrossChainTransactionHistoryResponse.chain_name)
  return _s;
}
inline const std::string& GetCrossChainTransactionHistoryResponse::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void GetCrossChainTransactionHistoryResponse::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* GetCrossChainTransactionHistoryResponse::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* GetCrossChainTransactionHistoryResponse::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.GetCrossChainTransactionHistoryResponse.chain_name)
  return _impl_.chain_name_.Release();
}
inline void GetCrossChainTransactionHistoryResponse::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.GetCrossChainTransactionHistoryResponse.chain_name)
}

// repeated .seigr.crosschain.CrossChainTransaction transactions = 2;
inline int GetCrossChainTransactionHistoryResponse::_internal_transactions_size() const {
  return _internal_transactions().size();
}
inline int GetCrossChainTransactionHistoryResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void GetCrossChainTransactionHistoryResponse::clear_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactions_.Clear();
}
inline ::seigr::crosschain::CrossChainTransaction* GetCrossChainTransactionHistoryResponse::mutable_transactions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.GetCrossChainTransactionHistoryResponse.transactions)
  return _internal_mutable_transactions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>* GetCrossChainTransactionHistoryResponse::mutable_transactions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.crosschain.GetCrossChainTransactionHistoryResponse.transactions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_transactions();
}
inline const ::seigr::crosschain::CrossChainTransaction& GetCrossChainTransactionHistoryResponse::transactions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.GetCrossChainTransactionHistoryResponse.transactions)
  return _internal_transactions().Get(index);
}
inline ::seigr::crosschain::CrossChainTransaction* GetCrossChainTransactionHistoryResponse::add_transactions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::crosschain::CrossChainTransaction* _add = _internal_mutable_transactions()->Add();
  // @@protoc_insertion_point(field_add:seigr.crosschain.GetCrossChainTransactionHistoryResponse.transactions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>& GetCrossChainTransactionHistoryResponse::transactions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.crosschain.GetCrossChainTransactionHistoryResponse.transactions)
  return _internal_transactions();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>&
GetCrossChainTransactionHistoryResponse::_internal_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transactions_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::crosschain::CrossChainTransaction>*
GetCrossChainTransactionHistoryResponse::_internal_mutable_transactions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.transactions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdateCrossChainStatusRequest

// string chain_name = 1;
inline void UpdateCrossChainStatusRequest::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& UpdateCrossChainStatusRequest::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusRequest.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateCrossChainStatusRequest::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusRequest.chain_name)
}
inline std::string* UpdateCrossChainStatusRequest::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UpdateCrossChainStatusRequest.chain_name)
  return _s;
}
inline const std::string& UpdateCrossChainStatusRequest::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void UpdateCrossChainStatusRequest::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* UpdateCrossChainStatusRequest::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* UpdateCrossChainStatusRequest::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UpdateCrossChainStatusRequest.chain_name)
  return _impl_.chain_name_.Release();
}
inline void UpdateCrossChainStatusRequest::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UpdateCrossChainStatusRequest.chain_name)
}

// .seigr.crosschain.CrossChainStatus new_status = 2;
inline void UpdateCrossChainStatusRequest::clear_new_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_status_ = 0;
}
inline ::seigr::crosschain::CrossChainStatus UpdateCrossChainStatusRequest::new_status() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusRequest.new_status)
  return _internal_new_status();
}
inline void UpdateCrossChainStatusRequest::set_new_status(::seigr::crosschain::CrossChainStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusRequest.new_status)
}
inline ::seigr::crosschain::CrossChainStatus UpdateCrossChainStatusRequest::_internal_new_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::crosschain::CrossChainStatus>(_impl_.new_status_);
}
inline void UpdateCrossChainStatusRequest::_internal_set_new_status(::seigr::crosschain::CrossChainStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_status_ = value;
}

// string status_reason = 3;
inline void UpdateCrossChainStatusRequest::clear_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.ClearToEmpty();
}
inline const std::string& UpdateCrossChainStatusRequest::status_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusRequest.status_reason)
  return _internal_status_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateCrossChainStatusRequest::set_status_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusRequest.status_reason)
}
inline std::string* UpdateCrossChainStatusRequest::mutable_status_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_reason();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UpdateCrossChainStatusRequest.status_reason)
  return _s;
}
inline const std::string& UpdateCrossChainStatusRequest::_internal_status_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_reason_.Get();
}
inline void UpdateCrossChainStatusRequest::_internal_set_status_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.Set(value, GetArena());
}
inline std::string* UpdateCrossChainStatusRequest::_internal_mutable_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_reason_.Mutable( GetArena());
}
inline std::string* UpdateCrossChainStatusRequest::release_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UpdateCrossChainStatusRequest.status_reason)
  return _impl_.status_reason_.Release();
}
inline void UpdateCrossChainStatusRequest::set_allocated_status_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_reason_.IsDefault()) {
    _impl_.status_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UpdateCrossChainStatusRequest.status_reason)
}

// int32 retry_count = 4;
inline void UpdateCrossChainStatusRequest::clear_retry_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_count_ = 0;
}
inline ::int32_t UpdateCrossChainStatusRequest::retry_count() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusRequest.retry_count)
  return _internal_retry_count();
}
inline void UpdateCrossChainStatusRequest::set_retry_count(::int32_t value) {
  _internal_set_retry_count(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusRequest.retry_count)
}
inline ::int32_t UpdateCrossChainStatusRequest::_internal_retry_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_count_;
}
inline void UpdateCrossChainStatusRequest::_internal_set_retry_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_count_ = value;
}

// map<string, string> update_metadata = 5;
inline int UpdateCrossChainStatusRequest::_internal_update_metadata_size() const {
  return _internal_update_metadata().size();
}
inline int UpdateCrossChainStatusRequest::update_metadata_size() const {
  return _internal_update_metadata_size();
}
inline void UpdateCrossChainStatusRequest::clear_update_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UpdateCrossChainStatusRequest::_internal_update_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UpdateCrossChainStatusRequest::update_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.crosschain.UpdateCrossChainStatusRequest.update_metadata)
  return _internal_update_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* UpdateCrossChainStatusRequest::_internal_mutable_update_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.update_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UpdateCrossChainStatusRequest::mutable_update_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.crosschain.UpdateCrossChainStatusRequest.update_metadata)
  return _internal_mutable_update_metadata();
}

// -------------------------------------------------------------------

// UpdateCrossChainStatusResponse

// bool success = 1;
inline void UpdateCrossChainStatusResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UpdateCrossChainStatusResponse::success() const {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusResponse.success)
  return _internal_success();
}
inline void UpdateCrossChainStatusResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusResponse.success)
}
inline bool UpdateCrossChainStatusResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UpdateCrossChainStatusResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void UpdateCrossChainStatusResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateCrossChainStatusResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateCrossChainStatusResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusResponse.message)
}
inline std::string* UpdateCrossChainStatusResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UpdateCrossChainStatusResponse.message)
  return _s;
}
inline const std::string& UpdateCrossChainStatusResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UpdateCrossChainStatusResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UpdateCrossChainStatusResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UpdateCrossChainStatusResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UpdateCrossChainStatusResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateCrossChainStatusResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UpdateCrossChainStatusResponse.message)
}

// string error_code = 3;
inline void UpdateCrossChainStatusResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& UpdateCrossChainStatusResponse::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.crosschain.UpdateCrossChainStatusResponse.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateCrossChainStatusResponse::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.crosschain.UpdateCrossChainStatusResponse.error_code)
}
inline std::string* UpdateCrossChainStatusResponse::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:seigr.crosschain.UpdateCrossChainStatusResponse.error_code)
  return _s;
}
inline const std::string& UpdateCrossChainStatusResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void UpdateCrossChainStatusResponse::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* UpdateCrossChainStatusResponse::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* UpdateCrossChainStatusResponse::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.crosschain.UpdateCrossChainStatusResponse.error_code)
  return _impl_.error_code_.Release();
}
inline void UpdateCrossChainStatusResponse::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.crosschain.UpdateCrossChainStatusResponse.error_code)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace crosschain
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::crosschain::CrossChainStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::crosschain::CrossChainStatus>() {
  return ::seigr::crosschain::CrossChainStatus_descriptor();
}
template <>
struct is_proto_enum<::seigr::crosschain::TransactionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::crosschain::TransactionType>() {
  return ::seigr::crosschain::TransactionType_descriptor();
}
template <>
struct is_proto_enum<::seigr::crosschain::ComplianceLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::crosschain::ComplianceLevel>() {
  return ::seigr::crosschain::ComplianceLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cross_5fchain_5foperations_2eproto_2epb_2eh
