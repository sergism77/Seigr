// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: streaming.proto
// Protobuf C++ Version: 5.29.2

#ifndef streaming_2eproto_2epb_2eh
#define streaming_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_streaming_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_streaming_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_streaming_2eproto;
namespace seigr {
namespace streaming {
class DataPacket;
struct DataPacketDefaultTypeInternal;
extern DataPacketDefaultTypeInternal _DataPacket_default_instance_;
class DataPacket_MetadataEntry_DoNotUse;
struct DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal;
extern DataPacket_MetadataEntry_DoNotUseDefaultTypeInternal _DataPacket_MetadataEntry_DoNotUse_default_instance_;
class MultiStreamConfig;
struct MultiStreamConfigDefaultTypeInternal;
extern MultiStreamConfigDefaultTypeInternal _MultiStreamConfig_default_instance_;
class MultiStreamConfig_BundleMetadataEntry_DoNotUse;
struct MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal;
extern MultiStreamConfig_BundleMetadataEntry_DoNotUseDefaultTypeInternal _MultiStreamConfig_BundleMetadataEntry_DoNotUse_default_instance_;
class StreamConfig;
struct StreamConfigDefaultTypeInternal;
extern StreamConfigDefaultTypeInternal _StreamConfig_default_instance_;
class StreamConfig_StreamMetadataEntry_DoNotUse;
struct StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamConfig_StreamMetadataEntry_DoNotUseDefaultTypeInternal _StreamConfig_StreamMetadataEntry_DoNotUse_default_instance_;
class StreamControl;
struct StreamControlDefaultTypeInternal;
extern StreamControlDefaultTypeInternal _StreamControl_default_instance_;
class StreamControl_ControlMetadataEntry_DoNotUse;
struct StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamControl_ControlMetadataEntry_DoNotUseDefaultTypeInternal _StreamControl_ControlMetadataEntry_DoNotUse_default_instance_;
class StreamEventLog;
struct StreamEventLogDefaultTypeInternal;
extern StreamEventLogDefaultTypeInternal _StreamEventLog_default_instance_;
class StreamEventLog_EventMetadataEntry_DoNotUse;
struct StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamEventLog_EventMetadataEntry_DoNotUseDefaultTypeInternal _StreamEventLog_EventMetadataEntry_DoNotUse_default_instance_;
class StreamMetricsSummary;
struct StreamMetricsSummaryDefaultTypeInternal;
extern StreamMetricsSummaryDefaultTypeInternal _StreamMetricsSummary_default_instance_;
class StreamMetricsSummary_MetricsMetadataEntry_DoNotUse;
struct StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamMetricsSummary_MetricsMetadataEntry_DoNotUseDefaultTypeInternal _StreamMetricsSummary_MetricsMetadataEntry_DoNotUse_default_instance_;
class StreamRecording;
struct StreamRecordingDefaultTypeInternal;
extern StreamRecordingDefaultTypeInternal _StreamRecording_default_instance_;
class StreamRecording_RecordingMetadataEntry_DoNotUse;
struct StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamRecording_RecordingMetadataEntry_DoNotUseDefaultTypeInternal _StreamRecording_RecordingMetadataEntry_DoNotUse_default_instance_;
class StreamStatus;
struct StreamStatusDefaultTypeInternal;
extern StreamStatusDefaultTypeInternal _StreamStatus_default_instance_;
class StreamStatus_StatusMetadataEntry_DoNotUse;
struct StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal;
extern StreamStatus_StatusMetadataEntry_DoNotUseDefaultTypeInternal _StreamStatus_StatusMetadataEntry_DoNotUse_default_instance_;
}  // namespace streaming
}  // namespace seigr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace seigr {
namespace streaming {
enum StreamType : int {
  STREAM_TYPE_UNDEFINED = 0,
  STREAM_TYPE_SENSOR_DATA = 1,
  STREAM_TYPE_REALTIME_ANALYTICS = 2,
  STREAM_TYPE_EVENT_FEED = 3,
  STREAM_TYPE_USER_ACTIVITY = 4,
  STREAM_TYPE_SYSTEM_MONITORING = 5,
  StreamType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StreamType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StreamType_IsValid(int value);
extern const uint32_t StreamType_internal_data_[];
constexpr StreamType StreamType_MIN = static_cast<StreamType>(0);
constexpr StreamType StreamType_MAX = static_cast<StreamType>(5);
constexpr int StreamType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
StreamType_descriptor();
template <typename T>
const std::string& StreamType_Name(T value) {
  static_assert(std::is_same<T, StreamType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StreamType_Name().");
  return StreamType_Name(static_cast<StreamType>(value));
}
template <>
inline const std::string& StreamType_Name(StreamType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StreamType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool StreamType_Parse(absl::string_view name, StreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamType>(
      StreamType_descriptor(), name, value);
}
enum StreamingProtocol : int {
  STREAM_PROTOCOL_UNDEFINED = 0,
  STREAM_PROTOCOL_WEBSOCKET = 1,
  STREAM_PROTOCOL_GRPC = 2,
  STREAM_PROTOCOL_MQTT = 3,
  STREAM_PROTOCOL_HTTP2 = 4,
  StreamingProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StreamingProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StreamingProtocol_IsValid(int value);
extern const uint32_t StreamingProtocol_internal_data_[];
constexpr StreamingProtocol StreamingProtocol_MIN = static_cast<StreamingProtocol>(0);
constexpr StreamingProtocol StreamingProtocol_MAX = static_cast<StreamingProtocol>(4);
constexpr int StreamingProtocol_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StreamingProtocol_descriptor();
template <typename T>
const std::string& StreamingProtocol_Name(T value) {
  static_assert(std::is_same<T, StreamingProtocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StreamingProtocol_Name().");
  return StreamingProtocol_Name(static_cast<StreamingProtocol>(value));
}
template <>
inline const std::string& StreamingProtocol_Name(StreamingProtocol value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StreamingProtocol_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StreamingProtocol_Parse(absl::string_view name, StreamingProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamingProtocol>(
      StreamingProtocol_descriptor(), name, value);
}
enum StreamingQoSLevel : int {
  STREAM_QOS_LEVEL_UNDEFINED = 0,
  STREAM_QOS_LEVEL_LOW = 1,
  STREAM_QOS_LEVEL_MEDIUM = 2,
  STREAM_QOS_LEVEL_HIGH = 3,
  STREAM_QOS_LEVEL_CRITICAL = 4,
  StreamingQoSLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StreamingQoSLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StreamingQoSLevel_IsValid(int value);
extern const uint32_t StreamingQoSLevel_internal_data_[];
constexpr StreamingQoSLevel StreamingQoSLevel_MIN = static_cast<StreamingQoSLevel>(0);
constexpr StreamingQoSLevel StreamingQoSLevel_MAX = static_cast<StreamingQoSLevel>(4);
constexpr int StreamingQoSLevel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StreamingQoSLevel_descriptor();
template <typename T>
const std::string& StreamingQoSLevel_Name(T value) {
  static_assert(std::is_same<T, StreamingQoSLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StreamingQoSLevel_Name().");
  return StreamingQoSLevel_Name(static_cast<StreamingQoSLevel>(value));
}
template <>
inline const std::string& StreamingQoSLevel_Name(StreamingQoSLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StreamingQoSLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StreamingQoSLevel_Parse(absl::string_view name, StreamingQoSLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamingQoSLevel>(
      StreamingQoSLevel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StreamStatus_StatusMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamStatus_StatusMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamStatus_StatusMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamStatus_StatusMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamStatus_StatusMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamStatus_StatusMetadataEntry_DoNotUse*>(
        &_StreamStatus_StatusMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamRecording_RecordingMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamRecording_RecordingMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRecording_RecordingMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamRecording_RecordingMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamRecording_RecordingMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamRecording_RecordingMetadataEntry_DoNotUse*>(
        &_StreamRecording_RecordingMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamMetricsSummary_MetricsMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamMetricsSummary_MetricsMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamMetricsSummary_MetricsMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamMetricsSummary_MetricsMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamMetricsSummary_MetricsMetadataEntry_DoNotUse*>(
        &_StreamMetricsSummary_MetricsMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamEventLog_EventMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamEventLog_EventMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamEventLog_EventMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamEventLog_EventMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamEventLog_EventMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamEventLog_EventMetadataEntry_DoNotUse*>(
        &_StreamEventLog_EventMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamControl_ControlMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamControl_ControlMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamControl_ControlMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamControl_ControlMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamControl_ControlMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamControl_ControlMetadataEntry_DoNotUse*>(
        &_StreamControl_ControlMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamConfig_StreamMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StreamConfig_StreamMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamConfig_StreamMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StreamConfig_StreamMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StreamConfig_StreamMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StreamConfig_StreamMetadataEntry_DoNotUse*>(
        &_StreamConfig_StreamMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class MultiStreamConfig_BundleMetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  MultiStreamConfig_BundleMetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiStreamConfig_BundleMetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MultiStreamConfig_BundleMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MultiStreamConfig_BundleMetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MultiStreamConfig_BundleMetadataEntry_DoNotUse*>(
        &_MultiStreamConfig_BundleMetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DataPacket_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DataPacket_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPacket_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit DataPacket_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const DataPacket_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const DataPacket_MetadataEntry_DoNotUse*>(
        &_DataPacket_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_streaming_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class StreamStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamStatus) */ {
 public:
  inline StreamStatus() : StreamStatus(nullptr) {}
  ~StreamStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamStatus(const StreamStatus& from) : StreamStatus(nullptr, from) {}
  inline StreamStatus(StreamStatus&& from) noexcept
      : StreamStatus(nullptr, std::move(from)) {}
  inline StreamStatus& operator=(const StreamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatus& operator=(StreamStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatus* internal_default_instance() {
    return reinterpret_cast<const StreamStatus*>(
        &_StreamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(StreamStatus& a, StreamStatus& b) { a.Swap(&b); }
  inline void Swap(StreamStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamStatus& from) { StreamStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamStatus"; }

 protected:
  explicit StreamStatus(::google::protobuf::Arena* arena);
  StreamStatus(::google::protobuf::Arena* arena, const StreamStatus& from);
  StreamStatus(::google::protobuf::Arena* arena, StreamStatus&& from) noexcept
      : StreamStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusMetadataFieldNumber = 7,
    kStreamIdFieldNumber = 1,
    kLastActivityFieldNumber = 6,
    kPacketsSentFieldNumber = 3,
    kPacketsReceivedFieldNumber = 4,
    kPacketsDroppedFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // map<string, string> status_metadata = 7;
  int status_metadata_size() const;
  private:
  int _internal_status_metadata_size() const;

  public:
  void clear_status_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& status_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_status_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_status_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_status_metadata();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string last_activity = 6;
  void clear_last_activity() ;
  const std::string& last_activity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_activity(Arg_&& arg, Args_... args);
  std::string* mutable_last_activity();
  PROTOBUF_NODISCARD std::string* release_last_activity();
  void set_allocated_last_activity(std::string* value);

  private:
  const std::string& _internal_last_activity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_activity(
      const std::string& value);
  std::string* _internal_mutable_last_activity();

  public:
  // int64 packets_sent = 3;
  void clear_packets_sent() ;
  ::int64_t packets_sent() const;
  void set_packets_sent(::int64_t value);

  private:
  ::int64_t _internal_packets_sent() const;
  void _internal_set_packets_sent(::int64_t value);

  public:
  // int64 packets_received = 4;
  void clear_packets_received() ;
  ::int64_t packets_received() const;
  void set_packets_received(::int64_t value);

  private:
  ::int64_t _internal_packets_received() const;
  void _internal_set_packets_received(::int64_t value);

  public:
  // int64 packets_dropped = 5;
  void clear_packets_dropped() ;
  ::int64_t packets_dropped() const;
  void set_packets_dropped(::int64_t value);

  private:
  ::int64_t _internal_packets_dropped() const;
  void _internal_set_packets_dropped(::int64_t value);

  public:
  // .seigr.common.OperationalStatus status = 2;
  void clear_status() ;
  ::seigr::common::OperationalStatus status() const;
  void set_status(::seigr::common::OperationalStatus value);

  private:
  ::seigr::common::OperationalStatus _internal_status() const;
  void _internal_set_status(::seigr::common::OperationalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamStatus& from_msg);
    ::google::protobuf::internal::MapField<StreamStatus_StatusMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        status_metadata_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr last_activity_;
    ::int64_t packets_sent_;
    ::int64_t packets_received_;
    ::int64_t packets_dropped_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class StreamRecording final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamRecording) */ {
 public:
  inline StreamRecording() : StreamRecording(nullptr) {}
  ~StreamRecording() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamRecording* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamRecording));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRecording(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamRecording(const StreamRecording& from) : StreamRecording(nullptr, from) {}
  inline StreamRecording(StreamRecording&& from) noexcept
      : StreamRecording(nullptr, std::move(from)) {}
  inline StreamRecording& operator=(const StreamRecording& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRecording& operator=(StreamRecording&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRecording& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRecording* internal_default_instance() {
    return reinterpret_cast<const StreamRecording*>(
        &_StreamRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(StreamRecording& a, StreamRecording& b) { a.Swap(&b); }
  inline void Swap(StreamRecording* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRecording* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRecording* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamRecording>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamRecording& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamRecording& from) { StreamRecording::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamRecording* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamRecording"; }

 protected:
  explicit StreamRecording(::google::protobuf::Arena* arena);
  StreamRecording(::google::protobuf::Arena* arena, const StreamRecording& from);
  StreamRecording(::google::protobuf::Arena* arena, StreamRecording&& from) noexcept
      : StreamRecording(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecordingMetadataFieldNumber = 7,
    kRecordingIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kStartTimestampFieldNumber = 3,
    kEndTimestampFieldNumber = 4,
    kIsPlaybackEnabledFieldNumber = 5,
    kPlaybackSpeedFieldNumber = 6,
  };
  // map<string, string> recording_metadata = 7;
  int recording_metadata_size() const;
  private:
  int _internal_recording_metadata_size() const;

  public:
  void clear_recording_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& recording_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_recording_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_recording_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_recording_metadata();

  public:
  // string recording_id = 1;
  void clear_recording_id() ;
  const std::string& recording_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recording_id(Arg_&& arg, Args_... args);
  std::string* mutable_recording_id();
  PROTOBUF_NODISCARD std::string* release_recording_id();
  void set_allocated_recording_id(std::string* value);

  private:
  const std::string& _internal_recording_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recording_id(
      const std::string& value);
  std::string* _internal_mutable_recording_id();

  public:
  // string stream_id = 2;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string start_timestamp = 3;
  void clear_start_timestamp() ;
  const std::string& start_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_start_timestamp();
  PROTOBUF_NODISCARD std::string* release_start_timestamp();
  void set_allocated_start_timestamp(std::string* value);

  private:
  const std::string& _internal_start_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_timestamp(
      const std::string& value);
  std::string* _internal_mutable_start_timestamp();

  public:
  // string end_timestamp = 4;
  void clear_end_timestamp() ;
  const std::string& end_timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_end_timestamp();
  PROTOBUF_NODISCARD std::string* release_end_timestamp();
  void set_allocated_end_timestamp(std::string* value);

  private:
  const std::string& _internal_end_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_timestamp(
      const std::string& value);
  std::string* _internal_mutable_end_timestamp();

  public:
  // bool is_playback_enabled = 5;
  void clear_is_playback_enabled() ;
  bool is_playback_enabled() const;
  void set_is_playback_enabled(bool value);

  private:
  bool _internal_is_playback_enabled() const;
  void _internal_set_is_playback_enabled(bool value);

  public:
  // int32 playback_speed = 6;
  void clear_playback_speed() ;
  ::int32_t playback_speed() const;
  void set_playback_speed(::int32_t value);

  private:
  ::int32_t _internal_playback_speed() const;
  void _internal_set_playback_speed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamRecording)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      107, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamRecording& from_msg);
    ::google::protobuf::internal::MapField<StreamRecording_RecordingMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        recording_metadata_;
    ::google::protobuf::internal::ArenaStringPtr recording_id_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr start_timestamp_;
    ::google::protobuf::internal::ArenaStringPtr end_timestamp_;
    bool is_playback_enabled_;
    ::int32_t playback_speed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class StreamMetricsSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamMetricsSummary) */ {
 public:
  inline StreamMetricsSummary() : StreamMetricsSummary(nullptr) {}
  ~StreamMetricsSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamMetricsSummary* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamMetricsSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamMetricsSummary(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamMetricsSummary(const StreamMetricsSummary& from) : StreamMetricsSummary(nullptr, from) {}
  inline StreamMetricsSummary(StreamMetricsSummary&& from) noexcept
      : StreamMetricsSummary(nullptr, std::move(from)) {}
  inline StreamMetricsSummary& operator=(const StreamMetricsSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMetricsSummary& operator=(StreamMetricsSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMetricsSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMetricsSummary* internal_default_instance() {
    return reinterpret_cast<const StreamMetricsSummary*>(
        &_StreamMetricsSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(StreamMetricsSummary& a, StreamMetricsSummary& b) { a.Swap(&b); }
  inline void Swap(StreamMetricsSummary* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMetricsSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamMetricsSummary* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamMetricsSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamMetricsSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamMetricsSummary& from) { StreamMetricsSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamMetricsSummary* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamMetricsSummary"; }

 protected:
  explicit StreamMetricsSummary(::google::protobuf::Arena* arena);
  StreamMetricsSummary(::google::protobuf::Arena* arena, const StreamMetricsSummary& from);
  StreamMetricsSummary(::google::protobuf::Arena* arena, StreamMetricsSummary&& from) noexcept
      : StreamMetricsSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricsMetadataFieldNumber = 8,
    kStreamIdFieldNumber = 1,
    kReportingPeriodFieldNumber = 7,
    kTotalPacketsSentFieldNumber = 2,
    kTotalPacketsReceivedFieldNumber = 3,
    kTotalPacketsDroppedFieldNumber = 4,
    kAverageLatencyMsFieldNumber = 5,
    kPacketLossRateFieldNumber = 6,
  };
  // map<string, string> metrics_metadata = 8;
  int metrics_metadata_size() const;
  private:
  int _internal_metrics_metadata_size() const;

  public:
  void clear_metrics_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metrics_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metrics_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metrics_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metrics_metadata();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string reporting_period = 7;
  void clear_reporting_period() ;
  const std::string& reporting_period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reporting_period(Arg_&& arg, Args_... args);
  std::string* mutable_reporting_period();
  PROTOBUF_NODISCARD std::string* release_reporting_period();
  void set_allocated_reporting_period(std::string* value);

  private:
  const std::string& _internal_reporting_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reporting_period(
      const std::string& value);
  std::string* _internal_mutable_reporting_period();

  public:
  // int64 total_packets_sent = 2;
  void clear_total_packets_sent() ;
  ::int64_t total_packets_sent() const;
  void set_total_packets_sent(::int64_t value);

  private:
  ::int64_t _internal_total_packets_sent() const;
  void _internal_set_total_packets_sent(::int64_t value);

  public:
  // int64 total_packets_received = 3;
  void clear_total_packets_received() ;
  ::int64_t total_packets_received() const;
  void set_total_packets_received(::int64_t value);

  private:
  ::int64_t _internal_total_packets_received() const;
  void _internal_set_total_packets_received(::int64_t value);

  public:
  // int64 total_packets_dropped = 4;
  void clear_total_packets_dropped() ;
  ::int64_t total_packets_dropped() const;
  void set_total_packets_dropped(::int64_t value);

  private:
  ::int64_t _internal_total_packets_dropped() const;
  void _internal_set_total_packets_dropped(::int64_t value);

  public:
  // double average_latency_ms = 5;
  void clear_average_latency_ms() ;
  double average_latency_ms() const;
  void set_average_latency_ms(double value);

  private:
  double _internal_average_latency_ms() const;
  void _internal_set_average_latency_ms(double value);

  public:
  // double packet_loss_rate = 6;
  void clear_packet_loss_rate() ;
  double packet_loss_rate() const;
  void set_packet_loss_rate(double value);

  private:
  double _internal_packet_loss_rate() const;
  void _internal_set_packet_loss_rate(double value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamMetricsSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamMetricsSummary& from_msg);
    ::google::protobuf::internal::MapField<StreamMetricsSummary_MetricsMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metrics_metadata_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr reporting_period_;
    ::int64_t total_packets_sent_;
    ::int64_t total_packets_received_;
    ::int64_t total_packets_dropped_;
    double average_latency_ms_;
    double packet_loss_rate_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class StreamEventLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamEventLog) */ {
 public:
  inline StreamEventLog() : StreamEventLog(nullptr) {}
  ~StreamEventLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamEventLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamEventLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamEventLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamEventLog(const StreamEventLog& from) : StreamEventLog(nullptr, from) {}
  inline StreamEventLog(StreamEventLog&& from) noexcept
      : StreamEventLog(nullptr, std::move(from)) {}
  inline StreamEventLog& operator=(const StreamEventLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventLog& operator=(StreamEventLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamEventLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamEventLog* internal_default_instance() {
    return reinterpret_cast<const StreamEventLog*>(
        &_StreamEventLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(StreamEventLog& a, StreamEventLog& b) { a.Swap(&b); }
  inline void Swap(StreamEventLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamEventLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamEventLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamEventLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamEventLog& from) { StreamEventLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamEventLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamEventLog"; }

 protected:
  explicit StreamEventLog(::google::protobuf::Arena* arena);
  StreamEventLog(::google::protobuf::Arena* arena, const StreamEventLog& from);
  StreamEventLog(::google::protobuf::Arena* arena, StreamEventLog&& from) noexcept
      : StreamEventLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventMetadataFieldNumber = 5,
    kEventIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kActionFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // map<string, string> event_metadata = 5;
  int event_metadata_size() const;
  private:
  int _internal_event_metadata_size() const;

  public:
  void clear_event_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& event_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_event_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_event_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_event_metadata();

  public:
  // string event_id = 1;
  void clear_event_id() ;
  const std::string& event_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_id(Arg_&& arg, Args_... args);
  std::string* mutable_event_id();
  PROTOBUF_NODISCARD std::string* release_event_id();
  void set_allocated_event_id(std::string* value);

  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(
      const std::string& value);
  std::string* _internal_mutable_event_id();

  public:
  // string stream_id = 2;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string action = 3;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamEventLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      85, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamEventLog& from_msg);
    ::google::protobuf::internal::MapField<StreamEventLog_EventMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        event_metadata_;
    ::google::protobuf::internal::ArenaStringPtr event_id_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class StreamControl final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamControl) */ {
 public:
  inline StreamControl() : StreamControl(nullptr) {}
  ~StreamControl() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamControl* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamControl));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamControl(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamControl(const StreamControl& from) : StreamControl(nullptr, from) {}
  inline StreamControl(StreamControl&& from) noexcept
      : StreamControl(nullptr, std::move(from)) {}
  inline StreamControl& operator=(const StreamControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamControl& operator=(StreamControl&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamControl* internal_default_instance() {
    return reinterpret_cast<const StreamControl*>(
        &_StreamControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(StreamControl& a, StreamControl& b) { a.Swap(&b); }
  inline void Swap(StreamControl* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamControl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamControl* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamControl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamControl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamControl& from) { StreamControl::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamControl* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamControl"; }

 protected:
  explicit StreamControl(::google::protobuf::Arena* arena);
  StreamControl(::google::protobuf::Arena* arena, const StreamControl& from);
  StreamControl(::google::protobuf::Arena* arena, StreamControl&& from) noexcept
      : StreamControl(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlMetadataFieldNumber = 7,
    kStreamIdFieldNumber = 1,
    kPauseFieldNumber = 2,
    kResumeFieldNumber = 3,
    kTerminateFieldNumber = 4,
    kUpdateBufferSizeFieldNumber = 5,
    kUpdateQosLevelFieldNumber = 6,
  };
  // map<string, string> control_metadata = 7;
  int control_metadata_size() const;
  private:
  int _internal_control_metadata_size() const;

  public:
  void clear_control_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& control_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_control_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_control_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_control_metadata();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // bool pause = 2;
  void clear_pause() ;
  bool pause() const;
  void set_pause(bool value);

  private:
  bool _internal_pause() const;
  void _internal_set_pause(bool value);

  public:
  // bool resume = 3;
  void clear_resume() ;
  bool resume() const;
  void set_resume(bool value);

  private:
  bool _internal_resume() const;
  void _internal_set_resume(bool value);

  public:
  // bool terminate = 4;
  void clear_terminate() ;
  bool terminate() const;
  void set_terminate(bool value);

  private:
  bool _internal_terminate() const;
  void _internal_set_terminate(bool value);

  public:
  // int32 update_buffer_size = 5;
  void clear_update_buffer_size() ;
  ::int32_t update_buffer_size() const;
  void set_update_buffer_size(::int32_t value);

  private:
  ::int32_t _internal_update_buffer_size() const;
  void _internal_set_update_buffer_size(::int32_t value);

  public:
  // .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
  void clear_update_qos_level() ;
  ::seigr::streaming::StreamingQoSLevel update_qos_level() const;
  void set_update_qos_level(::seigr::streaming::StreamingQoSLevel value);

  private:
  ::seigr::streaming::StreamingQoSLevel _internal_update_qos_level() const;
  void _internal_set_update_qos_level(::seigr::streaming::StreamingQoSLevel value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamControl)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamControl& from_msg);
    ::google::protobuf::internal::MapField<StreamControl_ControlMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        control_metadata_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    bool pause_;
    bool resume_;
    bool terminate_;
    ::int32_t update_buffer_size_;
    int update_qos_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class StreamConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.StreamConfig) */ {
 public:
  inline StreamConfig() : StreamConfig(nullptr) {}
  ~StreamConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamConfig(const StreamConfig& from) : StreamConfig(nullptr, from) {}
  inline StreamConfig(StreamConfig&& from) noexcept
      : StreamConfig(nullptr, std::move(from)) {}
  inline StreamConfig& operator=(const StreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamConfig& operator=(StreamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamConfig* internal_default_instance() {
    return reinterpret_cast<const StreamConfig*>(
        &_StreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StreamConfig& a, StreamConfig& b) { a.Swap(&b); }
  inline void Swap(StreamConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamConfig& from) { StreamConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.StreamConfig"; }

 protected:
  explicit StreamConfig(::google::protobuf::Arena* arena);
  StreamConfig(::google::protobuf::Arena* arena, const StreamConfig& from);
  StreamConfig(::google::protobuf::Arena* arena, StreamConfig&& from) noexcept
      : StreamConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamMetadataFieldNumber = 9,
    kStreamIdFieldNumber = 1,
    kDataSourceIdFieldNumber = 7,
    kCreatedAtFieldNumber = 10,
    kStreamTypeFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kQosLevelFieldNumber = 4,
    kPriorityFieldNumber = 5,
    kBufferSizeFieldNumber = 6,
    kEnableEncryptionFieldNumber = 8,
  };
  // map<string, string> stream_metadata = 9;
  int stream_metadata_size() const;
  private:
  int _internal_stream_metadata_size() const;

  public:
  void clear_stream_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& stream_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_stream_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_stream_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_stream_metadata();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string data_source_id = 7;
  void clear_data_source_id() ;
  const std::string& data_source_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_source_id(Arg_&& arg, Args_... args);
  std::string* mutable_data_source_id();
  PROTOBUF_NODISCARD std::string* release_data_source_id();
  void set_allocated_data_source_id(std::string* value);

  private:
  const std::string& _internal_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source_id(
      const std::string& value);
  std::string* _internal_mutable_data_source_id();

  public:
  // string created_at = 10;
  void clear_created_at() ;
  const std::string& created_at() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_created_at(Arg_&& arg, Args_... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* value);

  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(
      const std::string& value);
  std::string* _internal_mutable_created_at();

  public:
  // .seigr.streaming.StreamType stream_type = 2;
  void clear_stream_type() ;
  ::seigr::streaming::StreamType stream_type() const;
  void set_stream_type(::seigr::streaming::StreamType value);

  private:
  ::seigr::streaming::StreamType _internal_stream_type() const;
  void _internal_set_stream_type(::seigr::streaming::StreamType value);

  public:
  // .seigr.streaming.StreamingProtocol protocol = 3;
  void clear_protocol() ;
  ::seigr::streaming::StreamingProtocol protocol() const;
  void set_protocol(::seigr::streaming::StreamingProtocol value);

  private:
  ::seigr::streaming::StreamingProtocol _internal_protocol() const;
  void _internal_set_protocol(::seigr::streaming::StreamingProtocol value);

  public:
  // .seigr.streaming.StreamingQoSLevel qos_level = 4;
  void clear_qos_level() ;
  ::seigr::streaming::StreamingQoSLevel qos_level() const;
  void set_qos_level(::seigr::streaming::StreamingQoSLevel value);

  private:
  ::seigr::streaming::StreamingQoSLevel _internal_qos_level() const;
  void _internal_set_qos_level(::seigr::streaming::StreamingQoSLevel value);

  public:
  // .seigr.common.PriorityLevel priority = 5;
  void clear_priority() ;
  ::seigr::common::PriorityLevel priority() const;
  void set_priority(::seigr::common::PriorityLevel value);

  private:
  ::seigr::common::PriorityLevel _internal_priority() const;
  void _internal_set_priority(::seigr::common::PriorityLevel value);

  public:
  // int32 buffer_size = 6;
  void clear_buffer_size() ;
  ::int32_t buffer_size() const;
  void set_buffer_size(::int32_t value);

  private:
  ::int32_t _internal_buffer_size() const;
  void _internal_set_buffer_size(::int32_t value);

  public:
  // bool enable_encryption = 8;
  void clear_enable_encryption() ;
  bool enable_encryption() const;
  void set_enable_encryption(bool value);

  private:
  bool _internal_enable_encryption() const;
  void _internal_set_enable_encryption(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.StreamConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamConfig& from_msg);
    ::google::protobuf::internal::MapField<StreamConfig_StreamMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        stream_metadata_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr data_source_id_;
    ::google::protobuf::internal::ArenaStringPtr created_at_;
    int stream_type_;
    int protocol_;
    int qos_level_;
    int priority_;
    ::int32_t buffer_size_;
    bool enable_encryption_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class DataPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.DataPacket) */ {
 public:
  inline DataPacket() : DataPacket(nullptr) {}
  ~DataPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataPacket* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataPacket(const DataPacket& from) : DataPacket(nullptr, from) {}
  inline DataPacket(DataPacket&& from) noexcept
      : DataPacket(nullptr, std::move(from)) {}
  inline DataPacket& operator=(const DataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPacket& operator=(DataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPacket* internal_default_instance() {
    return reinterpret_cast<const DataPacket*>(
        &_DataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DataPacket& a, DataPacket& b) { a.Swap(&b); }
  inline void Swap(DataPacket* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPacket* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataPacket& from) { DataPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataPacket* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.DataPacket"; }

 protected:
  explicit DataPacket(::google::protobuf::Arena* arena);
  DataPacket(::google::protobuf::Arena* arena, const DataPacket& from);
  DataPacket(::google::protobuf::Arena* arena, DataPacket&& from) noexcept
      : DataPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 5,
    kPacketIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string packet_id = 1;
  void clear_packet_id() ;
  const std::string& packet_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_packet_id(Arg_&& arg, Args_... args);
  std::string* mutable_packet_id();
  PROTOBUF_NODISCARD std::string* release_packet_id();
  void set_allocated_packet_id(std::string* value);

  private:
  const std::string& _internal_packet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packet_id(
      const std::string& value);
  std::string* _internal_mutable_packet_id();

  public:
  // string stream_id = 2;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // bytes payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.DataPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataPacket& from_msg);
    ::google::protobuf::internal::MapField<DataPacket_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr packet_id_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};
// -------------------------------------------------------------------

class MultiStreamConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:seigr.streaming.MultiStreamConfig) */ {
 public:
  inline MultiStreamConfig() : MultiStreamConfig(nullptr) {}
  ~MultiStreamConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiStreamConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiStreamConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiStreamConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiStreamConfig(const MultiStreamConfig& from) : MultiStreamConfig(nullptr, from) {}
  inline MultiStreamConfig(MultiStreamConfig&& from) noexcept
      : MultiStreamConfig(nullptr, std::move(from)) {}
  inline MultiStreamConfig& operator=(const MultiStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStreamConfig& operator=(MultiStreamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiStreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiStreamConfig* internal_default_instance() {
    return reinterpret_cast<const MultiStreamConfig*>(
        &_MultiStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MultiStreamConfig& a, MultiStreamConfig& b) { a.Swap(&b); }
  inline void Swap(MultiStreamConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiStreamConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiStreamConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiStreamConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiStreamConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiStreamConfig& from) { MultiStreamConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiStreamConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "seigr.streaming.MultiStreamConfig"; }

 protected:
  explicit MultiStreamConfig(::google::protobuf::Arena* arena);
  MultiStreamConfig(::google::protobuf::Arena* arena, const MultiStreamConfig& from);
  MultiStreamConfig(::google::protobuf::Arena* arena, MultiStreamConfig&& from) noexcept
      : MultiStreamConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamsFieldNumber = 2,
    kBundleMetadataFieldNumber = 7,
    kBundleIdFieldNumber = 1,
    kSharedDataSourceIdFieldNumber = 5,
    kSharedQosLevelFieldNumber = 3,
    kSharedProtocolFieldNumber = 4,
    kSharedPriorityFieldNumber = 6,
    kEnableBatchEncryptionFieldNumber = 8,
  };
  // repeated .seigr.streaming.StreamConfig streams = 2;
  int streams_size() const;
  private:
  int _internal_streams_size() const;

  public:
  void clear_streams() ;
  ::seigr::streaming::StreamConfig* mutable_streams(int index);
  ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>* mutable_streams();

  private:
  const ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>& _internal_streams() const;
  ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>* _internal_mutable_streams();
  public:
  const ::seigr::streaming::StreamConfig& streams(int index) const;
  ::seigr::streaming::StreamConfig* add_streams();
  const ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>& streams() const;
  // map<string, string> bundle_metadata = 7;
  int bundle_metadata_size() const;
  private:
  int _internal_bundle_metadata_size() const;

  public:
  void clear_bundle_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& bundle_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_bundle_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_bundle_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_bundle_metadata();

  public:
  // string bundle_id = 1;
  void clear_bundle_id() ;
  const std::string& bundle_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bundle_id(Arg_&& arg, Args_... args);
  std::string* mutable_bundle_id();
  PROTOBUF_NODISCARD std::string* release_bundle_id();
  void set_allocated_bundle_id(std::string* value);

  private:
  const std::string& _internal_bundle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bundle_id(
      const std::string& value);
  std::string* _internal_mutable_bundle_id();

  public:
  // string shared_data_source_id = 5;
  void clear_shared_data_source_id() ;
  const std::string& shared_data_source_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shared_data_source_id(Arg_&& arg, Args_... args);
  std::string* mutable_shared_data_source_id();
  PROTOBUF_NODISCARD std::string* release_shared_data_source_id();
  void set_allocated_shared_data_source_id(std::string* value);

  private:
  const std::string& _internal_shared_data_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_data_source_id(
      const std::string& value);
  std::string* _internal_mutable_shared_data_source_id();

  public:
  // .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
  void clear_shared_qos_level() ;
  ::seigr::streaming::StreamingQoSLevel shared_qos_level() const;
  void set_shared_qos_level(::seigr::streaming::StreamingQoSLevel value);

  private:
  ::seigr::streaming::StreamingQoSLevel _internal_shared_qos_level() const;
  void _internal_set_shared_qos_level(::seigr::streaming::StreamingQoSLevel value);

  public:
  // .seigr.streaming.StreamingProtocol shared_protocol = 4;
  void clear_shared_protocol() ;
  ::seigr::streaming::StreamingProtocol shared_protocol() const;
  void set_shared_protocol(::seigr::streaming::StreamingProtocol value);

  private:
  ::seigr::streaming::StreamingProtocol _internal_shared_protocol() const;
  void _internal_set_shared_protocol(::seigr::streaming::StreamingProtocol value);

  public:
  // .seigr.common.PriorityLevel shared_priority = 6;
  void clear_shared_priority() ;
  ::seigr::common::PriorityLevel shared_priority() const;
  void set_shared_priority(::seigr::common::PriorityLevel value);

  private:
  ::seigr::common::PriorityLevel _internal_shared_priority() const;
  void _internal_set_shared_priority(::seigr::common::PriorityLevel value);

  public:
  // bool enable_batch_encryption = 8;
  void clear_enable_batch_encryption() ;
  bool enable_batch_encryption() const;
  void set_enable_batch_encryption(bool value);

  private:
  bool _internal_enable_batch_encryption() const;
  void _internal_set_enable_batch_encryption(bool value);

  public:
  // @@protoc_insertion_point(class_scope:seigr.streaming.MultiStreamConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      95, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiStreamConfig& from_msg);
    ::google::protobuf::RepeatedPtrField< ::seigr::streaming::StreamConfig > streams_;
    ::google::protobuf::internal::MapField<MultiStreamConfig_BundleMetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        bundle_metadata_;
    ::google::protobuf::internal::ArenaStringPtr bundle_id_;
    ::google::protobuf::internal::ArenaStringPtr shared_data_source_id_;
    int shared_qos_level_;
    int shared_protocol_;
    int shared_priority_;
    bool enable_batch_encryption_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streaming_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamConfig

// string stream_id = 1;
inline void StreamConfig::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamConfig::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamConfig::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.stream_id)
}
inline std::string* StreamConfig::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamConfig.stream_id)
  return _s;
}
inline const std::string& StreamConfig::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamConfig::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamConfig::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamConfig::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamConfig.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamConfig::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamConfig.stream_id)
}

// .seigr.streaming.StreamType stream_type = 2;
inline void StreamConfig::clear_stream_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_type_ = 0;
}
inline ::seigr::streaming::StreamType StreamConfig::stream_type() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.stream_type)
  return _internal_stream_type();
}
inline void StreamConfig::set_stream_type(::seigr::streaming::StreamType value) {
  _internal_set_stream_type(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.stream_type)
}
inline ::seigr::streaming::StreamType StreamConfig::_internal_stream_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamType>(_impl_.stream_type_);
}
inline void StreamConfig::_internal_set_stream_type(::seigr::streaming::StreamType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_type_ = value;
}

// .seigr.streaming.StreamingProtocol protocol = 3;
inline void StreamConfig::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = 0;
}
inline ::seigr::streaming::StreamingProtocol StreamConfig::protocol() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.protocol)
  return _internal_protocol();
}
inline void StreamConfig::set_protocol(::seigr::streaming::StreamingProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.protocol)
}
inline ::seigr::streaming::StreamingProtocol StreamConfig::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamingProtocol>(_impl_.protocol_);
}
inline void StreamConfig::_internal_set_protocol(::seigr::streaming::StreamingProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = value;
}

// .seigr.streaming.StreamingQoSLevel qos_level = 4;
inline void StreamConfig::clear_qos_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qos_level_ = 0;
}
inline ::seigr::streaming::StreamingQoSLevel StreamConfig::qos_level() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.qos_level)
  return _internal_qos_level();
}
inline void StreamConfig::set_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  _internal_set_qos_level(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.qos_level)
}
inline ::seigr::streaming::StreamingQoSLevel StreamConfig::_internal_qos_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamingQoSLevel>(_impl_.qos_level_);
}
inline void StreamConfig::_internal_set_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qos_level_ = value;
}

// .seigr.common.PriorityLevel priority = 5;
inline void StreamConfig::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = 0;
}
inline ::seigr::common::PriorityLevel StreamConfig::priority() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.priority)
  return _internal_priority();
}
inline void StreamConfig::set_priority(::seigr::common::PriorityLevel value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.priority)
}
inline ::seigr::common::PriorityLevel StreamConfig::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::PriorityLevel>(_impl_.priority_);
}
inline void StreamConfig::_internal_set_priority(::seigr::common::PriorityLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// int32 buffer_size = 6;
inline void StreamConfig::clear_buffer_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_size_ = 0;
}
inline ::int32_t StreamConfig::buffer_size() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.buffer_size)
  return _internal_buffer_size();
}
inline void StreamConfig::set_buffer_size(::int32_t value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.buffer_size)
}
inline ::int32_t StreamConfig::_internal_buffer_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buffer_size_;
}
inline void StreamConfig::_internal_set_buffer_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_size_ = value;
}

// string data_source_id = 7;
inline void StreamConfig::clear_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.ClearToEmpty();
}
inline const std::string& StreamConfig::data_source_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.data_source_id)
  return _internal_data_source_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamConfig::set_data_source_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.data_source_id)
}
inline std::string* StreamConfig::mutable_data_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_source_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamConfig.data_source_id)
  return _s;
}
inline const std::string& StreamConfig::_internal_data_source_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_id_.Get();
}
inline void StreamConfig::_internal_set_data_source_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.Set(value, GetArena());
}
inline std::string* StreamConfig::_internal_mutable_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_source_id_.Mutable( GetArena());
}
inline std::string* StreamConfig::release_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamConfig.data_source_id)
  return _impl_.data_source_id_.Release();
}
inline void StreamConfig::set_allocated_data_source_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_id_.IsDefault()) {
    _impl_.data_source_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamConfig.data_source_id)
}

// bool enable_encryption = 8;
inline void StreamConfig::clear_enable_encryption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = false;
}
inline bool StreamConfig::enable_encryption() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.enable_encryption)
  return _internal_enable_encryption();
}
inline void StreamConfig::set_enable_encryption(bool value) {
  _internal_set_enable_encryption(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.enable_encryption)
}
inline bool StreamConfig::_internal_enable_encryption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_encryption_;
}
inline void StreamConfig::_internal_set_enable_encryption(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_encryption_ = value;
}

// map<string, string> stream_metadata = 9;
inline int StreamConfig::_internal_stream_metadata_size() const {
  return _internal_stream_metadata().size();
}
inline int StreamConfig::stream_metadata_size() const {
  return _internal_stream_metadata_size();
}
inline void StreamConfig::clear_stream_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamConfig::_internal_stream_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamConfig::stream_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamConfig.stream_metadata)
  return _internal_stream_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamConfig::_internal_mutable_stream_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamConfig::mutable_stream_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamConfig.stream_metadata)
  return _internal_mutable_stream_metadata();
}

// string created_at = 10;
inline void StreamConfig::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& StreamConfig::created_at() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamConfig.created_at)
  return _internal_created_at();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamConfig::set_created_at(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamConfig.created_at)
}
inline std::string* StreamConfig::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamConfig.created_at)
  return _s;
}
inline const std::string& StreamConfig::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_.Get();
}
inline void StreamConfig::_internal_set_created_at(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.Set(value, GetArena());
}
inline std::string* StreamConfig::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.created_at_.Mutable( GetArena());
}
inline std::string* StreamConfig::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamConfig.created_at)
  return _impl_.created_at_.Release();
}
inline void StreamConfig::set_allocated_created_at(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamConfig.created_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MultiStreamConfig

// string bundle_id = 1;
inline void MultiStreamConfig::clear_bundle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundle_id_.ClearToEmpty();
}
inline const std::string& MultiStreamConfig::bundle_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.bundle_id)
  return _internal_bundle_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MultiStreamConfig::set_bundle_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundle_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.bundle_id)
}
inline std::string* MultiStreamConfig::mutable_bundle_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bundle_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.MultiStreamConfig.bundle_id)
  return _s;
}
inline const std::string& MultiStreamConfig::_internal_bundle_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bundle_id_.Get();
}
inline void MultiStreamConfig::_internal_set_bundle_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundle_id_.Set(value, GetArena());
}
inline std::string* MultiStreamConfig::_internal_mutable_bundle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bundle_id_.Mutable( GetArena());
}
inline std::string* MultiStreamConfig::release_bundle_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.MultiStreamConfig.bundle_id)
  return _impl_.bundle_id_.Release();
}
inline void MultiStreamConfig::set_allocated_bundle_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundle_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bundle_id_.IsDefault()) {
    _impl_.bundle_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.MultiStreamConfig.bundle_id)
}

// repeated .seigr.streaming.StreamConfig streams = 2;
inline int MultiStreamConfig::_internal_streams_size() const {
  return _internal_streams().size();
}
inline int MultiStreamConfig::streams_size() const {
  return _internal_streams_size();
}
inline void MultiStreamConfig::clear_streams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streams_.Clear();
}
inline ::seigr::streaming::StreamConfig* MultiStreamConfig::mutable_streams(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:seigr.streaming.MultiStreamConfig.streams)
  return _internal_mutable_streams()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>* MultiStreamConfig::mutable_streams()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:seigr.streaming.MultiStreamConfig.streams)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_streams();
}
inline const ::seigr::streaming::StreamConfig& MultiStreamConfig::streams(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.streams)
  return _internal_streams().Get(index);
}
inline ::seigr::streaming::StreamConfig* MultiStreamConfig::add_streams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::seigr::streaming::StreamConfig* _add = _internal_mutable_streams()->Add();
  // @@protoc_insertion_point(field_add:seigr.streaming.MultiStreamConfig.streams)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>& MultiStreamConfig::streams() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:seigr.streaming.MultiStreamConfig.streams)
  return _internal_streams();
}
inline const ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>&
MultiStreamConfig::_internal_streams() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.streams_;
}
inline ::google::protobuf::RepeatedPtrField<::seigr::streaming::StreamConfig>*
MultiStreamConfig::_internal_mutable_streams() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.streams_;
}

// .seigr.streaming.StreamingQoSLevel shared_qos_level = 3;
inline void MultiStreamConfig::clear_shared_qos_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_qos_level_ = 0;
}
inline ::seigr::streaming::StreamingQoSLevel MultiStreamConfig::shared_qos_level() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.shared_qos_level)
  return _internal_shared_qos_level();
}
inline void MultiStreamConfig::set_shared_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  _internal_set_shared_qos_level(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.shared_qos_level)
}
inline ::seigr::streaming::StreamingQoSLevel MultiStreamConfig::_internal_shared_qos_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamingQoSLevel>(_impl_.shared_qos_level_);
}
inline void MultiStreamConfig::_internal_set_shared_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_qos_level_ = value;
}

// .seigr.streaming.StreamingProtocol shared_protocol = 4;
inline void MultiStreamConfig::clear_shared_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_protocol_ = 0;
}
inline ::seigr::streaming::StreamingProtocol MultiStreamConfig::shared_protocol() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.shared_protocol)
  return _internal_shared_protocol();
}
inline void MultiStreamConfig::set_shared_protocol(::seigr::streaming::StreamingProtocol value) {
  _internal_set_shared_protocol(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.shared_protocol)
}
inline ::seigr::streaming::StreamingProtocol MultiStreamConfig::_internal_shared_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamingProtocol>(_impl_.shared_protocol_);
}
inline void MultiStreamConfig::_internal_set_shared_protocol(::seigr::streaming::StreamingProtocol value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_protocol_ = value;
}

// string shared_data_source_id = 5;
inline void MultiStreamConfig::clear_shared_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_data_source_id_.ClearToEmpty();
}
inline const std::string& MultiStreamConfig::shared_data_source_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.shared_data_source_id)
  return _internal_shared_data_source_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MultiStreamConfig::set_shared_data_source_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_data_source_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.shared_data_source_id)
}
inline std::string* MultiStreamConfig::mutable_shared_data_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shared_data_source_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.MultiStreamConfig.shared_data_source_id)
  return _s;
}
inline const std::string& MultiStreamConfig::_internal_shared_data_source_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shared_data_source_id_.Get();
}
inline void MultiStreamConfig::_internal_set_shared_data_source_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_data_source_id_.Set(value, GetArena());
}
inline std::string* MultiStreamConfig::_internal_mutable_shared_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shared_data_source_id_.Mutable( GetArena());
}
inline std::string* MultiStreamConfig::release_shared_data_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.MultiStreamConfig.shared_data_source_id)
  return _impl_.shared_data_source_id_.Release();
}
inline void MultiStreamConfig::set_allocated_shared_data_source_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_data_source_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.shared_data_source_id_.IsDefault()) {
    _impl_.shared_data_source_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.MultiStreamConfig.shared_data_source_id)
}

// .seigr.common.PriorityLevel shared_priority = 6;
inline void MultiStreamConfig::clear_shared_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_priority_ = 0;
}
inline ::seigr::common::PriorityLevel MultiStreamConfig::shared_priority() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.shared_priority)
  return _internal_shared_priority();
}
inline void MultiStreamConfig::set_shared_priority(::seigr::common::PriorityLevel value) {
  _internal_set_shared_priority(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.shared_priority)
}
inline ::seigr::common::PriorityLevel MultiStreamConfig::_internal_shared_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::PriorityLevel>(_impl_.shared_priority_);
}
inline void MultiStreamConfig::_internal_set_shared_priority(::seigr::common::PriorityLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shared_priority_ = value;
}

// map<string, string> bundle_metadata = 7;
inline int MultiStreamConfig::_internal_bundle_metadata_size() const {
  return _internal_bundle_metadata().size();
}
inline int MultiStreamConfig::bundle_metadata_size() const {
  return _internal_bundle_metadata_size();
}
inline void MultiStreamConfig::clear_bundle_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundle_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& MultiStreamConfig::_internal_bundle_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bundle_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& MultiStreamConfig::bundle_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.MultiStreamConfig.bundle_metadata)
  return _internal_bundle_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* MultiStreamConfig::_internal_mutable_bundle_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bundle_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* MultiStreamConfig::mutable_bundle_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.MultiStreamConfig.bundle_metadata)
  return _internal_mutable_bundle_metadata();
}

// bool enable_batch_encryption = 8;
inline void MultiStreamConfig::clear_enable_batch_encryption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_batch_encryption_ = false;
}
inline bool MultiStreamConfig::enable_batch_encryption() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.MultiStreamConfig.enable_batch_encryption)
  return _internal_enable_batch_encryption();
}
inline void MultiStreamConfig::set_enable_batch_encryption(bool value) {
  _internal_set_enable_batch_encryption(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.MultiStreamConfig.enable_batch_encryption)
}
inline bool MultiStreamConfig::_internal_enable_batch_encryption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_batch_encryption_;
}
inline void MultiStreamConfig::_internal_set_enable_batch_encryption(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_batch_encryption_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataPacket

// string packet_id = 1;
inline void DataPacket::clear_packet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_.ClearToEmpty();
}
inline const std::string& DataPacket::packet_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.DataPacket.packet_id)
  return _internal_packet_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPacket::set_packet_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.DataPacket.packet_id)
}
inline std::string* DataPacket::mutable_packet_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.DataPacket.packet_id)
  return _s;
}
inline const std::string& DataPacket::_internal_packet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_id_.Get();
}
inline void DataPacket::_internal_set_packet_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_.Set(value, GetArena());
}
inline std::string* DataPacket::_internal_mutable_packet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.packet_id_.Mutable( GetArena());
}
inline std::string* DataPacket::release_packet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.DataPacket.packet_id)
  return _impl_.packet_id_.Release();
}
inline void DataPacket::set_allocated_packet_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.packet_id_.IsDefault()) {
    _impl_.packet_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.DataPacket.packet_id)
}

// string stream_id = 2;
inline void DataPacket::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& DataPacket::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.DataPacket.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPacket::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.DataPacket.stream_id)
}
inline std::string* DataPacket::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.DataPacket.stream_id)
  return _s;
}
inline const std::string& DataPacket::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void DataPacket::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* DataPacket::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* DataPacket::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.DataPacket.stream_id)
  return _impl_.stream_id_.Release();
}
inline void DataPacket::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.DataPacket.stream_id)
}

// bytes payload = 3;
inline void DataPacket::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& DataPacket::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.DataPacket.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPacket::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.DataPacket.payload)
}
inline std::string* DataPacket::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.DataPacket.payload)
  return _s;
}
inline const std::string& DataPacket::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void DataPacket::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* DataPacket::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* DataPacket::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.DataPacket.payload)
  return _impl_.payload_.Release();
}
inline void DataPacket::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.DataPacket.payload)
}

// string timestamp = 4;
inline void DataPacket::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& DataPacket::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.DataPacket.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPacket::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.DataPacket.timestamp)
}
inline std::string* DataPacket::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.DataPacket.timestamp)
  return _s;
}
inline const std::string& DataPacket::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void DataPacket::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* DataPacket::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* DataPacket::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.DataPacket.timestamp)
  return _impl_.timestamp_.Release();
}
inline void DataPacket::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.DataPacket.timestamp)
}

// map<string, string> metadata = 5;
inline int DataPacket::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int DataPacket::metadata_size() const {
  return _internal_metadata_size();
}
inline void DataPacket::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataPacket::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataPacket::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.DataPacket.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* DataPacket::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* DataPacket::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.DataPacket.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamStatus

// string stream_id = 1;
inline void StreamStatus::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamStatus::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamStatus::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.stream_id)
}
inline std::string* StreamStatus::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamStatus.stream_id)
  return _s;
}
inline const std::string& StreamStatus::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamStatus::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamStatus::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamStatus::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamStatus.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamStatus::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamStatus.stream_id)
}

// .seigr.common.OperationalStatus status = 2;
inline void StreamStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::seigr::common::OperationalStatus StreamStatus::status() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.status)
  return _internal_status();
}
inline void StreamStatus::set_status(::seigr::common::OperationalStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.status)
}
inline ::seigr::common::OperationalStatus StreamStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::common::OperationalStatus>(_impl_.status_);
}
inline void StreamStatus::_internal_set_status(::seigr::common::OperationalStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// int64 packets_sent = 3;
inline void StreamStatus::clear_packets_sent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_sent_ = ::int64_t{0};
}
inline ::int64_t StreamStatus::packets_sent() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.packets_sent)
  return _internal_packets_sent();
}
inline void StreamStatus::set_packets_sent(::int64_t value) {
  _internal_set_packets_sent(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.packets_sent)
}
inline ::int64_t StreamStatus::_internal_packets_sent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_sent_;
}
inline void StreamStatus::_internal_set_packets_sent(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_sent_ = value;
}

// int64 packets_received = 4;
inline void StreamStatus::clear_packets_received() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_received_ = ::int64_t{0};
}
inline ::int64_t StreamStatus::packets_received() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.packets_received)
  return _internal_packets_received();
}
inline void StreamStatus::set_packets_received(::int64_t value) {
  _internal_set_packets_received(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.packets_received)
}
inline ::int64_t StreamStatus::_internal_packets_received() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_received_;
}
inline void StreamStatus::_internal_set_packets_received(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_received_ = value;
}

// int64 packets_dropped = 5;
inline void StreamStatus::clear_packets_dropped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_dropped_ = ::int64_t{0};
}
inline ::int64_t StreamStatus::packets_dropped() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.packets_dropped)
  return _internal_packets_dropped();
}
inline void StreamStatus::set_packets_dropped(::int64_t value) {
  _internal_set_packets_dropped(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.packets_dropped)
}
inline ::int64_t StreamStatus::_internal_packets_dropped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_dropped_;
}
inline void StreamStatus::_internal_set_packets_dropped(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_dropped_ = value;
}

// string last_activity = 6;
inline void StreamStatus::clear_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_.ClearToEmpty();
}
inline const std::string& StreamStatus::last_activity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamStatus.last_activity)
  return _internal_last_activity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamStatus::set_last_activity(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamStatus.last_activity)
}
inline std::string* StreamStatus::mutable_last_activity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_activity();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamStatus.last_activity)
  return _s;
}
inline const std::string& StreamStatus::_internal_last_activity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_activity_.Get();
}
inline void StreamStatus::_internal_set_last_activity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_.Set(value, GetArena());
}
inline std::string* StreamStatus::_internal_mutable_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_activity_.Mutable( GetArena());
}
inline std::string* StreamStatus::release_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamStatus.last_activity)
  return _impl_.last_activity_.Release();
}
inline void StreamStatus::set_allocated_last_activity(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_activity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_activity_.IsDefault()) {
    _impl_.last_activity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamStatus.last_activity)
}

// map<string, string> status_metadata = 7;
inline int StreamStatus::_internal_status_metadata_size() const {
  return _internal_status_metadata().size();
}
inline int StreamStatus::status_metadata_size() const {
  return _internal_status_metadata_size();
}
inline void StreamStatus::clear_status_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamStatus::_internal_status_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamStatus::status_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamStatus.status_metadata)
  return _internal_status_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamStatus::_internal_mutable_status_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamStatus::mutable_status_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamStatus.status_metadata)
  return _internal_mutable_status_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamRecording

// string recording_id = 1;
inline void StreamRecording::clear_recording_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_id_.ClearToEmpty();
}
inline const std::string& StreamRecording::recording_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.recording_id)
  return _internal_recording_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamRecording::set_recording_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.recording_id)
}
inline std::string* StreamRecording::mutable_recording_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recording_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamRecording.recording_id)
  return _s;
}
inline const std::string& StreamRecording::_internal_recording_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recording_id_.Get();
}
inline void StreamRecording::_internal_set_recording_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_id_.Set(value, GetArena());
}
inline std::string* StreamRecording::_internal_mutable_recording_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recording_id_.Mutable( GetArena());
}
inline std::string* StreamRecording::release_recording_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamRecording.recording_id)
  return _impl_.recording_id_.Release();
}
inline void StreamRecording::set_allocated_recording_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recording_id_.IsDefault()) {
    _impl_.recording_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamRecording.recording_id)
}

// string stream_id = 2;
inline void StreamRecording::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamRecording::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamRecording::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.stream_id)
}
inline std::string* StreamRecording::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamRecording.stream_id)
  return _s;
}
inline const std::string& StreamRecording::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamRecording::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamRecording::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamRecording::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamRecording.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamRecording::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamRecording.stream_id)
}

// string start_timestamp = 3;
inline void StreamRecording::clear_start_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_.ClearToEmpty();
}
inline const std::string& StreamRecording::start_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.start_timestamp)
  return _internal_start_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamRecording::set_start_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.start_timestamp)
}
inline std::string* StreamRecording::mutable_start_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamRecording.start_timestamp)
  return _s;
}
inline const std::string& StreamRecording::_internal_start_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_timestamp_.Get();
}
inline void StreamRecording::_internal_set_start_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_.Set(value, GetArena());
}
inline std::string* StreamRecording::_internal_mutable_start_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.start_timestamp_.Mutable( GetArena());
}
inline std::string* StreamRecording::release_start_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamRecording.start_timestamp)
  return _impl_.start_timestamp_.Release();
}
inline void StreamRecording::set_allocated_start_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.start_timestamp_.IsDefault()) {
    _impl_.start_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamRecording.start_timestamp)
}

// string end_timestamp = 4;
inline void StreamRecording::clear_end_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_.ClearToEmpty();
}
inline const std::string& StreamRecording::end_timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.end_timestamp)
  return _internal_end_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamRecording::set_end_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.end_timestamp)
}
inline std::string* StreamRecording::mutable_end_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamRecording.end_timestamp)
  return _s;
}
inline const std::string& StreamRecording::_internal_end_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_timestamp_.Get();
}
inline void StreamRecording::_internal_set_end_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_.Set(value, GetArena());
}
inline std::string* StreamRecording::_internal_mutable_end_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.end_timestamp_.Mutable( GetArena());
}
inline std::string* StreamRecording::release_end_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamRecording.end_timestamp)
  return _impl_.end_timestamp_.Release();
}
inline void StreamRecording::set_allocated_end_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.end_timestamp_.IsDefault()) {
    _impl_.end_timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamRecording.end_timestamp)
}

// bool is_playback_enabled = 5;
inline void StreamRecording::clear_is_playback_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_playback_enabled_ = false;
}
inline bool StreamRecording::is_playback_enabled() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.is_playback_enabled)
  return _internal_is_playback_enabled();
}
inline void StreamRecording::set_is_playback_enabled(bool value) {
  _internal_set_is_playback_enabled(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.is_playback_enabled)
}
inline bool StreamRecording::_internal_is_playback_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_playback_enabled_;
}
inline void StreamRecording::_internal_set_is_playback_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_playback_enabled_ = value;
}

// int32 playback_speed = 6;
inline void StreamRecording::clear_playback_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_speed_ = 0;
}
inline ::int32_t StreamRecording::playback_speed() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamRecording.playback_speed)
  return _internal_playback_speed();
}
inline void StreamRecording::set_playback_speed(::int32_t value) {
  _internal_set_playback_speed(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamRecording.playback_speed)
}
inline ::int32_t StreamRecording::_internal_playback_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playback_speed_;
}
inline void StreamRecording::_internal_set_playback_speed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_speed_ = value;
}

// map<string, string> recording_metadata = 7;
inline int StreamRecording::_internal_recording_metadata_size() const {
  return _internal_recording_metadata().size();
}
inline int StreamRecording::recording_metadata_size() const {
  return _internal_recording_metadata_size();
}
inline void StreamRecording::clear_recording_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamRecording::_internal_recording_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recording_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamRecording::recording_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamRecording.recording_metadata)
  return _internal_recording_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamRecording::_internal_mutable_recording_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recording_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamRecording::mutable_recording_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamRecording.recording_metadata)
  return _internal_mutable_recording_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamControl

// string stream_id = 1;
inline void StreamControl::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamControl::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamControl::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.stream_id)
}
inline std::string* StreamControl::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamControl.stream_id)
  return _s;
}
inline const std::string& StreamControl::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamControl::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamControl::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamControl::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamControl.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamControl::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamControl.stream_id)
}

// bool pause = 2;
inline void StreamControl::clear_pause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pause_ = false;
}
inline bool StreamControl::pause() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.pause)
  return _internal_pause();
}
inline void StreamControl::set_pause(bool value) {
  _internal_set_pause(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.pause)
}
inline bool StreamControl::_internal_pause() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pause_;
}
inline void StreamControl::_internal_set_pause(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pause_ = value;
}

// bool resume = 3;
inline void StreamControl::clear_resume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resume_ = false;
}
inline bool StreamControl::resume() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.resume)
  return _internal_resume();
}
inline void StreamControl::set_resume(bool value) {
  _internal_set_resume(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.resume)
}
inline bool StreamControl::_internal_resume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resume_;
}
inline void StreamControl::_internal_set_resume(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resume_ = value;
}

// bool terminate = 4;
inline void StreamControl::clear_terminate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terminate_ = false;
}
inline bool StreamControl::terminate() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.terminate)
  return _internal_terminate();
}
inline void StreamControl::set_terminate(bool value) {
  _internal_set_terminate(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.terminate)
}
inline bool StreamControl::_internal_terminate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terminate_;
}
inline void StreamControl::_internal_set_terminate(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terminate_ = value;
}

// int32 update_buffer_size = 5;
inline void StreamControl::clear_update_buffer_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_buffer_size_ = 0;
}
inline ::int32_t StreamControl::update_buffer_size() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.update_buffer_size)
  return _internal_update_buffer_size();
}
inline void StreamControl::set_update_buffer_size(::int32_t value) {
  _internal_set_update_buffer_size(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.update_buffer_size)
}
inline ::int32_t StreamControl::_internal_update_buffer_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_buffer_size_;
}
inline void StreamControl::_internal_set_update_buffer_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_buffer_size_ = value;
}

// .seigr.streaming.StreamingQoSLevel update_qos_level = 6;
inline void StreamControl::clear_update_qos_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_qos_level_ = 0;
}
inline ::seigr::streaming::StreamingQoSLevel StreamControl::update_qos_level() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamControl.update_qos_level)
  return _internal_update_qos_level();
}
inline void StreamControl::set_update_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  _internal_set_update_qos_level(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamControl.update_qos_level)
}
inline ::seigr::streaming::StreamingQoSLevel StreamControl::_internal_update_qos_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::seigr::streaming::StreamingQoSLevel>(_impl_.update_qos_level_);
}
inline void StreamControl::_internal_set_update_qos_level(::seigr::streaming::StreamingQoSLevel value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_qos_level_ = value;
}

// map<string, string> control_metadata = 7;
inline int StreamControl::_internal_control_metadata_size() const {
  return _internal_control_metadata().size();
}
inline int StreamControl::control_metadata_size() const {
  return _internal_control_metadata_size();
}
inline void StreamControl::clear_control_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamControl::_internal_control_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.control_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamControl::control_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamControl.control_metadata)
  return _internal_control_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamControl::_internal_mutable_control_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.control_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamControl::mutable_control_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamControl.control_metadata)
  return _internal_mutable_control_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamEventLog

// string event_id = 1;
inline void StreamEventLog::clear_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.ClearToEmpty();
}
inline const std::string& StreamEventLog::event_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamEventLog.event_id)
  return _internal_event_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamEventLog::set_event_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamEventLog.event_id)
}
inline std::string* StreamEventLog::mutable_event_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamEventLog.event_id)
  return _s;
}
inline const std::string& StreamEventLog::_internal_event_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_id_.Get();
}
inline void StreamEventLog::_internal_set_event_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.Set(value, GetArena());
}
inline std::string* StreamEventLog::_internal_mutable_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_id_.Mutable( GetArena());
}
inline std::string* StreamEventLog::release_event_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamEventLog.event_id)
  return _impl_.event_id_.Release();
}
inline void StreamEventLog::set_allocated_event_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_id_.IsDefault()) {
    _impl_.event_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamEventLog.event_id)
}

// string stream_id = 2;
inline void StreamEventLog::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamEventLog::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamEventLog.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamEventLog::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamEventLog.stream_id)
}
inline std::string* StreamEventLog::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamEventLog.stream_id)
  return _s;
}
inline const std::string& StreamEventLog::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamEventLog::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamEventLog::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamEventLog::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamEventLog.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamEventLog::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamEventLog.stream_id)
}

// string action = 3;
inline void StreamEventLog::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& StreamEventLog::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamEventLog.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamEventLog::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamEventLog.action)
}
inline std::string* StreamEventLog::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamEventLog.action)
  return _s;
}
inline const std::string& StreamEventLog::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void StreamEventLog::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* StreamEventLog::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* StreamEventLog::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamEventLog.action)
  return _impl_.action_.Release();
}
inline void StreamEventLog::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamEventLog.action)
}

// string timestamp = 4;
inline void StreamEventLog::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& StreamEventLog::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamEventLog.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamEventLog::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamEventLog.timestamp)
}
inline std::string* StreamEventLog::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamEventLog.timestamp)
  return _s;
}
inline const std::string& StreamEventLog::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void StreamEventLog::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* StreamEventLog::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* StreamEventLog::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamEventLog.timestamp)
  return _impl_.timestamp_.Release();
}
inline void StreamEventLog::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamEventLog.timestamp)
}

// map<string, string> event_metadata = 5;
inline int StreamEventLog::_internal_event_metadata_size() const {
  return _internal_event_metadata().size();
}
inline int StreamEventLog::event_metadata_size() const {
  return _internal_event_metadata_size();
}
inline void StreamEventLog::clear_event_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamEventLog::_internal_event_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamEventLog::event_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamEventLog.event_metadata)
  return _internal_event_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamEventLog::_internal_mutable_event_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.event_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamEventLog::mutable_event_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamEventLog.event_metadata)
  return _internal_mutable_event_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StreamMetricsSummary

// string stream_id = 1;
inline void StreamMetricsSummary::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& StreamMetricsSummary::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamMetricsSummary::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.stream_id)
}
inline std::string* StreamMetricsSummary::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamMetricsSummary.stream_id)
  return _s;
}
inline const std::string& StreamMetricsSummary::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void StreamMetricsSummary::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* StreamMetricsSummary::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* StreamMetricsSummary::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamMetricsSummary.stream_id)
  return _impl_.stream_id_.Release();
}
inline void StreamMetricsSummary::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamMetricsSummary.stream_id)
}

// int64 total_packets_sent = 2;
inline void StreamMetricsSummary::clear_total_packets_sent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_sent_ = ::int64_t{0};
}
inline ::int64_t StreamMetricsSummary::total_packets_sent() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.total_packets_sent)
  return _internal_total_packets_sent();
}
inline void StreamMetricsSummary::set_total_packets_sent(::int64_t value) {
  _internal_set_total_packets_sent(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.total_packets_sent)
}
inline ::int64_t StreamMetricsSummary::_internal_total_packets_sent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_packets_sent_;
}
inline void StreamMetricsSummary::_internal_set_total_packets_sent(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_sent_ = value;
}

// int64 total_packets_received = 3;
inline void StreamMetricsSummary::clear_total_packets_received() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_received_ = ::int64_t{0};
}
inline ::int64_t StreamMetricsSummary::total_packets_received() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.total_packets_received)
  return _internal_total_packets_received();
}
inline void StreamMetricsSummary::set_total_packets_received(::int64_t value) {
  _internal_set_total_packets_received(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.total_packets_received)
}
inline ::int64_t StreamMetricsSummary::_internal_total_packets_received() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_packets_received_;
}
inline void StreamMetricsSummary::_internal_set_total_packets_received(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_received_ = value;
}

// int64 total_packets_dropped = 4;
inline void StreamMetricsSummary::clear_total_packets_dropped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_dropped_ = ::int64_t{0};
}
inline ::int64_t StreamMetricsSummary::total_packets_dropped() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.total_packets_dropped)
  return _internal_total_packets_dropped();
}
inline void StreamMetricsSummary::set_total_packets_dropped(::int64_t value) {
  _internal_set_total_packets_dropped(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.total_packets_dropped)
}
inline ::int64_t StreamMetricsSummary::_internal_total_packets_dropped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_packets_dropped_;
}
inline void StreamMetricsSummary::_internal_set_total_packets_dropped(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_packets_dropped_ = value;
}

// double average_latency_ms = 5;
inline void StreamMetricsSummary::clear_average_latency_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_latency_ms_ = 0;
}
inline double StreamMetricsSummary::average_latency_ms() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.average_latency_ms)
  return _internal_average_latency_ms();
}
inline void StreamMetricsSummary::set_average_latency_ms(double value) {
  _internal_set_average_latency_ms(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.average_latency_ms)
}
inline double StreamMetricsSummary::_internal_average_latency_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_latency_ms_;
}
inline void StreamMetricsSummary::_internal_set_average_latency_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_latency_ms_ = value;
}

// double packet_loss_rate = 6;
inline void StreamMetricsSummary::clear_packet_loss_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_rate_ = 0;
}
inline double StreamMetricsSummary::packet_loss_rate() const {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.packet_loss_rate)
  return _internal_packet_loss_rate();
}
inline void StreamMetricsSummary::set_packet_loss_rate(double value) {
  _internal_set_packet_loss_rate(value);
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.packet_loss_rate)
}
inline double StreamMetricsSummary::_internal_packet_loss_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_loss_rate_;
}
inline void StreamMetricsSummary::_internal_set_packet_loss_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_rate_ = value;
}

// string reporting_period = 7;
inline void StreamMetricsSummary::clear_reporting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_period_.ClearToEmpty();
}
inline const std::string& StreamMetricsSummary::reporting_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:seigr.streaming.StreamMetricsSummary.reporting_period)
  return _internal_reporting_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamMetricsSummary::set_reporting_period(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:seigr.streaming.StreamMetricsSummary.reporting_period)
}
inline std::string* StreamMetricsSummary::mutable_reporting_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reporting_period();
  // @@protoc_insertion_point(field_mutable:seigr.streaming.StreamMetricsSummary.reporting_period)
  return _s;
}
inline const std::string& StreamMetricsSummary::_internal_reporting_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reporting_period_.Get();
}
inline void StreamMetricsSummary::_internal_set_reporting_period(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_period_.Set(value, GetArena());
}
inline std::string* StreamMetricsSummary::_internal_mutable_reporting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reporting_period_.Mutable( GetArena());
}
inline std::string* StreamMetricsSummary::release_reporting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:seigr.streaming.StreamMetricsSummary.reporting_period)
  return _impl_.reporting_period_.Release();
}
inline void StreamMetricsSummary::set_allocated_reporting_period(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_period_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reporting_period_.IsDefault()) {
    _impl_.reporting_period_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:seigr.streaming.StreamMetricsSummary.reporting_period)
}

// map<string, string> metrics_metadata = 8;
inline int StreamMetricsSummary::_internal_metrics_metadata_size() const {
  return _internal_metrics_metadata().size();
}
inline int StreamMetricsSummary::metrics_metadata_size() const {
  return _internal_metrics_metadata_size();
}
inline void StreamMetricsSummary::clear_metrics_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metrics_metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamMetricsSummary::_internal_metrics_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metrics_metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StreamMetricsSummary::metrics_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:seigr.streaming.StreamMetricsSummary.metrics_metadata)
  return _internal_metrics_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamMetricsSummary::_internal_mutable_metrics_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metrics_metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StreamMetricsSummary::mutable_metrics_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:seigr.streaming.StreamMetricsSummary.metrics_metadata)
  return _internal_mutable_metrics_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace streaming
}  // namespace seigr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::seigr::streaming::StreamType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::streaming::StreamType>() {
  return ::seigr::streaming::StreamType_descriptor();
}
template <>
struct is_proto_enum<::seigr::streaming::StreamingProtocol> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::streaming::StreamingProtocol>() {
  return ::seigr::streaming::StreamingProtocol_descriptor();
}
template <>
struct is_proto_enum<::seigr::streaming::StreamingQoSLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::seigr::streaming::StreamingQoSLevel>() {
  return ::seigr::streaming::StreamingQoSLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // streaming_2eproto_2epb_2eh
