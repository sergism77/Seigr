syntax = "proto3";

package seigr.hashing;

import "google/protobuf/timestamp.proto";
import "common.proto"; // For Feedback

/**
 * Hashing Protocol
 *
 * Defines hashing mechanisms, hierarchical structures, and verification strategies
 * within the Seigr ecosystem, ensuring data integrity, traceability, and adaptability.
 */

// ===========================
// ENUMS
// ===========================

/**
 * Enum representing available hash algorithms used for data integrity and security.
 */
enum HashAlgorithm {
    HASH_ALGORITHM_UNDEFINED = 0;  // Default, undefined hash algorithm.
    HASH_SHA256 = 1;               // SHA-256 hashing algorithm.
    HASH_SHA512 = 2;               // SHA-512 hashing algorithm.
    HASH_BLAKE2B = 3;              // BLAKE2B hashing algorithm.
    HASH_SEIGR_SENARY = 4;         // Custom Senary hashing algorithm.
    HASH_SHA3_256 = 5;             // SHA3-256 hashing algorithm.
    HASH_ARGON2 = 6;               // Argon2 memory-hard hashing algorithm.
}


/**
 * Enum representing the verification status of a hash or integrity check.
 */
enum VerificationStatus {
    VERIFICATION_STATUS_UNDEFINED = 0;  // Default undefined status.
    VERIFIED = 1;                        // Successfully verified.
    UNVERIFIED = 2;                      // Verification failed.
    HASH_COMPROMISED = 3;                // Hash integrity is compromised.
    VERIFICATION_PENDING = 4;            // Verification is still pending.
    PARTIALLY_VERIFIED = 5;              // Partial verification succeeded (e.g., hierarchical checks).
    REQUIRES_REVALIDATION = 6;           // Requires follow-up verification.
}

// ===========================
// MESSAGES
// ===========================

/**
 * Message representing individual hash data, including metadata for traceability and verification.
 */
message HashData {
    string hash_id = 1;                         // Unique identifier for this hash entry.
    HashAlgorithm algorithm = 2;                // Algorithm used for hashing.
    bytes data_snapshot = 3;                    // Snapshot of raw data associated with the hash.
    string salt = 4;                            // Salt used during hashing, if applicable.
    string hash_value = 5;                      // Final hash value represented as a string.
    int32 algorithm_version = 6;                // Version of the hashing algorithm used.
    bool senary_encoded = 7;                    // Indicates if Senary encoding was applied.
    string creation_timestamp = 8;              // ISO 8601 timestamp of hash creation.
    string trace_code = 9;                      // Unique trace code for origin tracking.
    VerificationStatus verification_status = 10; // Current verification status.
    string previous_hash = 11;                  // Reference to the previous hash in the chain.
    repeated string linked_hashes = 12;         // List of related or dependent hashes.
    map<string, string> adaptive_parameters = 13; // Parameters for adaptive hashing configurations.
    int32 senary_version = 14;                  // Version of Seigr's Senary encoding, if applicable.
    map<string, string> metadata = 15;          // Additional metadata for extensibility.
    string hash_expiration = 16;                // Expiration timestamp, if applicable.
    float entropy_level = 17;                   // Measure of randomness in the hashing process.
    string hash_adaptation = 18;                // Details on hash adaptation, if applied.
    repeated string entropy_sources = 19;       // Sources contributing to entropy (e.g., sensor data).
    string origin_data_reference = 20;          // Reference to the original data source.
}


/**
 * Message representing hierarchical hash trees for multi-layered data integrity checks.
 */
message HashTree {
    string tree_id = 1;                         // Unique identifier for the hash tree.
    repeated HashData root_hashes = 2;          // Root-level hashes forming the tree's base.
    map<int32, HashData> layers = 3;            // Mapping of hierarchical layers and their hashes.
    int32 depth = 4;                            // Total depth of the hash tree.
    string creation_timestamp = 5;              // ISO 8601 timestamp for tree creation.
    VerificationStatus integrity_status = 6;    // Current integrity status of the tree.
    map<string, string> metadata = 7;           // Contextual metadata for the tree.
    string last_verified_timestamp = 8;         // Timestamp of the last verification process.
    float integrity_threshold = 9;              // Confidence threshold for hierarchical integrity checks.
    repeated string dependency_hashes = 10;     // Cross-references to other hash dependencies.
    float root_confidence_level = 11;           // Confidence score for the root hashes.
    map<int32, float> layer_confidence_levels = 12; // Confidence scores per layer in the tree.
    repeated string external_references = 13;   // External systems referencing this hash tree.

    // Mapping of hash IDs in each layer.
    message LayerHash {
        int32 layer = 1;                // Layer number.
        repeated string hash_ids = 2;   // List of hash IDs in this layer.
    }
    repeated LayerHash layer_hashes = 14; // Mapping of hash IDs for each layer.
}

/**
 * Message for managing adaptive hashing configurations and policies.
 */
message AdaptiveHashPolicy {
    string policy_id = 1;                   // Unique identifier for the policy.
    string description = 2;                // Description of the policy.
    string creation_timestamp = 3;         // Timestamp of policy creation.
    repeated HashAlgorithm algorithms = 4; // Algorithms applicable under the policy.
    map<string, string> policy_metadata = 5; // Metadata for extensibility.
    bool enforce_adaptive_constraints = 6; // Enforce dynamic constraints for hashing.
}

/**
 * Message capturing the audit log of verification attempts and their outcomes.
 */
message VerificationLog {
    string verification_id = 1;                 // Unique identifier for this verification log entry.
    string target_hash_id = 2;                  // ID of the hash being verified.
    VerificationStatus status = 3;              // Verification result status.
    string verifier_id = 4;                     // User or system performing the verification.
    string verification_timestamp = 5;          // ISO 8601 timestamp of verification.
    string error_message = 6;                   // Error details if verification failed.
    int32 verified_depth = 7;                   // Depth reached during hierarchical verification.
    map<string, string> verification_metadata = 8; // Metadata detailing verification context.
    string algorithm_used = 9;                  // Algorithm employed during verification.
    float verification_confidence = 10;         // Confidence score of the verification result.
    repeated string audit_trail = 11;           // Step-by-step trace of the verification process.
    string verification_notes = 12;             // Additional manual annotations.
    int32 retry_attempts = 13;                  // Number of retry attempts for failed verifications.
    string verification_duration = 14;          // Duration of the verification process.
    float entropy_measured = 15;                // Measured entropy during verification.
    string network_details = 16;                // Network details captured during verification.
}

/**
 * Feedback specific to hashing operations within the Seigr ecosystem.
 */
message HashFeedback {
    string feedback_id = 1;  // Unique identifier for feedback.
    string hash_id = 2;      // Target hash ID.
    seigr.common.Feedback feedback_details = 3; // Feedback details from machine_learning.proto.
    string context = 4;      // Context of the feedback (e.g., "performance", "integrity").
    google.protobuf.Timestamp timestamp = 5; // Timestamp of feedback creation.
}
